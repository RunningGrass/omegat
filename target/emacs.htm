<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><!-- saved from url=(0071)https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Holidays -->

<html><!-- This is the GNU Emacs Manual,
updated for Emacs version 27.1.

Copyright (C) 1985-1987, 1993-2020 Free Software Foundation,
Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "The GNU Manifesto," "Distribution" and
"GNU GENERAL PUBLIC LICENSE," with the Front-Cover Texts being "A GNU
Manual," and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled "GNU Free Documentation
License."

(a) The FSF's Back-Cover Text is: "You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom." --><!-- Created by GNU Texinfo 6.5, http://www.gnu.org/software/texinfo/ --><head><meta http-equiv="content-type" content="text/html; charset=UTF-8">

<link rev="made" href="mailto:bug-gnu-emacs@gnu.org">
<link rel="icon" type="image/png" href="https://www.gnu.org/graphics/gnu-head-mini.png">
<meta name="ICBM" content="42.256233,-71.006581">
<meta name="DC.title" content="gnu.org">

<style type="text/css">
@import url('/software/emacs/manual.css');
</style>
</head>

<body lang="zh-CN">
<div id="content" class="inner">

<h1 class="top">Emacs编辑器</h1>

<p>Emacs是可扩展的、可自定义的、自文档的实时显示编辑器。本手册描述了如何使用Emacs进行编辑以及定制它的一些方法；它对应于GNU Emacs版本27.1。
</p>
GNU Emacs的主页位于<a href="https://www.gnu.org/software/emacs/">https://www.gnu.org/software/emacs/</a>.<br>若要以其他格式查看本手册，请单击<a href="https://www.gnu.org/software/emacs/manual/emacs.html">此处</a><br>。您还可以从<a href="https://shop.fsf.org/product/emacs-manual/">FSF商店</a>购买打印版。


<p>有关扩展Emacs的信息，请参阅<cite>Emacs Lisp参考手册</cite>中的<a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Top">Emacs Lisp</a>。
</p>
<p>这是<cite>GNU Emacs手册</cite>，针对Emacs版本27.1进行了更新。
</p>
<p>版权所有©1985-1987,1993-2020自由软件基金会。
</p>
<blockquote>
<p>根据GNU自由文档许可证1.3版或自由软件基金会发布的任何更新版本的条款，允许复制、分发或修改本文档；不变部分为“GNU声明”、“分发”和“GNU通用公共许可证”，封面文本为“GNU手册”，封底文本如下(A)所示。该许可证的副本包含在标题为“GNU自由文档许可证”的部分中。
</p>
<p>(a) FSF的封底正文是：“您有复制和修改本GNU手册的自由。从FSF购买拷贝支持它开发GNU和促进软件自由。“
</p></blockquote>


<table class="menu" style="float:left" width="100%">
<tbody><tr><td bgcolor="white"><a href="#Distrib" accesskey="1">发行版</a></td>
<td>如何获得最新的Emacs发行版。
</td></tr>
<tr><td bgcolor="white"><a href="#Intro" accesskey="2">简介</a></td>
<td>Emacs概念简介。
</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">
重要的一般概念
</th></tr>
<tr><td bgcolor="white"><a href="#Screen" accesskey="3">屏幕</a></td>
<td>如何解读你在屏幕上看到的东西。
</td></tr>
<tr><td bgcolor="white"><a href="#User-Input" accesskey="4">用户输入</a></td>
<td>各种输入事件(字符、按钮、功能键)。
</td></tr>
<tr><td bgcolor="white"><a href="#Keys" accesskey="5">快捷键</a></td>
<td>键序列：您键入的内容以请求一个编辑操作。
</td></tr>
<tr><td bgcolor="white"><a href="#Commands" accesskey="6">命令</a></td>
<td>命名函数由键序列运行以进行编辑。
</td></tr>
<tr><td bgcolor="white"><a href="#Entering-Emacs" accesskey="7">进入Emacs</a></td>
<td>从shell启动Emacs。
</td></tr>
<tr><td bgcolor="white"><a href="#Exiting" accesskey="8">退出</a></td>
<td>终止或杀死Emacs。
</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">
基本编辑命令
</th></tr>
<tr><td bgcolor="white"><a href="#Basic" accesskey="9">基础</a></td>
<td>最基本的编辑命令。
</td></tr>
<tr><td bgcolor="white"><a href="#Minibuffer">迷你缓冲区</a></td>
<td>输入提示的参数。
</td></tr>
<tr><td bgcolor="white"><a href="#M_002dx">M-x</a></td>
<td>按名称调用命令。
</td></tr>
<tr><td bgcolor="white"><a href="#Help">帮助</a></td>
<td>用于向Emacs询问关于命令的信息。
</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">
重要的文本更改命令
</th></tr>
<tr><td bgcolor="white"><a href="#Mark">标记</a></td>
<td>标记：如何界定文本区域。
</td></tr>
<tr><td bgcolor="white"><a href="#Killing">Killing</a></td>
<td>Killing (cutting) and yanking (copying) text.

</td></tr>
<tr><td bgcolor="white"><a href="#Registers">Registers</a></td>
<td>Saving a text string or a location in the buffer.

</td></tr>
<tr><td bgcolor="white"><a href="#Display">Display</a></td>
<td>Controlling what text is displayed.

</td></tr>
<tr><td bgcolor="white"><a href="#Search">Search</a></td>
<td>Finding or replacing occurrences of a string.

</td></tr>
<tr><td bgcolor="white"><a href="#Fixit">Fixit</a></td>
<td>Commands especially useful for fixing typos.

</td></tr>
<tr><td bgcolor="white"><a href="#Keyboard-Macros">Keyboard Macros</a></td>
<td>Recording a sequence of keystrokes to be replayed.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Major Structures of Emacs

</th></tr>
<tr><td bgcolor="white"><a href="#Files">文件</a></td>
<td>All about handling files.

</td></tr>
<tr><td bgcolor="white"><a href="#Buffers">Buffers</a></td>
<td>Multiple buffers; editing several files at once.

</td></tr>
<tr><td bgcolor="white"><a href="#Windows">Windows</a></td>
<td>Viewing multiple pieces of text in one frame.

</td></tr>
<tr><td bgcolor="white"><a href="#Frames">Frames</a></td>
<td>Using multiple windows on your display.

</td></tr>
<tr><td bgcolor="white"><a href="#International">International</a></td>
<td>Using non-<acronym>ASCII</acronym> character sets.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Advanced Features

</th></tr>
<tr><td bgcolor="white"><a href="#Modes">Modes</a></td>
<td>Major and minor modes alter Emacs’s basic behavior.

</td></tr>
<tr><td bgcolor="white"><a href="#Indentation">Indentation</a></td>
<td>Editing the white space at the beginnings of lines.

</td></tr>
<tr><td bgcolor="white"><a href="#Text">Text</a></td>
<td>Commands and modes for editing human languages.

</td></tr>
<tr><td bgcolor="white"><a href="#Programs">Programs</a></td>
<td>Commands and modes for editing programs.

</td></tr>
<tr><td bgcolor="white"><a href="#Building">Building</a></td>
<td>Compiling, running and debugging programs.

</td></tr>
<tr><td bgcolor="white"><a href="#Maintaining">Maintaining</a></td>
<td>Features for maintaining large programs.

</td></tr>
<tr><td bgcolor="white"><a href="#Abbrevs">Abbrevs</a></td>
<td>Defining text abbreviations to reduce typing.

</td></tr>
<tr><td bgcolor="white"><a href="#Dired">Dired</a></td>
<td>Directory and file manager.

</td></tr>
<tr><td bgcolor="white"><a href="#Calendar_002fDiary">Calendar/Diary</a></td>
<td>Calendar and diary facilities.

</td></tr>
<tr><td bgcolor="white"><a href="#Sending-Mail">Sending Mail</a></td>
<td>Sending mail in Emacs.

</td></tr>
<tr><td bgcolor="white"><a href="#Rmail">Rmail</a></td>
<td>Reading mail in Emacs.

</td></tr>
<tr><td bgcolor="white"><a href="#Gnus">Gnus</a></td>
<td>A flexible mail and news reader.

</td></tr>
<tr><td bgcolor="white"><a href="#Host-Security">Host Security</a></td>
<td>Security issues on a single computer.

</td></tr>
<tr><td bgcolor="white"><a href="#Network-Security">Network Security</a></td>
<td>Managing the network security.

</td></tr>
<tr><td bgcolor="white"><a href="#Document-View">Document View</a></td>
<td>Viewing PDF, PS and DVI files.

</td></tr>
<tr><td bgcolor="white"><a href="#Shell">Shell</a></td>
<td>Executing shell commands from Emacs.

</td></tr>
<tr><td bgcolor="white"><a href="#Emacs-Server">Emacs Server</a></td>
<td>Using Emacs as an editing server.

</td></tr>
<tr><td bgcolor="white"><a href="#Printing">Printing</a></td>
<td>Printing hardcopies of buffers or regions.

</td></tr>
<tr><td bgcolor="white"><a href="#Sorting">Sorting</a></td>
<td>Sorting lines, paragraphs or pages within Emacs.

</td></tr>
<tr><td bgcolor="white"><a href="#Picture-Mode">Picture Mode</a></td>
<td>Editing pictures made up of text characters.

</td></tr>
<tr><td bgcolor="white"><a href="#Editing-Binary-Files">Editing Binary Files</a></td>
<td>Editing binary files with Hexl mode.

</td></tr>
<tr><td bgcolor="white"><a href="#Saving-Emacs-Sessions">Saving Emacs Sessions</a></td>
<td>Saving Emacs state from one session to the next.

</td></tr>
<tr><td bgcolor="white"><a href="#Recursive-Edit">Recursive Edit</a></td>
<td>Performing edits while within another command.

</td></tr>
<tr><td bgcolor="white"><a href="#Hyperlinking">Hyperlinking</a></td>
<td>Following links in buffers.

</td></tr>
<tr><td bgcolor="white"><a href="#Amusements">Amusements</a></td>
<td>Various games and hacks.

</td></tr>
<tr><td bgcolor="white"><a href="#Packages">Packages</a></td>
<td>Installing additional features.

</td></tr>
<tr><td bgcolor="white"><a href="#Customization">Customization</a></td>
<td>Modifying the behavior of Emacs.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Recovery from Problems

</th></tr>
<tr><td bgcolor="white"><a href="#Quitting">Quitting</a></td>
<td>Quitting and aborting.

</td></tr>
<tr><td bgcolor="white"><a href="#Lossage">Lossage</a></td>
<td>What to do if Emacs is hung or malfunctioning.

</td></tr>
<tr><td bgcolor="white"><a href="#Bugs">Bugs</a></td>
<td>How and when to report a bug.

</td></tr>
<tr><td bgcolor="white"><a href="#Contributing">Contributing</a></td>
<td>How to contribute improvements to Emacs.

</td></tr>
<tr><td bgcolor="white"><a href="#Service">Service</a></td>
<td>How to get help for your own Emacs needs.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Appendices

</th></tr>
<tr><td bgcolor="white"><a href="#Copying">Copying</a></td>
<td>The GNU General Public License gives you permission
                          to redistribute GNU Emacs on certain terms;
                          it also explains that there is no warranty.

</td></tr>
<tr><td bgcolor="white"><a href="#GNU-Free-Documentation-License">GNU Free Documentation License</a></td>
<td>此文档的许可证。
</td></tr>
<tr><td bgcolor="white"><a href="#Emacs-Invocation">Emacs Invocation</a></td>
<td>Hairy startup options.

</td></tr>
<tr><td bgcolor="white"><a href="#X-Resources">X Resources</a></td>
<td>X resources for customizing Emacs.

</td></tr>
<tr><td bgcolor="white"><a href="#Antinews">Antinews</a></td>
<td>Information about Emacs version 26.

</td></tr>
<tr><td bgcolor="white"><a href="#Mac-OS-_002f-GNUstep">Mac OS / GNUstep</a></td>
<td>Using Emacs under macOS and GNUstep.

</td></tr>
<tr><td bgcolor="white"><a href="#Microsoft-Windows">Microsoft Windows</a></td>
<td>Using Emacs on Microsoft Windows and MS-DOS.

</td></tr>
<tr><td bgcolor="white"><a href="#Manifesto">Manifesto</a></td>
<td>What’s GNU?  Gnu’s Not Unix!

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">
</th></tr>
<tr><td bgcolor="white"><a href="#Glossary">Glossary</a></td>
<td>Terms used in this manual.

</td></tr>
<tr><td bgcolor="white"><a href="#Acknowledgments">Acknowledgments</a></td>
<td>Major contributors to GNU Emacs.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Indexes (each index contains a large menu)

</th></tr>
<tr><td bgcolor="white"><a href="#Key-Index">Key Index</a></td>
<td>An item for each standard Emacs key sequence.

</td></tr>
<tr><td bgcolor="white"><a href="#Option-Index">Option Index</a></td>
<td>An item for every command-line option.

</td></tr>
<tr><td bgcolor="white"><a href="#Command-Index">Command Index</a></td>
<td>An item for each standard command name.

</td></tr>
<tr><td bgcolor="white"><a href="#Variable-Index">Variable Index</a></td>
<td>An item for each variable documented in this manual.

</td></tr>
<tr><td bgcolor="white"><a href="#Concept-Index">Concept Index</a></td>
<td>An item for concepts and other general subjects.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

</th></tr>
</tbody></table>

<h2>Detailed Node Listing</h2>

<p>

Here are some other nodes which are really subnodes of the ones
already listed, mentioned here so you can get to them in one step:

</p>

<table class="menu" style="float:left" width="100%">
<tbody><tr><th colspan="2" align="left" style="text-align:left">

The Organization of the Screen

</th></tr>
<tr><td bgcolor="white"><a href="#Point">游标</a></td>
<td>文本中操作编辑命令的位置。
</td></tr>
<tr><td bgcolor="white"><a href="#Echo-Area">回显区</a></td>
<td>短消息显示在屏幕底部。
</td></tr>
<tr><td bgcolor="white"><a href="#Mode-Line">状态栏Mode Line</a></td>
<td>状态栏的解释。
</td></tr>
<tr><td bgcolor="white"><a href="#Menu-Bar">菜单栏</a></td>
<td>如何使用菜单栏。
</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">
基本编辑命令

</th></tr>
<tr><td bgcolor="white"><a href="#Inserting-Text">插入文本</a></td>
<td>只需键入文本即可插入文本。
</td></tr>
<tr><td bgcolor="white"><a href="#Moving-Point">移动游标</a></td>
<td>将光标移动到要更改某些内容的位置。
</td></tr>
<tr><td bgcolor="white"><a href="#Erasing">擦除</a></td>
<td>删除文本。
</td></tr>
<tr><td bgcolor="white"><a href="#Basic-Undo">撤消基础</a></td>
<td>撤消文本中最近的更改。
</td></tr>
<tr><td bgcolor="white"><a href="#Basic-Files">文件基础</a></td>
<td>访问、创建和保存文件。
</td></tr>
<tr><td bgcolor="white"><a href="#Basic-Help">帮助基础</a></td>
<td>询问一个字符是做什么的。
</td></tr>
<tr><td bgcolor="white"><a href="#Blank-Lines">空行</a></td>
<td>选择和删除空行。
</td></tr>
<tr><td bgcolor="white"><a href="#Continuation-Lines">连续行</a></td>
<td>Emacs如何显示屏幕无法显示的行。
</td></tr>
<tr><td bgcolor="white"><a href="#Position-Info">位置信息</a></td>
<td>游标处于哪一行、那一列？
</td></tr>
<tr><td bgcolor="white"><a href="#Arguments">参数</a></td>
<td>用于将命令重复N次的数字参数。
</td></tr>
<tr><td bgcolor="white"><a href="#Repeating">重复</a></td>
<td>快速重复前面的命令。
</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">
迷你缓冲区

</th></tr>
<tr><td bgcolor="white"><a href="#Basic-Minibuffer">迷你缓冲区基础</a></td>
<td>迷你缓冲区的基本用法。
</td></tr>
<tr><td bgcolor="white"><a href="#Minibuffer-File">迷你缓冲区文件</a></td>
<td>使用迷你缓冲区输入文件名。
</td></tr>
<tr><td bgcolor="white"><a href="#Minibuffer-Edit">迷你缓冲区编辑</a></td>
<td>如何在迷你缓冲区中编辑。
</td></tr>
<tr><td bgcolor="white"><a href="#Completion">补全功能</a></td>
<td>一种用于迷你缓冲区输入的缩写工具。
</td></tr>
<tr><td bgcolor="white"><a href="#Minibuffer-History">迷你缓冲区历史记录</a></td>
<td>重用最近的迷你缓冲区参数。
</td></tr>
<tr><td bgcolor="white"><a href="#Repetition">重复</a></td>
<td>重新执行使用迷你缓冲区的命令。
</td></tr>
<tr><td bgcolor="white"><a href="#Passwords">密码</a></td>
<td>在回显区输入密码。
</td></tr>
<tr><td bgcolor="white"><a href="#Yes-or-No-Prompts">确认提示</a></td>
<td>在回显区回答是或否。
</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">
补全功能

</th></tr>
<tr><td bgcolor="white"><a href="#Completion-Example">补全示例</a></td>
<td>使用补全的示例。
</td></tr>
<tr><td bgcolor="white"><a href="#Completion-Commands">补全命令</a></td>
<td>补全命令的列表。
</td></tr>
<tr><td bgcolor="white"><a href="#Completion-Exit">补全退出</a></td>
<td>补全并且提交迷你缓冲区文本。
</td></tr>
<tr><td bgcolor="white"><a href="#Completion-Styles">补全风格</a></td>
<td>选择补全匹配的方式。
</td></tr>
<tr><td bgcolor="white"><a href="#Completion-Options">补全选项</a></td>
<td>补全的选项。
</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">
帮助

</th></tr>
<tr><td bgcolor="white"><a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Help-Summary">帮助概述</a></td>
<td>所有帮助命令的简短列表。
</td></tr>
<tr><td bgcolor="white"><a href="#Key-Help">帮助快捷键</a></td>
<td>询问指定快捷键在Emacs中的作用。
</td></tr>
<tr><td bgcolor="white"><a href="#Name-Help">命令名称帮助</a></td>
<td>询问命令、变量或函数名的作用。
</td></tr>
<tr><td bgcolor="white"><a href="#Apropos">主题搜索</a></td>
<td>询问与给定主题有关的内容。
</td></tr>
<tr><td bgcolor="white"><a href="#Help-Mode">帮助模式</a></td>
<td>帮助模式和帮助缓冲区的特殊功能。
</td></tr>
<tr><td bgcolor="white"><a href="#Package-Keywords">包关键字</a></td>
<td>通过关键字(主题)查找Lisp库。
</td></tr>
<tr><td bgcolor="white"><a href="#Language-Help">语言帮助</a></td>
<td>与国际语言支持相关的帮助。
</td></tr>
<tr><td bgcolor="white"><a href="#Misc-Help">其他帮助</a></td>
<td>其他帮助命令。
</td></tr>
<tr><td bgcolor="white"><a href="#Help-Files">帮助文件</a></td>
<td>用于显示辅助帮助文件的命令。
</td></tr>
<tr><td bgcolor="white"><a href="#Help-Echo">帮助信息回显</a></td>
<td>有关交互文本和工具提示的帮助。
</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

The Mark and the Region



</th></tr>
<tr><td bgcolor="white"><a href="#Setting-Mark">Setting Mark</a></td>
<td>Commands to set the mark.

</td></tr>
<tr><td bgcolor="white"><a href="#Marking-Objects">Marking Objects</a></td>
<td>Commands to put region around textual units.

</td></tr>
<tr><td bgcolor="white"><a href="#Using-Region">Using Region</a></td>
<td>Summary of ways to operate on contents of the region.

</td></tr>
<tr><td bgcolor="white"><a href="#Mark-Ring">Mark Ring</a></td>
<td>Previous mark positions saved so you can go back there.

</td></tr>
<tr><td bgcolor="white"><a href="#Global-Mark-Ring">Global Mark Ring</a></td>
<td>Previous mark positions in various buffers.

</td></tr>
<tr><td bgcolor="white"><a href="#Shift-Selection">Shift Selection</a></td>
<td>Using shifted cursor motion keys.

</td></tr>
<tr><td bgcolor="white"><a href="#Disabled-Transient-Mark">Disabled Transient Mark</a></td>
<td>Leaving regions unhighlighted by default.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Killing and Moving Text



</th></tr>
<tr><td bgcolor="white"><a href="#Deletion-and-Killing">Deletion and Killing</a></td>
<td>Commands that remove text.

</td></tr>
<tr><td bgcolor="white"><a href="#Yanking">Yanking</a></td>
<td>Commands that insert text.

</td></tr>
<tr><td bgcolor="white"><a href="#Cut-and-Paste">Cut and Paste</a></td>
<td>Clipboard and selections on graphical displays.

</td></tr>
<tr><td bgcolor="white"><a href="#Accumulating-Text">Accumulating Text</a></td>
<td>Other methods to add text to the buffer.

</td></tr>
<tr><td bgcolor="white"><a href="#Rectangles">Rectangles</a></td>
<td>Operating on text in rectangular areas.

</td></tr>
<tr><td bgcolor="white"><a href="#CUA-Bindings">CUA Bindings</a></td>
<td>Using <kbd>C-x</kbd>/<kbd>C-c</kbd>/<kbd>C-v</kbd> to kill and yank.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Deletion and Killing



</th></tr>
<tr><td bgcolor="white"><a href="#Deletion">Deletion</a></td>
<td>Commands for deleting small amounts of text and
                          blank areas.

</td></tr>
<tr><td bgcolor="white"><a href="#Killing-by-Lines">Killing by Lines</a></td>
<td>How to kill entire lines of text at one time.

</td></tr>
<tr><td bgcolor="white"><a href="#Other-Kill-Commands">Other Kill Commands</a></td>
<td>Commands to kill large regions of text and
                          syntactic units such as words and sentences.

</td></tr>
<tr><td bgcolor="white"><a href="#Kill-Options">Kill Options</a></td>
<td>Options that affect killing.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Yanking



</th></tr>
<tr><td bgcolor="white"><a href="#Kill-Ring">Kill Ring</a></td>
<td>Where killed text is stored.

</td></tr>
<tr><td bgcolor="white"><a href="#Earlier-Kills">Earlier Kills</a></td>
<td>Yanking something killed some time ago.

</td></tr>
<tr><td bgcolor="white"><a href="#Appending-Kills">Appending Kills</a></td>
<td>Several kills in a row all yank together.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Cut and Paste Operations on Graphical Displays



</th></tr>
<tr><td bgcolor="white"><a href="#Clipboard">Clipboard</a></td>
<td>How Emacs uses the system clipboard.

</td></tr>
<tr><td bgcolor="white"><a href="#Primary-Selection">Primary Selection</a></td>
<td>The temporarily selected text selection.

</td></tr>
<tr><td bgcolor="white"><a href="#Secondary-Selection">Secondary Selection</a></td>
<td>Cutting without altering point and mark.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Registers



</th></tr>
<tr><td bgcolor="white"><a href="#Position-Registers">Position Registers</a></td>
<td>Saving positions in registers.

</td></tr>
<tr><td bgcolor="white"><a href="#Text-Registers">Text Registers</a></td>
<td>Saving text in registers.

</td></tr>
<tr><td bgcolor="white"><a href="#Rectangle-Registers">Rectangle Registers</a></td>
<td>Saving rectangles in registers.

</td></tr>
<tr><td bgcolor="white"><a href="#Configuration-Registers">Configuration Registers</a></td>
<td>Saving window configurations in registers.

</td></tr>
<tr><td bgcolor="white"><a href="#Number-Registers">Number Registers</a></td>
<td>Numbers in registers.

</td></tr>
<tr><td bgcolor="white"><a href="#File-Registers">File Registers</a></td>
<td>File names in registers.

</td></tr>
<tr><td bgcolor="white"><a href="#Keyboard-Macro-Registers">Keyboard Macro Registers</a></td>
<td>Keyboard macros in registers.

</td></tr>
<tr><td bgcolor="white"><a href="#Bookmarks">Bookmarks</a></td>
<td>Bookmarks are like registers, but persistent.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Controlling the Display



</th></tr>
<tr><td bgcolor="white"><a href="#Scrolling">Scrolling</a></td>
<td>Commands to move text up and down in a window.

</td></tr>
<tr><td bgcolor="white"><a href="#Recentering">Recentering</a></td>
<td>A scroll command that centers the current line.

</td></tr>
<tr><td bgcolor="white"><a href="#Auto-Scrolling">Auto Scrolling</a></td>
<td>Redisplay scrolls text automatically when needed.

</td></tr>
<tr><td bgcolor="white"><a href="#Horizontal-Scrolling">Horizontal Scrolling</a></td>
<td>Moving text left and right in a window.

</td></tr>
<tr><td bgcolor="white"><a href="#Narrowing">Narrowing</a></td>
<td>Restricting display and editing to a portion
                             of the buffer.

</td></tr>
<tr><td bgcolor="white"><a href="#View-Mode">View Mode</a></td>
<td>Viewing read-only buffers.

</td></tr>
<tr><td bgcolor="white"><a href="#Follow-Mode">Follow Mode</a></td>
<td>Follow mode lets two windows scroll as one.

</td></tr>
<tr><td bgcolor="white"><a href="#Faces">Faces</a></td>
<td>How to change the display style using faces.

</td></tr>
<tr><td bgcolor="white"><a href="#Colors">Colors</a></td>
<td>Specifying colors for faces.

</td></tr>
<tr><td bgcolor="white"><a href="#Standard-Faces">Standard Faces</a></td>
<td>The main predefined faces.

</td></tr>
<tr><td bgcolor="white"><a href="#Text-Scale">Text Scale</a></td>
<td>Increasing or decreasing text size in a buffer.

</td></tr>
<tr><td bgcolor="white"><a href="#Font-Lock">Font Lock</a></td>
<td>Minor mode for syntactic highlighting using faces.

</td></tr>
<tr><td bgcolor="white"><a href="#Highlight-Interactively">Highlight Interactively</a></td>
<td>Tell Emacs what text to highlight.

</td></tr>
<tr><td bgcolor="white"><a href="#Fringes">Fringes</a></td>
<td>Enabling or disabling window fringes.

</td></tr>
<tr><td bgcolor="white"><a href="#Displaying-Boundaries">Displaying Boundaries</a></td>
<td>Displaying top and bottom of the buffer.

</td></tr>
<tr><td bgcolor="white"><a href="#Useless-Whitespace">Useless Whitespace</a></td>
<td>Showing possibly spurious trailing whitespace.

</td></tr>
<tr><td bgcolor="white"><a href="#Selective-Display">Selective Display</a></td>
<td>Hiding lines with lots of indentation.

</td></tr>
<tr><td bgcolor="white"><a href="#Optional-Mode-Line">Optional Mode Line</a></td>
<td>Optional mode line display features.

</td></tr>
<tr><td bgcolor="white"><a href="#Text-Display">Text Display</a></td>
<td>How text characters are normally displayed.

</td></tr>
<tr><td bgcolor="white"><a href="#Cursor-Display">Cursor Display</a></td>
<td>Features for displaying the cursor.

</td></tr>
<tr><td bgcolor="white"><a href="#Line-Truncation">Line Truncation</a></td>
<td>Truncating lines to fit the screen width instead
                             of continuing them to multiple screen lines.

</td></tr>
<tr><td bgcolor="white"><a href="#Visual-Line-Mode">Visual Line Mode</a></td>
<td>Word wrap and screen line-based editing.

</td></tr>
<tr><td bgcolor="white"><a href="#Display-Custom">Display Custom</a></td>
<td>Information on variables for customizing display.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Searching and Replacement



</th></tr>
<tr><td bgcolor="white"><a href="#Incremental-Search">Incremental Search</a></td>
<td>Search happens as you type the string.

</td></tr>
<tr><td bgcolor="white"><a href="#Nonincremental-Search">Nonincremental Search</a></td>
<td>Specify entire string and then search.

</td></tr>
<tr><td bgcolor="white"><a href="#Word-Search">Word Search</a></td>
<td>Search for sequence of words.

</td></tr>
<tr><td bgcolor="white"><a href="#Symbol-Search">Symbol Search</a></td>
<td>Search for a source code symbol.

</td></tr>
<tr><td bgcolor="white"><a href="#Regexp-Search">Regexp Search</a></td>
<td>Search for match for a regexp.

</td></tr>
<tr><td bgcolor="white"><a href="#Regexps">Regexps</a></td>
<td>Syntax of regular expressions.

</td></tr>
<tr><td bgcolor="white"><a href="#Regexp-Backslash">Regexp Backslash</a></td>
<td>Regular expression constructs starting with ‘\’.

</td></tr>
<tr><td bgcolor="white"><a href="#Regexp-Example">Regexp Example</a></td>
<td>A complex regular expression explained.

</td></tr>
<tr><td bgcolor="white"><a href="#Lax-Search">Lax Search</a></td>
<td>Search ignores some distinctions between
                                similar characters, like letter-case.

</td></tr>
<tr><td bgcolor="white"><a href="#Replace">Replace</a></td>
<td>Search, and replace some or all matches.

</td></tr>
<tr><td bgcolor="white"><a href="#Other-Repeating-Search">Other Repeating Search</a></td>
<td>Operating on all matches for some regexp.

</td></tr>
<tr><td bgcolor="white"><a href="#Search-Customizations">Search Customizations</a></td>
<td>Various search customizations.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Incremental Search



</th></tr>
<tr><td bgcolor="white"><a href="#Basic-Isearch">Basic Isearch</a></td>
<td>Basic incremental search commands.

</td></tr>
<tr><td bgcolor="white"><a href="#Repeat-Isearch">Repeat Isearch</a></td>
<td>Searching for the same string again.

</td></tr>
<tr><td bgcolor="white"><a href="#Isearch-Yank">Isearch Yank</a></td>
<td>Commands that grab text into the search string
                           or else edit the search string.

</td></tr>
<tr><td bgcolor="white"><a href="#Error-in-Isearch">Error in Isearch</a></td>
<td>When your string is not found.

</td></tr>
<tr><td bgcolor="white"><a href="#Special-Isearch">Special Isearch</a></td>
<td>Special input in incremental search.

</td></tr>
<tr><td bgcolor="white"><a href="#Not-Exiting-Isearch">Not Exiting Isearch</a></td>
<td>Prefix argument and scrolling commands.

</td></tr>
<tr><td bgcolor="white"><a href="#Isearch-Minibuffer">Isearch Minibuffer</a></td>
<td>Incremental search of the minibuffer history.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Replacement Commands



</th></tr>
<tr><td bgcolor="white"><a href="#Unconditional-Replace">Unconditional Replace</a></td>
<td>Replacing all matches for a string.

</td></tr>
<tr><td bgcolor="white"><a href="#Regexp-Replace">Regexp Replace</a></td>
<td>Replacing all matches for a regexp.

</td></tr>
<tr><td bgcolor="white"><a href="#Replacement-and-Lax-Matches">Replacement and Lax Matches</a></td>
<td>
                           
                           Lax searching for text to replace.

</td></tr>
<tr><td bgcolor="white"><a href="#Query-Replace">Query Replace</a></td>
<td>How to use querying.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Commands for Fixing Typos



</th></tr>
<tr><td bgcolor="white"><a href="#Undo">Undo</a></td>
<td>The Undo commands.

</td></tr>
<tr><td bgcolor="white"><a href="#Transpose">Transpose</a></td>
<td>Exchanging two characters, words, lines, lists...

</td></tr>
<tr><td bgcolor="white"><a href="#Fixing-Case">Fixing Case</a></td>
<td>Correcting case of last word entered.

</td></tr>
<tr><td bgcolor="white"><a href="#Spelling">Spelling</a></td>
<td>Apply spelling checker to a word, or a whole file.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Keyboard Macros



</th></tr>
<tr><td bgcolor="white"><a href="#Basic-Keyboard-Macro">Basic Keyboard Macro</a></td>
<td>Defining and running keyboard macros.

</td></tr>
<tr><td bgcolor="white"><a href="#Keyboard-Macro-Ring">Keyboard Macro Ring</a></td>
<td>Where previous keyboard macros are saved.

</td></tr>
<tr><td bgcolor="white"><a href="#Keyboard-Macro-Counter">Keyboard Macro Counter</a></td>
<td>Inserting incrementing numbers in macros.

</td></tr>
<tr><td bgcolor="white"><a href="#Keyboard-Macro-Query">Keyboard Macro Query</a></td>
<td>Making keyboard macros do different things each
                                time.

</td></tr>
<tr><td bgcolor="white"><a href="#Save-Keyboard-Macro">Save Keyboard Macro</a></td>
<td>Giving keyboard macros names; saving them in
                                files.

</td></tr>
<tr><td bgcolor="white"><a href="#Edit-Keyboard-Macro">Edit Keyboard Macro</a></td>
<td>Editing keyboard macros.

</td></tr>
<tr><td bgcolor="white"><a href="#Keyboard-Macro-Step_002dEdit">Keyboard Macro Step-Edit</a></td>
<td>Interactively executing and editing a keyboard
                                macro.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

File Handling



</th></tr>
<tr><td bgcolor="white"><a href="#File-Names">File Names</a></td>
<td>How to type and edit file-name arguments.

</td></tr>
<tr><td bgcolor="white"><a href="#Visiting">Visiting</a></td>
<td>Visiting a file prepares Emacs to edit the file.

</td></tr>
<tr><td bgcolor="white"><a href="#Saving">Saving</a></td>
<td>Saving makes your changes permanent.

</td></tr>
<tr><td bgcolor="white"><a href="#Reverting">Reverting</a></td>
<td>Reverting cancels all the changes not saved.

</td></tr>
<tr><td bgcolor="white"><a href="#Auto-Revert">Auto Revert</a></td>
<td>Keeping buffers automatically up-to-date.

</td></tr>
<tr><td bgcolor="white"><a href="#Auto-Save">Auto Save</a></td>
<td>Auto Save periodically protects against loss of data.

</td></tr>
<tr><td bgcolor="white"><a href="#File-Aliases">File Aliases</a></td>
<td>Handling multiple names for one file.

</td></tr>
<tr><td bgcolor="white"><a href="#Directories">Directories</a></td>
<td>Creating, deleting, and listing file directories.

</td></tr>
<tr><td bgcolor="white"><a href="#Comparing-Files">Comparing Files</a></td>
<td>Finding where two files differ.

</td></tr>
<tr><td bgcolor="white"><a href="#Diff-Mode">Diff Mode</a></td>
<td>Mode for editing file differences.

</td></tr>
<tr><td bgcolor="white"><a href="#Copying-and-Naming">Copying and Naming</a></td>
<td>Copying, naming and renaming files.

</td></tr>
<tr><td bgcolor="white"><a href="#Misc-File-Ops">Misc File Ops</a></td>
<td>Other things you can do on files.

</td></tr>
<tr><td bgcolor="white"><a href="#Compressed-Files">Compressed Files</a></td>
<td>Accessing compressed files.

</td></tr>
<tr><td bgcolor="white"><a href="#File-Archives">File Archives</a></td>
<td>Operating on tar, zip, jar etc. archive files.

</td></tr>
<tr><td bgcolor="white"><a href="#Remote-Files">Remote Files</a></td>
<td>Accessing files on other machines.

</td></tr>
<tr><td bgcolor="white"><a href="#Quoted-File-Names">Quoted File Names</a></td>
<td>Quoting special characters in file names.

</td></tr>
<tr><td bgcolor="white"><a href="#File-Name-Cache">File Name Cache</a></td>
<td>Completion against a list of files you often use.

</td></tr>
<tr><td bgcolor="white"><a href="#File-Conveniences">File Conveniences</a></td>
<td>Convenience features for finding files.

</td></tr>
<tr><td bgcolor="white"><a href="#Image-Mode">Image Mode</a></td>
<td>Viewing image files.

</td></tr>
<tr><td bgcolor="white"><a href="#Filesets">Filesets</a></td>
<td>Handling sets of files.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Saving Files



</th></tr>
<tr><td bgcolor="white"><a href="#Save-Commands">Save Commands</a></td>
<td>Commands for saving files.

</td></tr>
<tr><td bgcolor="white"><a href="#Backup">Backup</a></td>
<td>How Emacs saves the old version of your file.

</td></tr>
<tr><td bgcolor="white"><a href="#Customize-Save">Customize Save</a></td>
<td>Customizing the saving of files.

</td></tr>
<tr><td bgcolor="white"><a href="#Interlocking">Interlocking</a></td>
<td>How Emacs protects against simultaneous editing
                          of one file by two users.

</td></tr>
<tr><td bgcolor="white"><a href="#File-Shadowing">File Shadowing</a></td>
<td>Copying files to shadows automatically.

</td></tr>
<tr><td bgcolor="white"><a href="#Time-Stamps">Time Stamps</a></td>
<td>Emacs can update time stamps on saved files.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Backup Files



</th></tr>
<tr><td bgcolor="white"><a href="#Backup-Names">Backup Names</a></td>
<td>How backup files are named.

</td></tr>
<tr><td bgcolor="white"><a href="#Backup-Deletion">Backup Deletion</a></td>
<td>Emacs deletes excess numbered backups.

</td></tr>
<tr><td bgcolor="white"><a href="#Backup-Copying">Backup Copying</a></td>
<td>Backups can be made by copying or renaming.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Auto Reverting Non-File Buffers



</th></tr>
<tr><td bgcolor="white"><a href="#Auto-Reverting-the-Buffer-Menu">Auto Reverting the Buffer Menu</a></td>
<td>Auto Revert of the Buffer Menu.

</td></tr>
<tr><td bgcolor="white"><a href="#Auto-Reverting-Dired">Auto Reverting Dired</a></td>
<td>Auto Revert of Dired buffers.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Auto-Saving: Protection Against Disasters



</th></tr>
<tr><td bgcolor="white"><a href="#Auto-Save-Files">Auto Save Files</a></td>
<td>The file where auto-saved changes are
                          actually made until you save the file.

</td></tr>
<tr><td bgcolor="white"><a href="#Auto-Save-Control">Auto Save Control</a></td>
<td>Controlling when and how often to auto-save.

</td></tr>
<tr><td bgcolor="white"><a href="#Recover">Recover</a></td>
<td>Recovering text from auto-save files.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Using Multiple Buffers



</th></tr>
<tr><td bgcolor="white"><a href="#Select-Buffer">Select Buffer</a></td>
<td>Creating a new buffer or reselecting an old one.

</td></tr>
<tr><td bgcolor="white"><a href="#List-Buffers">List Buffers</a></td>
<td>Getting a list of buffers that exist.

</td></tr>
<tr><td bgcolor="white"><a href="#Misc-Buffer">Misc Buffer</a></td>
<td>Renaming; changing read-only status; copying text.

</td></tr>
<tr><td bgcolor="white"><a href="#Kill-Buffer">Kill Buffer</a></td>
<td>Killing buffers you no longer need.

</td></tr>
<tr><td bgcolor="white"><a href="#Several-Buffers">Several Buffers</a></td>
<td>How to go through the list of all buffers
                          and operate variously on several of them.

</td></tr>
<tr><td bgcolor="white"><a href="#Indirect-Buffers">Indirect Buffers</a></td>
<td>An indirect buffer shares the text of another buffer.

</td></tr>
<tr><td bgcolor="white"><a href="#Buffer-Convenience">Buffer Convenience</a></td>
<td>Convenience and customization features for
                          buffer handling.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Convenience Features and Customization of Buffer Handling



</th></tr>
<tr><td bgcolor="white"><a href="#Uniquify">Uniquify</a></td>
<td>Making buffer names unique with directory parts.

</td></tr>
<tr><td bgcolor="white"><a href="#Icomplete">Icomplete</a></td>
<td>Fast minibuffer selection.

</td></tr>
<tr><td bgcolor="white"><a href="#Buffer-Menus">Buffer Menus</a></td>
<td>Configurable buffer menu.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Multiple Windows



</th></tr>
<tr><td bgcolor="white"><a href="#Basic-Window">Basic Window</a></td>
<td>Introduction to Emacs windows.

</td></tr>
<tr><td bgcolor="white"><a href="#Split-Window">Split Window</a></td>
<td>New windows are made by splitting existing windows.

</td></tr>
<tr><td bgcolor="white"><a href="#Other-Window">Other Window</a></td>
<td>Moving to another window or doing something to it.

</td></tr>
<tr><td bgcolor="white"><a href="#Pop-Up-Window">Pop Up Window</a></td>
<td>Finding a file or buffer in another window.

</td></tr>
<tr><td bgcolor="white"><a href="#Change-Window">Change Window</a></td>
<td>Deleting windows and changing their sizes.

</td></tr>
<tr><td bgcolor="white"><a href="#Displaying-Buffers">Displaying Buffers</a></td>
<td>How Emacs picks a window for displaying a buffer.

</td></tr>
<tr><td bgcolor="white"><a href="#Temporary-Displays">Temporary Displays</a></td>
<td>Displaying non-editable buffers.

</td></tr>
<tr><td bgcolor="white"><a href="#Window-Convenience">Window Convenience</a></td>
<td>Convenience functions for window handling.

</td></tr>
<tr><td bgcolor="white"><a href="#Tab-Line">Tab Line</a></td>
<td>Window tab line.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Displaying a Buffer in a Window



</th></tr>
<tr><td bgcolor="white"><a href="#Window-Choice">Window Choice</a></td>
<td>How <code>display-buffer</code> works.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Frames and Graphical Displays



</th></tr>
<tr><td bgcolor="white"><a href="#Mouse-Commands">Mouse Commands</a></td>
<td>Moving, cutting, and pasting, with the mouse.

</td></tr>
<tr><td bgcolor="white"><a href="#Word-and-Line-Mouse">Word and Line Mouse</a></td>
<td>Mouse commands for selecting whole words or lines.

</td></tr>
<tr><td bgcolor="white"><a href="#Mouse-References">Mouse References</a></td>
<td>Using the mouse to select an item from a list.

</td></tr>
<tr><td bgcolor="white"><a href="#Menu-Mouse-Clicks">Menu Mouse Clicks</a></td>
<td>Mouse clicks that bring up menus.

</td></tr>
<tr><td bgcolor="white"><a href="#Mode-Line-Mouse">Mode Line Mouse</a></td>
<td>Mouse clicks on the mode line.

</td></tr>
<tr><td bgcolor="white"><a href="#Creating-Frames">Creating Frames</a></td>
<td>Creating additional Emacs frames with various contents.

</td></tr>
<tr><td bgcolor="white"><a href="#Frame-Commands">Frame Commands</a></td>
<td>Iconifying, deleting, and switching frames.

</td></tr>
<tr><td bgcolor="white"><a href="#Fonts">Fonts</a></td>
<td>Changing the frame font.

</td></tr>
<tr><td bgcolor="white"><a href="#Speedbar">Speedbar</a></td>
<td>How to make and use a speedbar frame.

</td></tr>
<tr><td bgcolor="white"><a href="#Multiple-Displays">Multiple Displays</a></td>
<td>How one Emacs instance can talk to several displays.

</td></tr>
<tr><td bgcolor="white"><a href="#Frame-Parameters">Frame Parameters</a></td>
<td>Changing the colors and other modes of frames.

</td></tr>
<tr><td bgcolor="white"><a href="#Scroll-Bars">Scroll Bars</a></td>
<td>How to enable and disable scroll bars; how to use them.

</td></tr>
<tr><td bgcolor="white"><a href="#Window-Dividers">Window Dividers</a></td>
<td>Window separators that can be dragged with the mouse.

</td></tr>
<tr><td bgcolor="white"><a href="#Drag-and-Drop">Drag and Drop</a></td>
<td>Using drag and drop to open files and insert text.

</td></tr>
<tr><td bgcolor="white"><a href="#Menu-Bars">Menu Bars</a></td>
<td>Enabling and disabling the menu bar.

</td></tr>
<tr><td bgcolor="white"><a href="#Tool-Bars">Tool Bars</a></td>
<td>Enabling and disabling the tool bar.

</td></tr>
<tr><td bgcolor="white"><a href="#Tab-Bars">Tab Bars</a></td>
<td>Enabling and disabling the tab bar.

</td></tr>
<tr><td bgcolor="white"><a href="#Dialog-Boxes">Dialog Boxes</a></td>
<td>Controlling use of dialog boxes.

</td></tr>
<tr><td bgcolor="white"><a href="#Tooltips">Tooltips</a></td>
<td>Displaying information at the current mouse position.

</td></tr>
<tr><td bgcolor="white"><a href="#Mouse-Avoidance">Mouse Avoidance</a></td>
<td>Preventing the mouse pointer from obscuring text.

</td></tr>
<tr><td bgcolor="white"><a href="#Non_002dWindow-Terminals">Non-Window Terminals</a></td>
<td>Multiple frames on terminals that show only one.

</td></tr>
<tr><td bgcolor="white"><a href="#Text_002dOnly-Mouse">Text-Only Mouse</a></td>
<td>Using the mouse in text terminals.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

International Character Set Support



</th></tr>
<tr><td bgcolor="white"><a href="#International-Chars">International Chars</a></td>
<td>Basic concepts of multibyte characters.

</td></tr>
<tr><td bgcolor="white"><a href="#Language-Environments">Language Environments</a></td>
<td>Setting things up for the language you use.

</td></tr>
<tr><td bgcolor="white"><a href="#Input-Methods">Input Methods</a></td>
<td>Entering text characters not on your keyboard.

</td></tr>
<tr><td bgcolor="white"><a href="#Select-Input-Method">Select Input Method</a></td>
<td>Specifying your choice of input methods.

</td></tr>
<tr><td bgcolor="white"><a href="#Coding-Systems">Coding Systems</a></td>
<td>Character set conversion when you read and
                              write files, and so on.

</td></tr>
<tr><td bgcolor="white"><a href="#Recognize-Coding">Recognize Coding</a></td>
<td>How Emacs figures out which conversion to use.

</td></tr>
<tr><td bgcolor="white"><a href="#Specify-Coding">Specify Coding</a></td>
<td>Specifying a file’s coding system explicitly.

</td></tr>
<tr><td bgcolor="white"><a href="#Output-Coding">Output Coding</a></td>
<td>Choosing coding systems for output.

</td></tr>
<tr><td bgcolor="white"><a href="#Text-Coding">Text Coding</a></td>
<td>Choosing conversion to use for file text.

</td></tr>
<tr><td bgcolor="white"><a href="#Communication-Coding">Communication Coding</a></td>
<td>Coding systems for interprocess communication.

</td></tr>
<tr><td bgcolor="white"><a href="#File-Name-Coding">File Name Coding</a></td>
<td>Coding systems for file <em>names</em>.

</td></tr>
<tr><td bgcolor="white"><a href="#Terminal-Coding">Terminal Coding</a></td>
<td>Specifying coding systems for converting
                              terminal input and output.

</td></tr>
<tr><td bgcolor="white"><a href="#Fontsets">Fontsets</a></td>
<td>Fontsets are collections of fonts
                              that cover the whole spectrum of characters.

</td></tr>
<tr><td bgcolor="white"><a href="#Defining-Fontsets">Defining Fontsets</a></td>
<td>Defining a new fontset.

</td></tr>
<tr><td bgcolor="white"><a href="#Modifying-Fontsets">Modifying Fontsets</a></td>
<td>Modifying an existing fontset.

</td></tr>
<tr><td bgcolor="white"><a href="#Undisplayable-Characters">Undisplayable Characters</a></td>
<td>When characters don’t display.

</td></tr>
<tr><td bgcolor="white"><a href="#Unibyte-Mode">Unibyte Mode</a></td>
<td>You can pick one European character set
                              to use without multibyte characters.

</td></tr>
<tr><td bgcolor="white"><a href="#Charsets">Charsets</a></td>
<td>How Emacs groups its internal character codes.

</td></tr>
<tr><td bgcolor="white"><a href="#Bidirectional-Editing">Bidirectional Editing</a></td>
<td>Support for right-to-left scripts.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Major and Minor Modes



</th></tr>
<tr><td bgcolor="white"><a href="#Major-Modes">Major Modes</a></td>
<td>Text mode vs. Lisp mode vs. C mode...

</td></tr>
<tr><td bgcolor="white"><a href="#Minor-Modes">Minor Modes</a></td>
<td>Each minor mode is a feature you can turn on
                          independently of any others.

</td></tr>
<tr><td bgcolor="white"><a href="#Choosing-Modes">Choosing Modes</a></td>
<td>How modes are chosen when visiting files.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Indentation



</th></tr>
<tr><td bgcolor="white"><a href="#Indentation-Commands">Indentation Commands</a></td>
<td>More commands for performing indentation.

</td></tr>
<tr><td bgcolor="white"><a href="#Tab-Stops">Tab Stops</a></td>
<td>Stop points for indentation in Text modes.

</td></tr>
<tr><td bgcolor="white"><a href="#Just-Spaces">Just Spaces</a></td>
<td>Using only space characters for indentation.

</td></tr>
<tr><td bgcolor="white"><a href="#Indent-Convenience">Indent Convenience</a></td>
<td>Optional indentation features.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Commands for Human Languages



</th></tr>
<tr><td bgcolor="white"><a href="#Words">Words</a></td>
<td>Moving over and killing words.

</td></tr>
<tr><td bgcolor="white"><a href="#Sentences">Sentences</a></td>
<td>Moving over and killing sentences.

</td></tr>
<tr><td bgcolor="white"><a href="#Paragraphs">段落</a></td>
<td>Moving over paragraphs.

</td></tr>
<tr><td bgcolor="white"><a href="#Pages">Pages</a></td>
<td>Moving over pages.

</td></tr>
<tr><td bgcolor="white"><a href="#Quotation-Marks">引号</a></td>
<td>Inserting quotation marks.

</td></tr>
<tr><td bgcolor="white"><a href="#Filling">Filling</a></td>
<td>Filling or justifying text.

</td></tr>
<tr><td bgcolor="white"><a href="#Case">Case</a></td>
<td>Changing the case of text.

</td></tr>
<tr><td bgcolor="white"><a href="#Text-Mode">Text Mode</a></td>
<td>The major modes for editing text files.

</td></tr>
<tr><td bgcolor="white"><a href="#Outline-Mode">Outline Mode</a></td>
<td>Editing outlines.

</td></tr>
<tr><td bgcolor="white"><a href="#Org-Mode">Org Mode</a></td>
<td>The Emacs organizer.

</td></tr>
<tr><td bgcolor="white"><a href="#TeX-Mode">TeX Mode</a></td>
<td>Editing TeX and LaTeX files.

</td></tr>
<tr><td bgcolor="white"><a href="#HTML-Mode">HTML Mode</a></td>
<td>Editing HTML and SGML files.

</td></tr>
<tr><td bgcolor="white"><a href="#Nroff-Mode">Nroff Mode</a></td>
<td>Editing input to the nroff formatter.

</td></tr>
<tr><td bgcolor="white"><a href="#Enriched-Text">Enriched Text</a></td>
<td>Editing text enriched with fonts, colors, etc.

</td></tr>
<tr><td bgcolor="white"><a href="#Text-Based-Tables">Text Based Tables</a></td>
<td>Commands for editing text-based tables.

</td></tr>
<tr><td bgcolor="white"><a href="#Two_002dColumn">Two-Column</a></td>
<td>Splitting text columns into separate windows.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Filling Text



</th></tr>
<tr><td bgcolor="white"><a href="#Auto-Fill">Auto Fill</a></td>
<td>Auto Fill mode breaks long lines automatically.

</td></tr>
<tr><td bgcolor="white"><a href="#Fill-Commands">Fill Commands</a></td>
<td>Commands to refill paragraphs and center lines.

</td></tr>
<tr><td bgcolor="white"><a href="#Fill-Prefix">Fill Prefix</a></td>
<td>Filling paragraphs that are indented
                          or in a comment, etc.

</td></tr>
<tr><td bgcolor="white"><a href="#Adaptive-Fill">Adaptive Fill</a></td>
<td>How Emacs can determine the fill prefix automatically.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Outline Mode



</th></tr>
<tr><td bgcolor="white"><a href="#Outline-Format">Outline Format</a></td>
<td>What the text of an outline looks like.

</td></tr>
<tr><td bgcolor="white"><a href="#Outline-Motion">Outline Motion</a></td>
<td>Special commands for moving through outlines.

</td></tr>
<tr><td bgcolor="white"><a href="#Outline-Visibility">Outline Visibility</a></td>
<td>Commands to control what is visible.

</td></tr>
<tr><td bgcolor="white"><a href="#Outline-Views">Outline Views</a></td>
<td>Outlines and multiple views.

</td></tr>
<tr><td bgcolor="white"><a href="#Foldout">Foldout</a></td>
<td>Folding means zooming in on outlines.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Org Mode



</th></tr>
<tr><td bgcolor="white"><a href="#Org-Organizer">Org Organizer</a></td>
<td>Managing TODO lists and agendas.

</td></tr>
<tr><td bgcolor="white"><a href="#Org-Authoring">Org Authoring</a></td>
<td>Exporting Org buffers to various formats.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

TeX Mode



</th></tr>
<tr><td bgcolor="white"><a href="#TeX-Editing">TeX Editing</a></td>
<td>Special commands for editing in TeX mode.

</td></tr>
<tr><td bgcolor="white"><a href="#LaTeX-Editing">LaTeX Editing</a></td>
<td>Additional commands for LaTeX input files.

</td></tr>
<tr><td bgcolor="white"><a href="#TeX-Print">TeX Print</a></td>
<td>Commands for printing part of a file with TeX.

</td></tr>
<tr><td bgcolor="white"><a href="#TeX-Misc">TeX Misc</a></td>
<td>Customization of TeX mode, and related features.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Enriched Text



</th></tr>
<tr><td bgcolor="white"><a href="#Enriched-Mode">Enriched Mode</a></td>
<td>Entering and exiting Enriched mode.

</td></tr>
<tr><td bgcolor="white"><a href="#Hard-and-Soft-Newlines">Hard and Soft Newlines</a></td>
<td>There are two different kinds of newlines.

</td></tr>
<tr><td bgcolor="white"><a href="#Editing-Format-Info">Editing Format Info</a></td>
<td>How to edit text properties.

</td></tr>
<tr><td bgcolor="white"><a href="#Enriched-Faces">Enriched Faces</a></td>
<td>Bold, italic, underline, etc.

</td></tr>
<tr><td bgcolor="white"><a href="#Enriched-Indentation">Enriched Indentation</a></td>
<td>Changing the left and right margins.

</td></tr>
<tr><td bgcolor="white"><a href="#Enriched-Justification">Enriched Justification</a></td>
<td>Centering, setting text flush with the
                              left or right margin, etc.

</td></tr>
<tr><td bgcolor="white"><a href="#Enriched-Properties">Enriched Properties</a></td>
<td>The “Special text properties” submenu.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">



Editing Text-based Tables



</th></tr>
<tr><td bgcolor="white"><a href="#Table-Definition">Table Definition</a></td>
<td>What is a text based table.

</td></tr>
<tr><td bgcolor="white"><a href="#Table-Creation">Table Creation</a></td>
<td>How to create a table.

</td></tr>
<tr><td bgcolor="white"><a href="#Table-Recognition">Table Recognition</a></td>
<td>How to activate and deactivate tables.

</td></tr>
<tr><td bgcolor="white"><a href="#Cell-Commands">Cell Commands</a></td>
<td>Cell-oriented commands in a table.

</td></tr>
<tr><td bgcolor="white"><a href="#Cell-Justification">Cell Justification</a></td>
<td>Justifying cell contents.

</td></tr>
<tr><td bgcolor="white"><a href="#Table-Rows-and-Columns">Table Rows and Columns</a></td>
<td>Inserting and deleting rows and columns.

</td></tr>
<tr><td bgcolor="white"><a href="#Table-Conversion">Table Conversion</a></td>
<td>Converting between plain text and tables.

</td></tr>
<tr><td bgcolor="white"><a href="#Table-Misc">Table Misc</a></td>
<td>Table miscellany.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Editing Programs



</th></tr>
<tr><td bgcolor="white"><a href="#Program-Modes">Program Modes</a></td>
<td>Major modes for editing programs.

</td></tr>
<tr><td bgcolor="white"><a href="#Defuns">Defuns</a></td>
<td>Commands to operate on major top-level parts
                          of a program.

</td></tr>
<tr><td bgcolor="white"><a href="#Program-Indent">Program Indent</a></td>
<td>Adjusting indentation to show the nesting.

</td></tr>
<tr><td bgcolor="white"><a href="#Parentheses">Parentheses</a></td>
<td>Commands that operate on parentheses.

</td></tr>
<tr><td bgcolor="white"><a href="#Comments">Comments</a></td>
<td>Inserting, killing, and aligning comments.

</td></tr>
<tr><td bgcolor="white"><a href="#Documentation">Documentation</a></td>
<td>Getting documentation of functions you plan to call.

</td></tr>
<tr><td bgcolor="white"><a href="#Hideshow">Hideshow</a></td>
<td>Displaying blocks selectively.

</td></tr>
<tr><td bgcolor="white"><a href="#Symbol-Completion">Symbol Completion</a></td>
<td>Completion on symbol names of your program or language.

</td></tr>
<tr><td bgcolor="white"><a href="#MixedCase-Words">MixedCase Words</a></td>
<td>Dealing with identifiersLikeThis.

</td></tr>
<tr><td bgcolor="white"><a href="#Semantic">Semantic</a></td>
<td>Suite of editing tools based on source code parsing.

</td></tr>
<tr><td bgcolor="white"><a href="#Misc-for-Programs">Misc for Programs</a></td>
<td>Other Emacs features useful for editing programs.

</td></tr>
<tr><td bgcolor="white"><a href="#C-Modes">C Modes</a></td>
<td>Special commands of C, C++, Objective-C,
                          Java, IDL, Pike and AWK modes.

</td></tr>
<tr><td bgcolor="white"><a href="#Asm-Mode">Asm Mode</a></td>
<td>Asm mode and its special features.

</td></tr>
<tr><td bgcolor="white"><a href="#Fortran">Fortran</a></td>
<td>Fortran mode and its special features.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Top-Level Definitions, or Defuns



</th></tr>
<tr><td bgcolor="white"><a href="#Left-Margin-Paren">Left Margin Paren</a></td>
<td>An open-paren or similar opening delimiter
                          starts a defun if it is at the left margin.

</td></tr>
<tr><td bgcolor="white"><a href="#Moving-by-Defuns">Moving by Defuns</a></td>
<td>Commands to move over or mark a major definition.

</td></tr>
<tr><td bgcolor="white"><a href="#Imenu">Imenu</a></td>
<td>Making buffer indexes as menus.

</td></tr>
<tr><td bgcolor="white"><a href="#Which-Function">Which Function</a></td>
<td>Which Function mode shows which function you are in.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Indentation for Programs



</th></tr>
<tr><td bgcolor="white"><a href="#Basic-Indent">Basic Indent</a></td>
<td>Indenting a single line.

</td></tr>
<tr><td bgcolor="white"><a href="#Multi_002dline-Indent">Multi-line Indent</a></td>
<td>Commands to reindent many lines at once.

</td></tr>
<tr><td bgcolor="white"><a href="#Lisp-Indent">Lisp Indent</a></td>
<td>Specifying how each Lisp function should be indented.

</td></tr>
<tr><td bgcolor="white"><a href="#C-Indent">C Indent</a></td>
<td>Extra features for indenting C and related modes.

</td></tr>
<tr><td bgcolor="white"><a href="#Custom-C-Indent">Custom C Indent</a></td>
<td>Controlling indentation style for C and related modes.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Commands for Editing with Parentheses



</th></tr>
<tr><td bgcolor="white"><a href="#Expressions">Expressions</a></td>
<td>Expressions with balanced parentheses.

</td></tr>
<tr><td bgcolor="white"><a href="#Moving-by-Parens">Moving by Parens</a></td>
<td>Commands for moving up, down and across
                          in the structure of parentheses.

</td></tr>
<tr><td bgcolor="white"><a href="#Matching">Matching</a></td>
<td>Insertion of a close-delimiter flashes matching open.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Manipulating Comments



</th></tr>
<tr><td bgcolor="white"><a href="#Comment-Commands">Comment Commands</a></td>
<td>Inserting, killing, and aligning comments.

</td></tr>
<tr><td bgcolor="white"><a href="#Multi_002dLine-Comments">Multi-Line Comments</a></td>
<td>Commands for adding and editing multi-line comments.

</td></tr>
<tr><td bgcolor="white"><a href="#Options-for-Comments">Options for Comments</a></td>
<td>Customizing the comment features.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Documentation Lookup



</th></tr>
<tr><td bgcolor="white"><a href="#Info-Lookup">Info Lookup</a></td>
<td>Looking up library functions and commands in Info files.

</td></tr>
<tr><td bgcolor="white"><a href="#Man-Page">Man Page</a></td>
<td>Looking up man pages of library functions and commands.

</td></tr>
<tr><td bgcolor="white"><a href="#Lisp-Doc">Lisp Doc</a></td>
<td>Looking up Emacs Lisp functions, etc.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

C and Related Modes



</th></tr>
<tr><td bgcolor="white"><a href="#Motion-in-C">Motion in C</a></td>
<td>Commands to move by C statements, etc.

</td></tr>
<tr><td bgcolor="white"><a href="#Electric-C">Electric C</a></td>
<td>Colon and other chars can automatically reindent.

</td></tr>
<tr><td bgcolor="white"><a href="#Hungry-Delete">Hungry Delete</a></td>
<td>A more powerful DEL command.

</td></tr>
<tr><td bgcolor="white"><a href="#Other-C-Commands">Other C Commands</a></td>
<td>Filling comments, viewing expansion of macros,
                          and other neat features.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Fortran Mode



</th></tr>
<tr><td bgcolor="white"><a href="#Fortran-Motion">Fortran Motion</a></td>
<td>Moving point by statements or subprograms.

</td></tr>
<tr><td bgcolor="white"><a href="#Fortran-Indent">Fortran Indent</a></td>
<td>Indentation commands for Fortran.

</td></tr>
<tr><td bgcolor="white"><a href="#Fortran-Comments">Fortran Comments</a></td>
<td>Inserting and aligning comments.

</td></tr>
<tr><td bgcolor="white"><a href="#Fortran-Autofill">Fortran Autofill</a></td>
<td>Auto fill support for Fortran.

</td></tr>
<tr><td bgcolor="white"><a href="#Fortran-Columns">Fortran Columns</a></td>
<td>Measuring columns for valid Fortran.

</td></tr>
<tr><td bgcolor="white"><a href="#Fortran-Abbrev">Fortran Abbrev</a></td>
<td>Built-in abbrevs for Fortran keywords.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Fortran Indentation



</th></tr>
<tr><td bgcolor="white"><a href="#ForIndent-Commands">ForIndent Commands</a></td>
<td>Commands for indenting and filling Fortran.

</td></tr>
<tr><td bgcolor="white"><a href="#ForIndent-Cont">ForIndent Cont</a></td>
<td>How continuation lines indent.

</td></tr>
<tr><td bgcolor="white"><a href="#ForIndent-Num">ForIndent Num</a></td>
<td>How line numbers auto-indent.

</td></tr>
<tr><td bgcolor="white"><a href="#ForIndent-Conv">ForIndent Conv</a></td>
<td>Conventions you must obey to avoid trouble.

</td></tr>
<tr><td bgcolor="white"><a href="#ForIndent-Vars">ForIndent Vars</a></td>
<td>Variables controlling Fortran indent style.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Compiling and Testing Programs



</th></tr>
<tr><td bgcolor="white"><a href="#Compilation">Compilation</a></td>
<td>Compiling programs in languages other
                          than Lisp (C, Pascal, etc.).

</td></tr>
<tr><td bgcolor="white"><a href="#Compilation-Mode">Compilation Mode</a></td>
<td>The mode for visiting compiler errors.

</td></tr>
<tr><td bgcolor="white"><a href="#Compilation-Shell">Compilation Shell</a></td>
<td>Customizing your shell properly
                          for use in the compilation buffer.

</td></tr>
<tr><td bgcolor="white"><a href="#Grep-Searching">Grep Searching</a></td>
<td>Searching with grep.

</td></tr>
<tr><td bgcolor="white"><a href="#Flymake">Flymake</a></td>
<td>Finding syntax errors on the fly.

</td></tr>
<tr><td bgcolor="white"><a href="#Debuggers">Debuggers</a></td>
<td>Running symbolic debuggers for non-Lisp programs.

</td></tr>
<tr><td bgcolor="white"><a href="#Executing-Lisp">Executing Lisp</a></td>
<td>Various modes for editing Lisp programs,
                          with different facilities for running
                          the Lisp programs.

</td></tr>
<tr><td bgcolor="white"><a href="#Lisp-Libraries">Lisp Libraries</a></td>
<td>How Lisp programs are loaded into Emacs.

</td></tr>
<tr><td bgcolor="white"><a href="#Lisp-Eval">Lisp Eval</a></td>
<td>Executing a single Lisp expression in Emacs.

</td></tr>
<tr><td bgcolor="white"><a href="#Lisp-Interaction">Lisp Interaction</a></td>
<td>Executing Lisp in an Emacs buffer.

</td></tr>
<tr><td bgcolor="white"><a href="#External-Lisp">External Lisp</a></td>
<td>Communicating through Emacs with a separate Lisp.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Running Debuggers Under Emacs



</th></tr>
<tr><td bgcolor="white"><a href="#Starting-GUD">Starting GUD</a></td>
<td>How to start a debugger subprocess.

</td></tr>
<tr><td bgcolor="white"><a href="#Debugger-Operation">Debugger Operation</a></td>
<td>Connection between the debugger and source buffers.

</td></tr>
<tr><td bgcolor="white"><a href="#Commands-of-GUD">Commands of GUD</a></td>
<td>Key bindings for common commands.

</td></tr>
<tr><td bgcolor="white"><a href="#GUD-Customization">GUD Customization</a></td>
<td>Defining your own commands for GUD.

</td></tr>
<tr><td bgcolor="white"><a href="#GDB-Graphical-Interface">GDB Graphical Interface</a></td>
<td>An enhanced mode that uses GDB features to
                          implement a graphical debugging environment.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

GDB Graphical Interface



</th></tr>
<tr><td bgcolor="white"><a href="#GDB-User-Interface-Layout">GDB User Interface Layout</a></td>
<td>Control the number of displayed buffers.

</td></tr>
<tr><td bgcolor="white"><a href="#Source-Buffers">Source Buffers</a></td>
<td>Use the mouse in the fringe/margin to
                                control your program.

</td></tr>
<tr><td bgcolor="white"><a href="#Breakpoints-Buffer">Breakpoints Buffer</a></td>
<td>A breakpoint control panel.

</td></tr>
<tr><td bgcolor="white"><a href="#Threads-Buffer">Threads Buffer</a></td>
<td>Displays your threads.

</td></tr>
<tr><td bgcolor="white"><a href="#Stack-Buffer">Stack Buffer</a></td>
<td>Select a frame from the call stack.

</td></tr>
<tr><td bgcolor="white"><a href="#Other-GDB-Buffers">Other GDB Buffers</a></td>
<td>Other buffers for controlling the GDB state.

</td></tr>
<tr><td bgcolor="white"><a href="#Watch-Expressions">Watch Expressions</a></td>
<td>Monitor variable values in the speedbar.

</td></tr>
<tr><td bgcolor="white"><a href="#Multithreaded-Debugging">Multithreaded Debugging</a></td>
<td>Debugging programs with several threads.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Maintaining Large Programs



</th></tr>
<tr><td bgcolor="white"><a href="#Version-Control">Version Control</a></td>
<td>Using version control systems.

</td></tr>
<tr><td bgcolor="white"><a href="#Projects">Projects</a></td>
<td>Commands for handling source files in a project.

</td></tr>
<tr><td bgcolor="white"><a href="#Change-Log">Change Log</a></td>
<td>Maintaining a change history for your program.

</td></tr>
<tr><td bgcolor="white"><a href="#Xref">Xref</a></td>
<td>Find definitions and references of any function,
                          method, struct, macro, … in your program.

</td></tr>
<tr><td bgcolor="white"><a href="#EDE">EDE</a></td>
<td>An integrated development environment for Emacs.

</td></tr>
<tr><td bgcolor="white"><a href="#Emerge">Emerge</a></td>
<td>A convenient way of merging two versions of a program.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Version Control



</th></tr>
<tr><td bgcolor="white"><a href="#Introduction-to-VC">Introduction to VC</a></td>
<td>How version control works in general.

</td></tr>
<tr><td bgcolor="white"><a href="#VC-Mode-Line">VC Mode Line</a></td>
<td>How the mode line shows version control status.

</td></tr>
<tr><td bgcolor="white"><a href="#Basic-VC-Editing">Basic VC Editing</a></td>
<td>How to edit a file under version control.

</td></tr>
<tr><td bgcolor="white"><a href="#Log-Buffer">Log Buffer</a></td>
<td>Features available in log entry buffers.

</td></tr>
<tr><td bgcolor="white"><a href="#Registering">Registering</a></td>
<td>Putting a file under version control.

</td></tr>
<tr><td bgcolor="white"><a href="#Old-Revisions">Old Revisions</a></td>
<td>Examining and comparing old versions.

</td></tr>
<tr><td bgcolor="white"><a href="#VC-Change-Log">VC Change Log</a></td>
<td>Viewing the VC Change Log.

</td></tr>
<tr><td bgcolor="white"><a href="#VC-Undo">VC Undo</a></td>
<td>Canceling changes before or after committing.

</td></tr>
<tr><td bgcolor="white"><a href="#VC-Ignore">VC Ignore</a></td>
<td>Ignore files under version control system.

</td></tr>
<tr><td bgcolor="white"><a href="#VC-Directory-Mode">VC Directory Mode</a></td>
<td>Listing files managed by version control.

</td></tr>
<tr><td bgcolor="white"><a href="#Branches">Branches</a></td>
<td>Multiple lines of development.

</td></tr>
<tr><td bgcolor="white"><a href="#Miscellaneous-VC">Miscellaneous VC</a></td>
<td>Various other commands and features of VC.

</td></tr>
<tr><td bgcolor="white"><a href="#Customizing-VC">Customizing VC</a></td>
<td>Variables that change VC’s behavior.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Introduction to Version Control



</th></tr>
<tr><td bgcolor="white"><a href="#Why-Version-Control_003f">Why Version Control?</a></td>
<td>Understanding the problems it addresses.

</td></tr>
<tr><td bgcolor="white"><a href="#Version-Control-Systems">Version Control Systems</a></td>
<td>Supported version control back-end systems.

</td></tr>
<tr><td bgcolor="white"><a href="#VCS-Concepts">VCS Concepts</a></td>
<td>Words and concepts related to version control.

</td></tr>
<tr><td bgcolor="white"><a href="#VCS-Merging">VCS Merging</a></td>
<td>How file conflicts are handled.

</td></tr>
<tr><td bgcolor="white"><a href="#VCS-Changesets">VCS Changesets</a></td>
<td>How changes are grouped.

</td></tr>
<tr><td bgcolor="white"><a href="#VCS-Repositories">VCS Repositories</a></td>
<td>Where version control repositories are stored.

</td></tr>
<tr><td bgcolor="white"><a href="#Types-of-Log-File">Types of Log File</a></td>
<td>The VCS log in contrast to the ChangeLog.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Basic Editing under Version Control



</th></tr>
<tr><td bgcolor="white"><a href="#VC-With-A-Merging-VCS">VC With A Merging VCS</a></td>
<td>Without locking: default mode for CVS.

</td></tr>
<tr><td bgcolor="white"><a href="#VC-With-A-Locking-VCS">VC With A Locking VCS</a></td>
<td>RCS in its default mode, SCCS, and optionally CVS.

</td></tr>
<tr><td bgcolor="white"><a href="#Advanced-C_002dx-v-v">Advanced C-x v v</a></td>
<td>Advanced features available with a prefix argument.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

VC Directory Mode



</th></tr>
<tr><td bgcolor="white"><a href="#VC-Directory-Buffer">VC Directory Buffer</a></td>
<td>What the buffer looks like and means.

</td></tr>
<tr><td bgcolor="white"><a href="#VC-Directory-Commands">VC Directory Commands</a></td>
<td>Commands to use in a VC directory buffer.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Version Control Branches



</th></tr>
<tr><td bgcolor="white"><a href="#Switching-Branches">Switching Branches</a></td>
<td>How to get to another existing branch.

</td></tr>
<tr><td bgcolor="white"><a href="#Pulling-_002f-Pushing">Pulling / Pushing</a></td>
<td>Receiving/sending changes from/to elsewhere.

</td></tr>
<tr><td bgcolor="white"><a href="#Merging">Merging</a></td>
<td>Transferring changes between branches.

</td></tr>
<tr><td bgcolor="white"><a href="#Creating-Branches">Creating Branches</a></td>
<td>How to start a new branch.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Miscellaneous Commands and Features of VC



</th></tr>
<tr><td bgcolor="white"><a href="#Change-Logs-and-VC">Change Logs and VC</a></td>
<td>Generating a change log file from log entries.

</td></tr>
<tr><td bgcolor="white"><a href="#VC-Delete_002fRename">VC Delete/Rename</a></td>
<td>Deleting and renaming version-controlled files.

</td></tr>
<tr><td bgcolor="white"><a href="#Revision-Tags">Revision Tags</a></td>
<td>Symbolic names for revisions.

</td></tr>
<tr><td bgcolor="white"><a href="#Version-Headers">Version Headers</a></td>
<td>Inserting version control headers into working files.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Customizing VC



</th></tr>
<tr><td bgcolor="white"><a href="#General-VC-Options">General VC Options</a></td>
<td>Options that apply to multiple back ends.

</td></tr>
<tr><td bgcolor="white"><a href="#RCS-and-SCCS">RCS and SCCS</a></td>
<td>Options for RCS and SCCS.

</td></tr>
<tr><td bgcolor="white"><a href="#CVS-Options">CVS Options</a></td>
<td>Options for CVS.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Change Logs



</th></tr>
<tr><td bgcolor="white"><a href="#Change-Log-Commands">Change Log Commands</a></td>
<td>Commands for editing change log files.

</td></tr>
<tr><td bgcolor="white"><a href="#Format-of-ChangeLog">Format of ChangeLog</a></td>
<td>What the change log file looks like.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Xref



</th></tr>
<tr><td bgcolor="white"><a href="#Find-Identifiers">Find Identifiers</a></td>
<td>Commands to find where an identifier is defined
                          or referenced, to list identifiers, etc.

</td></tr>
<tr><td bgcolor="white"><a href="#Tags-Tables">Tags Tables</a></td>
<td>Tags table records which file defines a symbol.

</td></tr>
<tr><td bgcolor="white"><a href="#Select-Tags-Table">Select Tags Table</a></td>
<td>How to visit a specific tags table.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Find Identifiers



</th></tr>
<tr><td bgcolor="white"><a href="#Looking-Up-Identifiers">Looking Up Identifiers</a></td>
<td>Commands to find the definition of a specific tag.

</td></tr>
<tr><td bgcolor="white"><a href="#Xref-Commands">Xref Commands</a></td>
<td>Commands in the <samp>*xref*</samp> buffer.

</td></tr>
<tr><td bgcolor="white"><a href="#Identifier-Search">Identifier Search</a></td>
<td>Searching and replacing identifiers.

</td></tr>
<tr><td bgcolor="white"><a href="#List-Identifiers">List Identifiers</a></td>
<td>Listing identifiers and completing on them.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Tags Tables



</th></tr>
<tr><td bgcolor="white"><a href="#Tag-Syntax">Tag Syntax</a></td>
<td>Tag syntax for various types of code and text files.

</td></tr>
<tr><td bgcolor="white"><a href="#Create-Tags-Table">Create Tags Table</a></td>
<td>Creating a tags table with <code>etags</code>.

</td></tr>
<tr><td bgcolor="white"><a href="#Etags-Regexps">Etags Regexps</a></td>
<td>Create arbitrary tags using regular expressions.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Merging Files with Emerge



</th></tr>
<tr><td bgcolor="white"><a href="#Overview-of-Emerge">Overview of Emerge</a></td>
<td>How to start Emerge.  Basic concepts.

</td></tr>
<tr><td bgcolor="white"><a href="#Submodes-of-Emerge">Submodes of Emerge</a></td>
<td>Fast mode vs. Edit mode.
                          Skip Prefers mode and Auto Advance mode.

</td></tr>
<tr><td bgcolor="white"><a href="#State-of-Difference">State of Difference</a></td>
<td>You do the merge by specifying state A or B
                          for each difference.

</td></tr>
<tr><td bgcolor="white"><a href="#Merge-Commands">Merge Commands</a></td>
<td>Commands for selecting a difference,
                          changing states of differences, etc.

</td></tr>
<tr><td bgcolor="white"><a href="#Exiting-Emerge">Exiting Emerge</a></td>
<td>What to do when you’ve finished the merge.

</td></tr>
<tr><td bgcolor="white"><a href="#Combining-in-Emerge">Combining in Emerge</a></td>
<td>How to keep both alternatives for a difference.

</td></tr>
<tr><td bgcolor="white"><a href="#Fine-Points-of-Emerge">Fine Points of Emerge</a></td>
<td>Miscellaneous issues.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Abbrevs



</th></tr>
<tr><td bgcolor="white"><a href="#Abbrev-Concepts">Abbrev Concepts</a></td>
<td>Fundamentals of defined abbrevs.

</td></tr>
<tr><td bgcolor="white"><a href="#Defining-Abbrevs">Defining Abbrevs</a></td>
<td>Defining an abbrev, so it will expand when typed.

</td></tr>
<tr><td bgcolor="white"><a href="#Expanding-Abbrevs">Expanding Abbrevs</a></td>
<td>Controlling expansion: prefixes, canceling expansion.

</td></tr>
<tr><td bgcolor="white"><a href="#Editing-Abbrevs">Editing Abbrevs</a></td>
<td>Viewing or editing the entire list of defined abbrevs.

</td></tr>
<tr><td bgcolor="white"><a href="#Saving-Abbrevs">Saving Abbrevs</a></td>
<td>Saving the entire list of abbrevs for another session.

</td></tr>
<tr><td bgcolor="white"><a href="#Dynamic-Abbrevs">Dynamic Abbrevs</a></td>
<td>Abbreviations for words already in the buffer.

</td></tr>
<tr><td bgcolor="white"><a href="#Dabbrev-Customization">Dabbrev Customization</a></td>
<td>What is a word, for dynamic abbrevs.  Case handling.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Editing Pictures



</th></tr>
<tr><td bgcolor="white"><a href="#Basic-Picture">Basic Picture</a></td>
<td>Basic concepts and simple commands of Picture Mode.

</td></tr>
<tr><td bgcolor="white"><a href="#Insert-in-Picture">Insert in Picture</a></td>
<td>Controlling direction of cursor motion
                            after self-inserting characters.

</td></tr>
<tr><td bgcolor="white"><a href="#Tabs-in-Picture">Tabs in Picture</a></td>
<td>Various features for tab stops and indentation.

</td></tr>
<tr><td bgcolor="white"><a href="#Rectangles-in-Picture">Rectangles in Picture</a></td>
<td>Clearing and superimposing rectangles.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Dired, the Directory Editor



</th></tr>
<tr><td bgcolor="white"><a href="#Dired-Enter">Dired Enter</a></td>
<td>How to invoke Dired.

</td></tr>
<tr><td bgcolor="white"><a href="#Dired-Navigation">Dired Navigation</a></td>
<td>Special motion commands in the Dired buffer.

</td></tr>
<tr><td bgcolor="white"><a href="#Dired-Deletion">Dired Deletion</a></td>
<td>Deleting files with Dired.

</td></tr>
<tr><td bgcolor="white"><a href="#Flagging-Many-Files">Flagging Many Files</a></td>
<td>Flagging files based on their names.

</td></tr>
<tr><td bgcolor="white"><a href="#Dired-Visiting">Dired Visiting</a></td>
<td>Other file operations through Dired.

</td></tr>
<tr><td bgcolor="white"><a href="#Marks-vs-Flags">Marks vs Flags</a></td>
<td>Flagging for deletion vs marking.

</td></tr>
<tr><td bgcolor="white"><a href="#Operating-on-Files">Operating on Files</a></td>
<td>How to copy, rename, print, compress, etc.
                               either one file or several files.

</td></tr>
<tr><td bgcolor="white"><a href="#Shell-Commands-in-Dired">Shell Commands in Dired</a></td>
<td>Running a shell command on the marked files.

</td></tr>
<tr><td bgcolor="white"><a href="#Transforming-File-Names">Transforming File Names</a></td>
<td>Using patterns to rename multiple files.

</td></tr>
<tr><td bgcolor="white"><a href="#Comparison-in-Dired">Comparison in Dired</a></td>
<td>Running <code>diff</code> by way of Dired.

</td></tr>
<tr><td bgcolor="white"><a href="#Subdirectories-in-Dired">Subdirectories in Dired</a></td>
<td>Adding subdirectories to the Dired buffer.

</td></tr>
<tr><td bgcolor="white"><a href="#Subdir-Switches">Subdir Switches</a></td>
<td>Subdirectory switches in Dired.

</td></tr>
<tr><td bgcolor="white"><a href="#Subdirectory-Motion">Subdirectory Motion</a></td>
<td>Moving across subdirectories, and up and down.

</td></tr>
<tr><td bgcolor="white"><a href="#Hiding-Subdirectories">Hiding Subdirectories</a></td>
<td>Making subdirectories visible or invisible.

</td></tr>
<tr><td bgcolor="white"><a href="#Dired-Updating">Dired Updating</a></td>
<td>Discarding lines for files of no interest.

</td></tr>
<tr><td bgcolor="white"><a href="#Dired-and-Find">Dired and Find</a></td>
<td>Using <code>find</code> to choose the files for Dired.

</td></tr>
<tr><td bgcolor="white"><a href="#Wdired">Wdired</a></td>
<td>Operating on files by editing the Dired buffer.

</td></tr>
<tr><td bgcolor="white"><a href="#Image_002dDired">Image-Dired</a></td>
<td>Viewing image thumbnails in Dired.

</td></tr>
<tr><td bgcolor="white"><a href="#Misc-Dired-Features">Misc Dired Features</a></td>
<td>Various other features.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

The Calendar and the Diary



</th></tr>
<tr><td bgcolor="white"><a href="#Calendar-Motion">Calendar Motion</a></td>
<td>Moving through the calendar; selecting a date.

</td></tr>
<tr><td bgcolor="white"><a href="#Scroll-Calendar">Scroll Calendar</a></td>
<td>Bringing earlier or later months onto the screen.

</td></tr>
<tr><td bgcolor="white"><a href="#Counting-Days">Counting Days</a></td>
<td>How many days are there between two dates?

</td></tr>
<tr><td bgcolor="white"><a href="#General-Calendar">General Calendar</a></td>
<td>Exiting or recomputing the calendar.

</td></tr>
<tr><td bgcolor="white"><a href="#Writing-Calendar-Files">Writing Calendar Files</a></td>
<td>Writing calendars to files of various formats.

</td></tr>
<tr><td bgcolor="white"><a href="#Holidays">Holidays</a></td>
<td>Displaying dates of holidays.

</td></tr>
<tr><td bgcolor="white"><a href="#Sunrise_002fSunset">Sunrise/Sunset</a></td>
<td>Displaying local times of sunrise and sunset.

</td></tr>
<tr><td bgcolor="white"><a href="#Lunar-Phases">Lunar Phases</a></td>
<td>Displaying phases of the moon.

</td></tr>
<tr><td bgcolor="white"><a href="#Other-Calendars">Other Calendars</a></td>
<td>Converting dates to other calendar systems.

</td></tr>
<tr><td bgcolor="white"><a href="#Diary">Diary</a></td>
<td>Displaying events from your diary.

</td></tr>
<tr><td bgcolor="white"><a href="#Daylight-Saving">Daylight Saving</a></td>
<td>How to specify when daylight saving time is active.

</td></tr>
<tr><td bgcolor="white"><a href="#Time-Intervals">Time Intervals</a></td>
<td>Keeping track of time intervals.

</td></tr>
<tr><td bgcolor="white"><a href="#Advanced-Calendar_002fDiary-Usage">Advanced Calendar/Diary Usage</a></td>
<td>Advanced Calendar/Diary customization.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Movement in the Calendar



</th></tr>
<tr><td bgcolor="white"><a href="#Calendar-Unit-Motion">Calendar Unit Motion</a></td>
<td>Moving by days, weeks, months, and years.

</td></tr>
<tr><td bgcolor="white"><a href="#Move-to-Beginning-or-End">Move to Beginning or End</a></td>
<td>Moving to start/end of weeks, months, and years.

</td></tr>
<tr><td bgcolor="white"><a href="#Specified-Dates">Specified Dates</a></td>
<td>Moving to the current date or another
                                specific date.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Conversion To and From Other Calendars



</th></tr>
<tr><td bgcolor="white"><a href="#Calendar-Systems">Calendar Systems</a></td>
<td>The calendars Emacs understands
                             (aside from Gregorian).

</td></tr>
<tr><td bgcolor="white"><a href="#To-Other-Calendar">To Other Calendar</a></td>
<td>Converting the selected date to various calendars.

</td></tr>
<tr><td bgcolor="white"><a href="#From-Other-Calendar">From Other Calendar</a></td>
<td>Moving to a date specified in another calendar.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

The Diary



</th></tr>
<tr><td bgcolor="white"><a href="#Format-of-Diary-File">Format of Diary File</a></td>
<td>Entering events in your diary.

</td></tr>
<tr><td bgcolor="white"><a href="#Displaying-the-Diary">Displaying the Diary</a></td>
<td>Viewing diary entries and associated calendar dates.

</td></tr>
<tr><td bgcolor="white"><a href="#Date-Formats">Date Formats</a></td>
<td>Various ways you can specify dates.

</td></tr>
<tr><td bgcolor="white"><a href="#Adding-to-Diary">Adding to Diary</a></td>
<td>Commands to create diary entries.

</td></tr>
<tr><td bgcolor="white"><a href="#Special-Diary-Entries">Special Diary Entries</a></td>
<td>Anniversaries, blocks of dates, cyclic entries, etc.

</td></tr>
<tr><td bgcolor="white"><a href="#Appointments">Appointments</a></td>
<td>Reminders when it’s time to do something.

</td></tr>
<tr><td bgcolor="white"><a href="#Importing-Diary">Importing Diary</a></td>
<td>Converting diary events to/from other formats.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

More advanced features of the Calendar and Diary



</th></tr>
<tr><td bgcolor="white"><a href="#Calendar-Customizing">Calendar Customizing</a></td>
<td>Calendar layout and hooks.

</td></tr>
<tr><td bgcolor="white"><a href="#Holiday-Customizing">Holiday Customizing</a></td>
<td>Defining your own holidays.

</td></tr>
<tr><td bgcolor="white"><a href="#Mayan-Calendar">Mayan Calendar</a></td>
<td>Moving to a date specified in a Mayan calendar.

</td></tr>
<tr><td bgcolor="white"><a href="#Date-Display-Format">Date Display Format</a></td>
<td>Changing the format.

</td></tr>
<tr><td bgcolor="white"><a href="#Time-Display-Format">Time Display Format</a></td>
<td>Changing the format.

</td></tr>
<tr><td bgcolor="white"><a href="#Diary-Customizing">Diary Customizing</a></td>
<td>Defaults you can set.

</td></tr>
<tr><td bgcolor="white"><a href="#Non_002dGregorian-Diary">Non-Gregorian Diary</a></td>
<td>Diary entries based on other calendars.

</td></tr>
<tr><td bgcolor="white"><a href="#Diary-Display">Diary Display</a></td>
<td>A choice of ways to display the diary.

</td></tr>
<tr><td bgcolor="white"><a href="#Fancy-Diary-Display">Fancy Diary Display</a></td>
<td>Sorting diary entries, using included diary files.

</td></tr>
<tr><td bgcolor="white"><a href="#Sexp-Diary-Entries">Sexp Diary Entries</a></td>
<td>More flexible diary entries.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Sending Mail



</th></tr>
<tr><td bgcolor="white"><a href="#Mail-Format">Mail Format</a></td>
<td>Format of a mail message.

</td></tr>
<tr><td bgcolor="white"><a href="#Mail-Headers">Mail Headers</a></td>
<td>Details of some standard mail header fields.

</td></tr>
<tr><td bgcolor="white"><a href="#Mail-Aliases">Mail Aliases</a></td>
<td>Abbreviating and grouping mail addresses.

</td></tr>
<tr><td bgcolor="white"><a href="#Mail-Commands">Mail Commands</a></td>
<td>Special commands for editing mail being composed.

</td></tr>
<tr><td bgcolor="white"><a href="#Mail-Signature">Mail Signature</a></td>
<td>Adding a signature to every message.

</td></tr>
<tr><td bgcolor="white"><a href="#Mail-Amusements">Mail Amusements</a></td>
<td>Distracting the NSA; adding fortune messages.

</td></tr>
<tr><td bgcolor="white"><a href="#Mail-Methods">Mail Methods</a></td>
<td>Using alternative mail-composition methods.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Mail Commands



</th></tr>
<tr><td bgcolor="white"><a href="#Mail-Sending">Mail Sending</a></td>
<td>Commands to send the message.

</td></tr>
<tr><td bgcolor="white"><a href="#Header-Editing">Header Editing</a></td>
<td>Commands to move to header fields and edit them.

</td></tr>
<tr><td bgcolor="white"><a href="#Citing-Mail">Citing Mail</a></td>
<td>Quoting a message you are replying to.

</td></tr>
<tr><td bgcolor="white"><a href="#Mail-Misc">Mail Misc</a></td>
<td>Attachments, spell checking, etc.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Reading Mail with Rmail



</th></tr>
<tr><td bgcolor="white"><a href="#Rmail-Basics">Rmail Basics</a></td>
<td>Basic concepts of Rmail, and simple use.

</td></tr>
<tr><td bgcolor="white"><a href="#Rmail-Scrolling">Rmail Scrolling</a></td>
<td>Scrolling through a message.

</td></tr>
<tr><td bgcolor="white"><a href="#Rmail-Motion">Rmail Motion</a></td>
<td>Moving to another message.

</td></tr>
<tr><td bgcolor="white"><a href="#Rmail-Deletion">Rmail Deletion</a></td>
<td>Deleting and expunging messages.

</td></tr>
<tr><td bgcolor="white"><a href="#Rmail-Inbox">Rmail Inbox</a></td>
<td>How mail gets into the Rmail file.

</td></tr>
<tr><td bgcolor="white"><a href="#Rmail-Files">Rmail Files</a></td>
<td>Using multiple Rmail files.

</td></tr>
<tr><td bgcolor="white"><a href="#Rmail-Output">Rmail Output</a></td>
<td>Copying message out to files.

</td></tr>
<tr><td bgcolor="white"><a href="#Rmail-Labels">Rmail Labels</a></td>
<td>Classifying messages by labeling them.

</td></tr>
<tr><td bgcolor="white"><a href="#Rmail-Attributes">Rmail Attributes</a></td>
<td>Certain standard labels, called attributes.

</td></tr>
<tr><td bgcolor="white"><a href="#Rmail-Reply">Rmail Reply</a></td>
<td>Sending replies to messages you are viewing.

</td></tr>
<tr><td bgcolor="white"><a href="#Rmail-Summary">Rmail Summary</a></td>
<td>Summaries show brief info on many messages.

</td></tr>
<tr><td bgcolor="white"><a href="#Rmail-Sorting">Rmail Sorting</a></td>
<td>Sorting messages in Rmail.

</td></tr>
<tr><td bgcolor="white"><a href="#Rmail-Display">Rmail Display</a></td>
<td>How Rmail displays a message; customization.

</td></tr>
<tr><td bgcolor="white"><a href="#Rmail-Coding">Rmail Coding</a></td>
<td>How Rmail handles decoding character sets.

</td></tr>
<tr><td bgcolor="white"><a href="#Rmail-Editing">Rmail Editing</a></td>
<td>Editing message text and headers in Rmail.

</td></tr>
<tr><td bgcolor="white"><a href="#Rmail-Digest">Rmail Digest</a></td>
<td>Extracting the messages from a digest message.

</td></tr>
<tr><td bgcolor="white"><a href="#Rmail-Rot13">Rmail Rot13</a></td>
<td>Reading messages encoded in the rot13 code.

</td></tr>
<tr><td bgcolor="white"><a href="#Movemail">Movemail</a></td>
<td>More details of fetching new mail.

</td></tr>
<tr><td bgcolor="white"><a href="#Remote-Mailboxes">Remote Mailboxes</a></td>
<td>Retrieving mail from remote mailboxes.

</td></tr>
<tr><td bgcolor="white"><a href="#Other-Mailbox-Formats">Other Mailbox Formats</a></td>
<td>Retrieving mail from local mailboxes in
                          various formats.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Rmail Summaries



</th></tr>
<tr><td bgcolor="white"><a href="#Rmail-Make-Summary">Rmail Make Summary</a></td>
<td>Making various sorts of summaries.

</td></tr>
<tr><td bgcolor="white"><a href="#Rmail-Summary-Edit">Rmail Summary Edit</a></td>
<td>Manipulating messages from the summary.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Gnus



</th></tr>
<tr><td bgcolor="white"><a href="#Buffers-of-Gnus">Buffers of Gnus</a></td>
<td>The group, summary, and article buffers.

</td></tr>
<tr><td bgcolor="white"><a href="#Gnus-Startup">Gnus Startup</a></td>
<td>What you should know about starting Gnus.

</td></tr>
<tr><td bgcolor="white"><a href="#Gnus-Group-Buffer">Gnus Group Buffer</a></td>
<td>A short description of Gnus group commands.

</td></tr>
<tr><td bgcolor="white"><a href="#Gnus-Summary-Buffer">Gnus Summary Buffer</a></td>
<td>A short description of Gnus summary commands.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Document Viewing



</th></tr>
<tr><td bgcolor="white"><a href="#DocView-Navigation">DocView Navigation</a></td>
<td>Navigating DocView buffers.

</td></tr>
<tr><td bgcolor="white"><a href="#DocView-Searching">DocView Searching</a></td>
<td>Searching inside documents.

</td></tr>
<tr><td bgcolor="white"><a href="#DocView-Slicing">DocView Slicing</a></td>
<td>Specifying which part of a page is displayed.

</td></tr>
<tr><td bgcolor="white"><a href="#DocView-Conversion">DocView Conversion</a></td>
<td>Influencing and triggering conversion.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Running Shell Commands from Emacs



</th></tr>
<tr><td bgcolor="white"><a href="#Single-Shell">Single Shell</a></td>
<td>How to run one shell command and return.

</td></tr>
<tr><td bgcolor="white"><a href="#Interactive-Shell">Interactive Shell</a></td>
<td>Permanent shell taking input via Emacs.

</td></tr>
<tr><td bgcolor="white"><a href="#Shell-Mode">Shell Mode</a></td>
<td>Special Emacs commands used with permanent shell.

</td></tr>
<tr><td bgcolor="white"><a href="#Shell-Prompts">Shell Prompts</a></td>
<td>Two ways to recognize shell prompts.

</td></tr>
<tr><td bgcolor="white"><a href="#Shell-History">Shell History</a></td>
<td>Repeating previous commands in a shell buffer.

</td></tr>
<tr><td bgcolor="white"><a href="#Directory-Tracking">Directory Tracking</a></td>
<td>Keeping track when the subshell changes directory.

</td></tr>
<tr><td bgcolor="white"><a href="#Shell-Options">Shell Options</a></td>
<td>Options for customizing Shell mode.

</td></tr>
<tr><td bgcolor="white"><a href="#Terminal-emulator">Terminal emulator</a></td>
<td>An Emacs window as a terminal emulator.

</td></tr>
<tr><td bgcolor="white"><a href="#Term-Mode">Term Mode</a></td>
<td>Special Emacs commands used in Term mode.

</td></tr>
<tr><td bgcolor="white"><a href="#Remote-Host">Remote Host</a></td>
<td>Connecting to another computer.

</td></tr>
<tr><td bgcolor="white"><a href="#Serial-Terminal">Serial Terminal</a></td>
<td>Connecting to a serial port.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Shell Command History



</th></tr>
<tr><td bgcolor="white"><a href="#Shell-Ring">Shell Ring</a></td>
<td>Fetching commands from the history list.

</td></tr>
<tr><td bgcolor="white"><a href="#Shell-History-Copying">Shell History Copying</a></td>
<td>Moving to a command and then copying it.

</td></tr>
<tr><td bgcolor="white"><a href="#History-References">History References</a></td>
<td>Expanding ‘<samp>!</samp>’-style history references.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Using Emacs as a Server



</th></tr>
<tr><td bgcolor="white"><a href="#TCP-Emacs-server">TCP Emacs server</a></td>
<td>Listening to a TCP socket.

</td></tr>
<tr><td bgcolor="white"><a href="#Invoking-emacsclient">Invoking emacsclient</a></td>
<td>Connecting to the Emacs server.

</td></tr>
<tr><td bgcolor="white"><a href="#emacsclient-Options">emacsclient Options</a></td>
<td>Emacs client startup options.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Printing Hard Copies



</th></tr>
<tr><td bgcolor="white"><a href="#PostScript">PostScript</a></td>
<td>Printing buffers or regions as PostScript.

</td></tr>
<tr><td bgcolor="white"><a href="#PostScript-Variables">PostScript Variables</a></td>
<td>Customizing the PostScript printing commands.

</td></tr>
<tr><td bgcolor="white"><a href="#Printing-Package">Printing Package</a></td>
<td>An optional advanced printing interface.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Hyperlinking and Navigation Features



</th></tr>
<tr><td bgcolor="white"><a href="#EWW">EWW</a></td>
<td>A web browser in Emacs.

</td></tr>
<tr><td bgcolor="white"><a href="#Embedded-WebKit-Widgets">Embedded WebKit Widgets</a></td>
<td>Embedding browser widgets in Emacs buffers.

</td></tr>
<tr><td bgcolor="white"><a href="#Browse_002dURL">Browse-URL</a></td>
<td>Following URLs.

</td></tr>
<tr><td bgcolor="white"><a href="#Goto-Address-mode">Goto Address mode</a></td>
<td>Activating URLs.

</td></tr>
<tr><td bgcolor="white"><a href="#FFAP">FFAP</a></td>
<td>Finding files etc. at point.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Emacs Lisp Packages



</th></tr>
<tr><td bgcolor="white"><a href="#Package-Menu">Package Menu</a></td>
<td>Buffer for viewing and managing packages.

</td></tr>
<tr><td bgcolor="white"><a href="#Package-Statuses">Package Statuses</a></td>
<td>Which statuses a package can have.

</td></tr>
<tr><td bgcolor="white"><a href="#Package-Installation">Package Installation</a></td>
<td>Options for package installation.

</td></tr>
<tr><td bgcolor="white"><a href="#Package-Files">Package Files</a></td>
<td>Where packages are installed.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Customization



</th></tr>
<tr><td bgcolor="white"><a href="#Easy-Customization">Easy Customization</a></td>
<td>Convenient way to browse and change settings.

</td></tr>
<tr><td bgcolor="white"><a href="#Variables">Variables</a></td>
<td>Many Emacs commands examine Emacs variables
                          to decide what to do; by setting variables,
                          you can control their functioning.

</td></tr>
<tr><td bgcolor="white"><a href="#Key-Bindings">Key Bindings</a></td>
<td>The keymaps say what command each key runs.
                          By changing them, you can redefine keys.

</td></tr>
<tr><td bgcolor="white"><a href="#Init-File">Init File</a></td>
<td>How to write common customizations in the
                          initialization file.

</td></tr>
<tr><td bgcolor="white"><a href="#Authentication">Authentication</a></td>
<td>Keeping persistent authentication information.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Easy Customization Interface



</th></tr>
<tr><td bgcolor="white"><a href="#Customization-Groups">Customization Groups</a></td>
<td>How settings are classified.

</td></tr>
<tr><td bgcolor="white"><a href="#Browsing-Custom">Browsing Custom</a></td>
<td>Browsing and searching for settings.

</td></tr>
<tr><td bgcolor="white"><a href="#Changing-a-Variable">Changing a Variable</a></td>
<td>How to edit an option’s value and set the option.

</td></tr>
<tr><td bgcolor="white"><a href="#Saving-Customizations">Saving Customizations</a></td>
<td>Saving customizations for future Emacs sessions.

</td></tr>
<tr><td bgcolor="white"><a href="#Face-Customization">Face Customization</a></td>
<td>How to edit the attributes of a face.

</td></tr>
<tr><td bgcolor="white"><a href="#Specific-Customization">Specific Customization</a></td>
<td>Customizing specific settings or groups.

</td></tr>
<tr><td bgcolor="white"><a href="#Custom-Themes">Custom Themes</a></td>
<td>Collections of customization settings.

</td></tr>
<tr><td bgcolor="white"><a href="#Creating-Custom-Themes">Creating Custom Themes</a></td>
<td>How to create a new custom theme.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Variables



</th></tr>
<tr><td bgcolor="white"><a href="#Examining">Examining</a></td>
<td>Examining or setting one variable’s value.

</td></tr>
<tr><td bgcolor="white"><a href="#Hooks">Hooks</a></td>
<td>Hook variables let you specify programs for parts
                          of Emacs to run on particular occasions.

</td></tr>
<tr><td bgcolor="white"><a href="#Locals">Locals</a></td>
<td>Per-buffer values of variables.

</td></tr>
<tr><td bgcolor="white"><a href="#File-Variables">File Variables</a></td>
<td>How files can specify variable values.

</td></tr>
<tr><td bgcolor="white"><a href="#Directory-Variables">Directory Variables</a></td>
<td>How variable values can be specified by directory.

</td></tr>
<tr><td bgcolor="white"><a href="#Connection-Variables">Connection Variables</a></td>
<td>Variables which are valid for buffers with a
                           remote default directory.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Local Variables in Files



</th></tr>
<tr><td bgcolor="white"><a href="#Specifying-File-Variables">Specifying File Variables</a></td>
<td>Specifying file local variables.

</td></tr>
<tr><td bgcolor="white"><a href="#Safe-File-Variables">Safe File Variables</a></td>
<td>Making sure file local variables are safe.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Customizing Key Bindings



</th></tr>
<tr><td bgcolor="white"><a href="#Keymaps">Keymaps</a></td>
<td>Generalities.  The global keymap.

</td></tr>
<tr><td bgcolor="white"><a href="#Prefix-Keymaps">Prefix Keymaps</a></td>
<td>Keymaps for prefix keys.

</td></tr>
<tr><td bgcolor="white"><a href="#Local-Keymaps">Local Keymaps</a></td>
<td>Major and minor modes have their own keymaps.

</td></tr>
<tr><td bgcolor="white"><a href="#Minibuffer-Maps">Minibuffer Maps</a></td>
<td>The minibuffer uses its own local keymaps.

</td></tr>
<tr><td bgcolor="white"><a href="#Rebinding">Rebinding</a></td>
<td>How to redefine one key’s meaning conveniently.

</td></tr>
<tr><td bgcolor="white"><a href="#Init-Rebinding">Init Rebinding</a></td>
<td>Rebinding keys with your initialization file.

</td></tr>
<tr><td bgcolor="white"><a href="#Modifier-Keys">Modifier Keys</a></td>
<td>Using modifier keys in key bindings.

</td></tr>
<tr><td bgcolor="white"><a href="#Function-Keys">Function Keys</a></td>
<td>Rebinding terminal function keys.

</td></tr>
<tr><td bgcolor="white"><a href="#Named-ASCII-Chars">Named ASCII Chars</a></td>
<td>Distinguishing <tt class="key">TAB</tt> from <kbd>C-i</kbd>, and so on.

</td></tr>
<tr><td bgcolor="white"><a href="#Mouse-Buttons">Mouse Buttons</a></td>
<td>Rebinding mouse buttons in Emacs.

</td></tr>
<tr><td bgcolor="white"><a href="#Disabling">Disabling</a></td>
<td>Disabling a command means confirmation is required
                          before it can be executed.  This is done to protect
                          beginners from surprises.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

The Emacs Initialization File



</th></tr>
<tr><td bgcolor="white"><a href="#Init-Syntax">Init Syntax</a></td>
<td>Syntax of constants in Emacs Lisp.

</td></tr>
<tr><td bgcolor="white"><a href="#Init-Examples">Init Examples</a></td>
<td>How to do some things with an init file.

</td></tr>
<tr><td bgcolor="white"><a href="#Terminal-Init">Terminal Init</a></td>
<td>Each terminal type can have an init file.

</td></tr>
<tr><td bgcolor="white"><a href="#Find-Init">Find Init</a></td>
<td>How Emacs finds the init file.

</td></tr>
<tr><td bgcolor="white"><a href="#Init-Non_002dASCII">Init Non-ASCII</a></td>
<td>Using non-<acronym>ASCII</acronym> characters in an init file.

</td></tr>
<tr><td bgcolor="white"><a href="#Early-Init-File">Early Init File</a></td>
<td>Another init file, which is read early on.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Dealing with Emacs Trouble



</th></tr>
<tr><td bgcolor="white"><a href="#DEL-Does-Not-Delete">DEL Does Not Delete</a></td>
<td>What to do if <tt class="key">DEL</tt> doesn’t delete.

</td></tr>
<tr><td bgcolor="white"><a href="#Stuck-Recursive">Stuck Recursive</a></td>
<td>’[...]’ in mode line around the parentheses.

</td></tr>
<tr><td bgcolor="white"><a href="#Screen-Garbled">Screen Garbled</a></td>
<td>Garbage on the screen.

</td></tr>
<tr><td bgcolor="white"><a href="#Text-Garbled">Text Garbled</a></td>
<td>Garbage in the text.

</td></tr>
<tr><td bgcolor="white"><a href="#Memory-Full">Memory Full</a></td>
<td>How to cope when you run out of memory.

</td></tr>
<tr><td bgcolor="white"><a href="#Crashing">Crashing</a></td>
<td>What Emacs does when it crashes.

</td></tr>
<tr><td bgcolor="white"><a href="#After-a-Crash">After a Crash</a></td>
<td>Recovering editing in an Emacs session that crashed.

</td></tr>
<tr><td bgcolor="white"><a href="#Emergency-Escape">Emergency Escape</a></td>
<td>What to do if Emacs stops responding.

</td></tr>
<tr><td bgcolor="white"><a href="#Long-Lines">Long Lines</a></td>
<td>Mitigating slowness due to extremely long lines.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Reporting Bugs



</th></tr>
<tr><td bgcolor="white"><a href="#Known-Problems">Known Problems</a></td>
<td>How to read about known problems and bugs.

</td></tr>
<tr><td bgcolor="white"><a href="#Bug-Criteria">Bug Criteria</a></td>
<td>Have you really found a bug?

</td></tr>
<tr><td bgcolor="white"><a href="#Understanding-Bug-Reporting">Understanding Bug Reporting</a></td>
<td>How to report a bug effectively.

</td></tr>
<tr><td bgcolor="white"><a href="#Checklist">Checklist</a></td>
<td>Steps to follow for a good bug report.

</td></tr>
<tr><td bgcolor="white"><a href="#Sending-Patches">Sending Patches</a></td>
<td>How to send a patch for GNU Emacs.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Contributing to Emacs Development



</th></tr>
<tr><td bgcolor="white"><a href="#Coding-Standards">Coding Standards</a></td>
<td>GNU Emacs coding standards.

</td></tr>
<tr><td bgcolor="white"><a href="#Copyright-Assignment">Copyright Assignment</a></td>
<td>Assigning copyright to the FSF.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Command Line Arguments for Emacs Invocation



</th></tr>
<tr><td bgcolor="white"><a href="#Action-Arguments">Action Arguments</a></td>
<td>Arguments to visit files, load libraries,
                          and call functions.

</td></tr>
<tr><td bgcolor="white"><a href="#Initial-Options">Initial Options</a></td>
<td>Arguments that take effect while starting Emacs.

</td></tr>
<tr><td bgcolor="white"><a href="#Command-Example">Command Example</a></td>
<td>Examples of using command line arguments.

</td></tr>
<tr><td bgcolor="white"><a href="#Environment">Environment</a></td>
<td>Environment variables that Emacs uses.

</td></tr>
<tr><td bgcolor="white"><a href="#Display-X">Display X</a></td>
<td>Changing the default display and using remote login.

</td></tr>
<tr><td bgcolor="white"><a href="#Font-X">Font X</a></td>
<td>Choosing a font for text, under X.

</td></tr>
<tr><td bgcolor="white"><a href="#Colors-X">Colors X</a></td>
<td>Choosing display colors.

</td></tr>
<tr><td bgcolor="white"><a href="#Window-Size-X">Window Size X</a></td>
<td>Start-up window size, under X.

</td></tr>
<tr><td bgcolor="white"><a href="#Borders-X">Borders X</a></td>
<td>Internal and outer borders, under X.

</td></tr>
<tr><td bgcolor="white"><a href="#Title-X">Title X</a></td>
<td>Specifying the initial frame’s title.

</td></tr>
<tr><td bgcolor="white"><a href="#Icons-X">Icons X</a></td>
<td>Choosing what sort of icon to use, under X.

</td></tr>
<tr><td bgcolor="white"><a href="#Misc-X">Misc X</a></td>
<td>Other display options.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Environment Variables



</th></tr>
<tr><td bgcolor="white"><a href="#General-Variables">General Variables</a></td>
<td>Environment variables that all versions of Emacs use.

</td></tr>
<tr><td bgcolor="white"><a href="#Misc-Variables">Misc Variables</a></td>
<td>Certain system-specific variables.

</td></tr>
<tr><td bgcolor="white"><a href="#MS_002dWindows-Registry">MS-Windows Registry</a></td>
<td>An alternative to the environment on MS-Windows.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

X Options and Resources



</th></tr>
<tr><td bgcolor="white"><a href="#Resources">Resources</a></td>
<td>Using X resources with Emacs (in general).

</td></tr>
<tr><td bgcolor="white"><a href="#Table-of-Resources">Table of Resources</a></td>
<td>Table of specific X resources that affect Emacs.

</td></tr>
<tr><td bgcolor="white"><a href="#Lucid-Resources">Lucid Resources</a></td>
<td>X resources for Lucid menus.

</td></tr>
<tr><td bgcolor="white"><a href="#Motif-Resources">Motif Resources</a></td>
<td>X resources for Motif and LessTif menus.

</td></tr>
<tr><td bgcolor="white"><a href="#GTK-resources">GTK resources</a></td>
<td>Resources for GTK widgets.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

GTK resources



</th></tr>
<tr><td bgcolor="white"><a href="#GTK-Resource-Basics">GTK Resource Basics</a></td>
<td>Basic usage of GTK+ resources.

</td></tr>
<tr><td bgcolor="white"><a href="#GTK-Widget-Names">GTK Widget Names</a></td>
<td>How GTK+ widgets are named.

</td></tr>
<tr><td bgcolor="white"><a href="#GTK-Names-in-Emacs">GTK Names in Emacs</a></td>
<td>GTK+ widgets used by Emacs.

</td></tr>
<tr><td bgcolor="white"><a href="#GTK-styles">GTK styles</a></td>
<td>What can be customized in a GTK+ widget.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Emacs and macOS / GNUstep



</th></tr>
<tr><td bgcolor="white"><a href="#Mac-_002f-GNUstep-Basics">Mac / GNUstep Basics</a></td>
<td>Basic Emacs usage under GNUstep or macOS.

</td></tr>
<tr><td bgcolor="white"><a href="#Mac-_002f-GNUstep-Customization">Mac / GNUstep Customization</a></td>
<td>Customizations under GNUstep or macOS.

</td></tr>
<tr><td bgcolor="white"><a href="#Mac-_002f-GNUstep-Events">Mac / GNUstep Events</a></td>
<td>How window system events are handled.

</td></tr>
<tr><td bgcolor="white"><a href="#GNUstep-Support">GNUstep Support</a></td>
<td>Details on status of GNUstep support.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Emacs and Microsoft Windows/MS-DOS



</th></tr>
<tr><td bgcolor="white"><a href="#Windows-Startup">Windows Startup</a></td>
<td>How to start Emacs on Windows.

</td></tr>
<tr><td bgcolor="white"><a href="#Text-and-Binary">Text and Binary</a></td>
<td>Text files use CRLF to terminate lines.

</td></tr>
<tr><td bgcolor="white"><a href="#Windows-Files">Windows Files</a></td>
<td>File-name conventions on Windows.

</td></tr>
<tr><td bgcolor="white"><a href="#ls-in-Lisp">ls in Lisp</a></td>
<td>Emulation of <code>ls</code> for Dired.

</td></tr>
<tr><td bgcolor="white"><a href="#Windows-HOME">Windows HOME</a></td>
<td>Where Emacs looks for your <samp>.emacs</samp> and
                          where it starts up.

</td></tr>
<tr><td bgcolor="white"><a href="#Windows-Keyboard">Windows Keyboard</a></td>
<td>Windows-specific keyboard features.

</td></tr>
<tr><td bgcolor="white"><a href="#Windows-Mouse">Windows Mouse</a></td>
<td>Windows-specific mouse features.

</td></tr>
<tr><td bgcolor="white"><a href="#Windows-Processes">Windows Processes</a></td>
<td>Running subprocesses on Windows.

</td></tr>
<tr><td bgcolor="white"><a href="#Windows-Printing">Windows Printing</a></td>
<td>How to specify the printer on MS-Windows.

</td></tr>
<tr><td bgcolor="white"><a href="#Windows-Fonts">Windows Fonts</a></td>
<td>Specifying fonts on MS-Windows.

</td></tr>
<tr><td bgcolor="white"><a href="#Windows-Misc">Windows Misc</a></td>
<td>Miscellaneous Windows features.

</td></tr>
<tr><td bgcolor="white"><a href="#MS_002dDOS">MS-DOS</a></td>
<td>Using Emacs on MS-DOS.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">

Emacs and MS-DOS



</th></tr>
<tr><td bgcolor="white"><a href="#MS_002dDOS-Keyboard">MS-DOS Keyboard</a></td>
<td>Keyboard conventions on MS-DOS.

</td></tr>
<tr><td bgcolor="white"><a href="#MS_002dDOS-Mouse">MS-DOS Mouse</a></td>
<td>Mouse conventions on MS-DOS.

</td></tr>
<tr><td bgcolor="white"><a href="#MS_002dDOS-Display">MS-DOS Display</a></td>
<td>Fonts, frames and display size on MS-DOS.

</td></tr>
<tr><td bgcolor="white"><a href="#MS_002dDOS-File-Names">MS-DOS File Names</a></td>
<td>File name conventions on MS-DOS.

</td></tr>
<tr><td bgcolor="white"><a href="#MS_002dDOS-Printing">MS-DOS Printing</a></td>
<td>Printing specifics on MS-DOS.

</td></tr>
<tr><td bgcolor="white"><a href="#MS_002dDOS-and-MULE">MS-DOS and MULE</a></td>
<td>Support for internationalization on MS-DOS.

</td></tr>
<tr><td bgcolor="white"><a href="#MS_002dDOS-Processes">MS-DOS Processes</a></td>
<td>Running subprocesses on MS-DOS.

</td></tr>
<tr><th colspan="2" align="left" style="text-align:left">
</th></tr>
</tbody></table>



<a name="Distrib"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Intro" accesskey="n" rel="next">Intro</a>, Previous: <a href="#Top" accesskey="p" rel="prev">Top</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Distribution"></a>
<h2 class="unnumbered">发行版</h2>

<p>GNU Emacs是<em>自由软件</em>；这意味着在某些条件下，每个人都可以自由使用和自由重新分发它。GNU Emacs不属于公共领域；它是受版权保护的，并且对其分发有限制，但这些限制旨在允许好的合作公民想要做的一切。不允许的是试图阻止其他人进一步分享他们可能从您那里获得的任何版本的GNU Emacs。确切的条件可以在Emacs附带的GNU通用公共许可证中找到，也可以在本手册<a name="DOCF1" href="#FOOT1"><sup>1</sup></a>中找到。请参阅<a href="#Copying">复制</a>。
</p>
<p>获得GNU Emacs副本的一种方式是从其他拥有它的人那里。你不需要征得我们的许可，也不需要告诉任何人，只需拷贝就行了。如果您可以访问互联网，您可以通过匿名FTP获得GNU Emacs的最新分发版本；有关更多信息，请参阅我们网站上的<a href="https://www.gnu.org/software/emacs">https://www.gnu.org/software/emacs</a>。
</p>
<p>您还可以在购买计算机时收到GNU Emacs。计算机制造商可以按照适用于其他所有人的相同条款自由分发副本。这些条款要求他们向您提供完整的源代码，包括他们可能做出的任何更改，并允许您根据通用公共许可证的通常条款重新分发从他们那里收到的GNU Emacs。换句话说，当您获得程序时，程序必须对您免费，而不仅仅是制造商免费。
</p>
<p>如果您觉得GNU Emacs有用，请向自由软件基金会<strong>捐赠</strong>以支持我们的工作。在美国，对自由软件基金会的捐款是免税的。如果您在工作场所使用GNU Emacs，请建议公司捐款。要捐款，请参阅<a href="https://my.fsf.org/donate/">https://my.fsf.org/donate/</a>. 有关您可以提供帮助的其他方式，请参阅<a href="https://www.gnu.org/help/help.html">https://www.gnu.org/help/help.html</a>.
</p>
<a name="Printed-Books"></a><p>我们还销售本手册的硬拷贝版本和Robert J. Chassell.编写的<cite>Emacs Lisp编程入门</cite>。您可以访问我们的在线商店<a href="https://shop.fsf.org/">https://shop.fsf.org/</a>. 销售收入将用于支持基金会的目标：开发新的自由软件，并改进我们现有的程序，包括GNU Emacs。
</p>
<p>如果您需要联系自由软件基金会，请参阅<a href="https://www.fsf.org/about/contact/">https://www.fsf.org/about/contact/</a>，或写信给
</p>
<div class="display">
<pre class="display">自由软件基金会
富兰克林大街51号，五楼
马萨诸塞州波士顿，邮编：02110-1301.
美国
</pre></div>



<a name="Intro"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Screen" accesskey="n" rel="next">Screen</a>, Previous: <a href="#Distrib" accesskey="p" rel="prev">Distrib</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Introduction"></a>
<h2 class="unnumbered">简介</h2>

<p>您正在阅读关于GNU Emacs的文章，GNU Emacs是高级的、自文档化的、可定制的、可扩展的编辑器Emacs的GNU版本。(<acronym title="GNU’s Not Unix">GNU</acronym>(GNU’s Not Unix)中的“<samp>G</samp>”是发声的。)
</p>
<p>我们称Emacs<em>高级</em>是因为它不只是简单地插入和删除文本。它可以控制子进程，自动缩进程序，一次显示多个文件，编辑远程文件，就像编辑本地文件一样，等等。Emacs编辑命令根据字符、单词、行、句子、段落和页面以及各种编程语言的表达式和注释进行操作。
</p>
<p><em>自文档</em>意味着您可以随时使用称为<em>帮助命令</em>的特殊命令来找出您的选项是什么，或者找出任何命令的作用，或者查找与给定主题相关的所有命令。请参阅<a href="#Help">帮助</a>。
</p>
<p><em>可自定义</em>意味着您可以通过简单的方式轻松地更改Emacs命令的行为。例如，如果您使用的编程语言的注释以“<samp>&lt;**</samp>”开始，以“<samp>**&gt;</samp>”结束，则可以告诉Emacs注释操作命令使用这些字符串(请参见<a href="#Comments">注释</a>)。再举一个例子，您可以将基本光标移动命令(上、下、左和右)重新绑定到键盘上您觉得舒服的任何键上。请参阅<a href="#Customization">自定义</a>。
</p>
<p><em>可扩展</em>意味着您可以超越简单的自定义，创建全新的命令。新命令只是用Lisp语言编写的程序，由Emacs自己的Lisp解释器运行。甚至可以在编辑会话过程中重新定义现有命令，而不必重新启动Emacs。Emacs中的大多数编辑命令都是用Lisp编写的；少数例外可能是用Lisp编写的，但为了提高效率改用C语言实现。编写扩展就是编程，但非程序员可以在之后使用它。如果您想学习Emacs Lisp编程，请参阅<cite>Emacs Lisp编程入门</cite>中的<a href="https://www.gnu.org/software/emacs/manual/html_mono/eintr.html#Top">序言</a>。
</p>

<a name="Screen"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#User-Input" accesskey="n" rel="next">User Input</a>, Previous: <a href="#Intro" accesskey="p" rel="prev">Intro</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="The-Organization-of-the-Screen"></a>
<h2 class="chapter">1 屏幕的组织方式</h2>
<a name="index-screen"></a>
<a name="index-frame"></a>

<p>在图形显示器上，例如在使用X窗口系统的GNU/Linux上，Emacs占据一个图形窗口。在文本终端上，Emacs占据整个终端屏幕。我们将使用术语<em>窗体</em>来表示Emacs占据的图形窗口或终端屏幕。Emacs在这两种窗体上的行为非常相似。它通常只从一个窗体开始，但如果您愿意，也可以创建其他窗体(请参阅<a href="#Frames">窗体</a>)。
</p>
<p>每个窗体由几个不同的区域组成。窗体顶部有一个<em>菜单栏</em>，允许您通过一系列菜单访问命令。在图形显示器上，菜单栏正下方是<em>工具栏</em>，这是一行图标，当您单击它们时，它们会执行编辑命令。在窗体的最底部是<em>回显区</em>，在此显示信息性消息，并在Emacs要求输入信息时在其中输入信息。
</p>
<p>位于工具栏(如果存在)下方、回显区上方的窗体主区域称为<em>窗口</em>。此后，在本手册中，我们将在此意义上使用单词“窗口”。图形显示系统通常使用具有不同含义的词“窗口”；但是如上所述，我们将那些图形窗口称为“窗体”。
</p>
<p>Emacs窗口显示<em>缓冲区</em>-您正在编辑或查看的文本或其他图形。在图形显示器上，窗口的一侧有一个<em>滚动条</em>，可用于在缓冲区中滚动。窗口的最后一行是<em>状态栏</em>。这将显示有关缓冲区中正在进行的操作的各种信息，例如是否存在未保存的更改、正在使用的编辑模式、当前行号等。
</p>
<p>启动Emacs时，窗体中通常只有一个窗口。但是，您可以水平或垂直分割此窗口以创建多个窗口，每个窗口都可以独立显示一个缓冲区(请参阅<a href="#Windows">窗口</a>)。
</p>
<p>在任何时候，都有一个窗口是<em>选定窗口</em>。在图形显示器上，所选窗口显示较突出的光标(通常为实心且闪烁)；其他窗口显示较不突出的光标(通常为空心框)。在文本终端上，只有一个光标显示在所选窗口中。所选窗口中显示的缓冲区称为<em>当前缓冲区</em>，它是进行编辑的地方。大多数Emacs命令都隐式应用于当前缓冲区；显示在未选中窗口中的文本大多可见以供参考。如果在图形显示上使用多个窗体，则选择特定窗体将选择该窗体中的一个窗口。
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Point" accesskey="1">游标</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">文本中操作编辑命令的位置。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Echo-Area" accesskey="2">回显区</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">短消息显示在屏幕底部。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Mode-Line" accesskey="3">状态栏</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">状态栏的解释。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Menu-Bar" accesskey="4">菜单栏</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">如何使用菜单栏。
</td></tr>
</tbody></table>


<a name="Point"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Echo-Area" accesskey="n" rel="next">Echo Area</a>, Up: <a href="#Screen" accesskey="u" rel="up">Screen</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Point-1"></a>
<h3 class="section">1.1游标</h3>
<a name="index-point"></a>
<a name="index-cursor"></a>

<p>选定窗口中的光标是大多数编辑命令生效的位置，称为<em>游标</em><a name="DOCF2" href="#FOOT2"><sup>2</sup></a>。许多Emacs命令将游标移动到缓冲区中的不同位置；例如，您可以通过单击鼠标键1(通常是左键)将游标放在所需位置。
</p>
<p>默认情况下，所选窗口中的光标绘制为实心框，并在字符<em>上</em>显示，但您应将游标视为在两个字符<em>之间</em>；它位于光标下的字符<em>之前</em>。例如，如果您的文本看起来像“<samp>frob</samp>”，而光标位于“<samp>b</samp>”上，则游标位于“<samp>o</samp>”和“<samp>b</samp>”之间。如果在该位置插入字符“<samp>！</samp>”，则结果为“<samp>fro！b</samp>”，游标位于“<samp>！</samp>”和“<samp>b</samp>”之间。因此，光标仍然停留在“<samp>b</samp>”上，如前所述。
</p>
<p>如果在Emacs中编辑多个文件，每个文件都在自己的缓冲区中，则每个缓冲区都有自己的游标。如果稍后再次显示当前未显示的缓冲区，则它会记住其游标。此外，如果缓冲区显示在多个窗口中，则每个窗口都有自己的游标。
</p>
<p>有关控制Emacs如何显示光标的选项，请参阅<a href="#Cursor-Display">光标显示</a>。
</p>

<a name="Echo-Area"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Mode-Line" accesskey="n" rel="next">Mode Line</a>, Previous: <a href="#Point" accesskey="p" rel="prev">Point</a>, Up: <a href="#Screen" accesskey="u" rel="up">Screen</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="The-Echo-Area"></a>
<h3 class="section">1.2回显区</h3>
<a name="index-echo-area"></a>

<p>窗体最底部的一栏是<em>回音区</em>。它用于显示用于各种目的的少量文本。
</p>
<a name="index-echoing"></a>
<p>回显区之所以这样命名，是因为它的用途之一是<em>回显</em>，这意味着在您键入时显示多字符命令的字符。不回显单字符命令。如果您在输入命令时暂停超过一秒，则会回显多字符命令(请参阅<a href="#Keys">快捷键</a>)。然后，Emacs会回显到目前为止键入的所有命令字符，以提示您输入剩余部分。回显开始后，命令的剩余部分会在您键入它时立即回显。此行为旨在为自信的用户提供快速响应，同时为犹豫不决的用户提供最大反馈。
</p>
<a name="index-error-message"></a>
<a name="index-echo-area-message"></a>
<p>回显区还用于在命令无法执行其工作时显示<em>错误信息</em>。错误信息可能伴随有蜂鸣声或屏幕闪烁。
</p>
<p>某些命令在回显区域显示信息性消息，以告诉您该命令执行了什么操作，或者为您提供一些特定信息。与错误信息不同，这些<em>信息性</em>消息不会伴随蜂鸣声或闪烁。例如，<kbd>C-x=</kbd>(按住<tt class="key">Ctrl</tt>并键入<kbd>x</kbd>，然后松开<tt class="key">Ctrl</tt>并键入<kbd>=</kbd>)将显示一条消息，描述该游标的字符、其在缓冲区中的位置以及其在窗口中的当前列。耗时较长的命令通常在工作时显示以“<samp>.</samp>”结尾的消息(有时还以百分比形式指示已取得的进展)，并在补全时添加“<samp>补全</samp>”。
</p>
<a name="index-_002aMessages_002a-buffer"></a>
<a name="index-saved-echo-area-messages"></a>
<a name="index-messages-saved-from-echo-area"></a>
<a name="index-message_002dlog_002dmax"></a>
<p>信息性回显区消息保存在名为<samp>*Messages*</samp>的特殊缓冲区中。(我们尚未解释缓冲区；有关它们的详细信息，请参阅<a href="#Buffers">缓冲区</a>。)如果您错过了屏幕上短暂显示的消息，可以切换到<samp>*Messages*</samp>缓冲区再次查看。<samp>*Messages*</samp>缓冲区限制为一定的行数，由变量<code>message-log-max</code>指定。(我们也没有解释变量；有关它们的更多信息，请参阅<a href="#Variables">变量</a>。)超过此限制后，每当在末尾添加新消息行时，将从开头删除一行。
</p>
<p>有关控制Emacs如何使用回显区的选项，请参阅<a href="#Display-Custom">显示自定义</a>。
</p>
<p>回显区还用于显示<em>迷你缓冲区</em>，这是一个特殊窗口，您可以在其中为命令输入参数，例如要编辑的文件名。当迷你缓冲区正在使用时，回显区中显示的文本以<em>提示字符串</em>开头，活动光标出现在迷你缓冲区内，该窗口暂时被视为选中的窗口。您始终可以通过键入<kbd>C-g</kbd>来退出迷你缓冲区。请参见<a href="#Minibuffer">迷你缓冲区</a>。
</p>

<a name="Mode-Line"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Menu-Bar" accesskey="n" rel="next">Menu Bar</a>, Previous: <a href="#Echo-Area" accesskey="p" rel="prev">Echo Area</a>, Up: <a href="#Screen" accesskey="u" rel="up">Screen</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="The-Mode-Line"></a>
<h3 class="section">1.3状态栏</h3>
<a name="index-mode-line"></a>
<a name="index-top-level"></a>

<p>在每个窗口的底部是一个<em>状态栏</em>，它描述当前缓冲区中正在发生的事情。当只有一个窗口时，模式行显示在回声区域的正上方；它是窗体中倒数第二行。在图形显示上，状态栏以3D长方体外观绘制。Emacs通常还使用与未选择窗口不同的颜色绘制所选窗口的状态栏，以使其突出。
</p>
<p>状态栏中显示的文本格式如下：
</p>
<div class="example">
<pre class="example"> <var>cs</var>:<var>ch</var>-<var>fr</var>  <var>buf</var>      <var>pos</var> <var>line</var>   (<var>major</var> <var>minor</var>)
</pre></div>

<p>在文本终端上，此文本后面跟着一系列延伸到窗口右边缘的破折号。这些破折号在图形显示上被省略。
</p>
<p><var>cs</var>字符串及其后面的冒号字符描述了用于当前缓冲区的字符集和换行符约定。通常，Emacs会自动为您处理这些设置，但有时拥有此信息很有用。
</p>
<p><var>cs</var>描述缓冲区中文本的字符集(请参阅<a href="#Coding-Systems">编码系统</a>)。如果它是破折号(‘<samp>-</samp>’)，则表示没有特殊的字符集处理(下一段中描述的行尾约定可能除外)。“<samp>=</samp>”表示不进行任何转换，通常用于包含非文本数据的文件。其他字符表示各种<em>编码系统</em>-例如，‘<samp>1</samp>’表示ISO Latin-1。
</p>
<p>在文本终端上，<var>cs</var>前面有两个额外的字符，用于描述键盘输入和终端输出的编码系统。此外，如果您使用输入法，<var>cs</var>前面会有标识输入法的字符串(请参阅<a href="#Input-Methods">输入法</a>)。
</p>
<a name="index-end_002dof_002dline-convention_002c-mode_002dline-indication"></a>
<p><var>cs</var>&gt;后面的字符通常是冒号。如果显示不同的字符串，则表示对文件进行编码的重要行尾约定。通常，文件中的文本行由<em>换行符</em>分隔，但有时还会使用另外两个约定。MS-DOS约定使用回车字符后跟换行符；编辑此类文件时，冒号将更改为反斜杠(‘<samp>\</samp>’)或‘<samp>(DOS)</samp>’，具体取决于操作系统。较旧的Macintosh系统使用的另一个约定是使用回车符而不是换行符；当编辑这样的文件时，冒号变为正斜杠(‘<samp>/</samp>’)或‘<samp>(Mac)</samp>’。在某些系统上，对于使用换行符作为行分隔符的文件，Emacs显示“<samp>(Unix)</samp>”，而不是冒号。
</p>
<p>在为<code>emacsclient</code>创建的窗体上(请参阅<a href="#Invoking-emacsclient">调用emacsclient</a>)，下一个字符是“<samp>@</samp>”。此指示通常用于作为守护程序运行的Emacs进程的窗体(请参阅<a href="#Emacs-Server">Emacs服务器</a>)。
</p>
<p>状态栏上的下一个元素是<var>ch</var>指示的字符串。如果窗口中显示的缓冲区与磁盘上的相应文件具有相同的内容，即如果缓冲区未修改，则会显示两个破折号(‘<samp>--</samp>’)。如果修改缓冲区，它将显示两个星号(‘<samp>**</samp>’)。对于只读缓冲区，如果修改了缓冲区，则显示“<samp>%*</samp>”，否则显示“<samp>%%</samp>”。
</p>
<p><var>ch</var>后面的字符通常是破折号(‘<samp>-</samp>’)。但是，如果当前缓冲区的<code>默认目录</code>(请参阅<a href="#File-Names">文件名</a>)位于远程计算机上，则会显示“<samp>@</samp>”。
</p>
<p><var>fr</var>提供选定的窗体名(请参阅<a href="#Frames">窗体</a>)。它只出现在文本终端上。初始窗体的名称为“<samp>F1</samp>”。
</p>
<p><var>buf</var>是窗口中显示的缓冲区的名称。通常，这与您正在编辑的文件的名称相同。请参阅<a href="#Buffers">缓冲区</a>。
</p>
<p><var>pos</var>告诉您窗口顶部上方还是底部下方有其他文本。如果您的缓冲区很小，并且所有缓冲区在窗口中都可见，则<var>pos</var>为“<samp>all</samp>”。否则，如果查看的是缓冲区的开头，则为“<samp>Top</samp>”，如果查看的是缓冲区的末尾，则为“<samp>Bot</samp>”，或者为“<samp><var>nn</var>%</samp>”，其中<var>nn</var>是窗口顶部以上的缓冲区的百分比。使用尺寸指示模式，您还可以显示缓冲区的尺寸。请参阅<a href="#Optional-Mode-Line">可选状态栏</a>。
</p>
<p><var>line</var>是字符“<samp>L</samp>”，后跟游标处的行号。(通过打开列号模式，也可以显示当前列号。请参阅<a href="#Optional-Mode-Line">可选状态栏</a>。)
</p>
<p><var>major</var>是缓冲区中使用的<em>主模式</em>的名称。主模式是缓冲区的主要编辑模式，诸如文本模式、Lisp模式、C模式等。请参阅<a href="#Major-Modes">主模式</a>。某些主模式在主模式名称后显示附加信息。例如，编译缓冲区和Shell缓冲区显示子进程的状态。
</p>
<p><var>minor</var>是一些已启用的<em>辅模式</em>的列表，它们是在主模式之上提供附加功能的可选编辑模式。请参阅<a href="#Minor-Modes">辅模式</a>。
</p>
<p>某些功能在打开时会与辅模式一起列出，即使它们不是真正的辅模式。‘<samp>Narrow</samp>’表示正在显示的缓冲区的编辑仅限于其文本的一部分(请参阅<a href="#Narrowing">聚焦</a>)。“<samp>Def</samp>”表示当前正在定义键盘宏(请参阅<a href="#Keyboard-Macros">键盘宏</a>)。
</p>
<p>此外，如果Emacs在递归编辑级别内，则方括号(‘<samp>[…]</samp>‘)出现在模式周围的括号中。如果Emacs在另一个递归编辑级别中处于另一个递归编辑级别，则会出现双方括号，依此类推。由于递归编辑级别在全局范围内影响Emacs，因此这样的方括号出现在每个窗口的模式行中。请参阅<a href="#Recursive-Edit">递归编辑</a>。
</p>
<p>您可以更改状态栏的外观及其内容的格式。请参阅<a href="#Optional-Mode-Line">可选状态栏</a>。此外，状态栏是鼠标敏感的；单击模式行的不同部分可执行各种命令。请参阅<a href="#Mode-Line-Mouse">状态栏鼠标操作</a>。此外，将鼠标指针悬停在模式行的鼠标敏感部分上方会显示工具提示(请参阅<a href="#Tooltips">工具提示</a>)，其中包含有关通过单击状态栏可以调用的命令的信息。
</p>

<a name="Menu-Bar"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Mode-Line" accesskey="p" rel="prev">Mode Line</a>, Up: <a href="#Screen" accesskey="u" rel="up">Screen</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="The-Menu-Bar"></a>
<h3 class="section">1.4菜单栏</h3>
<a name="index-menu-bar"></a>

<p>每个Emacs窗体的顶部通常都有一个<em>菜单栏</em>，您可以使用它来执行常见操作。没有必要在这里列出它们，因为您可以更容易地亲眼看到它们。
</p>
<p>在支持鼠标的显示器上，您可以使用鼠标从菜单栏中选择命令。菜单项右边缘的箭头表示它通向子菜单或<em>子菜单</em>。菜单项末尾的“<samp>.</samp>”表示该命令将在实际执行任何操作之前提示您进一步输入。
</p>
<p>菜单栏中的一些命令也有普通的按键绑定；如果是这样，则在项本身之后显示一个按键绑定。若要查看菜单项的完整命令名和文档，请键入<kbd>C-h k</kbd>，然后按常规方式使用鼠标选择菜单栏(请参阅<a href="#Key-Help">按键帮助</a>)。
</p>
<a name="index-F10"></a>
<a name="index-menu_002dbar_002dopen"></a>
<a name="index-menu-bar-access-using-keyboard"></a>
<p>您也可以通过按<tt class="key">F10</tt>(运行命令<code>menu-bar-open</code>)来调用第一个菜单栏项目，而不是使用鼠标。然后，您可以使用箭头键或<kbd>C-b</kbd>、<kbd>C-f</kbd>(左/右)、<kbd>C-p</kbd>和<kbd>C-n</kbd>(上/下)来导航菜单。要激活选定的菜单项，请按<tt class="key">RET</tt>；要取消菜单导航，请按<kbd>C-g</kbd>或<kbd><span class="key">ESC</span><span class="key">ESC</span><span class="key">ESC</span></kbd>。(但是，请注意，当Emacs使用GUI工具包构建时，菜单由该工具包绘制和控制，用于取消菜单导航的键序列可能与上面的描述不同。)
</p>
<a name="index-M_002d_0060"></a>
<a name="index-tmm_002dmenubar"></a>
<a name="index-tty_002dmenu_002dopen_002duse_002dtmm"></a>
<p>在文本终端上，您可以选择访问回显区的菜单栏菜单。为此，将变量<code>tty-menu-open-use-tmm</code>自定义为非<code>nil</code>值。然后键入<tt class="key">F10</tt>将运行命令<code>tmm-menubar</code>，而不是下拉菜单。(您还可以键入<kbd>M-`</kbd>，它始终调用<code>tmm-menubar</code>。)<code>tmm-menubar</code>允许您使用键盘选择菜单项。回显区中会出现一个临时选项。您可以使用向上和向下箭头键在菜单中移动到不同的项目，然后可以键入<tt class="key">RET</tt>选择项目。每个菜单项也由字母或数字(通常是项目名称中某个单词的首字母)指定。此字母或数字与项目名称之间用“<samp>==&gt;</samp>”分隔。您可以键入项目的字母或数字来选择项目。
</p>


<a name="User-Input"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Keys" accesskey="n" rel="next">Keys</a>, Previous: <a href="#Screen" accesskey="p" rel="prev">Screen</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Kinds-of-User-Input"></a>
<h2 class="chapter">2 用户输入类型</h2>
<a name="index-input-with-the-keyboard"></a>
<a name="index-keyboard-input"></a>
<a name="index-character-set-_0028keyboard_0029"></a>
<a name="index-ASCII"></a>

<p>GNU Emacs主要设计用于键盘。虽然可以使用鼠标通过菜单栏和工具栏触发编辑命令，但效率不如使用键盘。因此，本手册主要介绍如何使用键盘进行编辑。
</p>
<a name="index-control-character"></a>
<p>Emacs中的键盘输入基于<acronym>ASCII</acronym>的高度扩展版本。通过键入相应的键来输入简单字符，如‘<samp>a</samp>’、‘<samp>B</samp>&gt;’、‘<samp>3</samp>&gt;’、‘<samp>=</samp>’和空格字符(表示为<tt class="key">SPC</tt>)。<em>控制字符</em>(如<tt class="key">RET</tt>、<tt class="key">TAB</tt>、<tt class="key">DEL</tt>、<tt class="key">ESC</tt>、<tt class="key">F1</tt>、<tt class="key">Home</tt>和<tt class="key">LEFT</tt>)也是通过这种方式输入的，非英语键盘上的某些字符也是如此(请参见<a href="#International">国际化</a>)
</p>
<a name="index-modifier-keys"></a>
<a name="index-Control"></a>
<a name="index-C_002d"></a>
<a name="index-META"></a>
<a name="index-M_002d"></a>
<a name="index-Alt-key_002c-serving-as-Meta"></a>
<p>Emacs还可以识别使用<em>修饰键</em>输入的控制字符。两个常用的修饰键是<tt class="key">Control</tt>(通常标记为<tt class="key">Ctrl</tt>)和<tt class="key">Meta</tt>(通常标记为<tt class="key">Alt</tt>)<a name="DOCF3" href="#FOOT3"><sup>3</sup></a>。例如，<kbd>Control-a</kbd>是在按住<tt class="key">Ctrl</tt>键的同时按<kbd>a</kbd>输入的，我们简称为<kbd>C-a</kbd>。类似地，<kbd><span class="key">Meta</span>-a</kbd>或简称<kbd>M-a</kbd>通过按住<tt class="key">Alt</tt>键并按<kbd>a</kbd>来输入。修饰键还可以应用于非字母数字字符，例如，<kbd>C-<span class="key">F1</span></kbd>或<kbd>M-<span class="key">LEFT</span></kbd>。
</p>
<a name="index-ESC-replacing-Meta-key"></a>
<p>您还可以使用以<tt class="key">ESC</tt>开头的双字符序列键入元字符。因此，您可以通过键入<kbd><span class="key">ESC</span>a</kbd>来输入<kbd>M-a</kbd>。您可以通过键入<kbd><span class="key">ESC</span>C-a</kbd>来输入<kbd>C-M-a</kbd>(同时按住<tt class="key">Ctrl</tt>和<tt class="key">Alt</tt>，然后按<kbd>a</kbd>)。与<tt class="key">Meta</tt>不同，<tt class="key">ESC</tt>作为单独的字符输入。键入下一个字符时不要按住<tt class="key">ESC</tt>；而是按<tt class="key">ESC</tt>并松开它，然后输入下一个字符。此功能在<tt class="key">Meta</tt>键功能不可靠的某些文本终端上非常有用。
</p>
<p>Emacs支持3个额外的修饰键，请参见<a href="#Modifier-Keys">修饰键</a>。
</p>
<a name="index-keys-stolen-by-window-manager"></a>
<a name="index-window-manager_002c-keys-stolen-by"></a>
<p>在图形显示上，窗口管理器可能会拦截一些键盘输入，包括<kbd>M-<span class="key">TAB</span></kbd>、<kbd>M-<span class="key">SPC</span></kbd>、<kbd>C-M-d</kbd>和<kbd>C-M-l</kbd>。如果遇到此问题，您可以自定义窗口管理器，使其不拦截那些键，或者重新绑定受影响的Emacs命令(请参阅<a href="#Customization">自定义</a>)。
</p>
<a name="index-input-event"></a>
<p>简单字符和控制字符以及某些非键盘输入(如鼠标单击)统称为<em>输入事件</em>。有关Emacs如何在内部处理输入事件的详细信息，请参阅<cite>Emacs Lisp参考手册</cite>中的<a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Input-Events">输入事件</a>。
</p>

<a name="Keys"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Commands" accesskey="n" rel="next">Commands</a>, Previous: <a href="#User-Input" accesskey="p" rel="prev">User Input</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Keys-1"></a>
<h2 class="chapter">3 快捷键</h2>

<p>一些Emacs命令仅由一个输入事件调用；例如，<kbd>C-f</kbd>在缓冲区中向前移动一个字符。其他命令需要调用两个或多个输入事件，例如<kbd>C-x C-f</kbd>和<kbd>C-x 4 C-f</kbd>。
</p>
<a name="index-key"></a>
<a name="index-key-sequence"></a>
<a name="index-complete-key"></a>
<a name="index-prefix-key"></a>
<p><em>键序列</em>或简称<em>快捷键</em>是把有意义的一个或多个输入事件的序列作为一个单元。如果使用按键序列调用命令，我们将其称为<em>完全键</em>；例如，<kbd>C-f</kbd>、<kbd>C-x C-f</kbd>和<kbd>C-x 4 C-f</kbd>都是完全键。如果键序列不足以调用命令，我们将其称为<em>前缀键</em>；从前面的示例中，我们可以看到<kbd>C-x</kbd>和<kbd>C-x 4</kbd>是前缀键。每个键序列要么是完全键，要么是前缀键。
</p>
<p>前缀键与随后的输入事件相结合以形成更长的按键序列。例如，<kbd>C-x</kbd>是前缀键，因此单独键入<kbd>C-x</kbd>不会调用命令；相反，Emacs会等待进一步的输入(如果暂停时间超过一秒，则会回显<kbd>C-x</kbd>键以提示输入；请参阅<a href="#Echo-Area">回显区</a>)。<kbd>C-x</kbd>与下一个输入事件组合形成两个事件的按键序列，该序列本身可以是前缀键(如<kbd>C-x 4</kbd>)，也可以是完整键(如<kbd>C-x C-f</kbd>)。键序列的长度没有限制，但实际上它们很少超过三个或四个输入事件。
</p>
<p>您不能将输入事件追加到完全键上。例如，因为<kbd>C-f</kbd>是一个完全键，所以<kbd>C-f C-k</kbd>是两个分离的键序列，而不是一个。
</p>
<p>默认情况下，Emacs中的前缀键为<kbd>C-c</kbd>, <kbd>C-h</kbd>, <kbd>C-x</kbd>, <kbd>C-x <span class="key">RET</span></kbd>, <kbd>C-x @</kbd>, <kbd>C-x a</kbd>, <kbd>C-x n</kbd>, <kbd>C-x r</kbd>, <kbd>C-x t</kbd>, <kbd>C-x v</kbd>, <kbd>C-x 4</kbd>, <kbd>C-x 5</kbd>, <kbd>C-x 6</kbd>, <tt class="key">ESC</tt>, <kbd>M-g</kbd>和 <kbd>M-o</kbd>. (<tt class="key">F1</tt> 和 <tt class="key">F2</tt> 是 <kbd>C-h</kbd> 和 <kbd>C-x 6</kbd>的别名) 这个列表不是一成不变的；如果您自定义Emacs，您可以创建新的前缀键。您甚至可以删除一些标准的键序列，尽管不建议大多数用户这样做；例如，如果删除<kbd>C-x 4</kbd>的前缀定义，则<kbd>C-x 4 C-f</kbd>将成为无效的键序列。请参阅<a href="#Key-Bindings">键绑定</a>。
</p>
<p>在前缀键后键入帮助字符(<kbd>C-h</kbd>或<tt class="key">F1</tt>)将显示以该前缀开头的命令列表。此规则的唯一例外是<tt class="key">ESC</tt>:<kbd><span class="key">ESC</span>C-h</kbd>等同于<kbd>C-M-h</kbd>，它执行完全不同的任务。但是，您可以使用<tt class="key">F1</tt>显示以<tt class="key">ESC</tt>开头的命令列表。
</p>

<a name="Commands"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Entering-Emacs" accesskey="n" rel="next">Entering Emacs</a>, Previous: <a href="#Keys" accesskey="p" rel="prev">Keys</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Keys-and-Commands"></a>
<h2 class="chapter">4 快捷键和命令</h2>

<a name="index-binding"></a>
<a name="index-command"></a>
<p>这本手册有很多段落告诉你特定的快捷键键有什么作用。但是Emacs不直接为快捷键分配含义。相反，Emacs为命名的<em>命令</em>分配含义，然后通过<em>绑定</em>到命令来赋予快捷键含义。
</p>
<p>每个命令都有一个由程序员选择的名称。名称通常由几个用短划线分隔的英文单词组成；例如，<code>next-line</code>或<code>forward-word</code>。在内部，每个命令都是一种特殊类型的Lisp<em>函数</em>，与该命令相关联的操作通过运行该函数来执行。请参阅<cite>Emacs Lisp参考手册</cite>中的<a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#What-Is-a-Function">什么是函数</a>。
</p>
<p>快捷键和命令之间的绑定记录在称为<em>键映射</em>的表中。请参阅<a href="#Keymaps">键映射</a>1&gt;。
</p>
<p>当我们说“<kbd>C-n</kbd>垂直下移一行”时，我们忽略了一个微妙的区别，这个区别在普通使用中并不相关，但对于Emacs定制至关重要。命令<code>next-line</code>是垂直向下移动。<kbd>C-n</kbd>有此效果是<em>因为</em>它绑定到<code>next-line</code>。如果将<kbd>C-n</kbd>重新绑定到命令<code>forward-word</code>，<kbd>C-n</kbd>将改为向前移动一个单词。
</p>
<p>在本手册中，我们经常将<kbd>C-n</kbd>这样的快捷键称为命令，即使严格地说，快捷键是绑定到命令的。通常，在提到运行该命令的快捷键之后，我们会在括号中说明真正执行该工作的命令的名称。例如，我们会说“命令<kbd>C-n</kbd>(<code>next-line</code>)垂直下移一行”，即<code>next-line</code>命令是垂直下移一行，正常情况下<kbd>C-n</kbd>键绑定到该命令。
</p>
<p>因为我们正在讨论定制，所以我们应该告诉您有关<em>变量</em>的内容。通常，命令的描述会说，“要更改这一点，请设置变量<code>mumble-foo</code>。”变量是用于存储值的名称。本手册中记录的大多数变量都用于自定义：Emacs的某些命令或其他部分会检查变量，并根据您设置的值采取不同的行为。您可以忽略有关变量的信息，直到您对自定义它们感兴趣为止。然后阅读有关变量的基本信息(请参阅<a href="#Variables">变量</a>)，有关特定变量的信息就有意义了。
</p>



<a name="Entering-Emacs"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Exiting" accesskey="n" rel="next">Exiting</a>, Previous: <a href="#Commands" accesskey="p" rel="prev">Commands</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Entering-Emacs-1"></a>
<h2 class="chapter">5 进入Emacs</h2>
<a name="index-entering-Emacs"></a>
<a name="index-starting-Emacs"></a>

<p>调用Emacs的通常方式是使用shell命令<code>emacs</code>。在GUI终端上运行Unix shell的终端窗口中，您可以使用<kbd>emacs &amp;</kbd>在后台运行Emacs；这样，Emacs就不会占用终端窗口，因此您可以使用它来运行其他shell命令。(有关在MS-Windows上启动Emacs的类似方法，请参阅<a href="#Windows-Startup">Windows启动</a>。)
</p>
<a name="index-startup-screen"></a>
<p>当Emacs启动时，初始窗体中显示一个名为‘<samp>*GNU Emacs*</samp>’的特殊缓冲区。此<em>启动屏幕</em>包含有关Emacs的信息，并且<em>链接</em>指向对初学者有用的常见任务。例如，激活“<samp>Emacs Tutorial</samp>”链接将打开Emacs教程；这与命令<kbd>C-h t</kbd>(<code>help-with-tutorial</code>)的作用相同。要激活链接，可以将指针移到该链接上并键入<kbd><span class="key">RET</span></kbd>，或者用<kbd>鼠标键1</kbd>(鼠标左键)单击该链接。
</p>
<p>使用命令行参数，您可以告诉Emacs在启动时立即访问一个或多个文件。例如，<code>emacs foo.txt</code>使用一个缓冲区启动Emacs，该缓冲区显示文件“<samp>foo.txt</samp>”的内容。此功能的存在主要是为了与其他编辑器兼容，这些编辑器设计为从shell启动，用于简短的编辑会话。如果以这种方式调用Emacs，初始帧将被分成两个窗口-一个显示指定的文件，另一个显示启动屏幕。请参阅<a href="#Windows">窗口</a>。
</p>
<p>通常，每次要编辑文件时都重新启动Emacs是不必要的，也是浪费的。建议使用Emacs的方法是在登录后只启动一次，然后在同一个Emacs会话中进行所有编辑。有关访问多个文件的信息，请参阅<a href="#Files">文件</a>。如果您以这种方式使用Emacs，则Emacs会话将积累有价值的上下文，如剪切板、寄存器、撤销历史和选区数据，这些都使得编辑更加方便。本手册稍后将介绍这些功能。
</p>
<p>要在Emacs运行时编辑另一个程序中的文件，可以使用<code>emacsclient</code>帮助程序在现有Emacs会话中打开文件。请参阅<a href="#Emacs-Server">Emacs服务器</a>。
</p>
<p>Emacs接受其他命令行参数，这些参数告诉它加载某些Lisp文件，将初始窗体放在哪里，等等。请参阅<a href="#Emacs-Invocation">Emacs调用</a>。
</p>
<a name="index-inhibit_002dstartup_002dscreen"></a>
<p>如果变量<code>inhibit-startup-screen</code>为非<code>nil</code>，则Emacs不显示启动屏幕。在这种情况下，如果在命令行上指定了一个或多个文件，则Emacs只显示这些文件；否则，它将显示名为<samp>*scratch*</samp>的缓冲区，该缓冲区可用于以交互方式计算Emacs Lisp表达式。请参见<a href="#Lisp-Interaction">Lisp交互</a>。您可以使用自定义功能(请参见<a href="#Easy-Customization">轻松自定义</a>)或通过编辑初始化文件(请参见<a href="#Init-File">初始化文件</a>)来设置变量<code>inhibit-startup-screen</code>。<a name="DOCF4" href="#FOOT4"><sup>4</sup></a>
</p>
<p>您还可以通过将变量<code>initial-buffer-choice</code>设置为命名文件或目录的字符串，强制Emacs在启动时显示该文件或目录。<code>initial-buffer-choice</code>的值也可以是一个函数(没有参数)，它应该返回一个缓冲区，然后显示该缓冲区。如果<code>initial-buffer-option</code>不是<code>nil</code>，那么如果您在命令行上指定任何文件，Emacs仍然会访问它们，但最初不会显示它们。
</p>

<a name="Exiting"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Basic" accesskey="n" rel="next">Basic</a>, Previous: <a href="#Entering-Emacs" accesskey="p" rel="prev">Entering Emacs</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Exiting-Emacs"></a>
<h2 class="chapter">6 退出Emacs</h2>
<a name="index-exiting"></a>
<a name="index-killing-Emacs"></a>
<a name="index-leaving-Emacs"></a>
<a name="index-quitting-Emacs"></a>

<dl compact="compact">
<dt><kbd>C-x C-c</kbd></dt>
<dd><p>终止Emacs(<code>save-buffers-kill-terminal</code>)。
</p></dd>
<dt><kbd>C-z</kbd></dt>
<dd><p>在文本终端上挂起Emacs；在图形显示器上，图标化(或“最小化”)选定的窗体(<code>suspend-frame</code>)。
</p></dd>
</dl>

<a name="index-C_002dx-C_002dc"></a>
<a name="index-save_002dbuffers_002dkill_002dterminal"></a>
<p><em>终止</em>Emacs意味着终止Emacs程序。为此，请键入<kbd>C-x C-c</kbd>(<code>save-buffers-kill-terminal</code>)。使用两个字符的按键序列是为了增加意外键入的难度。如果在您键入<kbd>C-x C-c</kbd>时有任何修改过的文件访问缓冲区，Emacs会首先提示保存这些缓冲区。如果不全部保存，系统会再次要求确认，因为未保存的更改将丢失。Emacs还要求确认是否有任何子进程仍在运行，因为终止Emacs也会终止子进程(请参阅<a href="#Shell">Shell</a>)。
</p>
<p><kbd>C-x C-c</kbd>在使用Emacs作为服务器时会有特殊行为。如果您从客户端窗体中键入它，它将关闭客户端连接。请参阅<a href="#Emacs-Server">Emacs服务器</a>。
</p>
<p>当您终止Emacs时，Emacs可以选择性地记录某些会话信息，例如您当时正在访问的文件。此信息在下次启动Emacs时可用。请参阅<a href="#Saving-Emacs-Sessions">保存Emacs会话</a>。
</p>
<a name="index-confirm_002dkill_002demacs"></a>
<p>如果变量<code>confirm-kill-emacs</code>的值非<code>nil</code>，则<kbd>C-x C-c</kbd>假定其值是谓词函数(译者注: 返回值为布尔类型)，并调用该函数。如果函数调用的结果为非<code>nil</code>，会话将被终止，否则Emacs将继续运行。用作<code>confirm-kill-emacs</code>值的一个方便函数是<code>yes-or-no-p</code>函数。<code>confirm-kill-emacs</code>的默认值为<code>nil</code>。
</p>
<a name="index-confirm_002dkill_002dprocesses"></a>
<p>如果变量<code>confirm-kill-process</code>的值为<code>nil</code>，则<kbd>C-x C-c</kbd>在终止Emacs启动的子进程之前不会要求确认。默认情况下，该值为<code>t</code>。
</p>
<p>要进一步自定义退出Emacs时发生的情况，请参阅<cite>GNU Emacs Lisp参考手册</cite>中的<a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Killing-Emacs">终止Emacs</a>。
</p>
<a name="index-kill_002demacs"></a>
<p>要在不提示保存的情况下终止Emacs，请键入<kbd>M-x kill-emacs</kbd>。
</p>
<a name="index-C_002dz"></a>
<a name="index-suspend_002dframe"></a>
<a name="index-minimizing"></a>
<a name="index-iconifying"></a>
<a name="index-suspending"></a>
<p><kbd>C-z</kbd>运行命令<code>suspend-frame</code>。在图形显示上，此命令<em>最小化</em>(或<em>图标化</em>)选定的Emacs窗体，以允许您稍后将其恢复的方式将其隐藏(隐藏的确切方式取决于窗口系统)。在文本终端上，<kbd>C-z</kbd>命令<em>挂起</em>emacs，暂时停止程序并将控制权返回给父进程(通常是shell)；在大多数shell中，挂起Emacs后，您可以使用shell命令<code>%emacs</code>恢复Emacs。
</p>
<p>文本终端通常会监听某些特殊字符，这些字符的含义是终止或挂起您正在运行的程序。<b>此终端功能在您处于Emacs中时关闭。</b>在Emacs中，<kbd>C-z</kbd>和<kbd>C-x C-c</kbd>作为快捷键键的含义源于在几个操作系统上使用<kbd>C-z</kbd>和<kbd>C-c</kbd>作为停止或终止程序的字符，但这是它们与操作系统唯一的关系。您可以自定义这些键以运行您选择的任何命令(请参阅<a href="#Keymaps">键绑定</a>)。
</p>

<a name="Basic"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Minibuffer" accesskey="n" rel="next">Minibuffer</a>, Previous: <a href="#Exiting" accesskey="p" rel="prev">Exiting</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Basic-Editing-Commands"></a>
<h2 class="chapter">7 基本编辑命令</h2>

<a name="index-C_002dh-t"></a>
<a name="index-help_002dwith_002dtutorial"></a>
<p>在这里，我们将介绍如何输入文本、进行更正以及将文本保存到文件中的基础知识。如果您对本材料不熟悉，我们建议您首先运行Emacs实践学习教程，方法是键入<kbd>C-h t</kbd>(<code>help-with-tutorial</code>)。
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><th colspan="3" align="left" valign="top"><pre class="menu-comment">
</pre></th></tr><tr><td align="left" valign="top">• <a href="#Inserting-Text" accesskey="1">插入文本</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">只需键入文本即可插入文本。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Moving-Point" accesskey="2">移动游标</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">将光标移动到要更改某些内容的位置。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Erasing" accesskey="3">删除</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">删除文本。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Basic-Undo" accesskey="4">撤销基础</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">撤消文本中最近的更改。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Basic-Files" accesskey="5">文件</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">访问、创建和保存文件。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Basic-Help" accesskey="6">帮助</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">询问一个字符是做什么的。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Blank-Lines" accesskey="7">空行</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">选择和删除空行。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Continuation-Lines" accesskey="8">连续行</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Emacs如何显示屏幕无法显示的行。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Position-Info" accesskey="9">位置信息</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">游标处于哪一行、那一列？
</td></tr>
<tr><td align="left" valign="top">• <a href="#Arguments">参数</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">用于将命令重复N次的数字参数。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Repeating">重复</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">快速重复前面的命令。
</td></tr>
</tbody></table>


<a name="Inserting-Text"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Moving-Point" accesskey="n" rel="next">Moving Point</a>, Up: <a href="#Basic" accesskey="u" rel="up">Basic</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Inserting-Text-1"></a>
<h3 class="section">7.1插入文本</h3>

<a name="index-insertion"></a>
<a name="index-graphic-characters"></a>
<p>您可以通过键入关联键插入普通<em>图形字符</em>(例如，“<samp>a</samp>”、“<samp>B</samp>”、“<samp>3</samp>”和“<samp>=</samp>”)。这将在游标处将字符添加到缓冲区。插入会将游标向前移动，因此该指针将保留在插入的文本之后。请参阅<a href="#Point">游标</a>。
</p>
<a name="index-RET"></a>
<a name="index-C_002dj"></a>
<a name="index-newline"></a>
<p>若要结束一行并开始新行，请键入<tt class="key">RET</tt>(<code>newline</code>)。(<tt class="key">RET</tt>键可能标记为<tt class="key">Return</tt>、<tt class="key">Enter</tt>，或者键盘上有一个外观滑稽的向左箭头，但我们在本手册中将其称为<tt class="key">RET</tt>。)该命令将换行符插入缓冲区，然后根据主模式缩进(请参阅<a href="#Indentation">缩进</a>)。如果游标在行尾，则效果是在它之后创建新的空行并缩进新行；如果游标在行的中间，则该行将在该位置拆分。要关闭自动缩进，您可以禁用电子缩进模式(请参阅<a href="#Indent-Convenience">缩进便利性</a>)或键入<kbd>C-j</kbd>，它只插入换行符，而不自动缩进。
</p>
<p>正如我们在本手册后面部分所解释的，您可以通过打开<em>辅模式</em>来更改Emacs处理文本插入的方式。例如，称为自动填充模式的辅模式会在行过长时自动拆分行(请参阅<a href="#Filling">填充</a>)。称为覆盖模式的辅模式会导致插入的字符替换(覆盖)现有文本，而不是将其推到右侧。请参阅<a href="#Minor-Modes">辅模式</a>。
</p>
<a name="index-quoting"></a>
<a name="index-C_002dq"></a>
<a name="index-quoted_002dinsert"></a>
<p>只有图形字符可以通过键入相关键来插入；其他键充当编辑命令，不会自行插入。例如，<tt class="key">DEL</tt>默认情况下运行命令<code>delete-back-char</code>(某些模式将其绑定到不同的命令)；它不插入文字“<samp>DEL</samp>”字符(<acronym>ASCII</acronym>字符代码127)。
</p>
<p>若要插入非图形字符或键盘不支持的字符，请先通过键入<kbd>C-q</kbd>(<code>quoted-insert</code>)对其加<em>引号</em>。<kbd>C-q</kbd>有两种使用方式：
</p>
<ul>
<li> <kbd>C-q</kbd>后跟任何非图形字符(甚至<kbd>C-g</kbd>)都会插入该字符。例如，<kbd>C-q<span class="key">DEL</span></kbd>插入文字“<samp>DEL</samp>”字符。

</li><li> <kbd>C-q</kbd>后跟一个八进制数字序列插入具有指定八进制字符代码的字符。您可以使用任意数量的八进制数字；任何非数字都可以终止序列。如果终止字符是<tt class="key">RET</tt>，则<tt class="key">RET</tt>仅用于终止序列。任何其他非数字都会终止序列，然后充当正常输入-因此，<kbd>C-q 1 0 1 B</kbd>插入‘<samp>AB</samp>’。

<p>在普通的非二进制覆盖模式下禁用八进制序列，以便为您提供插入数字而不是用其覆盖的便捷方式。
</p></li></ul>

<a name="index-read_002dquoted_002dchar_002dradix"></a>
<p>要使用十进制或十六进制而不是八进制，请将变量<code>read-quoted-char-radix</code>设置为10或16。如果基数是16，字母<kbd>a</kbd>到<kbd>f</kbd>将作为字符代码的一部分，就像数字一样。忽略大小写。
</p>
<a name="index-insert_002dchar"></a>
<a name="index-C_002dx-8"></a>
<a name="index-Unicode-characters_002c-inserting"></a>
<a name="index-insert-Unicode-character"></a>
<a name="index-characters_002c-inserting-by-name-or-code_002dpoint"></a>
<a name="index-curly-quotes_002c-inserting"></a>
<a name="index-curved-quotes_002c-inserting"></a>
<p>可以通过以<kbd>C-x 8</kbd>开头的命令插入一些常见的Unicode字符。例如，<kbd>C-x 8 [</kbd>inserts<tt>‘</tt>，它是Unicode代码点U+2018<small>左单引号</small>，有时称为左单引号“弯曲引号”或“卷引号”。同样，<kbd>C-x 8 ]</kbd>、<kbd>C-x 8 {</kbd>和<kbd>C-x 8 }</kbd>分别插入弧形引号<tt>‘</tt>、<tt>“</tt>和<tt>”</tt>。此外，工作的<tt class="key">Alt</tt>键类似于<kbd>C-x 8</kbd>(除非后面紧跟<tt class="key">RET</tt>)；例如，<kbd>A-[</kbd>类似于<kbd>C-x 8 [</kbd>并插入<tt>‘</tt>。若要查看哪些字符具有<kbd>C-x 8</kbd>速记，请键入<kbd>C-x 8 C-h</kbd>。
</p>
<p>或者，您可以使用命令<kbd>C-x 8<span class="key">RET</span></kbd>(<code>insert-char</code>)。这会提示使用迷你缓冲区输入字符的Unicode名称或编码。如果输入名称，该命令将提供补全(请参见<a href="#Completion">补全</a>)。如果输入编码，它应该是十六进制数字(Unicode的约定)或具有指定基数的数字，例如，<code>#o23072</code>(八进制)；请参阅<cite>Emacs Lisp参考手册</cite>中的<a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Integer-Basics">整数基础</a>。然后，该命令将相应的字符插入到缓冲区中。
</p>
<p>例如，以下所有代码都插入相同的字符：
</p>
<div class="example">
<pre class="example"><kbd>C-x 8 <span class="key">RET</span> left single quotation mark <span class="key">RET</span></kbd>
<kbd>C-x 8 <span class="key">RET</span> left sin <span class="key">TAB</span> <span class="key">RET</span></kbd>
<kbd>C-x 8 <span class="key">RET</span> 2018 <span class="key">RET</span></kbd>
<kbd>C-x 8 [</kbd>
<kbd>A-[</kbd>  <span class="roman">(if the Alt key works)</span>
<kbd>`</kbd>    <span class="roman">(in Electric Quote mode)</span>
</pre></div>

<p><kbd>C-q</kbd>或<kbd>C-x 8 ...</kbd>的数字参数指定要插入多少个字符副本(请参阅<a href="#Arguments">参数</a>)。
</p>
<p>此外，在某些上下文中，如果<kbd>像这样</kbd>使用重音符和撇号键入引号，则即使没有<kbd>C-x 8</kbd>命令，也会使用单引号将其转换为<tt>‘这种’</tt>形式。同样，使用双重音符和撇号键入引号<kbd>``像这样‘’</kbd>会将其转换为使用双引号的形式<tt>“像这样”</tt>。请参阅<a href="#Quotation-Marks">引号</a>。
</p>

<a name="Moving-Point"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Erasing" accesskey="n" rel="next">Erasing</a>, Previous: <a href="#Inserting-Text" accesskey="p" rel="prev">Inserting Text</a>, Up: <a href="#Basic" accesskey="u" rel="up">Basic</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Changing-the-Location-of-Point"></a>
<h3 class="section">7.2更改游标的位置</h3>

<a name="index-arrow-keys"></a>
<a name="index-moving-point"></a>
<a name="index-movement"></a>
<a name="index-cursor-motion"></a>
<a name="index-moving-the-cursor"></a>
<p>要做的不仅仅是插入字符，您必须知道如何移动游标(请参阅<a href="#Point">游标</a>)。键盘命令<kbd>C-f</kbd>、<kbd>C-b</kbd>、<kbd>C-n</kbd>和<kbd>C-p</kbd>分别指向右、左、下和上。您还可以使用大多数键盘上的<em>箭头键</em>移动游标：<tt class="key">RIGHT</tt>、<tt class="key">LEFT</tt>、<tt class="key">DOWN</tt>和<tt class="key">UP</tt>；但是，许多Emacs用户发现使用箭头键比使用控制键要慢，因为您需要将手移动到这些键所在的键盘区域。
</p>
<p>您也可以单击鼠标左键将游标移动到单击的位置。Emacs还提供了以更复杂的方式移动点的各种附加键盘命令。
</p>
<dl compact="compact">
<dt><kbd>C-f</kbd></dt>
<dd><a name="index-C_002df"></a>
<a name="index-forward_002dchar"></a>
<p>向前移动一个字符(<code>forward-char</code>)。
</p>
</dd>
<dt><kbd><span class="key">RIGHT</span></kbd></dt>
<dd><a name="index-RIGHT"></a>
<a name="index-right_002dchar"></a>
<p>此命令(<code>right-char</code>)的行为类似于<kbd>C-f</kbd>，但游标位于从右向左的段落时除外(请参阅<a href="#Bidirectional-Editing">双向编辑</a>)。
</p>
</dd>
<dt><kbd>C-b</kbd></dt>
<dd><a name="index-C_002db"></a>
<a name="index-backward_002dchar"></a>
<p>向后移动一个字符(<code>backward-char</code>)。
</p>
</dd>
<dt><kbd><span class="key">LEFT</span></kbd></dt>
<dd><a name="index-LEFT"></a>
<a name="index-left_002dchar"></a>
<p>此命令(<code>left-char</code>)的行为类似于<kbd>C-b</kbd>，除非当前段落是从右向左的(请参阅<a href="#Bidirectional-Editing">双向编辑</a>)。
</p>
</dd>
<dt><kbd>C-n</kbd></dt>
<dt><kbd><span class="key">DOWN</span></kbd></dt>
<dd><a name="index-C_002dn"></a>
<a name="index-DOWN"></a>
<a name="index-next_002dline"></a>
<p>向下移动一个屏幕行(<code>next-line</code>)。此命令尝试保持水平位置不变，因此如果您从一行的中间开始，则会移动到下一行的中间。
</p>
</dd>
<dt><kbd>C-p</kbd></dt>
<dt><kbd><span class="key">UP</span></kbd></dt>
<dd><a name="index-C_002dp"></a>
<a name="index-UP"></a>
<a name="index-previous_002dline"></a>
<p>上移一个屏幕行(<code>previous-line</code>)。此命令保留行内的位置，如<kbd>C-n</kbd>。
</p>
</dd>
<dt><kbd>C-a</kbd></dt>
<dt><kbd><span class="key">Home</span></kbd></dt>
<dd><a name="index-C_002da"></a>
<a name="index-HOME"></a>
<a name="index-move_002dbeginning_002dof_002dline"></a>
<p>移至行首(<code>move-beginning-of-line</code>)。
</p>
</dd>
<dt><kbd>C-e</kbd></dt>
<dt><kbd><span class="key">End</span></kbd></dt>
<dd><a name="index-C_002de"></a>
<a name="index-END"></a>
<a name="index-move_002dend_002dof_002dline"></a>
<p>移到行尾(<code>move-end-of-line</code>)。
</p>
</dd>
<dt><kbd>M-f</kbd></dt>
<dd><p>向前移动一个字(<code>forward-word</code>)。请参阅<a href="#Words">词</a>。
</p>
</dd>
<dt><kbd>C-<span class="key">RIGHT</span></kbd></dt>
<dt><kbd>M-<span class="key">RIGHT</span></kbd></dt>
<dd><a name="index-C_002dRIGHT"></a>
<a name="index-M_002dRIGHT"></a>
<a name="index-right_002dword"></a>
<p>此命令(<code>right-word</code>)的行为与<kbd>M-f</kbd>类似，不同之处在于，如果当前段落是从右向左的，则它将<em>向后</em>移动一个单词。请参阅<a href="#Bidirectional-Editing">双向编辑</a>。
</p>
</dd>
<dt><kbd>M-b</kbd></dt>
<dd><p>向后移动一个单词(<code>backward-word</code>)。请参阅<a href="#Words">词</a>。
</p>
</dd>
<dt><kbd>C-<span class="key">LEFT</span></kbd></dt>
<dt><kbd>M-<span class="key">LEFT</span></kbd></dt>
<dd><a name="index-C_002dLEFT"></a>
<a name="index-M_002dLEFT"></a>
<a name="index-left_002dword"></a>
<p>此命令(<code>left-word</code>)的行为与<kbd>M-b</kbd>类似，不同之处在于，如果当前段落是从右向左的，则它将<em>向前移动</em>一个单词。请参阅<a href="#Bidirectional-Editing">双向编辑</a>。
</p>
</dd>
<dt><kbd>M-r</kbd></dt>
<dd><a name="index-M_002dr"></a>
<a name="index-move_002dto_002dwindow_002dline_002dtop_002dbottom"></a>
<p>在不移动屏幕上的文本的情况下，将指针重新定位在窗口最中间文本行的左边距上；在随后的连续调用中，按循环顺序将指针移动到最顶行、最底行的左边距，依此类推(<code>move-to-window-line-top-bottom</code>)。
</p>
<p>一个数字参数表示从窗口顶部开始向下计数，将游标放在哪个屏幕行上(零表示顶行)。负参数从底部向上计数行(-1表示底线)。有关数值参数的详细信息，请参阅<a href="#Arguments">参数</a>。
</p>
</dd>
<dt><kbd>M-&lt;</kbd></dt>
<dd><a name="index-M_002d_003c"></a>
<a name="index-beginning_002dof_002dbuffer"></a>
<p>移动到缓冲区的顶部(<code>beginning-of-buffer</code>)。使用数字参数<var>n</var>，从顶部移动到路径的<var>n</var>/10在图形显示上，<kbd>C-<span class="key">HOME</span></kbd>执行同样的操作。
</p>
</dd>
<dt><kbd>M-&gt;</kbd></dt>
<dd><a name="index-M_002d_003e"></a>
<a name="index-C_002dEND"></a>
<a name="index-end_002dof_002dbuffer"></a>
<p>移动到缓冲区末尾(<code>end-of-buffer</code>)。在图形显示上，<kbd>C-<span class="key">END</span></kbd>执行同样的操作。
</p>
</dd>
<dt><kbd>C-v</kbd></dt>
<dt><kbd><span class="key">PageDown</span></kbd></dt>
<dt><kbd><span class="key">next</span></kbd></dt>
<dd><a name="index-C_002dv"></a>
<a name="index-PageDown"></a>
<a name="index-next"></a>
<p>将显示屏向前滚动一屏，如有必要，在屏幕上移动游标(<code>scroll-up-command</code>)。请参阅<a href="#Scrolling">滚动</a>。
</p>
</dd>
<dt><kbd>M-v</kbd></dt>
<dt><kbd><span class="key">PageUp</span></kbd></dt>
<dt><kbd><span class="key">prior</span></kbd></dt>
<dd><a name="index-M_002dv"></a>
<a name="index-PageUp"></a>
<a name="index-prior"></a>
<p>向后滚动一屏，必要时在屏幕上移动游标(<code>scroll-down-command</code>)。请参阅<a href="#Scrolling">滚动</a>。
</p>
</dd>
<dt><kbd>M-g c</kbd></dt>
<dd><a name="index-M_002dg-c"></a>
<a name="index-goto_002dchar"></a>
<p>读取数字<var>n</var>并将指针移动到缓冲区位置<var>n</var>。位置1是缓冲区的开始。
</p>
</dd>
<dt><kbd>M-g M-g</kbd></dt>
<dt><kbd>M-g g</kbd></dt>
<dd><a name="index-M_002dg-M_002dg"></a>
<a name="index-M_002dg-g"></a>
<a name="index-goto_002dline"></a>
<p>读取数字<var>n</var>并将指针移动到行号<var>n</var>的开头(<code>goto-line</code>)。第1行是缓冲区的开始。如果游标处于打开状态或恰好在缓冲区中的数字之后，则这是<var>n</var>的默认设置。只需在迷你缓冲区中键入<tt class="key">RET</tt>即可使用它。您还可以通过向<kbd>M-g M-g</kbd>提供数字前缀参数来指定<var>n</var>。有关<kbd>M-g M-g</kbd>在为其提供纯前缀参数时的行为，请参阅<a href="#Select-Buffer">选择缓冲区</a>。
</p>
</dd>
<dt><kbd>M-g <span class="key">TAB</span></kbd></dt>
<dd><a name="index-M_002dg-TAB"></a>
<a name="index-move_002dto_002dcolumn"></a>
<p>读取一个数字<var>n</var>并移动到当前行中的列<var>n</var>。列0是最左边的列。如果使用前缀参数调用，请移动到参数的数字值指定的列号。
</p>
</dd>
<dt><kbd>C-x C-n</kbd></dt>
<dd><a name="index-C_002dx-C_002dn"></a>
<a name="index-set_002dgoal_002dcolumn"></a>
<p>将当前游标所在的列用作当前缓冲区中<kbd>C-n</kbd>和<kbd>C-p</kbd>(<code>set-target-column</code>)的<em>半永久目标列</em>。当半永久性目标列生效时，这些命令始终在垂直移动后尝试移动到该列或尽可能靠近该列。目标列在取消之前保持有效。
</p>
</dd>
<dt><kbd>C-u C-x C-n</kbd></dt>
<dd><p>取消目标列。此后，<kbd>C-n</kbd>和<kbd>C-p</kbd>像往常一样尝试保持水平位置。
</p></dd>
</dl>

<a name="index-line_002dmove_002dvisual"></a>
<p>当缓冲区中的一行文本长于窗口宽度时，Emacs通常将其显示在两个或多个<em>屏幕行</em>上。为方便起见，<kbd>C-n</kbd>和<kbd>C-p</kbd>逐行移动指针，等价键<kbd><span class="key">down</span></kbd>和<kbd><span class="key">up</span></kbd>也是如此。通过将变量<code>line-move-visual</code>设置为<code>nil</code>，可以强制这些命令根据<em>逻辑行</em>(即根据缓冲区中的文本行)移动；如果一个逻辑行占据多个屏幕行，则光标将跳过附加的屏幕行。有关详细信息，请参阅<a href="#Continuation-Lines">连续行</a>。有关如何设置<code>line-move-visual</code>等变量的信息，请参阅<a href="#Variables">变量</a>。
</p>
<p>与<kbd>C-n</kbd>和<kbd>C-p</kbd>不同，大多数适用于行的Emacs命令都适用于<em>逻辑行</em>。例如，<kbd>C-a</kbd>(<code>move-beginning-of-line</code>)和<kbd>C-e</kbd>(<code>move-end-of-line</code>)分别移动到逻辑行的开始和结束。每当我们遇到在屏幕行上工作的命令时，例如<kbd>C-n</kbd>和<kbd>C-p</kbd>，我们都会指出这些命令。
</p>
<a name="index-track_002deol"></a>
<p>当<code>line-move-visual</code>为<code>nil</code>时，您还可以将变量<code>track-eol</code>设置为非<code>nil</code>值。然后<kbd>C-n</kbd>和<kbd>C-p</kbd>从逻辑行的末尾开始，移动到下一个逻辑行的末尾。正常情况下，<code>track-eol</code>为<code>nil</code>。
</p>
<a name="index-next_002dline_002dadd_002dnewlines"></a>
<p>当您在缓冲区的最后一行使用它时，<kbd>C-n</kbd>通常会在缓冲区末尾停止。但是，如果将变量<code>next-line-add-newlines</code>设置为非<code>nil</code>值，则缓冲区最后一行上的<kbd>C-n</kbd>将在末尾创建一个附加行并向下移动。
</p>

<a name="Erasing"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Basic-Undo" accesskey="n" rel="next">Basic Undo</a>, Previous: <a href="#Moving-Point" accesskey="p" rel="prev">Moving Point</a>, Up: <a href="#Basic" accesskey="u" rel="up">Basic</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Erasing-Text"></a>
<h3 class="section">7.3擦除文本</h3>
<a name="index-killing-characters-and-lines"></a>
<a name="index-deleting-characters-and-lines"></a>
<a name="index-erasing-characters-and-lines"></a>

<dl compact="compact">
<dt><kbd><span class="key">DEL</span></kbd></dt>
<dt><kbd><span class="key">BACKSPACE</span></kbd></dt>
<dd><p>删除游标之前的字符，或者如果选区处于活动状态(<code>delete-back-char</code>)。
</p>
</dd>
<dt><kbd><span class="key">Delete</span></kbd></dt>
<dd><p>删除游标之后的字符，如果选区处于活动状态，则将其删除(<code>delete-ward-char</code>)。
</p>
</dd>
<dt><kbd>C-d</kbd></dt>
<dd><p>删除游标后的字符(<code>delete-char</code>)。
</p>
</dd>
<dt><kbd>C-k</kbd></dt>
<dd><p>删除到行尾(<code>kill-line</code>)。
</p>
</dd>
<dt><kbd>M-d</kbd></dt>
<dd><p>向前删除到下一个单词的末尾(<code>kill-word</code>)。
</p>
</dd>
<dt><kbd>M-<span class="key">DEL</span></kbd></dt>
<dt><kbd>M-<span class="key">BACKSPACE</span></kbd></dt>
<dd><p>向后删除到前一个单词的开头(<code>backward-kill-word</code>)。
</p></dd>
</dl>

<p><kbd><span class="key">DEL</span></kbd>(<code>delete-back-char</code>)命令删除游标之前的字符，将光标及其后面的字符向后移动。如果游标位于行的开头，则会删除前面的换行符，将此行与上一行合并。
</p>
<p>但是，如果选区处于活动状态，则<kbd><span class="key">DEL</span></kbd>会删除该区域中的文本。有关区域的说明，请参阅<a href="#Mark">标记</a>。
</p>
<p>在大多数键盘上，<tt class="key">DEL</tt>标记为<tt class="key">BACKSPACE</tt>，但在本手册中我们将其称为<tt class="key">DEL</tt>。(不要将<tt class="key">DEL</tt>与<tt class="key">Delete</tt>键混淆；我们将稍后讨论<tt class="key">Delete</tt>。)在某些文本终端上，Emacs可能无法正确识别<tt class="key">DEL</tt>键。如果您遇到此问题，请参阅<a href="#DEL-Does-Not-Delete">DEL不是Delete</a>。
</p>
<p><tt class="key">Delete</tt>(<code>delete-ward-char</code>)命令以相反的方向删除：它删除游标之后的字符，即光标下的字符。如果点在一条线的末尾，这会将下面的线连接到这条线上。与<kbd><span class="key">DEL</span></kbd>类似，如果选区处于活动状态，它会删除选区中的文本(请参阅<a href="#Mark">标记</a>)。
</p>
<p><kbd>C-d</kbd>(<code>delete-char</code>)删除游标之后的字符，与<tt class="key">Delete</tt>类似，但与选区是否处于活动状态无关。
</p>
<p>有关上述删除命令的详细信息，请参阅<a href="#Deletion">删除</a>。
</p>
<p><kbd>C-k</kbd>(<code>kill-line</code>)一次擦除(杀死)一行。如果您在行首或行中键入<kbd>C-k</kbd>，则会取消直到行尾的所有文本。如果您在行尾键入<kbd>C-k</kbd>，它会将该行与以下行连接起来。
</p>
<p>有关<kbd>C-k</kbd>和相关命令的详细信息，请参阅<a href="#Killing">剪切</a>。
</p>

<a name="Basic-Undo"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Basic-Files" accesskey="n" rel="next">Basic Files</a>, Previous: <a href="#Erasing" accesskey="p" rel="prev">Erasing</a>, Up: <a href="#Basic" accesskey="u" rel="up">Basic</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Undoing-Changes"></a>
<h3 class="section">7.4撤消更改</h3>

<dl compact="compact">
<dt><kbd>C-/</kbd></dt>
<dt><kbd>C-x u</kbd></dt>
<dt><kbd>C-_</kbd></dt>
<dd><p>撤消一个撤消记录条目-通常相当于一个命令(<code>undo</code>)。(第一个键可能在文本模式显示器上不可用。)
</p></dd>
</dl>

<p>Emacs记录缓冲区文本中所做更改的列表，因此您可以撤消最近的更改。这是使用<code>undo</code>命令补全的，该命令绑定到<kbd>C-/</kbd>(以及<kbd>C-x u</kbd>和<kbd>C-_</kbd>)。通常，此命令会撤消上一次更改，将游标移回更改前的位置。撤消命令仅适用于缓冲区中的更改；您不能使用它来撤消光标移动。
</p>
<p>虽然每个编辑命令通常会在撤消记录中创建一个单独的条目，但也可以将非常简单的命令组合在一起。有时，一个条目可能只包含复杂命令的一部分。
</p>
<p>如果您重复<kbd>C-/</kbd>(或其别名)，则每次重复都会撤消另一个较早的更改，返回到可用撤消信息的限制。如果所有记录的更改都已撤消，则撤消命令将显示一条错误消息，并且不执行任何操作。
</p>
<p>若要了解有关<code>撤消</code>命令的详细信息，请参阅<a href="#Undo">撤消</a>。
</p>

<a name="Basic-Files"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Basic-Help" accesskey="n" rel="next">Basic Help</a>, Previous: <a href="#Basic-Undo" accesskey="p" rel="prev">Basic Undo</a>, Up: <a href="#Basic" accesskey="u" rel="up">Basic</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Files-1"></a>
<h3 class="section">7.5文件</h3>

<p>您插入到Emacs缓冲区中的文本仅与Emacs会话的生命周期一样长。若要永久保留任何文本，必须将其放入<em>文件</em>。
</p>
<p>假设您的主目录中有一个名为<samp>test.emacs</samp>的文件。要开始在Emacs中编辑此文件，请键入
</p>
<div class="example">
<pre class="example">C-x C-f test.emacs <span class="key">RET</span>
</pre></div>

<p>这里，文件名作为<kbd>C-x C-f</kbd>(<code>find-file</code>)的<em>参数</em>提供给命令。该命令使用<em>迷你缓冲区</em>读取参数，然后键入<tt class="key">RET</tt>终止参数(请参阅<a href="#Minibuffer">迷你缓冲区</a>)。
</p>
<p>Emacs遵循此命令，<em>访问</em>文件：它创建一个缓冲区，将文件内容复制到缓冲区中，然后显示缓冲区进行编辑。如果更改文本，可以通过键入<kbd>C-x C-s</kbd>(<code>save-buffer</code>)<em>保存</em>文件中的新文本。这会将更改后的缓冲区内容复制回文件<samp>test.emacs</samp>，使其成为永久性内容。在保存之前，更改后的文本仅存在于Emacs中，文件<samp>test.emacs</samp>未更改。
</p>
<p>要创建文件，只需使用<kbd>C-x C-f</kbd>访问它，就好像它已经存在一样。这将创建一个空缓冲区，您可以在其中插入要放入文件中的文本。Emacs实际上在您第一次使用<kbd>C-x C-s</kbd>保存此缓冲区时创建了该文件。
</p>
<p>若要了解有关在Emacs中使用文件的详细信息，请参阅<a href="#Files">文件</a>。
</p>

<a name="Basic-Help"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Blank-Lines" accesskey="n" rel="next">Blank Lines</a>, Previous: <a href="#Basic-Files" accesskey="p" rel="prev">Basic Files</a>, Up: <a href="#Basic" accesskey="u" rel="up">Basic</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Help-1"></a>
<h3 class="section">7.6帮助</h3>

<a name="index-getting-help-with-keys"></a>
<p>如果忘记了快捷键的作用，可以通过键入<kbd>C-h k</kbd>(<code>describe-key</code>)，然后键入感兴趣的键；例如，<kbd>C-h k C-n</kbd>告诉您<kbd>C-n</kbd>的作用。
</p>
<p>前缀键<kbd>C-h</kbd>代表“帮助”。<tt class="key">F1</tt>键用作<kbd>C-h</kbd>的别名。除了<kbd>C-h k</kbd>之外，还有许多其他帮助命令可提供不同类型的帮助。
</p>
<p>有关详细信息，请参阅<a href="#Help">帮助</a>。
</p>

<a name="Blank-Lines"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Continuation-Lines" accesskey="n" rel="next">Continuation Lines</a>, Previous: <a href="#Basic-Help" accesskey="p" rel="prev">Basic Help</a>, Up: <a href="#Basic" accesskey="u" rel="up">Basic</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Blank-Lines-1"></a>
<h3 class="section">7.7空行</h3>

<a name="index-inserting-blank-lines"></a>
<a name="index-deleting-blank-lines"></a>
<p>以下是用于插入和删除空行的特殊命令和技术。
</p>
<dl compact="compact">
<dt><kbd>C-o</kbd></dt>
<dd><p>在光标后插入空行(<code>open-line</code>)。
</p></dd>
<dt><kbd>C-x C-o</kbd></dt>
<dd><p>删除多个连续空行中的一个以外的所有行(<code>delete-blank-lines</code>)。
</p></dd>
</dl>

<a name="index-C_002do"></a>
<a name="index-C_002dx-C_002do"></a>
<a name="index-blank-lines"></a>
<a name="index-open_002dline"></a>
<a name="index-delete_002dblank_002dlines"></a>
<p>我们已经看到<kbd><span class="key">RET</span></kbd>(<code>newline</code>)如何开始新的文本行。但是，如果您首先创建一个空行，然后在其中插入所需的文本，则可能更容易看到您正在执行的操作。使用键<kbd>C-o</kbd>(<code>open-line</code>)很容易做到这一点，它在换行符之后插入一个换行符，但将游标留在换行符前面。在<kbd>C-o</kbd>之后，键入新行的文本。
</p>
<p>您可以通过多次键入<kbd>C-o</kbd>，或者通过给它一个指定要创建多少个空行的数字参数来创建几个空行。有关操作方法，请参阅<a href="#Arguments">参数</a>。如果您有填充前缀，<kbd>C-o</kbd>命令将在新行上插入填充前缀(如果在行首键入)。请参阅<a href="#Fill-Prefix">填充前缀</a>。
</p>
<p>删除多余空行的简单方法是使用命令<kbd>C-x C-o</kbd>(<code>delete-blank-lines</code>)。如果游标位于几个空行的运行范围内，<kbd>C-x C-o</kbd>将删除除一个空行之外的所有空行。如果游标在单个空行上，<kbd>C-x C-o</kbd>会将其删除。如果游标位于非空行上，<kbd>C-x C-o</kbd>将删除后面的所有空行(如果存在)。
</p>

<a name="Continuation-Lines"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Position-Info" accesskey="n" rel="next">Position Info</a>, Previous: <a href="#Blank-Lines" accesskey="p" rel="prev">Blank Lines</a>, Up: <a href="#Basic" accesskey="u" rel="up">Basic</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Continuation-Lines-1"></a>
<h3 class="section">7.8连续行</h3>

<a name="index-continuation-line"></a>
<a name="index-wrapping"></a>
<a name="index-line-wrapping"></a>
<a name="index-fringes_002c-and-continuation-lines"></a>
<p>有时，缓冲区中的一行文本(<em>逻辑行</em>)太长，窗口无法容纳，Emacs会将其显示为两个或多个<em>屏幕行</em>。这称为<em>换行</em>或<em>继续</em>，长逻辑行称为<em>连续行</em>。在图形显示上，Emacs表示在左右窗口边缘用小弯曲箭头换行。在文本终端上，Emacs通过在右边距显示‘<samp>\</samp>’字符来指示换行。
</p>
<p>大多数作用于行的命令作用于逻辑行，而不是屏幕行。例如，<kbd>C-k</kbd>会剪切逻辑行。如前所述，<kbd>C-n</kbd>(<code>next-line</code>)和<kbd>C-p</kbd>(<code>previous-line</code>)是特殊例外：它们分别将指针向下和向上移动一个屏幕行(请参阅<a href="#Moving-Point">移动游标</a>)。
</p>
<a name="index-line-truncation_002c-and-fringes"></a>
<p>Emacs可以选择<em>截断</em>长逻辑行，而不是接续它们。这意味着每条逻辑线都占据一条屏幕行；如果长于窗口宽度，则不会显示该行的剩余部分。在图形显示上，一条截断的行由右边缘的小直箭头表示；在文本终端上，它由右边缘的“<samp>$</samp>”字符表示。请参阅<a href="#Line-Truncation">行截断</a>。
</p>
<p>默认情况下，连续行在窗口右边缘换行。由于换行可能发生在单词的中间，因此连续的行会很难阅读。通常的解决方案是在行太长之前插入换行符。如果您愿意，可以使用Auto Fill mode让Emacs在行过长时自动插入换行符。请参阅<a href="#Filling">填充</a>。
</p>
<p>有时，您可能需要编辑包含许多长逻辑行的文件，而通过添加换行符将它们全部拆分可能并不实际。在这种情况下，您可以使用Visual Line模式，该模式启用<em>单词换行</em>：Emacs不是精确地在窗口右边缘换行，而是在最靠近窗口右边缘的单词边界(即空格或制表符)换行。Visual Line mode还重新定义编辑命令，如<kbd>C-a</kbd>、<kbd>C-n</kbd>和<kbd>C-k</kbd>，以在屏幕行而不是逻辑行上操作。请参阅 <a href="#Visual-Line-Mode">Visual Line Mode</a>.
</p>

<a name="Position-Info"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Arguments" accesskey="n" rel="next">Arguments</a>, Previous: <a href="#Continuation-Lines" accesskey="p" rel="prev">Continuation Lines</a>, Up: <a href="#Basic" accesskey="u" rel="up">Basic</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Cursor-Position-Information"></a>
<h3 class="section">7.9光标位置信息</h3>

<p>以下命令用于获取有关缓冲区各部分的大小和位置的信息，并对字数和行数进行计数。
</p>
<dl compact="compact">
<dt><kbd>M-x what-line</kbd></dt>
<dd><p>显示游标的行号。
</p></dd>
<dt><kbd>M-x line-number-mode</kbd></dt>
<dt><kbd>M-x column-number-mode</kbd></dt>
<dd><p>切换当前行号或列号的自动显示。请参阅<a href="#Optional-Mode-Line">可选状态栏</a>。如果要在每行之前显示行号，请参阅<a href="#Display-Custom">显示自定义</a>。
</p>
</dd>
<dt><kbd>M-=</kbd></dt>
<dd><p>显示区域中存在的行数、字数和字符数(<code>count-word-region</code>)。有关选区的信息，请参阅<a href="#Mark">标记</a>。
</p>
</dd>
<dt><kbd>M-x count-words</kbd></dt>
<dd><p>显示缓冲区中存在的行数、字数和字符数。如果该选区处于活动状态(请参阅<a href="#Mark">标记</a>)，则改为显示该选区的数字。
</p>
</dd>
<dt><kbd>C-x =</kbd></dt>
<dd><p>显示游标之后的字符编码、游标的字符位置、游标的列(<code>what-cursor-position</code>)。
</p></dd>
<dt><kbd>M-x hl-line-mode</kbd></dt>
<dd><p>启用或禁用当前行的高亮显示。请参见<a href="#Cursor-Display">光标显示</a>。
</p></dd>
<dt><kbd>M-x size-indication-mode</kbd></dt>
<dd><p>切换缓冲区大小的自动显示。请参阅<a href="#Optional-Mode-Line">可选状态栏</a>。
</p></dd>
</dl>

<a name="index-what_002dline"></a>
<a name="index-line-number-commands"></a>
<a name="index-location-of-point"></a>
<a name="index-cursor-location"></a>
<a name="index-point-location"></a>
<p><kbd>M-x what-line</kbd>在回显区中显示当前行号。此命令通常是冗余的，因为当前行号显示在状态栏中(请参阅<a href="#Mode-Line">状态栏</a>)。但是，如果聚焦缓冲区，状态栏将显示相对于可访问部分的行号(请参阅<a href="#Narrowing">聚焦</a>)。相比之下，<code>what-line</code>既显示相对于聚焦区域的行号，又显示相对于整个缓冲区的行号。
</p>
<a name="index-M_002d_003d"></a>
<a name="index-count_002dwords_002dregion"></a>
<p><kbd>M-=</kbd>(<code>count-words-region</code>)显示一条消息，报告选区中的行数、字数和字符数(有关选区的说明，请参阅<a href="#Mark">标记</a>)。使用前缀参数<kbd>C-u M-=</kbd>，该命令显示整个缓冲区的计数。
</p>
<a name="index-count_002dwords"></a>
<p>命令<kbd>M-x count-words</kbd>执行相同的任务，但具有不同的调用约定。如果选区处于活动状态，它将显示选区的计数，否则将显示缓冲区的计数。
</p>
<a name="index-C_002dx-_003d"></a>
<a name="index-what_002dcursor_002dposition"></a>
<p>命令<kbd>C-x =</kbd>(<code>what-cursor-position</code>)显示有关当前光标位置和该位置的缓冲区内容的信息。它在回显区显示为一行，如下所示：
</p>
<div class="smallexample">
<pre class="smallexample">Char: c (99, #o143, #x63) point=28062 of 36168 (78%) column=53
</pre></div>

<p>在“<samp>Char:</samp>”之后，显示缓冲区中的游标所在的字符。括号内的文本显示相应的十进制、八进制和十六进制字符代码；有关<kbd>C-x =</kbd>如何显示字符信息的详细信息，请参阅<a href="#International-Chars">国际字符</a>。在‘<samp>point=</samp>’之后是游标位置的字符计数(缓冲区中的第一个字符是位置1，第二个字符是位置2，依此类推)。后面的数字是缓冲区中的总字符数，括号中的数字以总字符数的百分比表示位置。在‘<samp>column=</samp>’之后是游标的水平位置，以从窗口左边缘开始计数的列为单位。
</p>
<a name="index-what_002dcursor_002dshow_002dnames"></a>
<p>如果用户选项<code>what-cursor-show-names</code>为非<code>nil</code>，则还会显示Unicode字符数据库定义的字符名称。然后，括号中的部分将变为：
</p>
<div class="smallexample">
<pre class="smallexample">(99, #o143, #x63, LATIN SMALL LETTER C)
</pre></div>

<p>如果缓冲区被聚焦，导致开头和结尾的某些文本暂时不可访问，<kbd>C-x =</kbd>将显示描述当前可访问范围的附加文本。例如，它可能会显示以下内容：
</p>
<div class="smallexample">
<pre class="smallexample">Char: C (67, #o103, #x43) point=252 of 889 (28%) &lt;231-599&gt; column=0
</pre></div>

<p>其中两个额外的数字给出了该游标被允许的最小和最大字符位置。这两个位置之间的字符是可访问的字符。请参阅<a href="#Narrowing">聚焦</a>。
</p>
<p>相关但不同的功能是<code>display-line-numbers-mode</code>(请参阅<a href="#Display-Custom">显示自定义</a>)。
</p>

<a name="Arguments"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Repeating" accesskey="n" rel="next">Repeating</a>, Previous: <a href="#Position-Info" accesskey="p" rel="prev">Position Info</a>, Up: <a href="#Basic" accesskey="u" rel="up">Basic</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Numeric-Arguments"></a>
<h3 class="section">7.10数值参数</h3>
<a name="index-numeric-arguments"></a>
<a name="index-prefix-arguments"></a>
<a name="index-arguments-to-commands"></a>

<p>在数学和计算术语中，<em>参数</em>表示“提供给函数或运算的数据”。您可以为任何Emacs命令提供<em>数字参数</em>(也称为<em>前缀参数</em>)。一些命令将参数解释为重复计数。例如，如果将<kbd>C-f</kbd>的参数设为10，则它会将点向前移动10个字符，而不是1个字符。使用这些命令时，没有任何参数等同于参数1，而负参数会导致它们朝相反的方向移动或操作。
</p>
<a name="index-M_002d1"></a>
<a name="index-M_002d_002d"></a>
<a name="index-digit_002dargument"></a>
<a name="index-negative_002dargument"></a>
<p>指定数字参数的最简单方法是在按住<tt class="key">Meta</tt>键的同时键入数字或减号。例如,
</p>
<div class="example">
<pre class="example">M-5 C-n
</pre></div>

<p>向下移动五行。键<kbd>M-1</kbd>、<kbd>M-2</kbd>等等以及<kbd>M--</kbd>被绑定到为下一个命令设置参数的命令(<code>数字参数</code>和<code>负参数</code>)。<kbd>M--</kbd>没有数字通常表示-1。
</p>
<p>如果输入多个数字，则不需要按住<tt class="key">Meta</tt>键输入第二个和后续数字。因此，要向下移动50行，请键入
</p>
<div class="example">
<pre class="example">M-5 0 C-n
</pre></div>

<p>请注意，张扬<em>不会</em>像您预期的那样插入5个‘<samp>0</samp>’副本并向下移动一行——‘<samp>0</samp>’被视为前缀参数的一部分。
</p>
<p>(如果您确实要插入“<samp>0</samp>”的五个副本，该怎么办？键入<kbd>M-5 C-u 0</kbd>。这里，<kbd>C-u</kbd>终止前缀参数，以便下一次击键开始您想要执行的命令。请注意，<kbd>C-u</kbd>的这一含义仅适用于此情况。有关<kbd>C-u</kbd>的常见角色，请参见下面的内容。)
</p>
<a name="index-C_002du"></a>
<a name="index-universal_002dargument"></a>
<p>指定数字参数的另一种方法不是键入<kbd>M-1</kbd>、<kbd>M-2</kbd>等，而是键入<kbd>C-u</kbd>(<code>universal-argument</code>)，后跟一些数字，或后跟数字的减号(对于负参数)。不带数字的负号通常表示-1。
</p>
<p><kbd>C-u</kbd>本身就有“四次”的特殊含义：它将下一个命令的参数乘以四。<kbd>C-u C-u</kbd>将其乘以16。因此，<kbd>C-u C-u C-f</kbd>向前移动了16个字符。其他有用的组合有<kbd>C-u C-n</kbd>、<kbd>C-u C-u C-n</kbd>(向下移动相当一部分屏幕)、<kbd>C-u C-u C-o</kbd>(留出16个空行)和<kbd>C-u C-k</kbd>(删除四行)。
</p>
<p>您可以在自插入字符之前使用数字参数来插入该字符的多个副本。当字符不是数字时，这很简单；例如，<kbd><span class="nolinebreak">C-u</span>6 4 a</kbd><!-- /@w --> 插入字符“<samp>a</samp>”的64个副本。但这不适用于插入数字；<kbd><span class="nolinebreak">C-u</span>6 4 1</kbd><!-- /@w --> 指定参数641。您可以将参数与数字分隔，以便用另一个<kbd>C-u</kbd>插入；例如，<kbd><span class="nolinebreak">C-u</span>&nbsp;6&nbsp;4&nbsp;<span class="nolinebreak">C-u</span>&nbsp;1</kbd><!-- /@w --> 执行插入字符“<samp>1</samp>”的64个副本。
</p>
<p>有些命令关心是否有参数，但忽略其值。例如，命令<kbd>M-q</kbd>(<code>fill-paragraph</code>)填充文本；使用参数，它也会将文本对齐。(有关<kbd>M-q</kbd>的详细信息，请参阅<a href="#Filling">填充</a>。)对于这些命令，使用单个<kbd>C-u</kbd>指定参数就足够了。
</p>
<p>有些命令使用参数的值作为重复计数，但在没有参数时会做一些特殊的事情。例如，带有参数<var>n</var>的命令<kbd>C-k</kbd>(<code>kill-line</code>)剪切<var>n</var>行，包括它们的终止换行符。但是<kbd>C-k</kbd>没有参数是特别的：它会删除下一个换行符之前的文本，或者，如果游标正好在行尾，它会删除换行符本身。因此，两个没有参数的<kbd>C-k</kbd>命令可以杀死一个非空行，就像<kbd>C-k</kbd>有一个参数一样。(有关<kbd>C-k</kbd>的详细信息，请参阅<a href="#Killing">剪切</a>。)
</p>
<p>有几个命令将普通<kbd>C-u</kbd>与普通参数区别对待。它们可能会将只有一个负号的参数与处理为-1的参数有所不同。这些不寻常的情况会在出现时进行描述；它们的存在是为了使单个命令更方便，并且记录在该命令的文档字符串中。
</p>
<p>我们使用术语<em>前缀参数</em>来强调您在命令<em>之前</em>键入这样的参数，并将它们与迷你缓冲区参数(请参阅<a href="#Minibuffer">迷你缓冲区</a>)区分开来，后者是在调用命令<em>之后</em>输入的。
</p>
<p>在图形显示上，<kbd>C-0</kbd>、<kbd>C-1</kbd>等与<kbd>M-0</kbd>、<kbd>M-1</kbd>等作用相同。
</p>

<a name="Repeating"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Arguments" accesskey="p" rel="prev">Arguments</a>, Up: <a href="#Basic" accesskey="u" rel="up">Basic</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Repeating-a-Command"></a>
<h3 class="section">7.11重复命令</h3>
<a name="index-repeating-a-command"></a>

<p>许多简单的命令，例如使用单键调用或使用<kbd><span class="nolinebreak">M-x</span>&nbsp;<var><span class="nolinebreak">command-name</span></var>&nbsp;<span class="key">RET</span></kbd>调用的命令<!-- /@w -->，可以通过使用充当重复计数的数字参数调用它们来重复(请参阅<a href="#Arguments">参数</a>)。但是，如果要重复输入的命令提示输入，或者以其他方式使用数字参数，则该方法将不起作用。
</p>
<a name="index-C_002dx-z"></a>
<a name="index-repeat"></a>
<p>命令<kbd>C-x z</kbd>(<code>repeat</code>)提供了将一个Emacs命令重复多次的另一种方法。此命令重复前面的Emacs命令，不管是什么。重复命令使用的参数与以前使用的参数相同；它不会每次都读取新的参数。
</p>
<p>要多次重复该命令，请键入其他<kbd>z</kbd>：每个<kbd>z</kbd>都重复该命令一次。当您键入<kbd>z</kbd>以外的字符或按下鼠标按钮时，重复结束。
</p>
<p>例如，假设您键入<kbd>C-u 2 0 C-d</kbd>来删除20个字符。通过键入<kbd>C-x z z z</kbd>，您可以额外重复该命令(包括其参数)三次，以删除总共80个字符。第一个<kbd>C-x z</kbd>重复该命令一次，随后的每个<kbd>z</kbd>重复一次。
</p><hr>
<a name="Minibuffer"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#M_002dx" accesskey="n" rel="next">M-x</a>, Previous: <a href="#Basic" accesskey="p" rel="prev">Basic</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="The-Minibuffer"></a>
<h2 class="chapter">8 迷你缓冲区</h2>
<a name="index-minibuffer"></a>

<p><em>迷你缓冲区</em>是Emacs命令读取复杂参数的地方，比如文件名、缓冲区名、Emacs命令名或Lisp表达式。我们称它为“迷你缓冲区”，因为它是一个具有少量屏幕空间的专用缓冲区。您可以在迷你缓冲区中使用常用的Emacs编辑命令来编辑参数文本。
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Basic-Minibuffer" accesskey="1">基础迷你缓冲区</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">迷你缓冲区的基本用法。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Minibuffer-File" accesskey="2"> 迷你缓冲区文件</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">使用迷你缓冲区输入文件名。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Minibuffer-Edit" accesskey="3">迷你缓冲区编辑</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">如何在迷你缓冲区中编辑。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Completion" accesskey="4">补全</a>：</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">一种用于迷你缓冲区输入的缩写工具。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Minibuffer-History" accesskey="5">迷你缓冲区历史</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">重用最近的迷你缓冲区参数。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Repetition" accesskey="6">重复</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">重新执行使用迷你缓冲区的命令。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Passwords" accesskey="7">密码</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">在回显区输入密码。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Yes-or-No-Prompts" accesskey="8">确认提示</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">在回显区回答是或否。
</td></tr>
</tbody></table>


<a name="Basic-Minibuffer"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Minibuffer-File" accesskey="n" rel="next">Minibuffer File</a>, Up: <a href="#Minibuffer" accesskey="u" rel="up">Minibuffer</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Using-the-Minibuffer"></a>
<h3 class="section">8.1使用迷你缓冲区</h3>

<a name="index-prompt"></a>
<p>当迷你缓冲区正在使用时，它会与光标一起出现在回显区中。迷你缓冲区以<em>prompt</em>开始，通常以冒号结束。提示符说明预期的输入类型，以及将如何使用它。提示符使用<code>minibuffer-prompt</code>字符样式突出显示(请参阅<a href="#Faces">字符样式</a>)。
</p>
<p>输入迷你缓冲区参数的最简单方法是键入文本，然后<tt class="key">RET</tt>提交参数并退出迷你缓冲区。或者，您也可以键入<kbd>C-g</kbd>，通过取消请求参数的命令来退出微型缓冲区(请参阅<a href="#Quitting">退出</a>)。
</p>
<a name="index-default-argument"></a>
<p>有时，提示符会在冒号前的括号内显示<em>默认参数</em>。如果您只键入<tt class="key">RET</tt>，则此默认值将用作参数。例如，读取缓冲区名称的命令通常将缓冲区名称显示为默认缓冲区名称；您可以键入<tt class="key">RET</tt>在该默认缓冲区上操作。
</p>
<a name="index-Minibuffer-Electric-Default-mode"></a>
<a name="index-mode_002c-Minibuffer-Electric-Default"></a>
<a name="index-minibuffer_002delectric_002ddefault_002dmode"></a>
<a name="index-minibuffer_002deldef_002dshorten_002ddefault"></a>
<p>如果您启用了Minibuffer Electric Default mode(一种全局辅模式)，Emacs会在您修改迷你缓冲区的内容时立即隐藏默认参数(因为键入<tt class="key">RET</tt>将不再提交该默认参数)。如果您键入原始的微型缓冲区文本，提示将再次显示默认值。此外，如果将变量<code>minibuffer-eldef-shorten-default</code>更改为非<code>nil</code>值，则默认参数将显示为‘<samp>[<var>default-arg</var>]</samp>’而不是‘<samp>(default<var>default-arg</var>)</samp>’，从而节省一些屏幕空间。要启用此辅模式，请键入<kbd>M-x minibuffer-electric-default-mode</kbd>。
</p>
<p>由于迷你缓冲区出现在回显区中，因此它可能与回显区的其他用途冲突。如果在迷你缓冲区处于活动状态时发出错误消息或信息性消息，则该消息会将迷你缓冲区隐藏几秒钟，或者直到您键入内容；然后迷你缓冲区才会返回。当迷你缓冲区正在使用时，Emacs不会回显击键。
</p>

<a name="Minibuffer-File"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Minibuffer-Edit" accesskey="n" rel="next">Minibuffer Edit</a>, Previous: <a href="#Basic-Minibuffer" accesskey="p" rel="prev">Basic Minibuffer</a>, Up: <a href="#Minibuffer" accesskey="u" rel="up">Minibuffer</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Minibuffers-for-File-Names"></a>
<h3 class="section">8.2文件名的迷你缓冲区</h3>

<a name="index-default-directory"></a>
<p><kbd>C-x C-f</kbd>(<code>find-file</code>)等命令使用迷你缓冲区读取文件名参数(请参阅<a href="#Basic-Files">基本文件</a>)。当使用迷你缓冲区读取文件名时，它通常以一些以斜杠结尾的初始文本开始。这是<em>默认目录</em>。例如，它可能是这样开始的：
</p>
<div class="example">
<pre class="example">Find file: /u2/emacs/src/
</pre></div>

<p>这里，“<samp>Find file:</samp>”是提示符，“<samp>/u2/emacs/src/</samp>”是默认目录。如果您现在键入<kbd>buffer.c</kbd>作为输入，则指定文件<samp>/u2/emacs/src/buffer.c</samp>。有关默认目录的信息，请参阅<a href="#File-Names">文件名</a>。
</p>
<p>可以通过键入<kbd>M-n</kbd>获得您可能需要的文件名的其他默认值，请参阅<a href="#Minibuffer-History">迷你缓冲区历史</a>。
</p>
<p>您可以使用<samp>..</samp>指定父目录中的文件：<samp>/a/b/../foo.el</samp>等同于<samp>/a/foo.el</samp>。或者，您也可以使用<kbd>M-<span class="key">DEL</span></kbd>向后删除目录名(请参阅<a href="#Words">单词</a>)。
</p>
<p>要在完全不同的目录中指定文件，可以使用<kbd>C-a C-k</kbd>终止整个默认文件(请参阅<a href="#Minibuffer-Edit">迷你缓冲区编辑</a>)。或者，您可以忽略默认设置，在默认目录后输入以斜杠或波浪号开头的绝对文件名。例如，您可以指定<samp>/etc/termcap</samp>，如下所示：
</p>
<div class="example">
<pre class="example">Find file: /u2/emacs/src//etc/termcap
</pre></div>

<p><a name="index-_002f_002f-in-file-name"></a>
<a name="index-double-slash-in-file-name"></a>
<a name="index-slashes-repeated-in-file-name"></a>
<a name="index-file_002dname_002dshadow_002dmode"></a>
双斜杠会导致Emacs忽略对中第二个斜杠之前的所有内容。在上面的示例中，<samp>/u2/emacs/src/</samp>被忽略，因此您提供的参数是<samp>/etc/termcap</samp>。如果终端允许，文件名中被忽略的部分将变暗。(要禁用此调暗，请使用命令<kbd><span class="nolinebreak">M-x</span><span class="nolinebreak">file-name-shadow-mode</span></kbd>关闭文件名阴影模式<!-- /@w -->.)

</p>
<p>在补全远程文件名(请参阅<a href="#Remote-Files">远程文件</a>)时，双斜杠的行为略有不同：它导致Emacs仅忽略文件名部分，而保留剩余(方法、主机和用户名等)完好无损。在一行中键入三个斜杠将忽略远程文件名中的所有内容。请参阅<cite>Tramp手册</cite>中的<a href="http://www.gnu.org/software/emacs/manual/html_mono/tramp.html#File-name-completion">文件名补全</a>。
</p>
<a name="index-home-directory-shorthand"></a>
<p>Emacs将<samp>~/</samp>解释为您的主目录。因此，<samp>~/foo/bar.txt</samp>指定了一个名为<samp>bar.txt</samp>的文件，该文件位于名为<samp>foo</samp>的目录中，而该目录又位于您的主目录中。此外，<samp>~<var>user-id</var>/</samp>表示登录名为<var>user-id</var>的用户的主目录。忽略<samp>~</samp>前面的任何前导目录名：因此，<samp>/u2/emacs/~/foo/bar.txt</samp>等同于<samp>~/foo/bar.txt</samp>。
</p>
<p>在MS-Windows和MS-DOS系统上，用户并不总是有主目录，Emacs使用几种替代方法。有关MS-Windows，请参阅<a href="#Windows-HOME">Windows HOME</a>；有关MS-DOS，请参阅<a href="#MS_002dDOS-File-Names">MS-DOS文件名</a>。在这些系统上，即仅当<var>user-id</var>是当前用户的登录名时才支持<samp>~<var>user-id</var>/</samp>结构。
</p>
<a name="index-insert_002ddefault_002ddirectory"></a>
<p>要防止Emacs在读取文件名时插入默认目录，请将变量<code>insert-default-directory</code>更改为<code>nil</code>。在这种情况下，迷你缓冲区开始为空。尽管如此，相对文件名参数仍然基于相同的默认目录进行解释。
</p>
<p>您还可以在迷你缓冲区中输入远程文件名。请参阅<a href="#Remote-Files">远程文件</a>。
</p>

<a name="Minibuffer-Edit"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Completion" accesskey="n" rel="next">Completion</a>, Previous: <a href="#Minibuffer-File" accesskey="p" rel="prev">Minibuffer File</a>, Up: <a href="#Minibuffer" accesskey="u" rel="up">Minibuffer</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Editing-in-the-Minibuffer"></a>
<h3 class="section">8.3在迷你缓冲区中编辑</h3>

<p>迷你缓冲区是一个Emacs缓冲区，尽管这是一个特殊的缓冲区，并且可以使用常用的Emacs命令来编辑参数文本。(但是，提示为<em>read-only</em>的，不能更改。)
</p>
<p>由于迷你缓冲区中的<tt class="key">RET</tt>为提交参数，因此不能使用它插入换行符。您可以使用<kbd>C-q C-j</kbd>执行此操作，它插入一个<kbd>C-j</kbd>控制字符，在形式上相当于换行符(请参见<a href="#Inserting-Text">插入文本</a>)。或者，您也可以使用<kbd>C-o</kbd>(<code>open-line</code>)命令(请参阅<a href="#Blank-Lines">空行</a>)。
</p>
<p>在迷你缓冲区中，<tt class="key">TAB</tt>、<tt class="key">SPC</tt>和<kbd>？</kbd>键通常绑定到<em>补全命令</em>，这些命令允许您轻松地填写所需的文本，而无需键入所有文本。请参阅<a href="#Completion">补全</a>。与<tt class="key">5&gt;RET</tt>一样，您可以使用<kbd>C-q</kbd>插入<tt class="key">TAB</tt>、<tt class="key">SPC</tt>或‘<samp>?</samp>’字符。
</p>
<p>为方便起见，迷你缓冲区中的<kbd>C-a</kbd>(<code>move-beginning-of-line</code>)将指向参数文本的开头，而不是提示符的开头。例如，这允许您使用<kbd>C-a C-k</kbd>擦除整个参数。
</p>
<a name="index-height-of-minibuffer"></a>
<a name="index-size-of-minibuffer"></a>
<a name="index-growing-minibuffer"></a>
<a name="index-resizing-minibuffer"></a>
<p>当迷你缓冲区处于活动状态时，回显区的处理方式与普通Emacs窗口非常相似。例如，您可以切换到另一个窗口(使用<kbd>C-x o</kbd>)，在那里编辑文本，然后返回到迷你缓冲区窗口补全参数。您甚至可以剪切另一个窗口中的文本，返回到迷你缓冲区窗口，然后将文本粘贴为参数。但是，对迷你缓冲区窗口有一些限制：例如，您不能拆分它。请参阅<a href="#Windows">窗口</a>。
</p>
<a name="index-resize_002dmini_002dwindows"></a>
<p>通常，迷你缓冲区窗口占据单个屏幕行。但是，如果您将两行或更多行的文本添加到迷你缓冲区中，它会自动扩展以容纳文本。变量<code>resize-mini-windows</code>控制迷你缓冲区的大小调整。默认值是<code>grow-only</code>，这意味着我们刚才描述的行为。如果该值为<code>t</code>，如果您从迷你缓冲区中删除一些文本行，则迷你缓冲区窗口也会自动缩小，最小只有一个屏幕行。如果该值为<code>nil</code>，则微型缓冲区窗口永远不会自动更改大小，但您可以在其上使用常用的窗口大小调整命令(请参阅<a href="#Windows">窗口</a>)。
</p>
<a name="index-max_002dmini_002dwindow_002dheight"></a>
<p>变量<code>max-mini-window-height</code>控制调整迷你缓冲区窗口大小的最大高度。浮点数表示占窗体的比例；整数表示指定最大行数；<code>nil</code>表示不自动调整迷你缓冲区窗口的大小。默认值为0.25。
</p>
<p>在任何窗口中都可以使用<kbd>C-M-v</kbd>命令来滚动显示在迷你缓冲区中的帮助文本。您还可以使用<kbd>M-<span class="key">PageUp</span></kbd>和<kbd>M-<span class="key">PageDown</span></kbd>(或等效的<kbd>M-<span class="key">prior</span></kbd>和<kbd>M-<span class="key">next</span></kbd>)滚动帮助文本。对于可能补全的长列表，这尤其有用。请参见<a href="#Other-Window">其他窗口</a>。
</p>
<a name="index-enable_002drecursive_002dminibuffers"></a>
<a name="index-minibuffer_002ddepth_002dindicate_002dmode"></a>
<p>在迷你缓冲区处于活动状态时，Emacs通常不允许大多数使用迷你缓冲区的命令。要在迷你缓冲区中允许这样的命令，请将变量<code>enable-recursive-minibuffers</code>设置为<code>t</code>。您可能还需要启用<code>minibuffer-depth-indicate-mode</code>，以便在递归使用迷你缓冲区时在迷你缓冲区提示符中显示当前的递归深度。
</p>
<a name="index-minibuffer_002dinactive_002dmode"></a>
<p>不活动时，迷你缓冲区处于<code>minibuffer-inactive-mode</code>，单击<kbd>鼠标</kbd>会显示<samp>*Messages*</samp>缓冲区。如果您为迷你缓冲区使用专用窗体，Emacs还会识别那里的某些关键点，例如，<kbd>n</kbd>来创建新窗体。
</p>

<a name="Completion"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Minibuffer-History" accesskey="n" rel="next">Minibuffer History</a>, Previous: <a href="#Minibuffer-Edit" accesskey="p" rel="prev">Minibuffer Edit</a>, Up: <a href="#Minibuffer" accesskey="u" rel="up">Minibuffer</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Completion-1"></a>
<h3 class="section">8.4补全功能</h3>
<a name="index-completion"></a>

<p>您通常可以使用名为<em>补全</em>的功能来帮助输入参数。这意味着在您键入部分参数后，Emacs可以根据到目前为止键入的内容填充剩余或其中的一部分。
</p>
<a name="index-completion-alternative"></a>
<p>当补全可用时，某些键(通常为<tt class="key">TAB</tt>、<tt class="key">RET</tt>和<tt class="key">SPC</tt>)在迷你缓冲区中表现为特殊的补全命令(请参阅<a href="#Completion-Commands">补全命令</a>)。这些命令尝试根据请求参数的命令提供的一组<em>补全选项</em>来补全迷你缓冲区中的文本。您通常可以键入<kbd>？</kbd>来查看可供选择的补全列表。
</p>
<p>虽然补全通常是在小缓冲区中补全的，但有时普通缓冲区中也可以使用该功能。请参见<a href="#Symbol-Completion">符号补全</a>。
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Completion-Example" accesskey="1"> 补全示例</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">使用补全的示例。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Completion-Commands" accesskey="2">补全命令</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">补全命令的列表。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Completion-Exit" accesskey="3">补全退出</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">补全并且提交迷你缓冲区文本。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Completion-Styles" accesskey="4">补全风格</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">选择补全匹配的方式。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Completion-Options" accesskey="5">补全选项</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">补全的选项。
</td></tr>
</tbody></table>


<a name="Completion-Example"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Completion-Commands" accesskey="n" rel="next">Completion Commands</a>, Up: <a href="#Completion" accesskey="u" rel="up">Completion</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Completion-Example-1"></a>
<h4 class="subsection">8.4.1补全示例</h4>

<a name="index-TAB-_0028completion-example_0029"></a>
<p>这里有一个简单的例子可能会有所帮助。<kbd>M-x</kbd>使用迷你缓冲区读取命令的名称，因此补全是通过将迷你缓冲区文本与现有Emacs命令的名称进行匹配来实现的。假设您希望运行命令<code>auto-fill-mode</code>。您可以通过键入<kbd>M-x auto-fill-mode<span class="key">RET</span></kbd>来做到这一点，但是使用补全更容易。
</p>
<p>如果键入<kbd>M-x a u<span class="key">TAB</span></kbd>，<tt class="key">TAB</tt>将查找以“<samp>au</samp>”开头的补全选项(在本例中为命令名)。有几个选项，包括<code>auto-fill-mode</code>和<code>autoconf-mode</code>，但它们都以<code>auto</code>开头，因此迷你缓冲区中的‘<samp>au</samp>’补全为‘<samp>auto</samp>’。(可以在Emacs会话中定义更多命令。例如，如果定义了名为<code>authorize-me</code>的命令，则Emacs只能在“<samp>aut</samp>”范围内补全。)
</p>
<p>如果立即再次键入<tt class="key">TAB</tt>，则无法确定下一个字符；它可能是“<samp>-</samp>”、“<samp>a</samp>”或“<samp>c</samp>”。因此它不会添加任何字符；相反，<tt class="key">TAB</tt>会在另一个窗口中显示所有可能的补全列表。
</p>
<p>接下来，键入<kbd>-f</kbd>。迷你缓冲区现在包含“<samp>auto-f</samp>”，并且唯一以此开头的命令名是<code>auto-full-mode</code>。如果现在键入<tt class="key">TAB</tt>，补全操作会将参数“<samp>auto-fill-mode</samp>”的剩余填充到迷你缓冲区中。
</p>
<p>因此，只需键入<kbd>a u<span class="key">TAB</span>-f<span class="key">TAB</span></kbd>即可进入“<samp>auto-fill-mode</samp>”。
</p>

<a name="Completion-Commands"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Completion-Exit" accesskey="n" rel="next">Completion Exit</a>, Previous: <a href="#Completion-Example" accesskey="p" rel="prev">Completion Example</a>, Up: <a href="#Completion" accesskey="u" rel="up">Completion</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Completion-Commands-1"></a>
<h4 class="subsection">8.4.2补全命令</h4>

<p>以下是允许补全时在微型缓冲区中定义的补全命令列表。
</p>
<dl compact="compact">
<dt><kbd><span class="key">TAB</span></kbd></dt>
<dd><p>尽可能补全迷你缓冲区中的文本；如果无法补全，则显示可能补全的列表(<code>minibuffer-complete</code>)。
</p></dd>
<dt><kbd><span class="key">SPC</span></kbd></dt>
<dd><p>在游标之前尽可能的补全迷你缓冲区文本中的一个单词(<code>minibuffer-complete-word</code>)。此命令不适用于经常包含空格的参数，例如文件名。
</p></dd>
<dt><kbd><span class="key">RET</span></kbd></dt>
<dd><p>将迷你缓冲区中的文本作为参数提交，可能首先补全(<code>minibuffer-complete-and-exit</code>)。请参见<a href="#Completion-Exit">补全退出</a>。
</p></dd>
<dt><kbd>?</kbd></dt>
<dd><p>显示补全列表(<code>minibuffer-completion-help</code>)。
</p></dd>
</dl>

<a name="index-TAB-_0028completion_0029"></a>
<a name="index-minibuffer_002dcomplete"></a>
<p><tt class="key">TAB</tt>(<code>minibuffer-complete</code>)是最基本的补全命令。它搜索与现有迷你缓冲区文本匹配的所有可能的补全，并尝试尽可能多地补全。有关如何选择补全备选方案，请参阅<a href="#Completion-Styles">补全风格</a>。
</p>
<a name="index-SPC-_0028completion_0029"></a>
<a name="index-minibuffer_002dcomplete_002dword"></a>
<p><tt class="key">SPC</tt>(<code>minibuffer-complete-word</code>)像<tt class="key">TAB</tt>一样补全，但只到下一个连字符或空格。如果在迷你缓冲区中有“<samp>auto-f</samp>”并键入<tt class="key">SPC</tt>，它会发现补全是“<samp>auto-fill-mode</samp>”，但它只插入“<samp>ill-</samp>”，给出“<samp>auto-ill-</samp>”。此时，另一个<tt class="key">SPC</tt>将一直补全到“<samp>auto-fill-mode</samp>”。
</p>
<a name="index-_003f-_0028completion_0029"></a>
<a name="index-completion-list"></a>
<p>如果<tt class="key">TAB</tt>或<tt class="key">SPC</tt>无法补全，它会在另一个窗口中显示匹配的补全备选方案(如果有)的列表。您可以使用<kbd>？</kbd>(<code>minibuffer-completion-help</code>)显示相同的列表。以下命令可以与补全列表一起使用：
</p>
<dl compact="compact">
<dd><a name="index-switch_002dto_002dcompletions"></a>
</dd>
<dt><kbd>M-v</kbd></dt>
<dt><kbd><span class="key">PageUp</span></kbd></dt>
<dt><kbd><span class="key">prior</span></kbd></dt>
<dd><p>在迷你缓冲区中键入<kbd>M-v</kbd>，选择显示补全列表的窗口(<code>switch-to-completions</code>)。这为使用下面的命令铺平了道路。<tt class="key">PageUp</tt>或<tt class="key">prior</tt>执行相同的操作。您也可以通过其他方式选择窗口(请参阅<a href="#Windows">窗口</a>)。
</p>
<a name="index-choose_002dcompletion"></a>
</dd>
<dt><kbd><span class="key">RET</span></kbd></dt>
<dt><kbd>鼠标左键</kbd></dt>
<dt><kbd>鼠标右键</kbd></dt>
<dd><p>在补全列表缓冲区中时，这将在游标处选择补全(<code>choose-completion</code>)。
</p>
<a name="index-next_002dcompletion"></a>
</dd>
<dt><kbd><span class="key">TAB</span></kbd></dt>
<dt><kbd><span class="key">RIGHT</span></kbd></dt>
<dd><p>在补全列表缓冲区中，这些键移动到以下补全选项(<code>next-completion</code>)。
</p>
<a name="index-previous_002dcompletion"></a>
</dd>
<dt><kbd><span class="key">S-TAB</span></kbd></dt>
<dt><kbd><span class="key">LEFT</span></kbd></dt>
<dd><p>在补全列表缓冲区中时，这些键移动到前一个补全选项(<code>previous-completion</code>)。
</p>
<a name="index-quit_002dwindow"></a>
</dd>
<dt><kbd><kbd>q</kbd></kbd></dt>
<dd><p>在补全列表缓冲区中时，这将退出显示它的窗口，并选择显示迷你缓冲区的窗口(<code>quit-window</code>)。
</p>
<a name="index-kill_002dcurrent_002dbuffer"></a>
</dd>
<dt><kbd><kbd>z</kbd></kbd></dt>
<dd><p>在补全列表缓冲区中时，取消它并删除显示它的窗口(<code>kill-current-buffer</code>)。
</p></dd>
</dl>


<a name="Completion-Exit"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Completion-Styles" accesskey="n" rel="next">Completion Styles</a>, Previous: <a href="#Completion-Commands" accesskey="p" rel="prev">Completion Commands</a>, Up: <a href="#Completion" accesskey="u" rel="up">Completion</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Completion-Exit-1"></a>
<h4 class="subsection">8.4.3补全退出</h4>

<a name="index-RET-_0028completion-in-minibuffer_0029"></a>
<a name="index-minibuffer_002dcomplete_002dand_002dexit"></a>
<p>当命令使用带有补全的迷你缓冲区读取参数时，它还控制当您键入<tt class="key">RET</tt>(<code>minibuffer-complete-and-exit</code>)提交参数时发生的情况。有四种类型的行为：
</p>
<ul>
<li> <em>严格补全</em>只接受完全匹配的补全。仅当迷你缓冲区文本完全匹配或只有一个补全选项时，键入<tt class="key">RET</tt>才会退出迷你缓冲区。否则，Emacs拒绝退出迷你缓冲区；相反，它会尝试补全，如果无法补全，它会在迷你缓冲区文本之后暂时显示“<samp>[No Match]</samp>”。(您仍然可以通过键入<kbd>C-g</kbd>取消该命令来离开迷你缓冲区。)

<p>使用此行为的命令的一个示例是<kbd>M-x</kbd>，因为它接受不存在的命令名是没有意义的。
</p>
</li><li> <em>谨慎补全</em>类似于严格补全，不同之处在于<tt class="key">RET</tt>只有在文本已经完全匹配时才会退出。如果文本完全匹配，<tt class="key">RET</tt>将执行该补全，但尚未退出；您必须键入第二个<tt class="key">RET</tt>才能退出。

<p>例如，谨慎补全用于读取必须已经存在的文件的文件名。
</p>
</li><li> <em>宽松补全</em>允许任何输入；补全候选项只是建议。键入<tt class="key">RET</tt>不会补全，它只提交您输入的参数。

</li><li> <a name="index-minibuffer-confirmation"></a>
<a name="index-confirming-in-the-minibuffer"></a>
<em>带有确认的宽松补全</em>类似于宽松补全，但有一个例外：如果您键入<tt class="key">TAB</tt>，并且这样补全了文本直到某种中间状态(即，尚未完全匹配补全的状态)，则紧接着键入<tt class="key">RET</tt>不会提交参数。相反，Emacs通过在文本后暂时显示“<samp>[Confirm]</samp>”来请求确认；再次键入<tt class="key">RET</tt>以确认并提交文本。这捕获了一个常见的错误，在该错误中，在意识到<tt class="key">TAB</tt>没有补全之前，输入<tt class="key">RET</tt>。

<a name="index-confirm_002dnonexistent_002dfile_002dor_002dbuffer"></a>
<p>您可以通过定制变量<code>confirm-nonexistent-file-or-buffer</code>来调整确认行为。缺省值<code>after-completion</code>给出了我们刚才描述的行为。如果将其更改为<code>nil</code>，则Emacs不会要求确认，而是退回到宽松补全。如果将其更改为任何其他非<code>nil</code>值，则Emacs会要求确认前面的命令是否为<tt class="key">TAB</tt>。
</p>
<p>大多数读取文件名的命令(如<kbd>C-x C-f</kbd>)和读取缓冲区名称的命令(如<kbd>C-x b</kbd>)都使用此行为。
</p></li></ul>


<a name="Completion-Styles"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Completion-Options" accesskey="n" rel="next">Completion Options</a>, Previous: <a href="#Completion-Exit" accesskey="p" rel="prev">Completion Exit</a>, Up: <a href="#Completion" accesskey="u" rel="up">Completion</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="How-Completion-Alternatives-Are-Chosen"></a>
<h4 class="subsection">8.4.4如何选择补全备选方案</h4>
<a name="index-completion-style"></a>

<p>补全命令的工作方式是将可能的补全备选方案的大列表缩小到与您在迷你缓冲区中键入的内容相匹配的较小子集。在<a href="#Completion-Example">补全示例</a>中，我们给出了一个简单的匹配示例。确定什么构成匹配的过程相当复杂。Emacs试图在大多数情况下提供看似合理的补全。
</p>
<p>Emacs使用一个或多个<em>补全风格</em>-用于将迷你缓冲区文本与补全备选方案相匹配的标准集来执行补全。在补全过程中，Emacs会依次尝试每种补全风格。如果风格生成一个或多个匹配项，则将其用作补全备选方案的列表。如果某个风格没有生成匹配项，则Emacs会退回到下一个风格。
</p>
<a name="index-completion_002dstyles"></a>
<p>列表变量<code>completion-styles</code>指定要使用的补全风格。每个列表元素都是一个补全风格的名称(一个Lisp符号)。默认补全风格为(按顺序)：
</p>
<dl compact="compact">
<dt><code>basic</code></dt>
<dd><a name="index-basic_002c-completion-style"></a>
<p>匹配的补全替换必须与迷你缓冲区中游标之前的文本具有相同的开头。此外，如果在游标之后的微型缓冲区中有任何文本，则补全备选方案的剩余部分必须将该文本作为子字符串包含。
</p>
<a name="index-partial-completion"></a>
<a name="index-partial_002dcompletion_002c-completion-style"></a>
</dd>
<dt><code>partial-completion</code></dt>
<dd><p>这种积极的补全风格将迷你缓冲区文本分成用连字符或空格分隔的单词，并分别补全每个单词。(例如，在补全命令名称时，“<samp>em-l-m</samp>”将补全为“<samp>emacs-lisp-mode</samp>”。)
</p>
<p>此外，迷你缓冲区文本中的“<samp>*</samp>”被视为<em>通配符</em>-它匹配补全备选方案中相应位置的任何字符串。
</p>
</dd>
<dt><code>emacs22</code></dt>
<dd><a name="index-emacs22_002c-completion-style"></a>
<p>此补全风格类似于<code>basic</code>，不同之处在于它忽略了迷你缓冲区中游标之后的文本。之所以这样命名，是因为它对应于Emacs22中的补全行为。
</p></dd>
</dl>

<p>还定义了以下其他补全风格，如果您愿意，可以将它们添加到<code>补全风格</code>中(请参阅<a href="#Customization">自定义</a>)：
</p>
<dl compact="compact">
<dt><code>substring</code></dt>
<dd><a name="index-substring_002c-completion-style"></a>
<p>匹配的补全选项必须将迷你缓冲区中的文本包含在游标之前，而将迷你缓冲区中的文本包含在游标之后，作为子字符串(顺序相同)。
</p>
<p>因此，如果迷你缓冲区中的文本是“<samp>foobar</samp>‘，游标在”<samp>foo</samp>’和“<samp>bar</samp>‘之间，则该文本与‘<samp><var>a</var>foo<var>b</var>bar<var>c</var></samp>’，匹配，其中<var>a</var>，<var>b</var>和<var>c</var>可以是包括空字符串的任何字符串。
</p>
</dd>
<dt><code>initials</code></dt>
<dd><a name="index-initials_002c-completion-style"></a>
<p>这种非常激进的补全风格视图补全缩略词和缩写。例如，在补全命令名时，它将“<samp>lch</samp>”与“<samp>list-command-history</samp>”匹配。
</p></dd>
</dl>

<p>还有一种非常简单的补全风格，称为<code>emacs21</code>。在此风格中，如果迷你缓冲区中的文本是“<samp>foobar</samp>”，则只考虑以“<samp>foobar</samp>”开头的匹配项。
</p>
<a name="index-completion_002dcategory_002doverrides"></a>
<p>通过设置变量<code>completion-category-overrides</code>，您可以在不同的情况下使用不同的补全风格。例如，默认设置表示为缓冲区名称仅使用<code>basic</code>和<code>substring</code>。
</p>


<a name="Completion-Options"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Completion-Styles" accesskey="p" rel="prev">Completion Styles</a>, Up: <a href="#Completion" accesskey="u" rel="up">Completion</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Completion-Options-1"></a>
<h4 class="subsection">8.4.5补全选项</h4>

<a name="index-case_002dsensitivity-and-completion"></a>
<a name="index-case-in-completion"></a>
<p>在补全区分大小写的参数(如命令名)时，大小写非常重要。例如，在补全命令名称时，“<samp>AU</samp>”不会补全为“<samp>auto-fill-mode</samp>”。补全参数时忽略大小写差异，在这种情况下大小写无关紧要。
</p>
<a name="index-read_002dfile_002dname_002dcompletion_002dignore_002dcase"></a>
<a name="index-read_002dbuffer_002dcompletion_002dignore_002dcase"></a>
<p>补全文件名时，如果变量<code>read-file-name-completion-ignore-case</code>非<code>nil</code>，则忽略大小写差异。在具有区分大小写的文件名的系统(如GNU/Linux)上，默认值为<code>nil</code>；在具有不区分大小写的文件名的系统(如Microsoft Windows)上，默认值为非<code>nil</code>。补全缓冲区名称时，如果变量<code>read-buffer-completion-ignore-case</code>非<code>nil</code>，则忽略大小写差异；默认值为<code>nil</code>。
</p>
<a name="index-completion_002dignored_002dextensions"></a>
<a name="index-ignored-file-names_002c-in-completion"></a>
<p>在补全文件名时，Emacs通常会省略某些被认为不太可能选择的备选方案，这由列表变量<code>completion-ignored-extensions</code>确定。列表中的每个元素都应该是一个字符串；任何以这样的字符串结尾的文件名都会被忽略，作为补全选项。任何以斜杠(<samp>/</samp>)结尾的元素都表示一个子目录名。<code>completion-ignored-extensions</code>的标准值有几个元素，包括<code>“.o”</code>、<code>“.elc”</code>和<code>“~”</code>。例如，如果目录包含“<samp>foo.c</samp>”和“<samp>foo.elc</samp>”，则“<samp>foo</samp>”将补全为“<samp>foo.c</samp>”。但是，如果<em>所有</em>可能的补全都以其他被忽略的字符串结尾，则它们不会被忽略：在上一个示例中，“<samp>foo.e</samp>”补全于“<samp>foo.elc</samp>”。在补全列表中显示补全备选选项时，Emacs忽略<code>completion-ignored-extensions</code>。
</p>
<p>Shell补全是文件名补全的扩展版本，请参阅<a href="#Shell-Options">Shell选项</a>。
</p>
<a name="index-completion_002dauto_002dhelp"></a>
<p>如果<code>completion-auto-help</code>设置为<code>nil</code>，则补全命令永远不会显示补全列表缓冲区；您必须键入<kbd>？</kbd>才能显示列表。如果值为<code>lazy</code>，则Emacs仅在第二次尝试补全时显示补全列表缓冲区。换句话说，如果没有要补全的内容，则第一个<tt class="key">TAB</tt>回显“<samp>Next char not only</samp>”；第二个<tt class="key">TAB</tt>显示补全列表缓冲区。
</p>
<a name="index-completion_002dcycle_002dthreshold"></a>
<p>如果<code>completion-cycle-threshold</code>为非<code>nil</code>，则补全命令可以循环补全备选方案。通常，如果迷你缓冲区中的文本有多个可选补全选项，则补全命令最多会补全到最长的公共子字符串。如果将<code>completion-cycle-threshold</code>更改为<code>t</code>，则补全命令将改为补全到这些补全备选方案中的第一个；每次后续调用补全命令都会以循环方式将其替换为下一个补全备选方案。如果给<code>completion-cycle-threshold</code>一个数值<var>n</var>，则仅当有<var>n</var>或更少替代选项时，补全命令才会切换到此循环行为。
</p>

<a name="Minibuffer-History"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Repetition" accesskey="n" rel="next">Repetition</a>, Previous: <a href="#Completion" accesskey="p" rel="prev">Completion</a>, Up: <a href="#Minibuffer" accesskey="u" rel="up">Minibuffer</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Minibuffer-History-1"></a>
<h3 class="section">8.5迷你缓冲区历史记录</h3>
<a name="index-minibuffer-history"></a>
<a name="index-history-of-minibuffer-input"></a>

<p>您使用迷你缓冲区输入的每个参数都保存在<em>迷你缓冲区历史列表</em>中，这样您以后就可以轻松地再次使用它。您可以使用以下参数将较早的参数快速提取到迷你缓冲区中：
</p>
<dl compact="compact">
<dt><kbd>M-p</kbd></dt>
<dd><p>移至迷你缓冲区历史记录中的上一项，即较早的参数(<code>previous-history-element</code>)。
</p></dd>
<dt><kbd>M-n</kbd></dt>
<dd><p>移至迷你缓冲区历史记录中的下一项(<code>next-history-element</code>)。
</p></dd>
<dt><kbd><span class="key">UP</span></kbd></dt>
<dt><kbd><span class="key">DOWN</span></kbd></dt>
<dd><p>与<kbd>M-p</kbd>和<kbd>M-n</kbd>类似，但在转到上一历史记录项目(<code>previous-line-or-history-element</code>和<code>next-line-or-history-element</code>)之前移动到多行项目的上一行或下一行。
</p></dd>
<dt><kbd>M-r <var>regexp</var> <span class="key">RET</span></kbd></dt>
<dd><p>移动到迷你缓冲区历史记录中与<var>regexp</var>匹配的较早项(<code>previous-matching-history-element</code>)。
</p></dd>
<dt><kbd>M-s <var>regexp</var> <span class="key">RET</span></kbd></dt>
<dd><p>移动到迷你缓冲区历史记录中与<var>regexp</var>匹配的后一项(<code>next-matching-history-element</code>)。
</p></dd>
</dl>

<a name="index-M_002dp-_0028minibuffer-history_0029"></a>
<a name="index-M_002dn-_0028minibuffer-history_0029"></a>
<a name="index-next_002dhistory_002delement"></a>
<a name="index-previous_002dhistory_002delement"></a>
<p>在迷你缓冲区中时，<kbd>M-p</kbd>(<code>previous-history-element</code>)在迷你缓冲区历史列表中移动，一次移动一项。每个<kbd>M-p</kbd>从历史记录列表中取出一个较早的项到迷你缓冲区，替换其现有内容。键入<kbd>M-n</kbd>(<code>next-history-element</code>)以相反的方向遍历迷你缓冲区历史列表，将稍后的项提取到迷你缓冲区中。
</p>
<p>如果在迷你缓冲区历史记录中没有以后的项目时在迷你缓冲区中键入<kbd>M-n</kbd>(例如，如果您以前没有键入过<kbd>M-p</kbd>)，则Emacs会尝试从默认参数列表中提取：您可能会输入的值。你可以认为这是在穿越“未来的历史”。
</p>
<a name="index-future-history-for-file-names"></a>
<a name="index-minibuffer-defaults-for-file-names"></a>
<a name="index-file_002dname_002dat_002dpoint_002dfunctions"></a>
<p>文件名的“未来历史”包括几个您可能会觉得有用的备选方案，例如文件名或当前缓冲区中各点的URL。在这种情况下，放入“未来历史”中的默认值由选项<code>file-name-at-point-functions</code>的值中提到的函数控制。默认情况下，它的值调用<code>ffap</code>包(请参阅<a href="#FFAP">FFAP</a>)，该包尝试从游标周围的文本猜测默认文件或URL。要禁用这种猜测，请将该选项自定义为<code>nil</code>值，那么文件名的“未来历史”将只包括当前缓冲区访问的文件(如果有的话)和默认目录。
</p>
<a name="index-previous_002dline_002dor_002dhistory_002delement"></a>
<a name="index-next_002dline_002dor_002dhistory_002delement"></a>
<a name="index-UP-_0028minibuffer-history_0029"></a>
<a name="index-DOWN-_0028minibuffer-history_0029"></a>
<p>箭头键<kbd><span class="key">UP</span></kbd>和<kbd><span class="key">DOWN</span></kbd>类似于<kbd>M-p</kbd>和<kbd>M-n</kbd>，但是如果当前历史项目超过一行，则它们允许您在转到上一个或下一个历史项目之前移动到当前历史项目的上一行或下一行。
</p>
<p>如果编辑由<kbd>M-p</kbd>或<kbd>M-n</kbd>迷你缓冲区历史命令插入的文本，这不会更改其在历史记录列表中的条目。但是，当您提交已编辑的参数时，它确实会出现在历史记录列表的末尾。
</p>
<a name="index-previous_002dmatching_002dhistory_002delement"></a>
<a name="index-next_002dmatching_002dhistory_002delement"></a>
<a name="index-M_002dr-_0028minibuffer-history_0029"></a>
<a name="index-M_002ds-_0028minibuffer-history_0029"></a>
<p>您可以使用<kbd>M-r</kbd>(<code>previous-matching-history-element</code>)搜索历史列表中较旧的元素，使用<kbd>M-s</kbd>(<code>next-matching-history-element</code>)搜索较新的条目。这些命令中的每一个都要求将<em>正则表达式</em>作为参数，并将第一个匹配的条目提取到迷你缓冲区中。有关正则表达式的说明，请参阅<a href="#Regexps">正则表达式</a>。数字前缀参数<var>n</var>表示提取<var>n</var>条匹配。这些命令是不寻常的，因为它们使用迷你缓冲区来读取正则表达式参数，即使它们是从迷你缓冲区调用的。正则表达式中的大写字母使搜索区分大小写(请参见<a href="#Lax-Search">松散搜索</a>)。
</p>
<p>您还可以使用增量搜索来搜索历史记录。请参阅<a href="#Isearch-Minibuffer">iSearch迷你缓冲区</a>。
</p>
<p>Emacs为几种不同类型的参数保存单独的历史记录列表。例如，有一个文件名列表，所有读取文件名的命令都使用该列表。其他历史记录列表包括缓冲区名称、命令名称(由<kbd>M-x</kbd>使用)和命令参数(由<code>query-replace</code>等命令使用)。
</p>
<a name="index-history_002dlength"></a>
<p>变量<code>history-length</code>指定迷你缓冲区历史列表的最大长度；如果列表太长，添加新元素会删除最旧的元素。如果值为<code>t</code>，则没有最大长度。
</p>
<a name="index-history_002ddelete_002dduplicates"></a>
<p>变量<code>history-delete-duplicates</code>指定是否删除历史记录中的重复项。如果它是非<code>nil</code>，则添加新元素将从列表中删除与其相等的所有其他元素。默认值为<code>nil</code>。
</p>

<a name="Repetition"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Passwords" accesskey="n" rel="next">Passwords</a>, Previous: <a href="#Minibuffer-History" accesskey="p" rel="prev">Minibuffer History</a>, Up: <a href="#Minibuffer" accesskey="u" rel="up">Minibuffer</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Repeating-Minibuffer-Commands"></a>
<h3 class="section">8.6重复迷你缓冲区命令</h3>
<a name="index-command-history"></a>
<a name="index-history-of-commands"></a>

<p>使用迷你缓冲区一次的每个命令及其参数值都记录在一个特殊的历史列表中，即<em>命令历史</em>，以便您可以重复整个命令。特别是，由于<kbd>M-x</kbd>使用微型缓冲区读取命令名，因此这里记录了<kbd>M-x</kbd>的每次使用。
</p>
<a name="index-list_002dcommand_002dhistory"></a>
<dl compact="compact">
<dt><kbd>C-x <span class="key">ESC</span> <span class="key">ESC</span></kbd></dt>
<dd><p>从命令历史记录重新执行最近的迷你缓冲区命令(<code>repeat-complex-command</code>)。
</p></dd>
<dt><kbd>M-x list-command-history</kbd></dt>
<dd><p>显示整个命令历史记录，显示<kbd>C-x <span class="key">ESC</span> <span class="key">ESC</span></kbd>可以重复的所有命令，最新的最先。
</p></dd>
</dl>

<a name="index-C_002dx-ESC-ESC"></a>
<a name="index-repeat_002dcomplex_002dcommand"></a>
<p><kbd>C- x<span class="key">ESC</span> <span class="key">ESC</span></kbd>重新执行使用迷你缓冲区的最近命令。在没有参数的情况下，它重复最后一个这样的命令。数字参数指定要重复的命令；1表示最后一个命令，2表示上一个命令，依此类推。
</p>
<p><kbd>C- x <span class="key">ESC</span> <span class="key">ESC</span></kbd>的工作方式是将前面的命令转换为Lisp表达式，然后输入用该表达式的文本初始化的迷你缓冲区。即使您不了解Lisp，显示哪个命令以供重复也可能是显而易见的。如果您只键入<tt class="key">RET</tt>，则重复该命令不会改变。您还可以通过在执行命令之前编辑Lisp表达式来更改命令。执行的命令将添加到命令历史记录的前面，除非它与最近的项目相同。
</p>
<p>进入<kbd>C-x <span class="key">ESC</span> <span class="key">ESC</span></kbd>的迷你缓冲区后，可以使用常用的迷你缓冲区历史记录命令(请参阅<a href="#Minibuffer-History">微型缓冲区历史记录</a>)在历史记录列表中移动。找到所需的前一个命令后，您可以像往常一样编辑其表达式，然后通过键入<tt class="key">RET</tt>来执行它。
</p>
<a name="index-isearch_002dresume_002din_002dcommand_002dhistory"></a>
<p>严格地说，增量搜索不使用迷你缓冲区。因此，尽管它的行为类似于复杂命令，但它通常不会出现在<kbd><span class="nolinebreak">C-x</span>&nbsp;<span class="key">ESC</span>&nbsp;<span class="key">ESC</span></kbd>的历史记录列表中<!-- /@w -->. 通过将<code>isearch-resume-in-command-history</code>设置为非<code>nil</code>值，可以使增量搜索命令出现在历史记录中。请参阅<a href="#Incremental-Search">增量搜索</a>。
</p>
<a name="index-command_002dhistory"></a>
<p>以前使用迷你缓冲区的命令列表以Lisp列表的形式存储在变量<code>command-history</code>中。每个元素都是描述一个命令及其参数的Lisp表达式。Lisp程序可以通过使用<code>command-history</code>元素调用<code>eval</code>来重新执行命令。
</p>

<a name="Passwords"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Yes-or-No-Prompts" accesskey="n" rel="next">Yes or No Prompts</a>, Previous: <a href="#Repetition" accesskey="p" rel="prev">Repetition</a>, Up: <a href="#Minibuffer" accesskey="u" rel="up">Minibuffer</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Entering-passwords"></a>
<h3 class="section">8.7输入密码</h3>

<p>有时，您可能需要在Emacs中输入密码。例如，当您告诉Emacs通过网络协议(如FTP)访问另一台计算机上的文件时，通常需要提供密码才能访问该计算机(请参阅<a href="#Remote-Files">远程文件</a>)。
</p>
<p>输入密码类似于使用迷你缓冲区。Emacs在回显区显示提示(例如‘<samp>password：</samp>’)；在您键入所需的密码后，按<tt class="key">RET</tt>提交密码。为防止其他人看到您的密码，您键入的每个字符都显示为点(“<samp>.</samp>”)，而不是通常的格式。
</p>
<p>输入密码时，<em>无法使用与迷你缓冲区</em>关联的大多数功能和命令。没有历史记录或补全，在提交密码之前，您不能使用Emacs更改窗口或执行任何其他操作。
</p>
<p>键入密码时，可以按<tt class="key">DEL</tt>向后删除，删除最后输入的字符。<kbd>C-u</kbd>删除您到目前为止键入的所有内容。<kbd>C-g</kbd>退出密码提示(请参阅<a href="#Quitting">退出</a>)。<kbd>C-y</kbd>将当前剪切字内容插入到密码中(请参阅<a href="#Killing">剪切</a>)。您可以键入<tt class="key">RET</tt>或<tt class="key">ESC</tt>提交密码。任何其他自插入字符键都会将关联的字符插入到密码中，并且忽略所有其他输入。
</p>

<a name="Yes-or-No-Prompts"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Passwords" accesskey="p" rel="prev">Passwords</a>, Up: <a href="#Minibuffer" accesskey="u" rel="up">Minibuffer</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Yes-or-No-Prompts-1"></a>
<h3 class="section">8.8确认提示</h3>

<p>Emacs命令可能要求您在执行过程中回答是或否的问题。这样的查询主要有两种类型。
</p>
<a name="index-y-or-n-prompt"></a>
<p>对于第一种是或否查询，提示符以“<samp>(y&nbsp;or&nbsp;n)</samp>”结束<!-- /@w -->. 您可以通过键入单个键“<samp>y</samp>”或“<samp>n</samp>”来回答查询，这将立即退出迷你缓冲区并传递响应。例如，如果您键入<kbd>C-x C-w</kbd>(<kbd>write-file</kbd>)保存缓冲区，并输入现有文件的名称，则Emacs会发出如下提示：
</p>
<div class="smallexample">
<pre class="smallexample">File ‘foo.el’ exists; overwrite?(y or n)
</pre></div>

<a name="index-yes-or-no-prompt"></a>
<p>如果给出错误答案会产生严重后果，则通常使用第二种是或否查询；因此，它的提示以“<samp>(yes or no)</samp>”结尾。例如，如果在具有未保存更改的文件访问缓冲区上调用<kbd>C-x k</kbd>(<code>kill-buffer</code>)，则Emacs会使用如下提示激活迷你缓冲区：
</p>
<div class="smallexample">
<pre class="smallexample">Buffer foo.el modified; kill anyway?(yes or no)
</pre></div>

<p>若要回答，必须在微型缓冲区中键入“<samp>yes</samp>”或“<samp>no</samp>”，后跟<tt class="key">RET</tt>。
</p>
<p>对于这两种类型的是或否查询，迷你缓冲区的行为如前面各节中所述；您可以使用<kbd>C-l</kbd>将选定窗口重新居中，滚动窗口(使用<kbd>C-v</kbd>或<kbd>PageDown</kbd>向前滚动，使用<kbd>M-v</kbd>或<kbd>PageUp</kbd>)向后滚动)，使用<kbd>C-x o</kbd>切换到另一个窗口，使用历史命令<kbd>M-p</kbd>和<kbd>M-n</kbd>键入<kbd>C-g</kbd>取消查询，然后退出迷你缓冲区和查询命令(请参阅<a href="#Quitting">退出</a>)。
</p><hr>
<a name="M_002dx"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Help" accesskey="n" rel="next">Help</a>, Previous: <a href="#Minibuffer" accesskey="p" rel="prev">Minibuffer</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Running-Commands-by-Name"></a>
<h2 class="chapter">9 按名称运行命令</h2>

<p>每个Emacs命令都有一个可以用来运行它的名称。为方便起见，许多命令还具有键绑定。您可以通过键入快捷键来运行这些命令，也可以按名称运行它们。大多数Emacs命令没有键绑定，因此运行它们的唯一方式是按名称。(有关如何设置键绑定，请参阅<a href="#Key-Bindings">按键绑定</a>。)
</p>
<p>按照惯例，命令名由一个或多个用连字符分隔的单词组成；例如，<code>auto-fill-mode</code>或<code>manual-entry</code>。命令名称大多使用完整的英文单词，以便于记忆。
</p>
<a name="index-M_002dx"></a>
<p>要按名称运行命令，请以<kbd>M-x</kbd>开头，键入命令名，然后以<tt class="key">RET</tt>结束。<kbd>M-x</kbd>使用迷你缓冲区读取命令名。字符串“<samp>M-x</samp>”显示在迷你缓冲区的开头，作为<em>提示</em>，提醒您输入要运行的命令名。<tt class="key">RET</tt>退出迷你缓冲区并运行该命令。有关迷你缓冲区的详细信息，请参阅<a href="#Minibuffer">迷你缓冲区</a>。
</p>
<p>可以使用补全功能输入命令名。例如，要调用命令<code>forward-char</code>，您可以键入
</p>
<div class="example">
<pre class="example">M-x forward-char <span class="key">RET</span>
</pre></div>

<p>或者
</p>
<div class="example">
<pre class="example">M-x forw <span class="key">TAB</span> c <span class="key">RET</span>
</pre></div>

<p>请注意，<code>forward-char</code>与您使用键<kbd>C-f</kbd>调用的命令相同。键绑定的存在不会阻止您按名称运行该命令。
</p>
<a name="index-obsolete-command"></a>
<p>当<kbd>M-x</kbd>补全命令时，它将忽略声明为<em>已过时</em>的命令；对于这些命令，您必须键入其全名。过时的命令是那些存在更新的、更好的替代命令的命令，并且计划在将来的某些Emacs版本中删除这些命令。
</p>
<p>若要取消<kbd>M-x</kbd>并且不运行命令，请键入<kbd>C-g</kbd>而不是输入命令名。这会将您带回命令级别。
</p>
<p>要将数值参数传递给使用<kbd>M-x</kbd>调用的命令，请在<kbd>M-x</kbd>之前指定数值参数。当读取命令名时，参数值出现在提示符中，最后<kbd>M-x</kbd>将该参数传递给该命令。例如，要将数值参数42传递给命令<code>forward-char</code>，您可以键入<kbd>C-u 42 M-x forward-char<span class="key">RET</span></kbd>。
</p>
<a name="index-suggest_002dkey_002dbindings"></a>
<p>当您使用<kbd>M-x</kbd>运行的命令具有键绑定时，Emacs会在运行该命令后在回显区中提到这一点。例如，如果您键入<kbd>M-x forward-word</kbd>，则消息显示您可以通过键入<kbd>M-f</kbd>来运行相同的命令。您可以通过将变量<code>suggest-key-bindings</code>设置为<code>nil</code>来关闭这些消息。<code>suggest-key-bindings</code>的值也可以是一个数字，在这种情况下，Emacs将在将绑定从显示中删除之前显示绑定的秒数。默认行为是显示绑定2秒。
</p>
<a name="index-extended_002dcommand_002dsuggest_002dshorter"></a>
<p>在“<samp>M-x</samp>”提示符下键入的全名小于其全名后，仍可以调用没有键绑定的命令。如果这些速记比完整命令名短得多，则Emacs会回显区中提及这些速记，并且<code>extended-command-suggest-shorter</code>是非<code>nil</code>。<code>suggest-key-bindings</code>的设置也会影响这些提示。
</p>
<p>在本手册中，当我们谈到按名称运行命令时，我们经常省略终止该名称的<tt class="key">RET</tt>。因此，我们可以说<kbd>M-x auto-fill-mode</kbd>而不是<kbd><span class="nolinebreak">M-x</span><span class="nolinebreak">auto-fill-mode</span><span class="key">RET</span></kbd><!-- /@w -->. 我们提到<tt class="key">RET</tt>只是为了强调，例如当命令后面跟着参数时。
</p>
<a name="index-execute_002dextended_002dcommand"></a>
<p><kbd>M-x</kbd>通过运行命令<code>execute-extended-command</code>工作，该命令负责读取另一个命令的名称并调用它。
</p><hr>
<a name="Help"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Mark" accesskey="n" rel="next">Mark</a>, Previous: <a href="#M_002dx" accesskey="p" rel="prev">M-x</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Help-2"></a>
<h2 class="chapter">10帮助</h2>
<a name="index-help"></a>
<a name="index-self_002ddocumentation"></a>
<a name="index-help_002dcommand"></a>
<a name="index-C_002dh"></a>
<a name="index-F1"></a>

<a name="index-C_002dh-C_002dh"></a>
<a name="index-help_002dfor_002dhelp"></a>
<p>Emacs提供了各种各样的帮助命令，都可以通过前缀键<kbd>C-h</kbd>(或等效的功能键<tt class="key">F1</tt>)访问。以下各节将介绍这些帮助命令。您还可以键入<kbd>C-h C-h</kbd>以查看帮助命令列表(<code>help-for-help</code>)。您可以使用<tt class="key">SPC</tt>和<tt class="key">DEL</tt>滚动列表，然后键入所需的帮助命令。若要取消，请键入<kbd>C-g</kbd>。
</p>
<p>许多帮助命令在特殊的<em>帮助缓冲区</em>中显示其信息。在此缓冲区中，您可以键入<tt class="key">SPC</tt>和<tt class="key">DEL</tt>滚动，键入<tt class="key">RET</tt>跟踪超链接。请参阅<a href="#Help-Mode">帮助模式</a>。
</p>
<a name="index-searching-documentation-efficiently"></a>
<a name="index-looking-for-a-subject-in-documentation"></a>
<p>如果您正在寻找某个功能，但不知道它叫什么或在哪里查找，我们推荐三种方法。首先，尝试使用主题命令，然后尝试搜索手动索引，然后查看FAQ和软件包关键字。
</p>
<dl compact="compact">
<dt><kbd>C-h a <var>topics</var> <span class="key">RET</span></kbd></dt>
<dd><p>这将搜索名称与参数<var>主题</var>匹配的命令。参数可以是关键字、关键字列表或正则表达式(请参阅<a href="#Regexps">正则表达式</a>)。请参阅<a href="#Apropos">主题</a>。
</p>
</dd>
<dt><kbd>C-h i d m emacs <span class="key">RET</span> i <var>主题</var> <span class="key">RET</span></kbd></dt>
<dd><p>这将在Emacs信息手册的索引中搜索<var>主题</var>，并显示找到的第一个匹配项。按<kbd>,</kbd>查看后续匹配。您可以使用一个正则表达式用作<var>主题</var>。
</p>
</dd>
<dt><kbd>C-h i d m emacs <span class="key">RET</span> s <var>主题</var> <span class="key">RET</span></kbd></dt>
<dd><p>类似，但是它搜索手册的<em>文本</em>而不是索引。
</p>
</dd>
<dt><kbd>C-h C-f</kbd></dt>
<dd><p>这将使用信息显示Emacs常见问题。
</p>
</dd>
<dt><kbd>C-h p</kbd></dt>
<dd><p>这将根据关键字显示可用的Emacs包。请参阅<a href="#Package-Keywords">包关键字</a>。
</p></dd>
</dl>

<p><kbd>C-h</kbd>或<tt class="key">F1</tt>在各种其他上下文中也意味着“帮助”。例如，您可以在前缀键之后键入它们，以查看可以跟随在前缀键之后的键的列表。(您还可以在此上下文中使用<kbd>?</kbd>。有几个前缀键不支持<kbd>C-h</kbd>或<kbd>?</kbd>，因为它们为这些输入定义了其他含义，但它们都支持<tt class="key">F1</tt>。)
</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Help-Summary" accesskey="1">帮助概述</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">所有帮助命令的简短列表。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Key-Help" accesskey="2">按键帮助</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">询问指定快捷键在Emacs中的作用。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Name-Help" accesskey="3">命令名称帮助</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">询问命令、变量或函数名的作用。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Apropos" accesskey="4">主题搜索</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">询问与给定主题有关的内容。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Help-Mode" accesskey="5">帮助模式</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">帮助模式和帮助缓冲区的特殊功能。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Package-Keywords" accesskey="6">包关键字</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">通过关键字(主题)查找Lisp库。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Language-Help" accesskey="7">语言帮助</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">与国际语言支持相关的帮助。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Misc-Help" accesskey="8">其他帮助</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">其他帮助命令。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Help-Files" accesskey="9">帮助文件</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">用于显示辅助帮助文件的命令。
</td></tr>
<tr><td align="left" valign="top">• <a href="#Help-Echo">帮助信息回显</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">有关交互文本和工具提示的帮助(“气泡式帮助”)。
</td></tr>
</tbody></table>


<a name="Help-Summary"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Key-Help" accesskey="n" rel="next">Key Help</a>, Up: <a href="#Help" accesskey="u" rel="up">Help</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Help-Summary-1"></a>
<h3 class="section">10.1帮助概述</h3>

<p>以下是用于访问内置文档的帮助命令摘要。以下各节将更详细地介绍其中的大部分内容。
</p>
<dl compact="compact">
<dt><kbd>C-h a <var>topics</var> <span class="key">RET</span></kbd></dt>
<dd><p>显示名称与<var>主题</var>匹配的命令列表(<code>apropos-command</code>)。请参阅<a href="#Apropos">主题</a>。
</p></dd>
<dt><kbd>C-h b</kbd></dt>
<dd><p>显示所有激活的键绑定；首先显示辅模式绑定，然后显示主模式的绑定，然后显示全局绑定(<code>describe-bindings</code>)。请参阅<a href="#Misc-Help">其他帮助</a>。
</p></dd>
<dt><kbd>C-h c <var>key</var></kbd></dt>
<dd><p>显示键序列<var>快捷键</var>绑定到的命令的名称(<code>describe-key-briefly</code>)。这里<kbd>c</kbd>代表“字符”。有关<var>快捷键</var>的更多信息，请使用<kbd>C-h k</kbd>。请参阅<a href="#Key-Help">快捷键帮助</a>。
</p></dd>
<dt><kbd>C-h d <var>topics</var> <span class="key">RET</span></kbd></dt>
<dd><p>显示其文档与<var>主题</var>(<code>apropos-documentation</code>)匹配的命令和变量。请参阅<a href="#Apropos">主题</a>。
</p></dd>
<dt><kbd>C-h e</kbd></dt>
<dd><p>显示<samp>*Messages*</samp>缓冲区(<code>view-echo-area-messages</code>)。请参阅<a href="#Misc-Help">其他帮助</a>。
</p></dd>
<dt><kbd>C-h f <var>function</var> <span class="key">RET</span></kbd></dt>
<dd><p>显示有关名为<var>function</var>(<code>describe-function</code>)的Lisp函数的文档。因为命令是Lisp函数，所以这也适用于命令。请参阅<a href="#Name-Help">命令名称帮助</a>。
</p></dd>
<dt><kbd>C-h h</kbd></dt>
<dd><p>显示<samp>HELLO</samp>文件，该文件显示各种字符集的示例。
</p></dd>
<dt><kbd>C-h i</kbd></dt>
<dd><p>运行GNU文档浏览器Info(<code>info</code>)。Emacs手册可以在Info中找到。请参阅<a href="#Misc-Help">其他帮助</a>。
</p></dd>
<dt><kbd>C-h k <var>key</var></kbd></dt>
<dd><p>显示<var>快捷键</var>运行的命令的名称和文档(<code>describe-key</code>)。请参阅<a href="#Key-Help">快捷键帮助</a>。
</p></dd>
<dt><kbd>C-h l</kbd></dt>
<dd><p>显示最近300次按键的说明(<code>view-lossage</code>)。请参阅<a href="#Misc-Help">其他帮助</a>。
</p></dd>
<dt><kbd>C-h m</kbd></dt>
<dd><p>显示当前主模式和辅模式的文档(<code>describe-mode</code>)。请参阅<a href="#Misc-Help">其他帮助</a>。
</p></dd>
<dt><kbd>C-h n</kbd></dt>
<dd><p>显示Emacs最近更改的新闻(<code>view-emacs-news</code>)。请参阅<a href="#Help-Files">帮助文件</a>。
</p></dd>
<dt><kbd>C-h o <var>symbol</var></kbd></dt>
<dd><p>显示名为<var>symbol</var>(<code>describe-symbol</code>)的Lisp符号的文档。这将显示各种符号的文档：函数、变量和字符样式。请参阅<a href="#Name-Help">命令名称帮助</a>。
</p></dd>
<dt><kbd>C-h p</kbd></dt>
<dd><p>按主题关键字查找包(<code>finder-by-keyword</code>)。请参阅<a href="#Package-Keywords">包关键字</a>。这将使用包菜单缓冲区列出包。请参阅<a href="#Packages">包</a>。
</p></dd>
<dt><kbd>C-h P <var>package</var> <span class="key">RET</span></kbd></dt>
<dd><p>显示有关指定包的文档(<code>describe-package</code>)。请参阅<a href="#Package-Keywords">包关键字</a>。
</p></dd>
<dt><kbd>C-h r</kbd></dt>
<dd><p>在Info中显示Emacs手册(<code>info-emacs-manual</code>)。
</p></dd>
<dt><kbd>C-h s</kbd></dt>
<dd><p>显示当前<em>语法表</em>(<code>describe-syntax</code>)的内容。请参阅<a href="#Misc-Help">其他帮助</a>。语法表说明哪些字符是开始分隔符，哪些是单词的一部分，等等。有关详细信息，请参阅<cite>Emacs Lisp参考手册</cite>中的<a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Syntax-Tables">语法表</a>。
</p></dd>
<dt><kbd>C-h t</kbd></dt>
<dd><p>进入Emacs交互式教程(<code>教程帮助</code>)。
</p></dd>
<dt><kbd>C-h v <var>var</var> <span class="key">RET</span></kbd></dt>
<dd><p>显示Lisp变量<var>var</var>(<code>describe-variable</code>)的文档。请参阅<a href="#Name-Help">命令名称帮助</a>。
</p></dd>
<dt><kbd>C-h w <var>command</var> <span class="key">RET</span></kbd></dt>
<dd><p>显示命令名为<var>command</var>(<code>where-is</code>)的命令绑定了哪些按键。请参阅<a href="#Key-Help">快捷键帮助</a>。
</p></dd>
<dt><kbd>C-h C <var>coding</var> <span class="key">RET</span></kbd></dt>
<dd><p>描述编码系统<var>编码</var>(<code>describe-coding-system</code>)。请参阅<a href="#Coding-Systems">编码系统</a>。
</p></dd>
<dt><kbd>C-h C <span class="key">RET</span></kbd></dt>
<dd><p>描述当前使用的编码系统。
</p></dd>
<dt><kbd>C-h F <var>command</var> <span class="key">RET</span></kbd></dt>
<dd><p>打开Info并转到记录Emacs命令<var>命令</var>(<code>Info-goto-emacs-command-node</code>)的节点。请参阅<a href="#Name-Help">命令名称帮助</a>。
</p></dd>
<dt><kbd>C-h I <var>method</var> <span class="key">RET</span></kbd></dt>
<dd><p>描述输入法<var>方法</var>(<code>describe-input-method</code>)。请参阅<a href="#Select-Input-Method">选择输入法</a>。
</p></dd>
<dt><kbd>C-h K <var>key</var></kbd></dt>
<dd><p>打开Info并转到记录键序列<var>快捷键</var>(<code>Info-goto-emacs-key-command-node</code>)的节点。请参阅<a href="#Key-Help">快捷键帮助</a>。
</p></dd>
<dt><kbd>C-h L <var>language-env</var> <span class="key">RET</span></kbd></dt>
<dd><p>显示有关语言环境<var>language-env</var>(<code>describe-language-environment</code>)中使用的字符集、编码系统和输入法的信息。请参阅<a href="#Language-Environments">语言环境</a>。
</p></dd>
<dt><kbd>C-h S <var>symbol</var> <span class="key">RET</span></kbd></dt>
<dd><p>根据您正在编辑的编程语言(<code>info-lookup-symbol</code>)显示有关符号<var>符号</var>的信息文档。请参阅<a href="#Misc-Help">其他帮助</a>。
</p></dd>
<dt><kbd>C-h .</kbd></dt>
<dd><p>如果游标在一个文本区域(<code>display-local-help</code>)，则显示特殊文本区域的帮助消息。(例如，这些链接包括<samp>*Help*</samp>缓冲区中的链接。)请参阅<a href="#Help-Echo">帮助回显</a>。
</p></dd>
</dl>


<a name="Key-Help"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Name-Help" accesskey="n" rel="next">Name Help</a>, Previous: <a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Help-Summary" accesskey="p" rel="prev">Help Summary</a>, Up: <a href="#Help" accesskey="u" rel="up">Help</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Documentation-for-a-Key"></a>
<h3 class="section">10.2快捷键文档</h3>

<a name="index-describe_002dkey_002dbriefly"></a>
<a name="index-describe_002dkey"></a>
<p>用于获取键序列信息的帮助命令是<kbd>C-h c</kbd>(<code>describe-key-briefly</code>)和<kbd>C-h k</kbd>(<code>describe-key</code>)。
</p>
<a name="index-C_002dh-c"></a>
<p><kbd>C-h c<var>key</var></kbd>在回显区显示<var>key</var>绑定到的命令的名称。例如，<kbd>C-h c C-f</kbd>显示‘<samp>forward-char</samp>’。
</p>
<a name="index-documentation-string"></a>
<a name="index-C_002dh-k"></a>
<p><kbd>C-h k<var>key</var></kbd>类似，但提供了更多信息：它显示包含命令的<em>文档字符串</em>的帮助缓冲区，该字符串准确描述了命令的功能。
</p>
<a name="index-C_002dh-K"></a>
<a name="index-Info_002dgoto_002demacs_002dkey_002dcommand_002dnode"></a>
<p><kbd>C-h K<var>key</var></kbd>显示Emacs手册中描述与<var>key</var>对应的命令的部分。
</p>
<p><kbd>C-h c</kbd>, <kbd>C-h k</kbd> 和 <kbd>C-h K</kbd> 适用于任何类型的键序列，包括功能键、菜单和鼠标事件(但<kbd>C-h c</kbd>忽略鼠标移动事件除外)。例如，在<kbd>C-h k</kbd>之后，您可以从菜单栏中选择菜单项，以查看其运行的命令的文档字符串。
</p>
<a name="index-C_002dh-w"></a>
<a name="index-where_002dis"></a>
<p><kbd>C-h w<var>command</var><span class="key">RET</span></kbd>列出绑定到<var>command</var>的按键。它会在回显区中显示列表。如果它显示该命令不在任何键上，这意味着您必须使用<kbd>M-x</kbd>来运行它。<kbd>C-h w</kbd>运行命令<code>where-is</code>。
</p>

<a name="Name-Help"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Apropos" accesskey="n" rel="next">Apropos</a>, Previous: <a href="#Key-Help" accesskey="p" rel="prev">Key Help</a>, Up: <a href="#Help" accesskey="u" rel="up">Help</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Help-by-Command-or-Variable-Name"></a>
<h3 class="section">10.3按命令或变量名提供帮助</h3>

<a name="index-C_002dh-f"></a>
<a name="index-describe_002dfunction"></a>
<p><kbd>C-h f<var>函数</var><span class="key">RET</span></kbd>(<code>describe-function</code>)在窗口中显示Lisp函数<var>函数</var>的文档。因为命令是Lisp函数，所以您可以使用此方法查看您知道其名称的任何命令的文档。例如,
</p>
<div class="example">
<pre class="example">C-h f auto-fill-mode <span class="key">RET</span>
</pre></div>

<p>显示<code>auto-fill-mode</code>的文档。这是获取未绑定到任何键(通常使用<kbd>M-x</kbd>运行的键)的命令文档的唯一方法。
</p>
<p><kbd>C-h f</kbd>对于您在Lisp程序中使用的Lisp函数也很有用。例如，如果您刚刚编写了表达式<code>(make-vector len)</code>，并且希望检查您是否正确使用了<code>make-vector</code>，请键入<kbd>C-h f make-vector<span class="key">RET</span></kbd>。由于<kbd>C-h f</kbd>允许所有函数名，而不仅仅是命令名，因此您可能会发现，您喜欢的一些在<kbd>M-x</kbd>中使用的完成缩写在<kbd>C-h f</kbd>中不起作用。在命令名中唯一的缩写在所有函数名中可能不是唯一的。
</p>
<p>如果键入<kbd>C-h f<span class="key">RET</span></kbd>，它将描述游标周围缓冲区中最内层的Lisp表达式调用的函数，<em>前提是</em>函数名是有效的、已定义的Lisp函数。(当您输入参数时，该名称显示为默认值。)例如，如果游标位于文本‘<samp>(make-vector (car x)</samp>’之后，则包含游标的最内层列表是以‘<samp>(make-vector</samp>’开始的那个，因此<kbd>C-h f<span class="key">RET</span></kbd>描述了<code>make-vector</code>函数。
</p>
<p><kbd>C-h f</kbd>也可用于验证函数名是否拼写正确。如果<kbd>C-h f</kbd>的迷你缓冲区提示将缓冲区中的函数名显示为默认值，则意味着该名称被定义为Lisp函数。如果您确实不想查看文档，请键入<kbd>C-g</kbd>取消<kbd>C-h f</kbd>命令。
</p>
<a name="index-C_002dh-v"></a>
<a name="index-describe_002dvariable"></a>
<p><kbd>C-h v</kbd>(<code>describe-variable</code>)类似于<kbd>C-h f</kbd>，但描述的是Lisp变量，而不是Lisp函数。如果它是已定义的Lisp变量的名称，则它的默认值是点前后的Lisp符号。请参阅<a href="#Variables">变量</a>。
</p>
<p>如果您安装了源文件，则描述Emacs变量和函数的帮助缓冲区通常具有指向相应源代码的超链接(请参阅<a href="#Hyperlinking">超链接</a>)。
</p>
<a name="index-C_002dh-F"></a>
<a name="index-Info_002dgoto_002demacs_002dcommand_002dnode"></a>
<p>要在手册中查找命令文档，请使用<kbd>C-h F</kbd>(<code>Info-goto-emacs-command-node</code>)。它了解各种手册，而不仅仅是Emacs手册，并且找到了正确的手册。
</p>
<a name="index-C_002dh-o"></a>
<a name="index-describe_002dsymbol"></a>
<p><kbd>C-h o</kbd>(<code>describe-symbol</code>)类似于<kbd>C-h f</kbd>和<kbd>C-h v</kbd>，但它描述任何符号，可以是函数、变量或字符样式。如果符号有多个定义，比如它同时定义为函数和变量，则此命令将一个接一个地显示所有定义的文档。
</p>

<a name="Apropos"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Help-Mode" accesskey="n" rel="next">Help Mode</a>, Previous: <a href="#Name-Help" accesskey="p" rel="prev">Name Help</a>, Up: <a href="#Help" accesskey="u" rel="up">Help</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Apropos-1"></a>
<h3 class="section">10.4主题搜索</h3>
<a name="index-apropos"></a>

<p><em>主题搜索</em>命令回答类似于“处理文件的命令是什么？”。更准确地说，您指定了一个<em>主题的模式</em>，它表示一个单词、一个单词列表或一个正则表达式。
</p>
<p>下面的每个主题搜索命令都读取微型缓冲区中的一个主题模式，搜索与该模式匹配的项目，并在不同的窗口中显示结果。
</p>
<dl compact="compact">
<dt><kbd>C-h a</kbd></dt>
<dd><a name="index-C_002dh-a"></a>
<a name="index-apropos_002dcommand"></a>
<p>搜索命令(<code>apropos-command</code>)。使用前缀参数，也可以搜索非交互函数。
</p>
</dd>
<dt><kbd>M-x apropos</kbd></dt>
<dd><a name="index-apropos-1"></a>
<p>搜索函数和变量。由此可以找到交互功能(命令)和非交互功能。
</p>
</dd>
<dt><kbd>M-x apropos-user-option</kbd></dt>
<dd><a name="index-apropos_002duser_002doption"></a>
<p>搜索用户可自定义的变量。使用前缀参数，还可以搜索不可自定义的变量。
</p>
</dd>
<dt><kbd>M-x apropos-variable</kbd></dt>
<dd><a name="index-apropos_002dvariable"></a>
<p>搜索变量。使用前缀参数时，仅搜索可自定义变量。
</p>
</dd>
<dt><kbd>M-x apropos-local-variable</kbd></dt>
<dd><a name="index-apropos_002dlocal_002dvariable"></a>
<p>搜索缓冲区局部变量。
</p>
</dd>
<dt><kbd>M-x apropos-value</kbd></dt>
<dd><a name="index-apropos_002dvalue"></a>
<p>搜索值与指定模式匹配的变量。使用前缀参数，还可以搜索定义与模式匹配的函数，以及属性与模式匹配的Lisp符号。
</p>
</dd>
<dt><kbd>M-x apropos-local-value</kbd></dt>
<dd><a name="index-apropos_002dlocal_002dvalue"></a>
<p>搜索值与指定模式匹配的缓冲区局部变量。
</p>
</dd>
<dt><kbd>C-h d</kbd></dt>
<dd><a name="index-C_002dh-d"></a>
<a name="index-apropos_002ddocumentation"></a>
<p>搜索文档字符串与指定模式匹配的函数和变量(<code>apropos-documentation</code>)。
</p></dd>
</dl>

<p>最简单的一种主题搜索的句型就是一个词。任何包含这个词的东西都符合这个模式。因此，要查找处理文件的命令，请键入<kbd>C-h a file<span class="key">RET</span></kbd>。这将显示包含“<samp>file</samp>”的所有命令名列表，包括<code>copy-file</code>、<code>find-file</code>等等。每个命令名都有一个简短的描述和当前可以用来调用它的键的列表。在我们的示例中，可以通过键入<kbd>C-x C-f</kbd>来调用<code>find-file</code>。
</p>
<p>有关主题搜索缓冲区中列出的函数定义、变量或符号属性的更多信息，您可以使用<kbd>鼠标左键</kbd>或<kbd>鼠标右键</kbd>单击它，或者移动到那里并键入<tt class="key">RET</tt>。
</p>
<p>当您在主题搜索模式中指定多个单词时，名称必须至少包含两个单词才能匹配。因此，如果您正在寻找在游标之前删除文本块的命令，您可以尝试<kbd>C-h a kill back backward behind before <span class="key">RET</span></kbd>实际的命令名<code>kill-backward</code>将与此匹配；如果有命令<code>kill-text-before</code>，它也会匹配，因为它包含两个指定的单词。
</p>
<p>为了获得更大的灵活性，您可以指定正则表达式(请参见<a href="#Regexps">正则表达式</a>)。如果一个主题模式包含任何正则表达式特殊字符‘<samp>^$*+？.\[</samp>’，则该模式被解释为正则表达式。
</p>
<p>遵循Emacs命令的命名约定，下面是一些在搜索模式中会很有用的单词。通过在<kbd>C-h a</kbd>中使用它们，您还将对命名约定有所了解。
</p>
<blockquote>
<p>char, line, word, sentence, paragraph, region, page, sexp, list, defun,
rect, buffer, frame, window, face, file, dir, register, mode, beginning, end,
forward, backward, next, previous, up, down, search, goto, kill, delete,
mark, insert, yank, fill, indent, case, change, set, what, list, find,
view, describe, default.

</p></blockquote>

<a name="index-apropos_002ddo_002dall"></a>
<p>如果变量<code>apropos-do-all</code>是非<code>nil</code>，则大多数主题搜索命令的行为就像它们被赋予了前缀参数一样。有一个例外：<code>apropos-variable</code>没有前缀参数将始终搜索所有变量，无论<code>apropos-do-all</code>的值是什么。
</p>
<a name="index-apropos_002dsort_002dby_002dscores"></a>
<a name="index-apropos-search-results_002c-order-by-score"></a>
<a name="index-apropos_002ddocumentation_002dsort_002dby_002dscores"></a>
<p>默认情况下，除<code>apropos-documentation</code>之外的所有主题搜索命令都按字母顺序列出其结果。如果变量<code>apropos-sort-by-scores</code>是非<code>nil</code>，则这些命令会尝试猜测每个结果的相关性，并首先显示最相关的结果。<code>apropos-documentation</code>命令默认情况下按相关顺序列出其结果；要按字母顺序列出它们，请将变量<code>apropos-documentation-sort-by-scores</code>更改为<code>nil</code>。
</p>

<a name="Help-Mode"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Package-Keywords" accesskey="n" rel="next">Package Keywords</a>, Previous: <a href="#Apropos" accesskey="p" rel="prev">Apropos</a>, Up: <a href="#Help" accesskey="u" rel="up">Help</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Help-Mode-Commands"></a>
<h3 class="section">10.5帮助模式命令</h3>

<p>帮助缓冲区提供与查看模式相同的命令(请参阅<a href="#View-Mode">View Mode</a>)；例如，<tt class="key">SPC</tt>向前滚动，<tt class="key">DEL</tt>或<kbd>S-<span class="key">SPC</span></kbd>向后滚动。还提供了一些特殊命令：
</p>
<dl compact="compact">
<dt><kbd><span class="key">RET</span></kbd></dt>
<dd><p>在游标上遵循交叉引用(<code>help-follow</code>)。
</p></dd>
<dt><kbd><span class="key">TAB</span></kbd></dt>
<dd><p>将游标移到下一个超链接(<code>forward-button</code>)。
</p></dd>
<dt><kbd>S-<span class="key">TAB</span></kbd></dt>
<dd><p>将游标移回上一个超链接(<code>backward-button</code>)。
</p></dd>
<dt><kbd>鼠标左键</kbd></dt>
<dt><kbd>鼠标右键</kbd></dt>
<dd><p>点击一个超链接。
</p></dd>
<dt><kbd>C-c C-c</kbd></dt>
<dd><p>显示游标处有关符号的所有文档(<code>help-follow-symbol</code>)。
</p></dd>
<dt><kbd>C-c C-f</kbd></dt>
<dt><kbd>r</kbd></dt>
<dd><p>跳转到下一个帮助主题(<code>help-go-forward</code>)。
</p></dd>
<dt><kbd>C-c C-b</kbd></dt>
<dt><kbd>l</kbd></dt>
<dd><p>返回到上一个帮助主题(<code>help-go-back</code>)。
</p></dd>
</dl>

<a name="index-hyperlink"></a>
<a name="index-help_002dfollow"></a>
<a name="index-help_002dgo_002dback"></a>
<a name="index-help_002dgo_002dforward"></a>
<a name="index-RET-_0028Help-mode_0029"></a>
<a name="index-C_002dc-C_002db-_0028Help-mode_0029"></a>
<a name="index-l-_0028Help-mode_0029"></a>
<a name="index-C_002dc-C_002df-_0028Help-mode_0029"></a>
<a name="index-r-_0028Help-mode_0029"></a>
<p>当函数名、变量名或字符样式名(请参阅<a href="#Faces">字符样式</a>)出现在帮助缓冲区的文档中时，它通常是带下划线的<em>超链接</em>。要查看相关文档，请将游标移至此处并键入<tt class="key">RET</tt>(<code>help-follow</code>)，或使用<kbd>鼠标左键</kbd>或<kbd>鼠标右键</kbd>单击超链接。这样做将替换帮助缓冲区的内容；要回溯您的步骤，请键入<kbd>C-c C-b</kbd>或<kbd>l</kbd>(<code>help-go-back</code>)。回溯步骤时，可以使用<kbd>C-c C-f</kbd>或<kbd>r</kbd>(<code>help-go-forward</code>)继续。
</p>
<a name="index-URL_002c-viewing-in-help"></a>
<a name="index-help_002c-viewing-web-pages"></a>
<a name="index-viewing-web-pages-in-help"></a>
<a name="index-web-pages_002c-viewing-in-help"></a>
<p>帮助缓冲区还可以包含指向Info手册、源代码定义和URL(网页)的超链接。前两个是在Emacs中打开的，第三个是通过<code>browse-url</code>命令使用Web浏览器打开的(请参阅<a href="#Browse_002dURL">浏览器链接</a>)。
</p>
<a name="index-TAB-_0028Help-mode_0029"></a>
<a name="index-forward_002dbutton"></a>
<a name="index-S_002dTAB-_0028Help-mode_0029"></a>
<a name="index-backward_002dbutton"></a>
<p>在帮助缓冲区中，<tt class="key">TAB</tt>(<code>forward-button</code>)将游标前移到下一个超链接，而<kbd>S-<span class="key">TAB</span></kbd>(<code>backward-button</code>)将游标移回上一个超链接。这些命令循环执行；例如，在最后一个超链接处键入<tt class="key">TAB</tt>会返回到第一个超链接。
</p>
<p>要查看有关文本中任何符号的所有文档，请将游标移动到该符号，然后键入<kbd>C-c C-c</kbd>(<code>help-follow-symbol</code>)。这显示了符号的所有含义的文档-作为变量、作为函数或作为字符样式。
</p>

<a name="Package-Keywords"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Language-Help" accesskey="n" rel="next">Language Help</a>, Previous: <a href="#Help-Mode" accesskey="p" rel="prev">Help Mode</a>, Up: <a href="#Help" accesskey="u" rel="up">Help</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Keyword-Search-for-Packages"></a>
<h3 class="section">10.6包的关键字搜索</h3>
<a name="index-finder"></a>

<p>Emacs中的大多数可选功能都分组到<em>包</em>中。Emacs包含数百个内置软件包，还可以通过网络安装更多(请参阅<a href="#Packages">包</a>)。
</p>
<a name="index-C_002dh-p"></a>
<a name="index-finder_002dby_002dkeyword"></a>
<p>为了更容易地查找与主题相关的包，大多数包都根据它们所做的事情与一个或多个<em>关键字</em>相关联。键入<kbd>C-h p</kbd>(<code>finder-by-keyword</code>)调出包关键字列表，并说明关键字的含义。要查看给定关键字的包列表，请在该行键入<tt class="key">RET</tt>；这将显示包菜单缓冲区中的包列表(请参见<a href="#Package-Menu">包菜单</a>)。
</p>
<a name="index-describe_002dpackage"></a>
<a name="index-C_002dh-P"></a>
<p><kbd>C-h P</kbd>(<code>describe-package</code>)提示输入包的名称(请参阅<a href="#Packages">包</a>)，并显示描述包的属性及其实现的功能的帮助缓冲区。缓冲区以按钮的形式列出与包相关的关键字。用<kbd>鼠标左键</kbd>或<kbd>鼠标右键</kbd>单击一个按钮，查看与该关键字相关的其他软件包的列表。
</p>

<a name="Language-Help"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Misc-Help" accesskey="n" rel="next">Misc Help</a>, Previous: <a href="#Package-Keywords" accesskey="p" rel="prev">Package Keywords</a>, Up: <a href="#Help" accesskey="u" rel="up">Help</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Help-for-International-Language-Support"></a>
<h3 class="section">10.7有关国际语言支持的帮助</h3>

<p>有关特定语言环境的信息(请参阅<a href="#Language-Environments">语言环境</a>)，请键入<kbd>C-h L</kbd>(<code>describe-language-environment</code>)。这将显示一个帮助缓冲区，描述语言环境支持的语言，并列出相关的字符集、编码系统和输入法，以及该语言环境的一些示例文本。
</p>
<p>命令<kbd>C-h h</kbd>(<code>view-hello-file</code>)显示文件<samp>etc/HELLO</samp>，该文件通过显示如何用多种语言说“hello”来演示各种字符集。
</p>
<p>命令<kbd>C-h I</kbd>(<code>describe-input-method</code>)描述一种输入法-指定的输入法，或默认情况下当前使用的输入法。请参阅<a href="#Input-Methods">输入法</a>。
</p>
<p>命令<kbd>C-h C</kbd>(<code>describe-coding-system</code>)描述编码系统-可以是指定的编码系统，也可以是当前使用的编码系统。请参阅<a href="#Coding-Systems">编码系统</a>。
</p>

<a name="Misc-Help"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Help-Files" accesskey="n" rel="next">Help Files</a>, Previous: <a href="#Language-Help" accesskey="p" rel="prev">Language Help</a>, Up: <a href="#Help" accesskey="u" rel="up">Help</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Other-Help-Commands"></a>
<h3 class="section">10.8其他帮助命令</h3>

<a name="index-C_002dh-i"></a>
<a name="index-C_002dh-4-i"></a>
<a name="index-info"></a>
<a name="index-info_002dother_002dwindow"></a>
<a name="index-Info"></a>
<a name="index-manuals_002c-included"></a>
<p><kbd>C-h i</kbd>(<code>info</code>)运行Info程序，该程序浏览结构化文档文件。<kbd>C-h 4 i</kbd>(<code>info-other-window</code>)执行相同的操作，但在另一个窗口中显示信息缓冲区。整个Emacs手册以及GNU系统的许多其他手册都可以在Info中找到。输入Info后键入<kbd>h</kbd>以运行有关使用Info的教程。
</p>
<a name="index-find-Info-manual-by-its-file-name"></a>
<p>使用数字参数<var>n</var>，<kbd>C-h i</kbd>选择Info缓冲区‘<samp>*info*&lt;<var>n</var>&gt;</samp>’。如果您想要同时浏览多个信息手册，这将非常有用。如果仅指定<kbd>C-u</kbd>作为前缀参数，<kbd>C-h i</kbd>会提示输入文档文件的名称，这样您就可以浏览在顶级信息菜单中没有条目的文件。
</p>
<p>上述帮助命令<kbd>C-h F <var>function</var><span class="key">RET</span></kbd>和<kbd>C-h K <var>key</var></kbd>输入Info并直接转到<var>函数</var>或<var>快捷键</var>的文档。
</p>
<a name="index-C_002dh-S"></a>
<a name="index-info_002dlookup_002dsymbol"></a>
<p>编辑程序时，如果您有编程语言手册的Info版本，则可以使用<kbd>C-h S</kbd>(<code>info-lookup-symbol</code>)在适当的手册中查找符号(关键字、函数或变量)的条目。此命令如何工作的详细信息取决于主模式。
</p>
<a name="index-C_002dh-l"></a>
<a name="index-view_002dlossage"></a>
<p>如果发生意外情况，并且您不确定键入的内容，请使用<kbd>C-h l</kbd>(<code>view-lossage</code>)。<kbd>C-h l</kbd>显示您最近300次输入击键及其调用的命令。如果您看到不熟悉的命令，可以使用<kbd>C-h k</kbd>或<kbd>C-h f</kbd>了解它们的作用。
</p>
<a name="index-C_002dh-e"></a>
<a name="index-view_002decho_002darea_002dmessages"></a>
<p>若要查看最近的回显区消息，请使用<kbd>C-h e</kbd>(<code>view-echo-area-messages</code>)。这将显示保存这些消息的缓冲区<samp>*Messages*</samp>。
</p>
<a name="index-C_002dh-m"></a>
<a name="index-describe_002dmode"></a>
<p>每个Emacs主模式通常重新定义几个键，并对编辑工作方式进行其他更改。<kbd>C-h m</kbd>(<code>describe-mode</code>)显示有关当前主模式的文档，该文档通常描述在此模式中更改的命令和功能，以及它的键绑定。
</p>
<a name="index-C_002dh-b"></a>
<a name="index-describe_002dbindings"></a>
<a name="index-C_002dh-s"></a>
<a name="index-describe_002dsyntax"></a>
<p><kbd>C-h b</kbd>(<code>describe-bindings</code>)和<kbd>C-h s</kbd>(<code>describe-syntax</code>)显示有关Emacs中当前环境的其他信息。<kbd>C-h b</kbd>显示当前有效的所有键绑定的列表：首先是当前辅模式的局部绑定，然后是当前主模式定义的局部绑定，最后是全局绑定(请参阅<a href="#Key-Bindings">键绑定</a>)。<kbd>C-h s</kbd>显示语法表的内容，并解释每个字符的语法(请参阅<cite>Emacs Lisp参考手册</cite>中的<a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Syntax-Tables">语法表</a>)。
</p>
<a name="index-describe_002dprefix_002dbindings"></a>
<p>您可以通过在前缀键之后键入<kbd>C-h</kbd>、<kbd>？</kbd>或<tt class="key">F1</tt>(<code>describe-prefix-bindings</code>)来获取特定前缀键的子命令列表。(有几个前缀键并不是所有这些键都有效-那些为该键提供自己的绑定的前缀键。这些前缀键之一是<tt class="key">ESC</tt>，因为<kbd><span class="key">ESC</span>C-h</kbd>实际上是<kbd>C-M-h</kbd>，它标记一个函数定义。但是，<kbd><span class="key">Esc</span><span class="key">F1</span></kbd><!-- /@w --> 和<kbd><span class="key">ESC</span>?</kbd><!-- /@w --> 工作正常。)
</p>

<a name="Help-Files"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Help-Echo" accesskey="n" rel="next">Help Echo</a>, Previous: <a href="#Misc-Help" accesskey="p" rel="prev">Misc Help</a>, Up: <a href="#Help" accesskey="u" rel="up">Help</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Help-Files-1"></a>
<h3 class="section">10.9帮助文件</h3>

<p>除了内置的文档和手册之外，Emacs还包含其他几个文件，描述复制条件、发行说明、调试和报告错误的说明等主题。您可以使用以下命令查看这些文件。除了<kbd>C-h g</kbd>之外，它们的形式都是<kbd>C-h C-<var>char</var></kbd>。
</p>
<a name="index-C_002dh-C_002dc"></a>
<a name="index-describe_002dcopying"></a>
<a name="index-C_002dh-C_002dd"></a>
<a name="index-view_002demacs_002ddebugging"></a>
<a name="index-C_002dh-C_002de"></a>
<a name="index-view_002dexternal_002dpackages"></a>
<a name="index-C_002dh-C_002df"></a>
<a name="index-view_002demacs_002dFAQ"></a>
<a name="index-C_002dh-g"></a>
<a name="index-describe_002dgnu_002dproject"></a>
<a name="index-C_002dh-C_002dm"></a>
<a name="index-view_002dorder_002dmanuals"></a>
<a name="index-C_002dh-C_002dn"></a>
<a name="index-view_002demacs_002dnews"></a>
<a name="index-C_002dh-C_002do"></a>
<a name="index-describe_002ddistribution"></a>
<a name="index-C_002dh-C_002dp"></a>
<a name="index-view_002demacs_002dproblems"></a>
<a name="index-C_002dh-C_002dt"></a>
<a name="index-view_002demacs_002dtodo"></a>
<a name="index-C_002dh-C_002dw"></a>
<a name="index-describe_002dno_002dwarranty"></a>

<dl compact="compact">
<dt><kbd>C-h C-c</kbd></dt>
<dd><p>显示可以复制和重新分发Emacs的规则(<code>describe-copying</code>)。
</p></dd>
<dt><kbd>C-h C-d</kbd></dt>
<dd><p>显示调试Emacs的帮助(<code>view-emacs-debuting</code>)。
</p></dd>
<dt><kbd>C-h C-e</kbd></dt>
<dd><p>显示有关从何处获取外部包的信息(<code>view-external-packages</code>)。
</p></dd>
<dt><kbd>C-h C-f</kbd></dt>
<dd><p>显示Emacs常见问题列表(<code>view-emacs-FAQ</code>)。
</p></dd>
<dt><kbd>C-h g</kbd></dt>
<dd><p>有关GNU项目的信息，请访问<a href="https://www.gnu.org/">页面</a>(<code>describe-gnu-project</code>)。
</p></dd>
<dt><kbd>C-h C-m</kbd></dt>
<dd><p>显示有关订购Emacs手册打印副本的信息(<code>view-order-manuals</code>)。
</p></dd>
<dt><kbd>C-h C-n</kbd></dt>
<dd><p>显示新闻，其中列出了此版本的Emacs中的新功能(<code>view-emacs-news</code>)。
</p></dd>
<dt><kbd>C-h C-o</kbd></dt>
<dd><p>显示如何订购或下载最新版本的Emacs和其他GNU软件(<code>describe-distribution</code>)。
</p></dd>
<dt><kbd>C-h C-p</kbd></dt>
<dd><p>显示已知Emacs问题的列表，有时带有建议的解决方法(<code>view-emacs-problems</code>)。
</p></dd>
<dt><kbd>C-h C-t</kbd></dt>
<dd><p>显示Emacs待办事项列表(<code>view-emacs-todo</code>)。
</p></dd>
<dt><kbd>C-h C-w</kbd></dt>
<dd><p>显示GNU Emacs完全没有保修的完整详细信息(<code>describe-no-warranty</code>)。
</p></dd>
</dl>


<a name="Help-Echo"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Help-Files" accesskey="p" rel="prev">Help Files</a>, Up: <a href="#Help" accesskey="u" rel="up">Help</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Help-on-Active-Text-and-Tooltips"></a>
<h3 class="section">10.10有关交互文本和工具提示的帮助</h3>

<a name="index-tooltip-help"></a>
<a name="index-balloon-help"></a>
<a name="index-active-text"></a>
<p>在Emacs中，<em>交互文本</em>(响应鼠标单击或<tt class="key">RET</tt>执行特殊操作的文本)的延伸通常具有关联的帮助文本。这包括Emacs缓冲区中的超链接，以及部分状态行。在图形显示以及某些支持鼠标跟踪的文本终端上，将鼠标移到活动文本上会将帮助文本显示为<em>工具提示</em>。请参阅<a href="#Tooltips">工具提示</a>。
</p>
<a name="index-C_002dh-_002e"></a>
<a name="index-display_002dlocal_002dhelp"></a>
<a name="index-help_002dat_002dpt_002ddisplay_002dwhen_002didle"></a>
<p>在不支持鼠标跟踪的终端上，可以通过键入<kbd>C-h .</kbd>(<code>display-local-help</code>)显示缓冲区内游标处交互文本的帮助文本。这将在回显区中显示帮助文本。要在任何时候帮助文本可用时自动显示帮助文本，请将变量<code>help-at-pt-display-when-idle</code>设置为<code>t</code>。
</p><hr>
<a name="Mark"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Killing" accesskey="n" rel="next">Killing</a>, Previous: <a href="#Help" accesskey="p" rel="prev">Help</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="The-Mark-and-the-Region"></a>
<h2 class="chapter">11The Mark and the Region</h2>
<a name="index-mark"></a>
<a name="index-setting-a-mark"></a>
<a name="index-region"></a>

<p>Many Emacs commands operate on an arbitrary contiguous part of the
current buffer.  To specify the text for such a command to operate on,
you set <em>the mark</em> at one end of it, and move point to the other
end.  The text between point and the mark is called <em>the region</em>.
The region always extends between point and the mark, no matter which
one comes earlier in the text; each time you move point, the region
changes.

</p>
<a name="index-active-region"></a>
<a name="index-activating-the-mark"></a>
<p>Setting the mark at a position in the text also <em>activates</em> it.
When the mark is active, we say also that the region is active; Emacs
indicates its extent by highlighting the text within it, using the
<code>region</code> face (see <a href="#Face-Customization">Face Customization</a>).

</p>
<p>This is one of the few faces that has the <code>:extend t</code> attribute
by default, which implies that the same face is used to highlight the
text and space between end of line and the window border.  To
highlight only the text you could set this attribute to <code>nil</code>.

</p>
<a name="index-deactivating-the-mark"></a>
<p>After certain non-motion commands, including any command that
changes the text in the buffer, Emacs automatically <em>deactivates</em>
the mark; this turns off the highlighting.  You can also explicitly
deactivate the mark at any time, by typing <kbd>C-g</kbd>
(see <a href="#Quitting">Quitting</a>).

</p>
<p>The above default behavior is known as Transient Mark mode.
Disabling Transient Mark mode switches Emacs to an alternative
behavior, in which the region is usually not highlighted.
See <a href="#Disabled-Transient-Mark">Disabled Transient Mark</a>.

</p>
<a name="index-highlight_002dnonselected_002dwindows"></a>
<p>Setting the mark in one buffer has no effect on the marks in other
buffers.  When you return to a buffer with an active mark, the mark is
at the same place as before.  When multiple windows show the same
buffer, they can have different values of point, and thus different
regions, but they all share one common mark position.  See <a href="#Windows">Windows</a>.
Ordinarily, only the selected window highlights its region; however,
if the variable <code>highlight-nonselected-windows</code> is
non-<code>nil</code>, each window highlights its own region.

</p>
<p>There is another kind of region: the rectangular region.
See <a href="#Rectangles">Rectangles</a>.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Setting-Mark" accesskey="1">Setting Mark</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands to set the mark.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Marking-Objects" accesskey="2">Marking Objects</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands to put region around textual units.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Using-Region" accesskey="3">Using Region</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Summary of ways to operate on contents of the region.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Mark-Ring" accesskey="4">Mark Ring</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Previous mark positions saved so you can go back there.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Global-Mark-Ring" accesskey="5">Global Mark Ring</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Previous mark positions in various buffers.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Shift-Selection" accesskey="6">Shift Selection</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Using shifted cursor motion keys.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Disabled-Transient-Mark" accesskey="7">Disabled Transient Mark</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Leaving regions unhighlighted by default.

</td></tr>
</tbody></table>


<a name="Setting-Mark"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Marking-Objects" accesskey="n" rel="next">Marking Objects</a>, Up: <a href="#Mark" accesskey="u" rel="up">Mark</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Setting-the-Mark"></a>
<h3 class="section">11.1Setting the Mark</h3>

<p>Here are some commands for setting the mark:

</p>
<dl compact="compact">
<dt><kbd>C-<span class="key">SPC</span></kbd></dt>
<dd><p>Set the mark at point, and activate it (<code>set-mark-command</code>).

</p></dd>
<dt><kbd>C-@</kbd></dt>
<dd><p>The same.

</p></dd>
<dt><kbd>C-x C-x</kbd></dt>
<dd><p>Set the mark at point, and activate it; then move point where the mark
used to be (<code>exchange-point-and-mark</code>).

</p></dd>
<dt><kbd>Drag-mouse-1</kbd></dt>
<dd><p>Set point and the mark around the text you drag across.

</p></dd>
<dt><kbd>mouse-3</kbd></dt>
<dd><p>Set the mark at point, then move point to where you click
(<code>mouse-save-then-kill</code>).

</p></dd>
<dt><kbd><span class="roman">Shifted cursor motion keys</span></kbd></dt>
<dd><p>Set the mark at point if the mark is inactive, then move point.
See <a href="#Shift-Selection">Shift Selection</a>.

</p></dd>
</dl>

<a name="index-C_002dSPC"></a>
<a name="index-C_002d_0040"></a>
<a name="index-set_002dmark_002dcommand"></a>
<p>The most common way to set the mark is with <kbd>C-<span class="key">SPC</span></kbd>
(<code>set-mark-command</code>)<a name="DOCF5" href="#FOOT5"><sup>5</sup></a>.  This sets the mark where point is,
and activates it.  You can then move point away, leaving the mark
behind.

</p>
<p>For example, suppose you wish to convert part of the buffer to upper
case.  To accomplish this, go to one end of the desired text, type
<kbd>C-<span class="key">SPC</span></kbd>, and move point until the desired portion of text is
highlighted.  Now type <kbd>C-x C-u</kbd> (<code>upcase-region</code>).  This
converts the text in the region to upper case, and then deactivates
the mark.

</p>
<p>Whenever the mark is active, you can deactivate it by typing
<kbd>C-g</kbd> (see <a href="#Quitting">Quitting</a>).  Most commands that operate on the
region also automatically deactivate the mark, like <kbd>C-x C-u</kbd> in
the above example.

</p>
<p>Instead of setting the mark in order to operate on a region, you can
also use it to remember a position in the buffer (by typing
<kbd>C-<span class="key">SPC</span> C-<span class="key">SPC</span></kbd>), and later jump back there (by typing
<kbd>C-u C-<span class="key">SPC</span></kbd>).  See <a href="#Mark-Ring">Mark Ring</a>, for details.

</p>
<a name="index-C_002dx-C_002dx"></a>
<a name="index-exchange_002dpoint_002dand_002dmark"></a>
<p>The command <kbd>C-x C-x</kbd> (<code>exchange-point-and-mark</code>) exchanges
the positions of point and the mark.  <kbd>C-x C-x</kbd> is useful when you
are satisfied with the position of point but want to move the other
end of the region (where the mark is).  Using <kbd>C-x C-x</kbd> a second
time, if necessary, puts the mark at the new position with point back
at its original position.  Normally, if the mark is inactive, this
command first reactivates the mark wherever it was last set, to ensure
that the region is left highlighted.  However, if you call it with a
prefix argument, it leaves the mark inactive and the region
unhighlighted; you can use this to jump to the mark in a manner
similar to <kbd>C-u C-<span class="key">SPC</span></kbd>.

</p>
<p>You can also set the mark with the mouse.  If you press the left
mouse button (<kbd>down-mouse-1</kbd>) and drag the mouse across a range of
text, this sets the mark where you first pressed the mouse button and
puts point where you release it.  Alternatively, clicking the right
mouse button (<kbd>mouse-3</kbd>) sets the mark at point and then moves
point to where you clicked.  See <a href="#Mouse-Commands">Mouse Commands</a>, for a more
detailed description of these mouse commands.

</p>
<p>Finally, you can set the mark by holding down the shift key while
typing certain cursor motion commands (such as <kbd>S-<span class="key">RIGHT</span></kbd>,
<kbd>S-C-f</kbd>, <kbd>S-C-n</kbd>, etc.).  This is called <em>shift-selection</em>.
It sets the mark at point before moving point, but only if there is no
active mark set via a previous shift-selection or mouse commands.  The
mark set by mouse commands and by shift-selection behaves slightly
differently from the usual mark: any subsequent unshifted cursor motion
command deactivates it automatically.  For details, see <a href="#Shift-Selection">Shift Selection</a>.

</p>
<p>Many commands that insert text, such as <kbd>C-y</kbd> (<code>yank</code>), set
the mark at the other end of the inserted text, without activating it.
This lets you easily return to that position (see <a href="#Mark-Ring">Mark Ring</a>).  You
can tell that a command does this when it shows ‘<samp>Mark set</samp>’ in the
echo area.

</p>
<a name="index-primary-selection_002c-when-active-region-changes"></a>
<p>Under X, every time the active region changes, Emacs saves the text
in the region to the <em>primary selection</em>.  This lets you insert
that text into other X applications with <kbd>mouse-2</kbd> clicks.
See <a href="#Primary-Selection">Primary Selection</a>.

</p>

<a name="Marking-Objects"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Using-Region" accesskey="n" rel="next">Using Region</a>, Previous: <a href="#Setting-Mark" accesskey="p" rel="prev">Setting Mark</a>, Up: <a href="#Mark" accesskey="u" rel="up">Mark</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Commands-to-Mark-Textual-Objects"></a>
<h3 class="section">11.2Commands to Mark Textual Objects</h3>

<a name="index-marking-sections-of-text"></a>
<p>Here are commands for placing point and the mark around a textual
object such as a word, list, paragraph or page:

</p>
<dl compact="compact">
<dt><kbd>M-@</kbd></dt>
<dd><p>Set mark at the end of the next word (<code>mark-word</code>).  This does not
move point.

</p></dd>
<dt><kbd>C-M-@</kbd></dt>
<dd><p>Set mark after end of following balanced expression
(<code>mark-sexp</code>).  This does not move point.

</p></dd>
<dt><kbd>M-h</kbd></dt>
<dd><p>Move point to the beginning of the current paragraph, and set mark at
the end (<code>mark-paragraph</code>).

</p></dd>
<dt><kbd>C-M-h</kbd></dt>
<dd><p>Move point to the beginning of the current defun, and set mark at the
end (<code>mark-defun</code>).

</p></dd>
<dt><kbd>C-x C-p</kbd></dt>
<dd><p>Move point to the beginning of the current page, and set mark at the
end (<code>mark-page</code>).

</p></dd>
<dt><kbd>C-x h</kbd></dt>
<dd><p>Move point to the beginning of the buffer, and set mark at the end
(<code>mark-whole-buffer</code>).

</p></dd>
</dl>

<a name="index-M_002d_0040"></a>
<a name="index-mark_002dword"></a>
<p><kbd>M-@</kbd> (<code>mark-word</code>) sets the mark at the end of the next
word (see <a href="#Words">Words</a>, for information about words).  Repeated
invocations of this command extend the region by advancing the mark
one word at a time.  As an exception, if the mark is active and
located before point, <kbd>M-@</kbd> moves the mark backwards from its
current position one word at a time.

</p>
<p>This command also accepts a numeric argument <var>n</var>, which tells it
to advance the mark by <var>n</var> words.  A negative argument
-<var>n</var> moves the mark back by <var>n</var> words.

</p>
<a name="index-C_002dM_002d_0040"></a>
<a name="index-mark_002dsexp"></a>
<p>Similarly, <kbd>C-M-@</kbd> (<code>mark-sexp</code>) puts the mark at the end
of the next balanced expression (see <a href="#Expressions">Expressions</a>).  Repeated
invocations extend the region to subsequent expressions, while
positive or negative numeric arguments move the mark forward or
backward by the specified number of expressions.

</p>
<p>The other commands in the above list set both point and mark, so as
to delimit an object in the buffer.  <kbd>M-h</kbd> (<code>mark-paragraph</code>)
marks paragraphs (see <a href="#Paragraphs">Paragraphs</a>), <kbd>C-M-h</kbd> (<code>mark-defun</code>)
marks top-level definitions (see <a href="#Moving-by-Defuns">Moving by Defuns</a>), and <kbd>C-x
C-p</kbd> (<code>mark-page</code>) marks pages (see <a href="#Pages">Pages</a>).  Repeated
invocations again play the same role, extending the region to
consecutive objects; similarly, numeric arguments specify how many
objects to move the mark by.

</p>
<a name="index-C_002dx-h"></a>
<a name="index-mark_002dwhole_002dbuffer"></a>
<a name="index-select-all"></a>
<p><kbd>C-x h</kbd> (<code>mark-whole-buffer</code>) sets up the entire buffer as
the region, by putting point at the beginning and the mark at the end.

</p>

<a name="Using-Region"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Mark-Ring" accesskey="n" rel="next">Mark Ring</a>, Previous: <a href="#Marking-Objects" accesskey="p" rel="prev">Marking Objects</a>, Up: <a href="#Mark" accesskey="u" rel="up">Mark</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Operating-on-the-Region"></a>
<h3 class="section">11.3Operating on the Region</h3>

<a name="index-operations-on-a-marked-region"></a>
<p>Once you have a region, here are some of the ways you can operate on
it:

</p>
<ul>
<li>  Kill it with <kbd>C-w</kbd> (see <a href="#Killing">Killing</a>).

</li><li>  Copy it to the kill ring with <kbd>M-w</kbd> (see <a href="#Yanking">Yanking</a>).

</li><li>  Convert case with <kbd>C-x C-l</kbd> or <kbd>C-x C-u</kbd> (see <a href="#Case">Case</a>).

</li><li>  Undo changes within it using <kbd>C-u C-/</kbd> (see <a href="#Undo">Undo</a>).

</li><li>  Replace text within it using <kbd>M-%</kbd> (see <a href="#Query-Replace">Query Replace</a>).

</li><li>  Indent it with <kbd>C-x <span class="key">TAB</span></kbd> or <kbd>C-M-\</kbd> (see <a href="#Indentation">Indentation</a>).

</li><li>  Fill it as text with <kbd>M-x fill-region</kbd> (see <a href="#Filling">Filling</a>).

</li><li>  Check the spelling of words within it with <kbd>M-$</kbd> (see <a href="#Spelling">Spelling</a>).

</li><li>  Evaluate it as Lisp code with <kbd>M-x eval-region</kbd> (see <a href="#Lisp-Eval">Lisp Eval</a>).

</li><li>  Save it in a register with <kbd>C-x r s</kbd> (see <a href="#Registers">Registers</a>).

</li><li>  Save it in a buffer or a file (see <a href="#Accumulating-Text">Accumulating Text</a>).

</li></ul>

<p>Some commands have a default behavior when the mark is inactive, but
operate on the region if the mark is active.  For example, <kbd>M-$</kbd>
(<code>ispell-word</code>) normally checks the spelling of the word at
point, but it checks the text in the region if the mark is active
(see <a href="#Spelling">Spelling</a>).  Normally, such commands use their default
behavior if the region is empty (i.e., if mark and point are at the
same position).  If you want them to operate on the empty region,
change the variable <code>use-empty-active-region</code> to <code>t</code>.

</p>
<a name="index-delete_002dactive_002dregion"></a>
<p>As described in <a href="#Erasing">Erasing</a>, the <tt class="key">DEL</tt>
(<code>backward-delete-char</code>) and <tt class="key">Delete</tt>
(<code>delete-forward-char</code>) commands also act this way.  If the mark
is active, they delete the text in the region.  (As an exception, if
you supply a numeric argument <var>n</var>, where <var>n</var> is not one, these
commands delete <var>n</var> characters regardless of whether the mark is
active).  If you change the variable <code>delete-active-region</code> to
<code>nil</code>, then these commands don’t act differently when the mark is
active.  If you change the value to <code>kill</code>, these commands
<em>kill</em> the region instead of deleting it (see <a href="#Killing">Killing</a>).

</p>
<a name="index-mark_002deven_002dif_002dinactive"></a>
<p>Other commands always operate on the region, and have no default
behavior.  Such commands usually have the word <code>region</code> in their
names, like <kbd>C-w</kbd> (<code>kill-region</code>) and <kbd>C-x C-u</kbd>
(<code>upcase-region</code>).  If the mark is inactive, they operate on the
<em>inactive region</em>—that is, on the text between point and the
position at which the mark was last set (see <a href="#Mark-Ring">Mark Ring</a>).  To
disable this behavior, change the variable
<code>mark-even-if-inactive</code> to <code>nil</code>.  Then these commands will
instead signal an error if the mark is inactive.

</p>
<a name="index-Delete-Selection-mode"></a>
<a name="index-mode_002c-Delete-Selection"></a>
<a name="index-delete_002dselection_002dmode"></a>
<p>By default, text insertion occurs normally even if the mark is
active—for example, typing <kbd>a</kbd> inserts the character ‘<samp>a</samp>’,
then deactivates the mark.  Delete Selection mode, a minor mode,
modifies this behavior: if you enable that mode, then inserting text
while the mark is active causes the text in the region to be deleted
first.  To toggle Delete Selection mode on or off, type <kbd>M-x
delete-selection-mode</kbd>.

</p>

<a name="Mark-Ring"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Global-Mark-Ring" accesskey="n" rel="next">Global Mark Ring</a>, Previous: <a href="#Using-Region" accesskey="p" rel="prev">Using Region</a>, Up: <a href="#Mark" accesskey="u" rel="up">Mark</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="The-Mark-Ring"></a>
<h3 class="section">11.4The Mark Ring</h3>

<a name="index-mark-ring"></a>
<p>Each buffer remembers previous locations of the mark, in the
<em>mark ring</em>.  Commands that set the mark also push the old mark
onto this ring.  One of the uses of the mark ring is to remember spots
that you may want to go back to.

</p>
<dl compact="compact">
<dt><kbd>C-<span class="key">SPC</span> C-<span class="key">SPC</span></kbd></dt>
<dd><p>Set the mark, pushing it onto the mark ring, without activating it.

</p></dd>
<dt><kbd>C-u C-<span class="key">SPC</span></kbd></dt>
<dd><p>Move point to where the mark was, and restore the mark from the ring
of former marks.

</p></dd>
</dl>

<a name="index-C_002dSPC-C_002dSPC"></a>
<p>The command <kbd>C-<span class="key">SPC</span> C-<span class="key">SPC</span></kbd> is handy when you want to
use the mark to remember a position to which you may wish to return.
It pushes the current point onto the mark ring, without activating the
mark (which would cause Emacs to highlight the region).  This is
actually two consecutive invocations of <kbd>C-<span class="key">SPC</span></kbd>
(<code>set-mark-command</code>); the first <kbd>C-<span class="key">SPC</span></kbd> sets the mark,
and the second <kbd>C-<span class="key">SPC</span></kbd> deactivates it.  (When Transient Mark
mode is off, <kbd>C-<span class="key">SPC</span> C-<span class="key">SPC</span></kbd> instead activates Transient
Mark mode temporarily; see <a href="#Disabled-Transient-Mark">Disabled Transient Mark</a>.)

</p>
<a name="index-C_002du-C_002dSPC"></a>
<p>To return to a marked position, use <code>set-mark-command</code> with a
prefix argument: <kbd>C-u C-<span class="key">SPC</span></kbd>.  This moves point to where the
mark was, and deactivates the mark if it was active.  Each subsequent
<kbd>C-u C-<span class="key">SPC</span></kbd> jumps to a prior position stored in the mark
ring.  The positions you move through in this way are not lost; they
go to the end of the ring.

</p>
<a name="index-set_002dmark_002dcommand_002drepeat_002dpop"></a>
<p>If you set <code>set-mark-command-repeat-pop</code> to non-<code>nil</code>,
then immediately after you type <kbd>C-u C-<span class="key">SPC</span></kbd>, you can type
<kbd>C-<span class="key">SPC</span></kbd> instead of <kbd>C-u C-<span class="key">SPC</span></kbd> to cycle through
the mark ring.  By default, <code>set-mark-command-repeat-pop</code> is
<code>nil</code>.

</p>
<p>Each buffer has its own mark ring.  All editing commands use the
current buffer’s mark ring.  In particular, <kbd>C-u C-<span class="key">SPC</span></kbd>
always stays in the same buffer.

</p>
<a name="index-mark_002dring_002dmax"></a>
<p>The variable <code>mark-ring-max</code> specifies the maximum number of
entries to keep in the mark ring.  This defaults to 16 entries.  If
that many entries exist and another one is pushed, the earliest one in
the list is discarded.  Repeating <kbd>C-u C-<span class="key">SPC</span></kbd> cycles through
the positions currently in the ring.

</p>
<p>If you want to move back to the same place over and over, the mark
ring may not be convenient enough.  If so, you can record the position
in a register for later retrieval (see <a href="#Position-Registers">Saving
Positions in Registers</a>).

</p>

<a name="Global-Mark-Ring"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Shift-Selection" accesskey="n" rel="next">Shift Selection</a>, Previous: <a href="#Mark-Ring" accesskey="p" rel="prev">Mark Ring</a>, Up: <a href="#Mark" accesskey="u" rel="up">Mark</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="The-Global-Mark-Ring"></a>
<h3 class="section">11.5The Global Mark Ring</h3>
<a name="index-global-mark-ring"></a>

<a name="index-global_002dmark_002dring_002dmax"></a>
<p>In addition to the ordinary mark ring that belongs to each buffer,
Emacs has a single <em>global mark ring</em>.  Each time you set a mark,
this is recorded in the global mark ring in addition to the current
buffer’s own mark ring, if you have switched buffers since the
previous mark setting.  Hence, the global mark ring records a sequence
of buffers that you have been in, and, for each buffer, a place where
you set the mark.  The length of the global mark ring is controlled by
<code>global-mark-ring-max</code>, and is 16 by default.

</p>
<a name="index-C_002dx-C_002dSPC"></a>
<a name="index-pop_002dglobal_002dmark"></a>
<p>The command <kbd>C-x C-<span class="key">SPC</span></kbd> (<code>pop-global-mark</code>) jumps to
the buffer and position of the latest entry in the global ring.  It also
rotates the ring, so that successive uses of <kbd>C-x C-<span class="key">SPC</span></kbd> take
you to earlier buffers and mark positions.

</p>

<a name="Shift-Selection"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Disabled-Transient-Mark" accesskey="n" rel="next">Disabled Transient Mark</a>, Previous: <a href="#Global-Mark-Ring" accesskey="p" rel="prev">Global Mark Ring</a>, Up: <a href="#Mark" accesskey="u" rel="up">Mark</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Shift-Selection-1"></a>
<h3 class="section">11.6Shift Selection</h3>
<a name="index-shift_002dselection"></a>

<p>If you hold down the shift key while typing a cursor motion command,
this sets the mark before moving point, so that the region extends
from the original position of point to its new position.  This feature
is referred to as <em>shift-selection</em>.  It is similar to the way
text is selected in other editors.

</p>
<p>The mark set via shift-selection behaves a little differently from
what we have described above.  Firstly, in addition to the usual ways
of deactivating the mark (such as changing the buffer text or typing
<kbd>C-g</kbd>), the mark is deactivated by any <em>unshifted</em> cursor
motion command.  Secondly, any subsequent <em>shifted</em> cursor motion
command avoids setting the mark anew.  Therefore, a series of shifted
cursor motion commands will continuously adjust the region.

</p>
<p>Shift-selection only works if the shifted cursor motion key is not
already bound to a separate command (see <a href="#Customization">Customization</a>).  For
example, if you bind <kbd>S-C-f</kbd> to another command, typing
<kbd>S-C-f</kbd> runs that command instead of performing a shift-selected
version of <kbd>C-f</kbd> (<code>forward-char</code>).

</p>
<p>A mark set via mouse commands behaves the same as a mark set via
shift-selection (see <a href="#Setting-Mark">Setting Mark</a>).  For example, if you specify a
region by dragging the mouse, you can continue to extend the region
using shifted cursor motion commands.  In either case, any unshifted
cursor motion command deactivates the mark.

</p>
<p>To turn off shift-selection, set <code>shift-select-mode</code> to
<code>nil</code>.  Doing so does not disable setting the mark via mouse
commands.

</p>

<a name="Disabled-Transient-Mark"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Shift-Selection" accesskey="p" rel="prev">Shift Selection</a>, Up: <a href="#Mark" accesskey="u" rel="up">Mark</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Disabling-Transient-Mark-Mode"></a>
<h3 class="section">11.7Disabling Transient Mark Mode</h3>
<a name="index-mode_002c-Transient-Mark"></a>
<a name="index-Transient-Mark-mode"></a>
<a name="index-highlighting-region"></a>
<a name="index-region-highlighting"></a>
<a name="index-Zmacs-mode"></a>
<a name="index-transient_002dmark_002dmode"></a>

<p>The default behavior of the mark and region, in which setting the
mark activates it and highlights the region, is called Transient Mark
mode.  This is a minor mode that is enabled by default.  It can be
toggled with <kbd>M-x transient-mark-mode</kbd>, or with the
‘<samp>Highlight Active Region</samp>’ menu item in the ‘<samp>Options</samp>’ menu.
Turning it off switches Emacs to an alternative mode of operation:

</p>
<ul>
<li>  Setting the mark, with commands like <kbd>C-<span class="key">SPC</span></kbd> or <kbd>C-x
C-x</kbd>, does not highlight the region.  Therefore, you can’t tell by
looking where the mark is located; you have to remember.



<p>The usual solution to this problem is to set the mark and then use it
soon, before you forget where it is.  You can also check where the
mark is by using <kbd>C-x C-x</kbd>, which exchanges the positions of the
point and the mark (see <a href="#Setting-Mark">Setting Mark</a>).

</p>
</li><li>  Some commands, which ordinarily act on the region when the mark is
active, no longer do so.  For example, normally <kbd>M-%</kbd>
(<code>query-replace</code>) performs replacements within the region, if the
mark is active.  When Transient Mark mode is off, it always operates
from point to the end of the buffer.  Commands that act this way are
identified in their own documentation.

</li></ul>

<a name="index-enabling-Transient-Mark-mode-temporarily"></a>
<p>While Transient Mark mode is off, you can activate it temporarily
using <kbd>C-<span class="key">SPC</span> C-<span class="key">SPC</span></kbd> or <kbd>C-u C-x C-x</kbd>.

</p>
<dl compact="compact">
<dt><kbd>C-<span class="key">SPC</span> C-<span class="key">SPC</span></kbd></dt>
<dd><a name="index-C_002dSPC-C_002dSPC_002c-enabling-Transient-Mark-mode-temporarily"></a>
<p>Set the mark at point (like plain <kbd>C-<span class="key">SPC</span></kbd>) and enable
Transient Mark mode just once, until the mark is deactivated.  (This
is not really a separate command; you are using the <kbd>C-<span class="key">SPC</span></kbd>
command twice.)

</p>
</dd>
<dt><kbd>C-u C-x C-x</kbd></dt>
<dd><a name="index-C_002du-C_002dx-C_002dx"></a>
<p>Exchange point and mark, activate the mark and enable Transient Mark
mode temporarily, until the mark is next deactivated.  (This is the
<kbd>C-x C-x</kbd> command, <code>exchange-point-and-mark</code>, with a prefix
argument.)

</p></dd>
</dl>

<p>These commands set or activate the mark, and enable Transient Mark
mode only until the mark is deactivated.  One reason you may want to
use them is that some commands operate on the entire buffer instead of
the region when Transient Mark mode is off.  Enabling Transient Mark
mode momentarily gives you a way to use these commands on the region.

</p>
<p>When you specify a region with the mouse (see <a href="#Setting-Mark">Setting Mark</a>), or
with shift-selection (see <a href="#Shift-Selection">Shift Selection</a>), this likewise
activates Transient Mark mode temporarily and highlights the region.

</p>

<a name="Killing"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Registers" accesskey="n" rel="next">Registers</a>, Previous: <a href="#Mark" accesskey="p" rel="prev">Mark</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Killing-and-Moving-Text"></a>
<h2 class="chapter">12Killing and Moving Text</h2>

<p>In Emacs, <em>killing</em> means erasing text and copying it into the
<em>kill ring</em>.  <em>Yanking</em> means bringing text from the kill ring
back into the buffer.  (Some applications use the terms “cutting”
and “pasting” for similar operations.)  The kill ring is so-named
because it can be visualized as a set of blocks of text arranged in a
ring, which you can access in cyclic order.  See <a href="#Kill-Ring">Kill Ring</a>.

</p>
<p>Killing and yanking are the most common way to move or copy text
within Emacs.  It is very versatile, because there are commands for
killing many different types of syntactic units.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Deletion-and-Killing" accesskey="1">Deletion and Killing</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands that remove text.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Yanking" accesskey="2">Yanking</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands that insert text.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Cut-and-Paste" accesskey="3">Cut and Paste</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Clipboard and selections on graphical displays.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Accumulating-Text" accesskey="4">Accumulating Text</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Other methods to add text to the buffer.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Rectangles" accesskey="5">Rectangles</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Operating on text in rectangular areas.

</td></tr>
<tr><td align="left" valign="top">• <a href="#CUA-Bindings" accesskey="6">CUA Bindings</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Using <kbd>C-x</kbd>/<kbd>C-c</kbd>/<kbd>C-v</kbd> to kill and yank.

</td></tr>
</tbody></table>


<a name="Deletion-and-Killing"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Yanking" accesskey="n" rel="next">Yanking</a>, Up: <a href="#Killing" accesskey="u" rel="up">Killing</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Deletion-and-Killing-1"></a>
<h3 class="section">12.1Deletion and Killing</h3>

<a name="index-killing-text"></a>
<a name="index-cutting-text"></a>
<a name="index-deletion"></a>
<p>Most commands which erase text from the buffer save it in the kill
ring (see <a href="#Kill-Ring">Kill Ring</a>).  These are known as <em>kill</em> commands, and
their names normally contain the word ‘<samp>kill</samp>’ (e.g.,
<code>kill-line</code>).  The kill ring stores several recent kills, not
just the last one, so killing is a very safe operation: you don’t have
to worry much about losing text that you previously killed.  The kill
ring is shared by all buffers, so text that is killed in one buffer
can be yanked into another buffer.

</p>
<p>When you use <kbd>C-/</kbd> (<code>undo</code>) to undo a kill command
(see <a href="#Undo">Undo</a>), that brings the killed text back into the buffer, but
does not remove it from the kill ring.

</p>
<p>On graphical displays, killing text also copies it to the system
clipboard.  See <a href="#Cut-and-Paste">Cut and Paste</a>.

</p>
<p>Commands that erase text but do not save it in the kill ring are
known as <em>delete</em> commands; their names usually contain the word
‘<samp>delete</samp>’.  These include <kbd>C-d</kbd> (<code>delete-char</code>) and
<tt class="key">DEL</tt> (<code>delete-backward-char</code>), which delete only one
character at a time, and those commands that delete only spaces or
newlines.  Commands that can erase significant amounts of nontrivial
data generally do a kill operation instead.

</p>
<p>You can also use the mouse to kill and yank.  See <a href="#Cut-and-Paste">Cut and Paste</a>.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Deletion" accesskey="1">Deletion</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands for deleting small amounts of text and
                          blank areas.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Killing-by-Lines" accesskey="2">Killing by Lines</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to kill entire lines of text at one time.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Other-Kill-Commands" accesskey="3">Other Kill Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands to kill large regions of text and
                          syntactic units such as words and sentences.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Kill-Options" accesskey="4">Kill Options</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Options that affect killing.

</td></tr>
</tbody></table>


<a name="Deletion"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Killing-by-Lines" accesskey="n" rel="next">Killing by Lines</a>, Up: <a href="#Deletion-and-Killing" accesskey="u" rel="up">Deletion and Killing</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Deletion-1"></a>
<h4 class="subsection">12.1.1 Deletion</h4>
<a name="index-delete_002dbackward_002dchar"></a>
<a name="index-delete_002dchar"></a>

<p>Deletion means erasing text and not saving it in the kill ring.  For
the most part, the Emacs commands that delete text are those that
erase just one character or only whitespace.

</p>
<dl compact="compact">
<dt><kbd><span class="key">DEL</span></kbd></dt>
<dt><kbd><span class="key">BACKSPACE</span></kbd></dt>
<dd><p>Delete the previous character, or the text in the region if it is
active (<code>delete-backward-char</code>).

</p>
</dd>
<dt><kbd><span class="key">Delete</span></kbd></dt>
<dd><p>Delete the next character, or the text in the region if it is active
(<code>delete-forward-char</code>).

</p>
</dd>
<dt><kbd>C-d</kbd></dt>
<dd><p>Delete the next character (<code>delete-char</code>).

</p>
</dd>
<dt><kbd>M-\</kbd></dt>
<dd><p>Delete spaces and tabs around point (<code>delete-horizontal-space</code>).

</p></dd>
<dt><kbd>M-<span class="key">SPC</span></kbd></dt>
<dd><p>Delete spaces and tabs around point, leaving one space
(<code>just-one-space</code>).

</p></dd>
<dt><kbd>C-x C-o</kbd></dt>
<dd><p>Delete blank lines around the current line (<code>delete-blank-lines</code>).

</p></dd>
<dt><kbd>M-^</kbd></dt>
<dd><p>Join two lines by deleting the intervening newline, along with any
indentation following it (<code>delete-indentation</code>).

</p></dd>
</dl>

<p>We have already described the basic deletion commands <tt class="key">DEL</tt>
(<code>delete-backward-char</code>), <tt class="key">delete</tt>
(<code>delete-forward-char</code>), and <kbd>C-d</kbd> (<code>delete-char</code>).
See <a href="#Erasing">Erasing</a>.  With a numeric argument, they delete the specified
number of characters.  If the numeric argument is omitted or one,
<tt class="key">DEL</tt> and <tt class="key">delete</tt> delete all the text in the region if it is
active (see <a href="#Using-Region">Using Region</a>).

</p>
<a name="index-M_002d_005c"></a>
<a name="index-delete_002dhorizontal_002dspace"></a>
<a name="index-M_002dSPC"></a>
<a name="index-just_002done_002dspace"></a>
<a name="index-cycle_002dspacing"></a>
<p>The other delete commands are those that delete only whitespace
characters: spaces, tabs and newlines.  <kbd>M-\</kbd>
(<code>delete-horizontal-space</code>) deletes all the spaces and tab
characters before and after point.  With a prefix argument, this only
deletes spaces and tab characters before point.  <kbd>M-<span class="key">SPC</span></kbd>
(<code>just-one-space</code>) does likewise but leaves a single space before
point, regardless of the number of spaces that existed previously
(even if there were none before).  With a numeric argument <var>n</var>, it
leaves <var>n</var> spaces before point if <var>n</var> is positive; if <var>n</var>
is negative, it deletes newlines in addition to spaces and tabs,
leaving -<var>n</var> spaces before point.  The command <code>cycle-spacing</code>
acts like a more flexible version of <code>just-one-space</code>.  It
does different things if you call it repeatedly in succession.
The first call acts like <code>just-one-space</code>, the next removes
all whitespace, and a third call restores the original whitespace.

</p>
<p><kbd>C-x C-o</kbd> (<code>delete-blank-lines</code>) deletes all blank lines
after the current line.  If the current line is blank, it deletes all
blank lines preceding the current line as well (leaving one blank line,
the current line).  On a solitary blank line, it deletes that line.

</p>
<p><kbd>M-^</kbd> (<code>delete-indentation</code>) joins the current line and the
previous line, by deleting a newline and all surrounding spaces, usually
leaving a single space.  See <a href="#Indentation">M-^</a>.

</p>
<a name="index-delete_002dduplicate_002dlines"></a>
<p>The command <code>delete-duplicate-lines</code> searches the region for
identical lines, and removes all but one copy of each.  Normally it
keeps the first instance of each repeated line, but with a <kbd>C-u</kbd>
prefix argument it keeps the last.  With a <kbd>C-u C-u</kbd> prefix
argument, it only searches for adjacent identical lines.  This is a
more efficient mode of operation, useful when the lines have already
been sorted.  With a <kbd>C-u C-u C-u</kbd> prefix argument, it retains
repeated blank lines.

</p>

<a name="Killing-by-Lines"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Other-Kill-Commands" accesskey="n" rel="next">Other Kill Commands</a>, Previous: <a href="#Deletion" accesskey="p" rel="prev">Deletion</a>, Up: <a href="#Deletion-and-Killing" accesskey="u" rel="up">Deletion and Killing</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Killing-by-Lines-1"></a>
<h4 class="subsection">12.1.2 Killing by Lines</h4>

<dl compact="compact">
<dt><kbd>C-k</kbd></dt>
<dd><p>Kill rest of line or one or more lines (<code>kill-line</code>).

</p></dd>
<dt><kbd>C-S-backspace</kbd></dt>
<dd><p>Kill an entire line at once (<code>kill-whole-line</code>)

</p></dd>
</dl>

<a name="index-C_002dk"></a>
<a name="index-kill_002dline"></a>
<p>The simplest kill command is <kbd>C-k</kbd> (<code>kill-line</code>).  If used
at the end of a line, it kills the line-ending newline character,
merging the next line into the current one (thus, a blank line is
entirely removed).  Otherwise, <kbd>C-k</kbd> kills all the text from point
up to the end of the line; if point was originally at the beginning of
the line, this leaves the line blank.

</p>
<p>Spaces and tabs at the end of the line are ignored when deciding
which case applies.  As long as point is after the last non-whitespace
character in the line, you can be sure that <kbd>C-k</kbd> will kill the
newline.  To kill an entire non-blank line, go to the beginning and
type <kbd>C-k</kbd> twice.

</p>
<p>In this context, “line” means a logical text line, not a screen
line (see <a href="#Continuation-Lines">Continuation Lines</a>).

</p>
<p>When <kbd>C-k</kbd> is given a positive argument <var>n</var>, it kills
<var>n</var> lines and the newlines that follow them (text on the current
line before point is not killed).  With a negative argument
-<var>n</var>, it kills <var>n</var> lines preceding the current line,
together with the text on the current line before point.  <kbd>C-k</kbd>
with an argument of zero kills the text before point on the current
line.

</p>
<a name="index-kill_002dwhole_002dline-1"></a>
<p>If the variable <code>kill-whole-line</code> is non-<code>nil</code>, <kbd>C-k</kbd> at
the very beginning of a line kills the entire line including the
following newline.  This variable is normally <code>nil</code>.

</p>
<a name="index-C_002dS_002dbackspace"></a>
<a name="index-kill_002dwhole_002dline"></a>
<p><kbd>C-S-backspace</kbd> (<code>kill-whole-line</code>) kills a whole line
including its newline, regardless of the position of point within the
line.  Note that many text terminals will prevent you from typing the
key sequence <kbd>C-S-backspace</kbd>.

</p>

<a name="Other-Kill-Commands"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Kill-Options" accesskey="n" rel="next">Kill Options</a>, Previous: <a href="#Killing-by-Lines" accesskey="p" rel="prev">Killing by Lines</a>, Up: <a href="#Deletion-and-Killing" accesskey="u" rel="up">Deletion and Killing</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Other-Kill-Commands-1"></a>
<h4 class="subsection">12.1.3 Other Kill Commands</h4>

<dl compact="compact">
<dt><kbd>C-w</kbd></dt>
<dd><p>Kill the region (<code>kill-region</code>).

</p></dd>
<dt><kbd>M-w</kbd></dt>
<dd><p>Copy the region into the kill ring (<code>kill-ring-save</code>).

</p></dd>
<dt><kbd>M-d</kbd></dt>
<dd><p>Kill the next word (<code>kill-word</code>). 请参阅<a href="#Words">词</a>。
</p></dd>
<dt><kbd>M-<span class="key">DEL</span></kbd></dt>
<dd><p>Kill one word backwards (<code>backward-kill-word</code>).

</p></dd>
<dt><kbd>C-x <span class="key">DEL</span></kbd></dt>
<dd><p>Kill back to beginning of sentence (<code>backward-kill-sentence</code>).
See <a href="#Sentences">Sentences</a>.

</p></dd>
<dt><kbd>M-k</kbd></dt>
<dd><p>Kill to the end of the sentence (<code>kill-sentence</code>).

</p></dd>
<dt><kbd>C-M-k</kbd></dt>
<dd><p>Kill the following balanced expression (<code>kill-sexp</code>).  See <a href="#Expressions">Expressions</a>.

</p></dd>
<dt><kbd>M-z <var>char</var></kbd></dt>
<dd><p>Kill through the next occurrence of <var>char</var> (<code>zap-to-char</code>).

</p></dd>
<dt><kbd>M-x zap-up-to-char <var>char</var></kbd></dt>
<dd><p>Kill up to, but not including, the next occurrence of <var>char</var>.

</p></dd>
</dl>

<a name="index-C_002dw"></a>
<a name="index-kill_002dregion"></a>
<a name="index-M_002dw"></a>
<a name="index-kill_002dring_002dsave"></a>
<p>One of the commonly-used kill commands is <kbd>C-w</kbd>
(<code>kill-region</code>), which kills the text in the region
(see <a href="#Mark">Mark</a>).  Similarly, <kbd>M-w</kbd> (<code>kill-ring-save</code>) copies
the text in the region into the kill ring without removing it from the
buffer.  If the mark is inactive when you type <kbd>C-w</kbd> or <kbd>M-w</kbd>,
the command acts on the text between point and where you last set the
mark (see <a href="#Using-Region">Using Region</a>).

</p>
<p>Emacs also provides commands to kill specific syntactic units:
words, with <kbd>M-<span class="key">DEL</span></kbd> and <kbd>M-d</kbd> (see <a href="#Words">Words</a>); balanced
expressions, with <kbd>C-M-k</kbd> (see <a href="#Expressions">Expressions</a>); and sentences,
with <kbd>C-x <span class="key">DEL</span></kbd> and <kbd>M-k</kbd> (see <a href="#Sentences">Sentences</a>).

</p>
<a name="index-M_002dz"></a>
<a name="index-zap_002dto_002dchar"></a>
<p>The command <kbd>M-z</kbd> (<code>zap-to-char</code>) combines killing with
searching: it reads a character and kills from point up to (and
including) the next occurrence of that character in the buffer.  A
numeric argument acts as a repeat count; a negative argument means to
search backward and kill text before point.  A history of previously
used characters is maintained and can be accessed via the
<kbd>M-p</kbd>/<kbd>M-n</kbd> keystrokes.  This is mainly useful if the
character to be used has to be entered via a complicated input method.
<a name="index-zap_002dup_002dto_002dchar"></a>
A similar command <code>zap-up-to-char</code> kills from point up to, but
not including the next occurrence of a character, with numeric
argument acting as a repeat count.

</p>

<a name="Kill-Options"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Other-Kill-Commands" accesskey="p" rel="prev">Other Kill Commands</a>, Up: <a href="#Deletion-and-Killing" accesskey="u" rel="up">Deletion and Killing</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Options-for-Killing"></a>
<h4 class="subsection">12.1.4 Options for Killing</h4>

<a name="index-kill_002dread_002donly_002dok"></a>
<a name="index-read_002donly-text_002c-killing"></a>
<p>Some specialized buffers contain <em>read-only text</em>, which cannot
be modified and therefore cannot be killed.  The kill commands work
specially in a read-only buffer: they move over text and copy it to
the kill ring, without actually deleting it from the buffer.
Normally, they also beep and display an error message when this
happens.  But if you set the variable <code>kill-read-only-ok</code> to a
non-<code>nil</code> value, they just print a message in the echo area to
explain why the text has not been erased.

</p>
<a name="index-kill_002ddo_002dnot_002dsave_002dduplicates"></a>
<p>If you change the variable <code>kill-do-not-save-duplicates</code> to a
non-<code>nil</code> value, identical subsequent kills yield a single
kill-ring entry, without duplication.

</p>

<a name="Yanking"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Cut-and-Paste" accesskey="n" rel="next">Cut and Paste</a>, Previous: <a href="#Deletion-and-Killing" accesskey="p" rel="prev">Deletion and Killing</a>, Up: <a href="#Killing" accesskey="u" rel="up">Killing</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Yanking-1"></a>
<h3 class="section">12.2Yanking</h3>
<a name="index-moving-text"></a>
<a name="index-copying-text"></a>
<a name="index-kill-ring"></a>
<a name="index-yanking"></a>
<a name="index-pasting"></a>

<p><em>Yanking</em> means reinserting text previously killed.  The usual
way to move or copy text is to kill it and then yank it elsewhere.

</p>
<dl compact="compact">
<dt><kbd>C-y</kbd></dt>
<dd><p>Yank the last kill into the buffer, at point (<code>yank</code>).

</p></dd>
<dt><kbd>M-y</kbd></dt>
<dd><p>Replace the text just yanked with an earlier batch of killed text
(<code>yank-pop</code>).  See <a href="#Earlier-Kills">Earlier Kills</a>.

</p></dd>
<dt><kbd>C-M-w</kbd></dt>
<dd><p>Cause the following command, if it is a kill command, to append to the
previous kill (<code>append-next-kill</code>).  See <a href="#Appending-Kills">Appending Kills</a>.

</p></dd>
</dl>

<a name="index-C_002dy"></a>
<a name="index-yank"></a>
<p>The basic yanking command is <kbd>C-y</kbd> (<code>yank</code>).  It inserts
the most recent kill, leaving the cursor at the end of the inserted
text.  It also sets the mark at the beginning of the inserted text,
without activating the mark; this lets you jump easily to that
position, if you wish, with <kbd>C-u C-<span class="key">SPC</span></kbd> (see <a href="#Mark-Ring">Mark Ring</a>).

</p>
<p>With a plain prefix argument (<kbd>C-u C-y</kbd>), the command instead
leaves the cursor in front of the inserted text, and sets the mark at
the end.  Using any other prefix argument specifies an earlier kill;
e.g., <kbd>C-u 4 C-y</kbd> reinserts the fourth most recent kill.
See <a href="#Earlier-Kills">Earlier Kills</a>.

</p>
<p>On graphical displays, <kbd>C-y</kbd> first checks if another application
has placed any text in the system clipboard more recently than the
last Emacs kill.  If so, it inserts the clipboard’s text instead.
Thus, Emacs effectively treats “cut” or “copy” clipboard
operations performed in other applications like Emacs kills, except
that they are not recorded in the kill ring.  See <a href="#Cut-and-Paste">Cut and Paste</a>,
for details.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Kill-Ring" accesskey="1">Kill Ring</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Where killed text is stored.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Earlier-Kills" accesskey="2">Earlier Kills</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Yanking something killed some time ago.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Appending-Kills" accesskey="3">Appending Kills</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Several kills in a row all yank together.

</td></tr>
</tbody></table>


<a name="Kill-Ring"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Earlier-Kills" accesskey="n" rel="next">Earlier Kills</a>, Up: <a href="#Yanking" accesskey="u" rel="up">Yanking</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="The-Kill-Ring"></a>
<h4 class="subsection">12.2.1 The Kill Ring</h4>

<p>The <em>kill ring</em> is a list of blocks of text that were previously
killed.  There is only one kill ring, shared by all buffers, so you
can kill text in one buffer and yank it in another buffer.  This is
the usual way to move text from one buffer to another.  (There are
several other methods: for instance, you could store the text in a
register; see <a href="#Registers">Registers</a>.  See <a href="#Accumulating-Text">Accumulating Text</a>, for some
other ways to move text around.)

</p>
<a name="index-kill_002dring_002dmax"></a>
<p>The maximum number of entries in the kill ring is controlled by the
variable <code>kill-ring-max</code>.  The default is 60.  If you make a new
kill when this limit has been reached, Emacs makes room by deleting
the oldest entry in the kill ring.

</p>
<a name="index-kill_002dring"></a>
<p>The actual contents of the kill ring are stored in a variable named
<code>kill-ring</code>; you can view the entire contents of the kill ring
with <kbd>C-h v kill-ring</kbd>.

</p>

<a name="Earlier-Kills"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Appending-Kills" accesskey="n" rel="next">Appending Kills</a>, Previous: <a href="#Kill-Ring" accesskey="p" rel="prev">Kill Ring</a>, Up: <a href="#Yanking" accesskey="u" rel="up">Yanking</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Yanking-Earlier-Kills"></a>
<h4 class="subsection">12.2.2 Yanking Earlier Kills</h4>
<a name="index-yanking-previous-kills"></a>

<p>As explained in <a href="#Yanking">Yanking</a>, you can use a numeric argument to
<kbd>C-y</kbd> to yank text that is no longer the most recent kill.  This
is useful if you remember which kill ring entry you want.  If you
don’t, you can use the <kbd>M-y</kbd> (<code>yank-pop</code>) command to cycle
through the possibilities.

</p>
<a name="index-M_002dy"></a>
<a name="index-yank_002dpop"></a>
<p>If the previous command was a yank command, <kbd>M-y</kbd> takes the text
that was yanked and replaces it with the text from an earlier kill.
So, to recover the text of the next-to-the-last kill, first use
<kbd>C-y</kbd> to yank the last kill, and then use <kbd>M-y</kbd> to replace it
with the previous kill.  <kbd>M-y</kbd> is allowed only after a <kbd>C-y</kbd>
or another <kbd>M-y</kbd>.

</p>
<p>You can understand <kbd>M-y</kbd> in terms of a last-yank pointer which
points at an entry in the kill ring.  Each time you kill, the last-yank
pointer moves to the newly made entry at the front of the ring.
<kbd>C-y</kbd> yanks the entry which the last-yank pointer points to.
<kbd>M-y</kbd> moves the last-yank pointer to a different entry, and the
text in the buffer changes to match.  Enough <kbd>M-y</kbd> commands can move
the pointer to any entry in the ring, so you can get any entry into the
buffer.  Eventually the pointer reaches the end of the ring; the next
<kbd>M-y</kbd> loops back around to the first entry again.

</p>
<p><kbd>M-y</kbd> moves the last-yank pointer around the ring, but it does
not change the order of the entries in the ring, which always runs from
the most recent kill at the front to the oldest one still remembered.

</p>
<p><kbd>M-y</kbd> can take a numeric argument, which tells it how many entries
to advance the last-yank pointer by.  A negative argument moves the
pointer toward the front of the ring; from the front of the ring, it
moves around to the last entry and continues forward from there.

</p>
<p>Once the text you are looking for is brought into the buffer, you can
stop doing <kbd>M-y</kbd> commands and it will stay there.  It’s just a copy
of the kill ring entry, so editing it in the buffer does not change
what’s in the ring.  As long as no new killing is done, the last-yank
pointer remains at the same place in the kill ring, so repeating
<kbd>C-y</kbd> will yank another copy of the same previous kill.

</p>
<p>When you call <kbd>C-y</kbd> with a numeric argument, that also sets the
last-yank pointer to the entry that it yanks.

</p>

<a name="Appending-Kills"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Earlier-Kills" accesskey="p" rel="prev">Earlier Kills</a>, Up: <a href="#Yanking" accesskey="u" rel="up">Yanking</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Appending-Kills-1"></a>
<h4 class="subsection">12.2.3 Appending Kills</h4>

<a name="index-appending-kills-in-the-ring"></a>
<p>Normally, each kill command pushes a new entry onto the kill ring.
However, two or more kill commands in a row combine their text into a
single entry, so that a single <kbd>C-y</kbd> yanks all the text as a unit,
just as it was before it was killed.

</p>
<p>Thus, if you want to yank text as a unit, you need not kill all of it
with one command; you can keep killing line after line, or word after
word, until you have killed it all, and you can still get it all back at
once.

</p>
<p>Commands that kill forward from point add onto the end of the previous
killed text.  Commands that kill backward from point add text onto the
beginning.  This way, any sequence of mixed forward and backward kill
commands puts all the killed text into one entry without rearrangement.
Numeric arguments do not break the sequence of appending kills.  For
example, suppose the buffer contains this text:

</p>
<div class="example">
<pre class="example">This is a line ∗of sample text.
</pre></div>

<p>with point shown by ∗.  If you type <kbd>M-d M-<span class="key">DEL</span> M-d
M-<span class="key">DEL</span></kbd>, killing alternately forward and backward, you end up with
‘<samp>a line of sample</samp>’ as one entry in the kill ring, and
‘<samp>This&nbsp;is&nbsp;&nbsp;text.</samp>’<!-- /@w -->  in the buffer.  (Note the double space
between ‘<samp>is</samp>’ and ‘<samp>text</samp>’, which you can clean up with
<kbd>M-<span class="key">SPC</span></kbd> or <kbd>M-q</kbd>.)

</p>
<p>Another way to kill the same text is to move back two words with
<kbd>M-b M-b</kbd>, then kill all four words forward with <kbd>C-u M-d</kbd>.
This produces exactly the same results in the buffer and in the kill
ring.  <kbd>M-f M-f C-u M-<span class="key">DEL</span></kbd> kills the same text, all going
backward; once again, the result is the same.  The text in the kill ring
entry always has the same order that it had in the buffer before you
killed it.

</p>
<a name="index-C_002dM_002dw"></a>
<a name="index-append_002dnext_002dkill"></a>
<p>If a kill command is separated from the last kill command by other
commands (not just numeric arguments), it starts a new entry on the
kill ring.  But you can force it to combine with the last killed text,
by typing <kbd>C-M-w</kbd> (<code>append-next-kill</code>) right beforehand.  The
<kbd>C-M-w</kbd> tells its following command, if it is a kill command, to
treat the kill as part of the sequence of previous kills.  As usual,
the kill is appended to the previous killed text if the command kills
forward, and prepended if the command kills backward.  In this way,
you can kill several separated pieces of text and accumulate them to
be yanked back in one place.

</p>
<p>A kill command following <kbd>M-w</kbd> (<code>kill-ring-save</code>) does not
append to the text that <kbd>M-w</kbd> copied into the kill ring.

</p>

<a name="Cut-and-Paste"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Accumulating-Text" accesskey="n" rel="next">Accumulating Text</a>, Previous: <a href="#Yanking" accesskey="p" rel="prev">Yanking</a>, Up: <a href="#Killing" accesskey="u" rel="up">Killing</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="g_t_0060_0060Cut-and-Paste_0027_0027-Operations-on-Graphical-Displays"></a>
<h3 class="section">12.3 “Cut and Paste” Operations on Graphical Displays</h3>
<a name="index-cut"></a>
<a name="index-copy"></a>
<a name="index-paste"></a>

<p>In most graphical desktop environments, you can transfer data
(usually text) between different applications using a system facility
called the <em>clipboard</em>.  On X, two other similar facilities are
available: the primary selection and the secondary selection.  When
Emacs is run on a graphical display, its kill and yank commands
integrate with these facilities, so that you can easily transfer text
between Emacs and other graphical applications.

</p>
<p>By default, Emacs uses UTF-8 as the coding system for inter-program
text transfers.  If you find that the pasted text is not what you
expected, you can specify another coding system by typing <kbd>C-x
<span class="key">RET</span> x</kbd> or <kbd>C-x <span class="key">RET</span> X</kbd>.  You can also request a
different data type by customizing <code>x-select-request-type</code>.
See <a href="#Communication-Coding">Communication Coding</a>.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Clipboard" accesskey="1">Clipboard</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How Emacs uses the system clipboard.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Primary-Selection" accesskey="2">Primary Selection</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The temporarily selected text selection.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Secondary-Selection" accesskey="3">Secondary Selection</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Cutting without altering point and mark.

</td></tr>
</tbody></table>


<a name="Clipboard"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Primary-Selection" accesskey="n" rel="next">Primary Selection</a>, Up: <a href="#Cut-and-Paste" accesskey="u" rel="up">Cut and Paste</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Using-the-Clipboard"></a>
<h4 class="subsection">12.3.1 Using the Clipboard</h4>
<a name="index-clipboard"></a>

<p>The <em>clipboard</em> is the facility that most graphical applications
use for “cutting and pasting”.  When the clipboard exists, the kill
and yank commands in Emacs make use of it.

</p>
<p>When you kill some text with a command such as <kbd>C-w</kbd>
(<code>kill-region</code>), or copy it to the kill ring with a command such
as <kbd>M-w</kbd> (<code>kill-ring-save</code>), that text is also put in the
clipboard.

</p>
<a name="index-save_002dinterprogram_002dpaste_002dbefore_002dkill"></a>
<p>When an Emacs kill command puts text in the clipboard, the existing
clipboard contents are normally lost.  Optionally, you can change
<code>save-interprogram-paste-before-kill</code> to <code>t</code>.  Then Emacs
will first save the clipboard to its kill ring, preventing you from
losing the old clipboard data—at the risk of high memory consumption
if that data turns out to be large.

</p>
<p>Yank commands, such as <kbd>C-y</kbd> (<code>yank</code>), also use the
clipboard.  If another application “owns” the clipboard—i.e., if
you cut or copied text there more recently than your last kill command
in Emacs—then Emacs yanks from the clipboard instead of the kill
ring.

</p>
<a name="index-yank_002dpop_002dchange_002dselection"></a>
<p>Normally, rotating the kill ring with <kbd>M-y</kbd> (<code>yank-pop</code>)
does not alter the clipboard.  However, if you change
<code>yank-pop-change-selection</code> to <code>t</code>, then <kbd>M-y</kbd> saves the
new yank to the clipboard.

</p>
<a name="index-select_002denable_002dclipboard"></a>
<p>To prevent kill and yank commands from accessing the clipboard,
change the variable <code>select-enable-clipboard</code> to <code>nil</code>.

</p>
<a name="index-clipboard-manager"></a>
<a name="index-x_002dselect_002denable_002dclipboard_002dmanager"></a>
<p>Many X desktop environments support a feature called the
<em>clipboard manager</em>.  If you exit Emacs while it is the current
“owner” of the clipboard data, and there is a clipboard manager
running, Emacs transfers the clipboard data to the clipboard manager
so that it is not lost.  In some circumstances, this may cause a delay
when exiting Emacs; if you wish to prevent Emacs from transferring
data to the clipboard manager, change the variable
<code>x-select-enable-clipboard-manager</code> to <code>nil</code>.

</p>
<p>Since strings containing NUL bytes are usually truncated when passed
through the clipboard, Emacs replaces such characters with “\0”
before transferring them to the system’s clipboard.

</p>
<a name="index-select_002denable_002dprimary"></a>
<a name="index-clipboard_002dkill_002dregion"></a>
<a name="index-clipboard_002dkill_002dring_002dsave"></a>
<a name="index-clipboard_002dyank"></a>
<p>Prior to Emacs 24, the kill and yank commands used the primary
selection (see <a href="#Primary-Selection">Primary Selection</a>), not the clipboard.  If you
prefer this behavior, change <code>select-enable-clipboard</code> to
<code>nil</code>, <code>select-enable-primary</code> to <code>t</code>, and
<code>mouse-drag-copy-region</code> to <code>t</code>.  In this case, you can use
the following commands to act explicitly on the clipboard:
<code>clipboard-kill-region</code> kills the region and saves it to the
clipboard; <code>clipboard-kill-ring-save</code> copies the region to the
kill ring and saves it to the clipboard; and <code>clipboard-yank</code>
yanks the contents of the clipboard at point.

</p>

<a name="Primary-Selection"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Secondary-Selection" accesskey="n" rel="next">Secondary Selection</a>, Previous: <a href="#Clipboard" accesskey="p" rel="prev">Clipboard</a>, Up: <a href="#Cut-and-Paste" accesskey="u" rel="up">Cut and Paste</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Cut-and-Paste-with-Other-Window-Applications"></a>
<h4 class="subsection">12.3.2 Cut and Paste with Other Window Applications</h4>
<a name="index-X-cutting-and-pasting"></a>
<a name="index-X-selection"></a>
<a name="index-primary-selection"></a>
<a name="index-selection_002c-primary"></a>

<p>Under the X Window System, there exists a <em>primary selection</em>
containing the last stretch of text selected in an X application
(usually by dragging the mouse).  Typically, this text can be inserted
into other X applications by <kbd>mouse-2</kbd> clicks.  The primary
selection is separate from the clipboard.  Its contents are more
fragile; they are overwritten each time you select text with the
mouse, whereas the clipboard is only overwritten by explicit cut
or copy commands.

</p>
<p>Under X, whenever the region is active (see <a href="#Mark">Mark</a>), the text in
the region is saved in the primary selection.  This applies regardless
of whether the region was made by dragging or clicking the mouse
(see <a href="#Mouse-Commands">Mouse Commands</a>), or by keyboard commands (e.g., by typing
<kbd>C-<span class="key">SPC</span></kbd> and moving point; see <a href="#Setting-Mark">Setting Mark</a>).

</p>
<a name="index-select_002dactive_002dregions"></a>
<p>If you change the variable <code>select-active-regions</code> to
<code>only</code>, Emacs saves only temporarily active regions to the
primary selection, i.e., those made with the mouse or with shift
selection (see <a href="#Shift-Selection">Shift Selection</a>).  If you change
<code>select-active-regions</code> to <code>nil</code>, Emacs avoids saving active
regions to the primary selection entirely.

</p>
<p>To insert the primary selection into an Emacs buffer, click
<kbd>mouse-2</kbd> (<code>mouse-yank-primary</code>) where you want to insert it.
See <a href="#Mouse-Commands">Mouse Commands</a>.

</p>
<a name="index-MS_002dWindows_002c-and-primary-selection"></a>
<p>MS-Windows provides no primary selection, but Emacs emulates it
within a single Emacs session by storing the selected text internally.
Therefore, all the features and commands related to the primary
selection work on Windows as they do on X, for cutting and pasting
within the same session, but not across Emacs sessions or with other
applications.

</p>

<a name="Secondary-Selection"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Primary-Selection" accesskey="p" rel="prev">Primary Selection</a>, Up: <a href="#Cut-and-Paste" accesskey="u" rel="up">Cut and Paste</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Secondary-Selection-1"></a>
<h4 class="subsection">12.3.3 Secondary Selection</h4>
<a name="index-secondary-selection"></a>

<p>In addition to the primary selection, the X Window System provides a
second similar facility known as the <em>secondary selection</em>.
Nowadays, few X applications make use of the secondary selection, but
you can access it using the following Emacs commands:

</p>
<dl compact="compact">
<dd><a name="index-mouse_002dset_002dsecondary"></a>
<a name="index-M_002dDrag_002dmouse_002d1"></a>
<a name="index-secondary_002dselection-face"></a>
</dd>
<dt><kbd>M-Drag-mouse-1</kbd></dt>
<dd><p>Set the secondary selection, with one end at the place where you press
down the button, and the other end at the place where you release it
(<code>mouse-set-secondary</code>).  The selected text is highlighted, using
the <code>secondary-selection</code> face, as you drag.  The window scrolls
automatically if you drag the mouse off the top or bottom of the
window, just like <code>mouse-set-region</code> (see <a href="#Mouse-Commands">Mouse Commands</a>).

</p>
<p>This command does not alter the kill ring.

</p>
<a name="index-mouse_002dstart_002dsecondary"></a>
<a name="index-M_002dmouse_002d1"></a>
</dd>
<dt><kbd>M-mouse-1</kbd></dt>
<dd><p>Set one endpoint for the <em>secondary selection</em>
(<code>mouse-start-secondary</code>); use <kbd>M-mouse-3</kbd> to set the other
end and complete the selection.  This command cancels any existing
secondary selection, when it starts a new one.

</p>
<a name="index-mouse_002dsecondary_002dsave_002dthen_002dkill"></a>
<a name="index-M_002dmouse_002d3"></a>
</dd>
<dt><kbd>M-mouse-3</kbd></dt>
<dd><p>Set the secondary selection (<code>mouse-secondary-save-then-kill</code>),
with one end at the position you click <kbd>M-mouse-3</kbd>, and the other
at the position specified previously with <kbd>M-mouse-1</kbd>.  This also
puts the selected text in the kill ring.  A second <kbd>M-mouse-3</kbd> at
the same place kills the text selected by the secondary selection just
made.

</p>
<a name="index-mouse_002dyank_002dsecondary"></a>
<a name="index-M_002dmouse_002d2"></a>
</dd>
<dt><kbd>M-mouse-2</kbd></dt>
<dd><p>Insert the secondary selection where you click, placing point at the
end of the yanked text (<code>mouse-yank-secondary</code>).

</p></dd>
</dl>

<p>Double or triple clicking of <kbd>M-mouse-1</kbd> operates on words and
lines, much like <kbd>mouse-1</kbd>.

</p>
<p>If <code>mouse-yank-at-point</code> is non-<code>nil</code>, <kbd>M-mouse-2</kbd> yanks
at point.  Then it does not matter precisely where you click, or even
which of the frame’s windows you click on.  See <a href="#Mouse-Commands">Mouse Commands</a>.

</p>

<a name="Accumulating-Text"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Rectangles" accesskey="n" rel="next">Rectangles</a>, Previous: <a href="#Cut-and-Paste" accesskey="p" rel="prev">Cut and Paste</a>, Up: <a href="#Killing" accesskey="u" rel="up">Killing</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Accumulating-Text-1"></a>
<h3 class="section">12.4Accumulating Text</h3>
<a name="index-append_002dto_002dbuffer"></a>
<a name="index-prepend_002dto_002dbuffer"></a>
<a name="index-copy_002dto_002dbuffer"></a>
<a name="index-append_002dto_002dfile"></a>

<a name="index-accumulating-scattered-text"></a>
<p>Usually we copy or move text by killing it and yanking it, but there
are other convenient methods for copying one block of text in many
places, or for copying many scattered blocks of text into one place.
Here we describe the commands to accumulate scattered pieces of text
into a buffer or into a file.

</p>
<dl compact="compact">
<dt><kbd>M-x append-to-buffer</kbd></dt>
<dd><p>Append region to the contents of a specified buffer.

</p></dd>
<dt><kbd>M-x prepend-to-buffer</kbd></dt>
<dd><p>Prepend region to the contents of a specified buffer.

</p></dd>
<dt><kbd>M-x copy-to-buffer</kbd></dt>
<dd><p>Copy region into a specified buffer, deleting that buffer’s old contents.

</p></dd>
<dt><kbd>M-x insert-buffer</kbd></dt>
<dd><p>Insert the contents of a specified buffer into current buffer at point.

</p></dd>
<dt><kbd>M-x append-to-file</kbd></dt>
<dd><p>Append region to the contents of a specified file, at the end.

</p></dd>
</dl>

<p>To accumulate text into a buffer, use <kbd>M-x append-to-buffer</kbd>.
This reads a buffer name, then inserts a copy of the region into the
buffer specified.  If you specify a nonexistent buffer,
<code>append-to-buffer</code> creates the buffer.  The text is inserted
wherever point is in that buffer.  If you have been using the buffer for
editing, the copied text goes into the middle of the text of the buffer,
starting from wherever point happens to be at that moment.

</p>
<p>Point in that buffer is left at the end of the copied text, so
successive uses of <code>append-to-buffer</code> accumulate the text in the
specified buffer in the same order as they were copied.  Strictly
speaking, <code>append-to-buffer</code> does not always append to the text
already in the buffer—it appends only if point in that buffer is at
the end.  However, if <code>append-to-buffer</code> is the only command you
use to alter a buffer, then point is always at the end.

</p>
<p><kbd>M-x prepend-to-buffer</kbd> is just like <code>append-to-buffer</code>
except that point in the other buffer is left before the copied text, so
successive uses of this command add text in reverse order.  <kbd>M-x
copy-to-buffer</kbd> is similar, except that any existing text in the other
buffer is deleted, so the buffer is left containing just the text newly
copied into it.

</p>
<p>The command <kbd>M-x insert-buffer</kbd> can be used to retrieve the
accumulated text from another buffer.  This prompts for the name of a
buffer, and inserts a copy of all the text in that buffer into the
current buffer at point, leaving point at the beginning of the
inserted text.  It also adds the position of the end of the inserted
text to the mark ring, without activating the mark.  See <a href="#Buffers">Buffers</a>,
for background information on buffers.

</p>
<p>Instead of accumulating text in a buffer, you can append text
directly into a file with <kbd>M-x append-to-file</kbd>.  This prompts for
a filename, and adds the text of the region to the end of the
specified file.  The file is changed immediately on disk.

</p>
<p>You should use <code>append-to-file</code> only with files that are
<em>not</em> being visited in Emacs.  Using it on a file that you are
editing in Emacs would change the file behind Emacs’s back, which
can lead to losing some of your editing.

</p>
<p>Another way to move text around is to store it in a register.
See <a href="#Registers">Registers</a>.

</p>

<a name="Rectangles"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#CUA-Bindings" accesskey="n" rel="next">CUA Bindings</a>, Previous: <a href="#Accumulating-Text" accesskey="p" rel="prev">Accumulating Text</a>, Up: <a href="#Killing" accesskey="u" rel="up">Killing</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Rectangles-1"></a>
<h3 class="section">12.5Rectangles</h3>
<a name="index-rectangle"></a>
<a name="index-columns-_0028and-rectangles_0029"></a>
<a name="index-killing-rectangular-areas-of-text"></a>

<p><em>Rectangle</em> commands operate on rectangular areas of the text:
all the characters between a certain pair of columns, in a certain
range of lines.  Emacs has commands to kill rectangles, yank killed
rectangles, clear them out, fill them with blanks or text, or delete
them.  Rectangle commands are useful with text in multicolumn formats,
and for changing text into or out of such formats.

</p>
<a name="index-mark-rectangle"></a>
<a name="index-region_002drectangle"></a>
<a name="index-rectangular-region"></a>
<p>To specify a rectangle for a command to work on, set the mark at one
corner and point at the opposite corner.  The rectangle thus specified
is called the <em>region-rectangle</em>.  If point and the mark are in
the same column, the region-rectangle is empty.  If they are in the
same line, the region-rectangle is one line high.

</p>
<p>The region-rectangle is controlled in much the same way as the
region is controlled.  But remember that a given combination of point
and mark values can be interpreted either as a region or as a
rectangle, depending on the command that uses them.

</p>
<p>A rectangular region can also be marked using the mouse: click and drag
<kbd>C-M-mouse-1</kbd> from one corner of the rectangle to the opposite.

</p>
<dl compact="compact">
<dt><kbd>C-x r k</kbd></dt>
<dd><p>Kill the text of the region-rectangle, saving its contents as the
last killed rectangle (<code>kill-rectangle</code>).

</p></dd>
<dt><kbd>C-x r M-w</kbd></dt>
<dd><p>Save the text of the region-rectangle as the last killed rectangle
(<code>copy-rectangle-as-kill</code>).

</p></dd>
<dt><kbd>C-x r d</kbd></dt>
<dd><p>Delete the text of the region-rectangle (<code>delete-rectangle</code>).

</p></dd>
<dt><kbd>C-x r y</kbd></dt>
<dd><p>Yank the last killed rectangle with its upper left corner at point
(<code>yank-rectangle</code>).

</p></dd>
<dt><kbd>C-x r o</kbd></dt>
<dd><p>Insert blank space to fill the space of the region-rectangle
(<code>open-rectangle</code>).  This pushes the previous contents of the
region-rectangle to the right.

</p></dd>
<dt><kbd>C-x r N</kbd></dt>
<dd><p>Insert line numbers along the left edge of the region-rectangle
(<code>rectangle-number-lines</code>).  This pushes the previous contents of
the region-rectangle to the right.

</p></dd>
<dt><kbd>C-x r c</kbd></dt>
<dd><p>Clear the region-rectangle by replacing all of its contents with spaces
(<code>clear-rectangle</code>).

</p></dd>
<dt><kbd>M-x delete-whitespace-rectangle</kbd></dt>
<dd><p>Delete whitespace in each of the lines on the specified rectangle,
starting from the left edge column of the rectangle.

</p></dd>
<dt><kbd>C-x r t <var>string</var> <span class="key">RET</span></kbd></dt>
<dd><p>Replace rectangle contents with <var>string</var> on each line
(<code>string-rectangle</code>).

</p></dd>
<dt><kbd>M-x string-insert-rectangle <span class="key">RET</span> <var>string</var> <span class="key">RET</span></kbd></dt>
<dd><p>Insert <var>string</var> on each line of the rectangle.

</p></dd>
<dt><kbd>C-x <span class="key">SPC</span></kbd></dt>
<dd><p>Toggle Rectangle Mark mode (<code>rectangle-mark-mode</code>).
When this mode is active, the region-rectangle is highlighted and can
be shrunk/grown, and the standard kill and yank commands operate on it.

</p></dd>
</dl>

<p>The rectangle operations fall into two classes: commands to erase or
insert rectangles, and commands to make blank rectangles.

</p>
<a name="index-C_002dx-r-k"></a>
<a name="index-C_002dx-r-d"></a>
<a name="index-kill_002drectangle"></a>
<a name="index-delete_002drectangle"></a>
<p>There are two ways to erase the text in a rectangle: <kbd>C-x r d</kbd>
(<code>delete-rectangle</code>) to delete the text outright, or <kbd>C-x r
k</kbd> (<code>kill-rectangle</code>) to remove the text and save it as the
<em>last killed rectangle</em>.  In both cases, erasing the
region-rectangle is like erasing the specified text on each line of
the rectangle; if there is any following text on the line, it moves
backwards to fill the gap.

</p>
<p>Killing a rectangle is not killing in the usual sense; the
rectangle is not stored in the kill ring, but in a special place that
only records the most recent rectangle killed.  This is because
yanking a rectangle is so different from yanking linear text that
different yank commands have to be used.  Yank-popping is not defined
for rectangles.

</p>
<a name="index-C_002dx-r-M_002dw"></a>
<a name="index-copy_002drectangle_002das_002dkill"></a>
<p><kbd>C-x r M-w</kbd> (<code>copy-rectangle-as-kill</code>) is the equivalent of
<kbd>M-w</kbd> for rectangles: it records the rectangle as the last
killed rectangle, without deleting the text from the buffer.

</p>
<a name="index-C_002dx-r-y"></a>
<a name="index-yank_002drectangle"></a>
<p>To yank the last killed rectangle, type <kbd>C-x r y</kbd>
(<code>yank-rectangle</code>).  The rectangle’s first line is inserted at
point, the rectangle’s second line is inserted at the same horizontal
position one line vertically below, and so on.  The number of lines
affected is determined by the height of the saved rectangle.

</p>
<p>For example, you can convert two single-column lists into a
double-column list by killing one of the single-column lists as a
rectangle, and then yanking it beside the other list.

</p>
<p>You can also copy rectangles into and out of registers with <kbd>C-x r
r <var>r</var></kbd> and <kbd>C-x r i <var>r</var></kbd>.  See <a href="#Rectangle-Registers">Rectangle Registers</a>.

</p>
<a name="index-C_002dx-r-o"></a>
<a name="index-open_002drectangle"></a>
<a name="index-C_002dx-r-c"></a>
<a name="index-clear_002drectangle"></a>
<p>There are two commands you can use for making blank rectangles:
<kbd>C-x r c</kbd> (<code>clear-rectangle</code>) blanks out existing text in the
region-rectangle, and <kbd>C-x r o</kbd> (<code>open-rectangle</code>) inserts a
blank rectangle.

</p>
<a name="index-delete_002dwhitespace_002drectangle"></a>
<p><kbd>M-x delete-whitespace-rectangle</kbd> deletes horizontal whitespace
starting from a particular column.  This applies to each of the lines
in the rectangle, and the column is specified by the left edge of the
rectangle.  The right edge of the rectangle does not make any
difference to this command.

</p>
<a name="index-C_002dx-r-N"></a>
<a name="index-rectangle-1"></a>
<p>The command <kbd>C-x r N</kbd> (<code>rectangle-number-lines</code>) inserts
line numbers along the left edge of the region-rectangle.  Normally,
the numbering begins from 1 (for the first line of the rectangle).
With a prefix argument, the command prompts for a number to begin
from, and for a format string with which to print the numbers
(see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Formatting-Strings">Formatting Strings</a> in <cite>The Emacs Lisp Reference
Manual</cite>).

</p>
<a name="index-C_002dx-r-t"></a>
<a name="index-string_002drectangle"></a>
<p>The command <kbd>C-x r t</kbd> (<code>string-rectangle</code>) replaces the
contents of a region-rectangle with a string on each line.  The
string’s width need not be the same as the width of the rectangle.  If
the string’s width is less, the text after the rectangle shifts left;
if the string is wider than the rectangle, the text after the
rectangle shifts right.

</p>
<a name="index-string_002dinsert_002drectangle"></a>
<p>The command <kbd>M-x string-insert-rectangle</kbd> is similar to
<code>string-rectangle</code>, but inserts the string on each line,
shifting the original text to the right.

</p>
<a name="index-rectangle_002dmark_002dmode"></a>
<p>The command <kbd>C-x <span class="key">SPC</span></kbd> (<code>rectangle-mark-mode</code>) toggles
whether the region-rectangle or the standard region is highlighted
(first activating the region if necessary).  When this mode is enabled,
commands that resize the region (<kbd>C-f</kbd>, <kbd>C-n</kbd> etc.) do
so in a rectangular fashion, and killing and yanking operate on the
rectangle.  See <a href="#Killing">Killing</a>.  The mode persists only as long as the
region is active.

</p>
<p>Unlike the standard region, the region-rectangle can have its corners
extended past the end of buffer, or inside stretches of white space
that point normally cannot enter, like in the middle of a TAB
character.

</p>
<a name="index-rectangle_002dexchange_002dpoint_002dand_002dmark"></a>
<a name="index-exchange_002dpoint_002dand_002dmark_002c-in-rectangle_002dmark_002dmode"></a>
<a name="index-C_002dx-C_002dx_002c-in-rectangle_002dmark_002dmode"></a>
<p>When the region is in rectangle-mark-mode, <kbd>C-x C-x</kbd> runs the
command <code>rectangle-exchange-point-and-mark</code>, which cycles between
the four corners of the region-rectangle.  This comes in handy if you
want to modify the dimensions of the region-rectangle before invoking
an operation on the marked text.

</p>

<a name="CUA-Bindings"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Rectangles" accesskey="p" rel="prev">Rectangles</a>, Up: <a href="#Killing" accesskey="u" rel="up">Killing</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="CUA-Bindings-1"></a>
<h3 class="section">12.6CUA Bindings</h3>
<a name="index-cua_002dmode"></a>
<a name="index-cua_002dmode-1"></a>
<a name="index-CUA-key-bindings"></a>
<a name="index-cua_002denable_002dcua_002dkeys"></a>
<p>The command <kbd>M-x cua-mode</kbd> sets up key bindings that are
compatible with the Common User Access (CUA) system used in many other
applications.

</p>
<p>When CUA mode is enabled, the keys <kbd>C-x</kbd>, <kbd>C-c</kbd>, <kbd>C-v</kbd>,
and <kbd>C-z</kbd> invoke commands that cut (kill), copy, paste (yank), and
undo respectively.  The <kbd>C-x</kbd> and <kbd>C-c</kbd> keys perform cut and
copy only if the region is active.  Otherwise, they still act as
prefix keys, so that standard Emacs commands like <kbd>C-x C-c</kbd> still
work.  Note that this means the variable <code>mark-even-if-inactive</code>
has no effect for <kbd>C-x</kbd> and <kbd>C-c</kbd> (see <a href="#Using-Region">Using Region</a>).

</p>
<p>To enter an Emacs command like <kbd>C-x C-f</kbd> while the mark is
active, use one of the following methods: either hold <kbd>Shift</kbd>
together with the prefix key, e.g., <kbd>S-C-x C-f</kbd>, or quickly type
the prefix key twice, e.g., <kbd>C-x C-x C-f</kbd>.

</p>
<p>To disable the overriding of standard Emacs binding by CUA mode,
while retaining the other features of CUA mode described below, set
the variable <code>cua-enable-cua-keys</code> to <code>nil</code>.

</p>
<p>CUA mode by default activates Delete-Selection mode (see <a href="#Mouse-Commands">Mouse Commands</a>)
so that typed text replaces the active region.  To use CUA without this
behavior, set the variable <code>cua-delete-selection</code> to <code>nil</code>.

</p>
<a name="index-rectangle-highlighting"></a>
<p>CUA mode provides enhanced rectangle support with visible
rectangle highlighting.  Use <kbd>C-<span class="key">RET</span></kbd> to start a rectangle,
extend it using the movement commands, and cut or copy it using
<kbd>C-x</kbd> or <kbd>C-c</kbd>.  <tt class="key">RET</tt> moves the cursor to the next
(clockwise) corner of the rectangle, so you can easily expand it in
any direction.  Normal text you type is inserted to the left or right
of each line in the rectangle (on the same side as the cursor).

</p>
<p>You can use this rectangle support without activating CUA by calling the
<code>cua-rectangle-mark-mode</code> command.  There’s also the standard command
<code>rectangle-mark-mode</code>, see <a href="#Rectangles">Rectangles</a>.

</p>
<p>With CUA you can easily copy text and rectangles into and out of
registers by providing a one-digit numeric prefix to the kill, copy,
and yank commands, e.g., <kbd>C-1 C-c</kbd> copies the region into register
<code>1</code>, and <kbd>C-2 C-v</kbd> yanks the contents of register <code>2</code>.

</p>
<a name="index-global-mark"></a>
<p>CUA mode also has a global mark feature which allows easy moving and
copying of text between buffers.  Use <kbd>C-S-<span class="key">SPC</span></kbd> to toggle the
global mark on and off.  When the global mark is on, all text that you
kill or copy is automatically inserted at the global mark, and text
you type is inserted at the global mark rather than at the current
position.

</p>
<p>For example, to copy words from various buffers into a word list in
a given buffer, set the global mark in the target buffer, then
navigate to each of the words you want in the list, mark it (e.g., with
<kbd>S-M-f</kbd>), copy it to the list with <kbd>C-c</kbd> or <kbd>M-w</kbd>, and
insert a newline after the word in the target list by pressing
<tt class="key">RET</tt>.

</p><hr>
<a name="Registers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Display" accesskey="n" rel="next">Display</a>, Previous: <a href="#Killing" accesskey="p" rel="prev">Killing</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Registers-1"></a>
<h2 class="chapter">13Registers</h2>
<a name="index-registers"></a>

<p>Emacs <em>registers</em> are compartments where you can save text,
rectangles, positions, and other things for later use.  Once you save
text or a rectangle in a register, you can copy it into the buffer
once or many times; once you save a position in a register, you can
jump back to that position once or many times.

</p>
<p>Each register has a name that consists of a single character, which
we will denote by <var>r</var>; <var>r</var> can be a letter (such as ‘<samp>a</samp>’)
or a number (such as ‘<samp>1</samp>’); case matters, so register ‘<samp>a</samp>’ is
not the same as register ‘<samp>A</samp>’.  You can also set a register in
non-alphanumeric characters, for instance ‘<samp>*</samp>’ or ‘<samp>C-d</samp>’.
Note, it’s not possible to set a register in ‘<samp>C-g</samp>’ or ‘<samp>ESC</samp>’,
because these keys are reserved for quitting (see <a href="#Quitting">Quitting</a>).

</p>
<a name="index-view_002dregister"></a>
<p>A register can store a position, a piece of text, a rectangle, a
number, a window configuration, or a file name, but only one thing at
any given time.  Whatever you store in a register remains there until
you store something else in that register.  To see what register
<var>r</var> contains, use <kbd>M-x view-register</kbd>:

</p>
<dl compact="compact">
<dt><kbd>M-x view-register <span class="key">RET</span> <var>r</var></kbd></dt>
<dd><p>Display a description of what register <var>r</var> contains.

</p></dd>
</dl>

<a name="index-register_002dpreview_002ddelay"></a>
<a name="index-preview-of-registers"></a>
<p>All of the commands that prompt for a register will display a
preview window that lists the existing registers (if there are
any) after a short delay.  To change the length of the delay,
customize <code>register-preview-delay</code>.  To prevent this display, set
that option to <code>nil</code>.  You can explicitly request a preview
window by pressing <kbd>C-h</kbd> or <tt class="key">F1</tt>.

</p>
<p><em>Bookmarks</em> record files and positions in them, so you can
return to those positions when you look at the file again.  Bookmarks
are similar in spirit to registers, so they are also documented in
this chapter.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Position-Registers" accesskey="1">Position Registers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Saving positions in registers.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Text-Registers" accesskey="2">Text Registers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Saving text in registers.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Rectangle-Registers" accesskey="3">Rectangle Registers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Saving rectangles in registers.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Configuration-Registers" accesskey="4">Configuration Registers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Saving window configurations in registers.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Number-Registers" accesskey="5">Number Registers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Numbers in registers.

</td></tr>
<tr><td align="left" valign="top">• <a href="#File-Registers" accesskey="6">File Registers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">File names in registers.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Keyboard-Macro-Registers" accesskey="7">Keyboard Macro Registers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Keyboard macros in registers.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Bookmarks" accesskey="8">Bookmarks</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Bookmarks are like registers, but persistent.

</td></tr>
</tbody></table>


<a name="Position-Registers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Text-Registers" accesskey="n" rel="next">Text Registers</a>, Up: <a href="#Registers" accesskey="u" rel="up">Registers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Saving-Positions-in-Registers"></a>
<h3 class="section">13.1Saving Positions in Registers</h3>
<a name="index-saving-position-in-a-register"></a>

<dl compact="compact">
<dt><kbd>C-x r <span class="key">SPC</span> <var>r</var></kbd></dt>
<dd><p>Record the position of point and the current buffer in register
<var>r</var> (<code>point-to-register</code>).

</p></dd>
<dt><kbd>C-x r j <var>r</var></kbd></dt>
<dd><p>Jump to the position and buffer saved in register <var>r</var>
(<code>jump-to-register</code>).

</p></dd>
</dl>

<a name="index-C_002dx-r-SPC"></a>
<a name="index-point_002dto_002dregister"></a>
<p>Typing <kbd>C-x r <span class="key">SPC</span></kbd> (<code>point-to-register</code>), followed by
a character <kbd><var>r</var></kbd>, saves both the position of point and the
current buffer in register <var>r</var>.  The register retains this
information until you store something else in it.

</p>
<a name="index-C_002dx-r-j"></a>
<a name="index-jump_002dto_002dregister"></a>
<p>The command <kbd>C-x r j <var>r</var></kbd> switches to the buffer recorded in
register <var>r</var>, pushes a mark, and moves point to the recorded
position.  (The mark is not pushed if point was already at the
recorded position, or in successive calls to the command.)  The
contents of the register are not changed, so you can jump to the saved
position any number of times.

</p>
<p>If you use <kbd>C-x r j</kbd> to go to a saved position, but the buffer it
was saved from has been killed, <kbd>C-x r j</kbd> tries to create the buffer
again by visiting the same file.  Of course, this works only for buffers
that were visiting files.

</p>

<a name="Text-Registers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Rectangle-Registers" accesskey="n" rel="next">Rectangle Registers</a>, Previous: <a href="#Position-Registers" accesskey="p" rel="prev">Position Registers</a>, Up: <a href="#Registers" accesskey="u" rel="up">Registers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Saving-Text-in-Registers"></a>
<h3 class="section">13.2Saving Text in Registers</h3>
<a name="index-saving-text-in-a-register"></a>

<p>When you want to insert a copy of the same piece of text several
times, it may be inconvenient to yank it from the kill ring, since each
subsequent kill moves that entry further down the ring.  An alternative
is to store the text in a register and later retrieve it.

</p>
<dl compact="compact">
<dt><kbd>C-x r s <var>r</var></kbd></dt>
<dd><p>Copy region into register <var>r</var> (<code>copy-to-register</code>).

</p></dd>
<dt><kbd>C-x r i <var>r</var></kbd></dt>
<dd><p>Insert text from register <var>r</var> (<code>insert-register</code>).

</p></dd>
<dt><kbd>M-x append-to-register <span class="key">RET</span> <var>r</var></kbd></dt>
<dd><p>Append region to text in register <var>r</var>.

</p>
<p>When register <var>r</var> contains text, you can use <kbd>C-x r +</kbd>
(<code>increment-register</code>) to append to that register.  Note that
command <kbd>C-x r +</kbd> behaves differently if <var>r</var> contains a
number.  See <a href="#Number-Registers">Number Registers</a>.

</p>
</dd>
<dt><kbd>M-x prepend-to-register <span class="key">RET</span> <var>r</var></kbd></dt>
<dd><p>Prepend region to text in register <var>r</var>.

</p></dd>
</dl>

<a name="index-C_002dx-r-s"></a>
<a name="index-copy_002dto_002dregister"></a>
<p><kbd>C-x r s <var>r</var></kbd> stores a copy of the text of the region into
the register named <var>r</var>.  If the mark is inactive, Emacs first
reactivates the mark where it was last set.  The mark is deactivated
at the end of this command.  See <a href="#Mark">Mark</a>.  <kbd>C-u C-x r s <var>r</var></kbd>,
the same command with a prefix argument, copies the text into register
<var>r</var> and deletes the text from the buffer as well; you can think of
this as moving the region text into the register.

</p>
<a name="index-append_002dto_002dregister"></a>
<a name="index-prepend_002dto_002dregister"></a>
<p><kbd>M-x append-to-register <span class="key">RET</span> <var>r</var></kbd> appends the copy of
the text in the region to the text already stored in the register
named <var>r</var>.  If invoked with a prefix argument, it deletes the
region after appending it to the register.  The command
<code>prepend-to-register</code> is similar, except that it <em>prepends</em>
the region text to the text in the register instead of
<em>appending</em> it.

</p>
<a name="index-register_002dseparator"></a>
<p>When you are collecting text using <code>append-to-register</code> and
<code>prepend-to-register</code>, you may want to separate individual
collected pieces using a separator.  In that case, configure a
<code>register-separator</code> and store the separator text in to that
register.  For example, to get double newlines as text separator
during the collection process, you can use the following setting.

</p>
<div class="example">
<pre class="example">(setq register-separator ?+)
(set-register register-separator "\n\n")
</pre></div>

<a name="index-C_002dx-r-i"></a>
<a name="index-insert_002dregister"></a>
<p><kbd>C-x r i <var>r</var></kbd> inserts in the buffer the text from register
<var>r</var>.  Normally it leaves point after the text and sets the mark
before, without activating it.  With a prefix argument, it instead
puts point before the text and the mark after.

</p>

<a name="Rectangle-Registers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Configuration-Registers" accesskey="n" rel="next">Configuration Registers</a>, Previous: <a href="#Text-Registers" accesskey="p" rel="prev">Text Registers</a>, Up: <a href="#Registers" accesskey="u" rel="up">Registers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Saving-Rectangles-in-Registers"></a>
<h3 class="section">13.3Saving Rectangles in Registers</h3>
<a name="index-saving-rectangle-in-a-register"></a>

<p>A register can contain a rectangle instead of linear text.
See <a href="#Rectangles">Rectangles</a>, for basic information on how to specify a rectangle
in the buffer.

</p>
<dl compact="compact">
<dd><a name="index-copy_002drectangle_002dto_002dregister"></a>
<a name="index-C_002dx-r-r"></a>
</dd>
<dt><kbd>C-x r r <var>r</var></kbd></dt>
<dd><p>Copy the region-rectangle into register <var>r</var>
(<code>copy-rectangle-to-register</code>).  With prefix argument, delete it as
well.

</p></dd>
<dt><kbd>C-x r i <var>r</var></kbd></dt>
<dd><p>Insert the rectangle stored in register <var>r</var> (if it contains a
rectangle) (<code>insert-register</code>).

</p></dd>
</dl>

<p>The <kbd>C-x r i <var>r</var></kbd> (<code>insert-register</code>) command,
previously documented in <a href="#Text-Registers">Text Registers</a>, inserts a rectangle
rather than a text string, if the register contains a rectangle.

</p>

<a name="Configuration-Registers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Number-Registers" accesskey="n" rel="next">Number Registers</a>, Previous: <a href="#Rectangle-Registers" accesskey="p" rel="prev">Rectangle Registers</a>, Up: <a href="#Registers" accesskey="u" rel="up">Registers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Saving-Window-Configurations-in-Registers"></a>
<h3 class="section">13.4Saving Window Configurations in Registers</h3>
<a name="index-saving-window-configuration-in-a-register"></a>

<a name="index-window_002dconfiguration_002dto_002dregister"></a>
<a name="index-frameset_002dto_002dregister"></a>
<a name="index-C_002dx-r-w"></a>
<a name="index-C_002dx-r-f"></a>
<p>You can save the window configuration of the selected frame in a
register, or even the configuration of all windows in all frames, and
restore the configuration later.  See <a href="#Windows">Windows</a>, for information
about window configurations.

</p>
<dl compact="compact">
<dt><kbd>C-x r w <var>r</var></kbd></dt>
<dd><p>Save the state of the selected frame’s windows in register <var>r</var>
(<code>window-configuration-to-register</code>).

</p></dd>
<dt><kbd>C-x r f <var>r</var></kbd></dt>
<dd><p>Save the state of all frames, including all their windows, in register
<var>r</var> (<code>frameset-to-register</code>).

</p></dd>
</dl>

<p>Use <kbd>C-x r j <var>r</var></kbd> to restore a window or frame configuration.
This is the same command used to restore a cursor position.  When you
restore a frame configuration, any existing frames not included in the
configuration become invisible.  If you wish to delete these frames
instead, use <kbd>C-u C-x r j <var>r</var></kbd>.

</p>

<a name="Number-Registers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#File-Registers" accesskey="n" rel="next">File Registers</a>, Previous: <a href="#Configuration-Registers" accesskey="p" rel="prev">Configuration Registers</a>, Up: <a href="#Registers" accesskey="u" rel="up">Registers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Keeping-Numbers-in-Registers"></a>
<h3 class="section">13.5Keeping Numbers in Registers</h3>
<a name="index-saving-number-in-a-register"></a>

<p>There are commands to store a number in a register, to insert
the number in the buffer in decimal, and to increment it.  These commands
can be useful in keyboard macros (see <a href="#Keyboard-Macros">Keyboard Macros</a>).

</p>
<dl compact="compact">
<dt><kbd>C-u <var>number</var> C-x r n <var>r</var></kbd></dt>
<dd><a name="index-C_002dx-r-n"></a>
<a name="index-number_002dto_002dregister"></a>
<p>Store <var>number</var> into register <var>r</var> (<code>number-to-register</code>).

</p></dd>
<dt><kbd>C-u <var>number</var> C-x r + <var>r</var></kbd></dt>
<dd><a name="index-C_002dx-r-_002b"></a>
<a name="index-increment_002dregister"></a>
<p>If <var>r</var> contains a number, increment the number in that register by
<var>number</var>.  Note that command <kbd>C-x r +</kbd>
(<code>increment-register</code>) behaves differently if <var>r</var> contains
text.  See <a href="#Text-Registers">Text Registers</a>.

</p></dd>
<dt><kbd>C-x r i <var>r</var></kbd></dt>
<dd><p>Insert the number from register <var>r</var> into the buffer.

</p></dd>
</dl>

<p><kbd>C-x r i</kbd> is the same command used to insert any other sort of
register contents into the buffer.  <kbd>C-x r +</kbd> with no numeric
argument increments the register value by 1; <kbd>C-x r n</kbd> with no
numeric argument stores zero in the register.

</p>

<a name="File-Registers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Keyboard-Macro-Registers" accesskey="n" rel="next">Keyboard Macro Registers</a>, Previous: <a href="#Number-Registers" accesskey="p" rel="prev">Number Registers</a>, Up: <a href="#Registers" accesskey="u" rel="up">Registers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Keeping-File-Names-in-Registers"></a>
<h3 class="section">13.6Keeping File Names in Registers</h3>
<a name="index-saving-file-name-in-a-register"></a>

<p>If you visit certain file names frequently, you can visit them more
conveniently if you put their names in registers.  Here’s the Lisp code
used to put a file <var>name</var> into register <var>r</var>:

</p>
<div class="smallexample">
<pre class="smallexample">(set-register <var>r</var> '(file . <var>name</var>))
</pre></div>

<p>例如,
</p>
<div class="smallexample">
<pre class="smallexample">(set-register ?z '(file . "/gd/gnu/emacs/19.0/src/ChangeLog"))
</pre></div>

<p>puts the file name shown in register ‘<samp>z</samp>’.

</p>
<p>To visit the file whose name is in register <var>r</var>, type <kbd>C-x r j
<var>r</var></kbd>.  (This is the same command used to jump to a position or
restore a frame configuration.)

</p>

<a name="Keyboard-Macro-Registers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Bookmarks" accesskey="n" rel="next">Bookmarks</a>, Previous: <a href="#File-Registers" accesskey="p" rel="prev">File Registers</a>, Up: <a href="#Registers" accesskey="u" rel="up">Registers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Keyboard-Macro-Registers-1"></a>
<h3 class="section">13.7Keyboard Macro Registers</h3>
<a name="index-saving-keyboard-macro-in-a-register"></a>
<a name="index-keyboard-macros_002c-in-registers"></a>

<a name="index-C_002dx-C_002dk-x"></a>
<a name="index-kmacro_002dto_002dregister"></a>
<p>If you need to execute a keyboard macro (see <a href="#Keyboard-Macros">Keyboard Macros</a>)
frequently, it is more convenient to put it in a register or save it
(see <a href="#Save-Keyboard-Macro">Save Keyboard Macro</a>).  <kbd>C-x C-k x <var>r</var></kbd>
(<code>kmacro-to-register</code>) stores the last keyboard macro in register
<var>r</var>.

</p>
<p>To execute the keyboard macro in register <var>r</var>, type <kbd>C-x r j
<var>r</var></kbd>.  (This is the same command used to jump to a position or
restore a frameset.)

</p>

<a name="Bookmarks"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Keyboard-Macro-Registers" accesskey="p" rel="prev">Keyboard Macro Registers</a>, Up: <a href="#Registers" accesskey="u" rel="up">Registers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Bookmarks-1"></a>
<h3 class="section">13.8Bookmarks</h3>
<a name="index-bookmarks"></a>

<p><em>Bookmarks</em> are somewhat like registers in that they record
positions you can jump to.  Unlike registers, they have long names, and
they persist automatically from one Emacs session to the next.  The
prototypical use of bookmarks is to record where you were reading in
various files.

</p>
<dl compact="compact">
<dt><kbd>C-x r m <span class="key">RET</span></kbd></dt>
<dd><p>Set the bookmark for the visited file, at point.

</p>
</dd>
<dt><kbd>C-x r m <var>bookmark</var> <span class="key">RET</span></kbd></dt>
<dd><p>Set the bookmark named <var>bookmark</var> at point (<code>bookmark-set</code>).

</p>
</dd>
<dt><kbd>C-x r M <var>bookmark</var> <span class="key">RET</span></kbd></dt>
<dd><p>Like <kbd>C-x r m</kbd>, but don’t overwrite an existing bookmark.

</p>
</dd>
<dt><kbd>C-x r b <var>bookmark</var> <span class="key">RET</span></kbd></dt>
<dd><p>Jump to the bookmark named <var>bookmark</var> (<code>bookmark-jump</code>).

</p>
</dd>
<dt><kbd>C-x r l</kbd></dt>
<dd><p>List all bookmarks (<code>list-bookmarks</code>).

</p>
</dd>
<dt><kbd>M-x bookmark-save</kbd></dt>
<dd><p>Save all the current bookmark values in the default bookmark file.

</p></dd>
</dl>

<a name="index-C_002dx-r-m"></a>
<a name="index-bookmark_002dset"></a>
<a name="index-C_002dx-r-b"></a>
<a name="index-bookmark_002djump"></a>
<p>To record the current position in the visited file, use the command
<kbd>C-x r m</kbd>, which sets a bookmark using the visited file name as
the default for the bookmark name.  If you name each bookmark after
the file it points to, then you can conveniently revisit any of those
files with <kbd>C-x r b</kbd>, and move to the position of the bookmark at
the same time.

</p>
<a name="index-C_002dx-r-M"></a>
<a name="index-bookmark_002dset_002dno_002doverwrite"></a>
<p>The command <kbd>C-x r M</kbd> (<code>bookmark-set-no-overwrite</code>) works
like <kbd><span class="nolinebreak">C-x</span>&nbsp;r&nbsp;m</kbd><!-- /@w -->, but it signals an error if the specified
bookmark already exists, instead of overwriting it.

</p>
<a name="index-C_002dx-r-l"></a>
<a name="index-list_002dbookmarks"></a>
<p>To display a list of all your bookmarks in a separate buffer, type
<kbd>C-x r l</kbd> (<code>list-bookmarks</code>).  If you switch to that buffer,
you can use it to edit your bookmark definitions or annotate the
bookmarks.  Type <kbd>C-h m</kbd> in the bookmark buffer for more
information about its special editing commands.

</p>
<a name="index-bookmark_002dsave"></a>
<p>When you kill Emacs, Emacs saves your bookmarks, if
you have changed any bookmark values.  You can also save the bookmarks
at any time with the <kbd>M-x bookmark-save</kbd> command.  Bookmarks are
saved to the file <samp>~/.emacs.d/bookmarks</samp> (for compatibility with
older versions of Emacs, if you have a file named <samp>~/.emacs.bmk</samp>,
that is used instead).  The bookmark commands load your default
bookmark file automatically.  This saving and loading is how bookmarks
persist from one Emacs session to the next.

</p>
<a name="index-bookmark_002dsave_002dflag"></a>
<p>If you set the variable <code>bookmark-save-flag</code> to 1, each command
that sets a bookmark will also save your bookmarks; this way, you
don’t lose any bookmark values even if Emacs crashes.  The value, if
a number, says how many bookmark modifications should go by between
saving.  If you set this variable to <code>nil</code>, Emacs only
saves bookmarks if you explicitly use <kbd>M-x bookmark-save</kbd>.

</p>
<a name="index-bookmark_002ddefault_002dfile"></a>
<p>The variable <code>bookmark-default-file</code> specifies the file in
which to save bookmarks by default.

</p>
<a name="index-bookmark_002duse_002dannotations"></a>
<a name="index-bookmark-annotations"></a>
<p>If you set the variable <code>bookmark-use-annotations</code> to <code>t</code>,
setting a bookmark will query for an annotation.  If a bookmark has an
annotation, it is automatically shown in a separate window when you
jump to the bookmark.

</p>
<a name="index-bookmark_002dsearch_002dsize"></a>
<p>Bookmark position values are saved with surrounding context, so that
<code>bookmark-jump</code> can find the proper position even if the file is
modified slightly.  The variable <code>bookmark-search-size</code> says how
many characters of context to record on each side of the bookmark’s
position.

</p>
<p>Here are some additional commands for working with bookmarks:

</p>
<dl compact="compact">
<dt><kbd>M-x bookmark-load <span class="key">RET</span> <var>filename</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-bookmark_002dload"></a>
<p>Load a file named <var>filename</var> that contains a list of bookmark
values.  You can use this command, as well as <code>bookmark-write</code>, to
work with other files of bookmark values in addition to your default
bookmark file.

</p>
</dd>
<dt><kbd>M-x bookmark-write <span class="key">RET</span> <var>filename</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-bookmark_002dwrite"></a>
<p>Save all the current bookmark values in the file <var>filename</var>.

</p>
</dd>
<dt><kbd>M-x bookmark-delete <span class="key">RET</span> <var>bookmark</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-bookmark_002ddelete"></a>
<p>Delete the bookmark named <var>bookmark</var>.

</p>
</dd>
<dt><kbd>M-x bookmark-insert-location <span class="key">RET</span> <var>bookmark</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-bookmark_002dinsert_002dlocation"></a>
<p>Insert in the buffer the name of the file that bookmark <var>bookmark</var>
points to.

</p>
</dd>
<dt><kbd>M-x bookmark-insert <span class="key">RET</span> <var>bookmark</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-bookmark_002dinsert"></a>
<p>Insert in the buffer the <em>contents</em> of the file that bookmark
<var>bookmark</var> points to.

</p></dd>
</dl>


<a name="Display"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Search" accesskey="n" rel="next">Search</a>, Previous: <a href="#Registers" accesskey="p" rel="prev">Registers</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Controlling-the-Display"></a>
<h2 class="chapter">14Controlling the Display</h2>

<p>Since only part of a large buffer fits in the window, Emacs has to
show only a part of it.  This chapter describes commands and variables
that let you specify which part of the text you want to see, and how
the text is displayed.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Scrolling" accesskey="1">Scrolling</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands to move text up and down in a window.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Recentering" accesskey="2">Recentering</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A scroll command that centers the current line.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Auto-Scrolling" accesskey="3">Auto Scrolling</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Redisplay scrolls text automatically when needed.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Horizontal-Scrolling" accesskey="4">Horizontal Scrolling</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Moving text left and right in a window.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Narrowing" accesskey="5">Narrowing</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Restricting display and editing to a portion
                             of the buffer.

</td></tr>
<tr><td align="left" valign="top">• <a href="#View-Mode" accesskey="6">View Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Viewing read-only buffers.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Follow-Mode" accesskey="7">Follow Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Follow mode lets two windows scroll as one.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Faces" accesskey="8">Faces</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to change the display style using faces.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Colors" accesskey="9">Colors</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Specifying colors for faces.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Standard-Faces">Standard Faces</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The main predefined faces.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Text-Scale">Text Scale</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Increasing or decreasing text size in a buffer.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Font-Lock">Font Lock</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Minor mode for syntactic highlighting using faces.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Highlight-Interactively">Highlight Interactively</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Tell Emacs what text to highlight.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Fringes">Fringes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Enabling or disabling window fringes.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Displaying-Boundaries">Displaying Boundaries</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Displaying top and bottom of the buffer.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Useless-Whitespace">Useless Whitespace</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Showing possibly spurious trailing whitespace.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Selective-Display">Selective Display</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Hiding lines with lots of indentation.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Optional-Mode-Line">Optional Mode Line</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Optional mode line display features.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Text-Display">Text Display</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How text characters are normally displayed.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Cursor-Display">Cursor Display</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Features for displaying the cursor.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Line-Truncation">Line Truncation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Truncating lines to fit the screen width instead
                             of continuing them to multiple screen lines.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Visual-Line-Mode">Visual Line Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Word wrap and screen line-based editing.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Display-Custom">Display Custom</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Information on variables for customizing display.

</td></tr>
</tbody></table>


<a name="Scrolling"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Recentering" accesskey="n" rel="next">Recentering</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Scrolling-1"></a>
<h3 class="section">14.1Scrolling</h3>
<a name="index-scrolling"></a>

<p>If a window is too small to display all the text in its buffer, it
displays only a portion of it.  <em>Scrolling</em> commands change which
portion of the buffer is displayed.

</p>
<p>Scrolling forward or up advances the portion of the buffer
displayed in the window; equivalently, it moves the buffer text
upwards relative to the window.  Scrolling backward or down
displays an earlier portion of the buffer, and moves the text
downwards relative to the window.

</p>
<p>In Emacs, scrolling up or down refers to the direction that
the text moves in the window, <em>not</em> the direction that the window
moves relative to the text.  This terminology was adopted by Emacs
before the modern meaning of “scrolling up” and “scrolling down”
became widespread.  Hence, the strange result that <tt class="key">PageDown</tt>
scrolls up in the Emacs sense.

</p>
<p>The portion of a buffer displayed in a window always contains point.
If you move point past the bottom or top of the window, scrolling
occurs automatically to bring it back onscreen (see <a href="#Auto-Scrolling">Auto Scrolling</a>).  You can also scroll explicitly with these commands:

</p>
<dl compact="compact">
<dt><kbd>C-v</kbd></dt>
<dt><kbd><span class="key">PageDown</span></kbd></dt>
<dt><kbd><span class="key">next</span></kbd></dt>
<dd><p>Scroll forward by nearly a full window (<code>scroll-up-command</code>).

</p></dd>
<dt><kbd>M-v</kbd></dt>
<dt><kbd><span class="key">PageUp</span></kbd></dt>
<dt><kbd><span class="key">prior</span></kbd></dt>
<dd><p>Scroll backward (<code>scroll-down-command</code>).

</p></dd>
</dl>

<a name="index-C_002dv-1"></a>
<a name="index-M_002dv-1"></a>
<a name="index-PageDown-1"></a>
<a name="index-PageUp-1"></a>
<a name="index-next-1"></a>
<a name="index-prior-1"></a>
<a name="index-scroll_002dup_002dcommand"></a>
<a name="index-scroll_002ddown_002dcommand"></a>
<p><kbd>C-v</kbd> (<code>scroll-up-command</code>) scrolls forward by nearly the
whole window height.  The effect is to take the two lines at the
bottom of the window and put them at the top, followed by lines that
were not previously visible.  If point was in the text that scrolled
off the top, it ends up on the window’s new topmost line.  The
<tt class="key">PageDown</tt> (or <tt class="key">next</tt>) key is equivalent to <kbd>C-v</kbd>.

</p>
<p><kbd>M-v</kbd> (<code>scroll-down-command</code>) scrolls backward in a similar
way.  The <tt class="key">PageUp</tt> (or <tt class="key">prior</tt>) key is equivalent to
<kbd>M-v</kbd>.

</p>
<a name="index-next_002dscreen_002dcontext_002dlines"></a>
<p>The number of lines of overlap left by these scroll commands is
controlled by the variable <code>next-screen-context-lines</code>, whose
default value is 2.  You can supply the commands with a numeric prefix
argument, <var>n</var>, to scroll by <var>n</var> lines; Emacs attempts to leave
point unchanged, so that the text and point move up or down together.
<kbd>C-v</kbd> with a negative argument is like <kbd>M-v</kbd> and vice versa.

</p>
<a name="index-scroll_002derror_002dtop_002dbottom"></a>
<p>By default, these commands signal an error (by beeping or flashing
the screen) if no more scrolling is possible, because the window has
reached the beginning or end of the buffer.  If you change the
variable <code>scroll-error-top-bottom</code> to <code>t</code>, these commands
move point to the farthest possible position.  If point is already
there, the commands signal an error.

</p>
<a name="index-scroll_002dpreserve_002dscreen_002dposition"></a>
<a name="index-scroll_002dcommand-property"></a>
<p>Some users like scroll commands to keep point at the same screen
position, so that scrolling back to the same screen conveniently
returns point to its original position.  You can enable this behavior
via the variable <code>scroll-preserve-screen-position</code>.  If the value
is <code>t</code>, Emacs adjusts point to keep the cursor at the same screen
position whenever a scroll command moves it off-window, rather than
moving it to the topmost or bottommost line.  With any other
non-<code>nil</code> value, Emacs adjusts point this way even if the scroll
command leaves point in the window.  This variable affects all the
scroll commands documented in this section, as well as scrolling with
the mouse wheel (see <a href="#Mouse-Commands">Mouse Commands</a>); in general, it affects any
command that has a non-<code>nil</code> <code>scroll-command</code> property.
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Property-Lists">Property Lists</a> in <cite>The Emacs Lisp Reference Manual</cite>.

</p>
<a name="index-fast_002dbut_002dimprecise_002dscrolling"></a>
<p>Sometimes, particularly when you hold down keys such as <kbd>C-v</kbd>
and <kbd>M-v</kbd>, activating keyboard auto-repeat, Emacs fails to keep up
with the rapid rate of scrolling requested; the display doesn’t update
and Emacs can become unresponsive to input for quite a long time.  You
can counter this sluggishness by setting the variable
<code>fast-but-imprecise-scrolling</code> to a non-<code>nil</code> value.  This
instructs the scrolling commands not to fontify (see <a href="#Font-Lock">Font Lock</a>)
any unfontified text they scroll over, instead to assume it has the
default face.  This can cause Emacs to scroll to somewhat wrong buffer
positions when the faces in use are not all the same size, even with
single (i.e., without auto-repeat) scrolling operations.

</p>
<a name="index-jit_002dlock_002ddefer_002dtime"></a>
<p>As an alternative to setting <code>fast-but-imprecise-scrolling</code> you
might prefer to enable jit-lock deferred fontification (see <a href="#Font-Lock">Font Lock</a>).  To do this, customize <code>jit-lock-defer-time</code> to a small
positive number such as 0.25, or even 0.1 if you type quickly.  This
gives you less jerky scrolling when you hold down <kbd>C-v</kbd>, but the
window contents after any action which scrolls into a fresh portion of
the buffer will be momentarily unfontified.

</p>
<a name="index-scroll_002dup"></a>
<a name="index-scroll_002ddown"></a>
<a name="index-scroll_002dup_002dline"></a>
<a name="index-scroll_002ddown_002dline"></a>
<p>The commands <kbd>M-x scroll-up</kbd> and <kbd>M-x scroll-down</kbd> behave
similarly to <code>scroll-up-command</code> and <code>scroll-down-command</code>,
except they do not obey <code>scroll-error-top-bottom</code>.  Prior to
Emacs 24, these were the default commands for scrolling up and down.
The commands <kbd>M-x scroll-up-line</kbd> and <kbd>M-x scroll-down-line</kbd>
scroll the current window by one line at a time.  If you intend to use
any of these commands, you might want to give them key bindings
(see <a href="#Init-Rebinding">Init Rebinding</a>).

</p>

<a name="Recentering"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Auto-Scrolling" accesskey="n" rel="next">Auto Scrolling</a>, Previous: <a href="#Scrolling" accesskey="p" rel="prev">Scrolling</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Recentering-1"></a>
<h3 class="section">14.2Recentering</h3>

<dl compact="compact">
<dt><kbd>C-l</kbd></dt>
<dd><p>Scroll the selected window so the current line is the center-most text
line; on subsequent consecutive invocations, make the current line the
top line, the bottom line, and so on in cyclic order.  Possibly
redisplay the screen too (<code>recenter-top-bottom</code>).

</p>
</dd>
<dt><kbd>M-x recenter</kbd></dt>
<dd><p>Scroll the selected window so the current line is the center-most text
line.  Possibly redisplay the screen too.

</p>
</dd>
<dt><kbd>C-M-l</kbd></dt>
<dd><p>Scroll heuristically to bring useful information onto the screen
(<code>reposition-window</code>).

</p></dd>
</dl>

<a name="index-C_002dl"></a>
<a name="index-recenter_002dtop_002dbottom"></a>
<p>The <kbd>C-l</kbd> (<code>recenter-top-bottom</code>) command <em>recenters</em>
the selected window, scrolling it so that the current screen line is
exactly in the center of the window, or as close to the center as
possible.

</p>
<p>Typing <kbd>C-l</kbd> twice in a row (<kbd>C-l C-l</kbd>) scrolls the window
so that point is on the topmost screen line.  Typing a third <kbd>C-l</kbd>
scrolls the window so that point is on the bottom-most screen line.
Each successive <kbd>C-l</kbd> cycles through these three positions.

</p>
<a name="index-recenter_002dpositions"></a>
<p>You can change the cycling order by customizing the list variable
<code>recenter-positions</code>.  Each list element should be the symbol
<code>top</code>, <code>middle</code>, or <code>bottom</code>, or a number; an integer
means to move the line to the specified screen line, while a
floating-point number between 0.0 and 1.0 specifies a percentage of
the screen space from the top of the window.  The default,
<code>(middle top bottom)</code>, is the cycling order described above.
Furthermore, if you change the variable <code>scroll-margin</code> to a
non-zero value <var>n</var>, <kbd>C-l</kbd> always leaves at least <var>n</var>
screen lines between point and the top or bottom of the window
(see <a href="#Auto-Scrolling">Auto Scrolling</a>).

</p>
<p>You can also give <kbd>C-l</kbd> a prefix argument.  A plain prefix
argument, <kbd>C-u C-l</kbd>, simply recenters the line showing point.  A
positive argument <var>n</var> moves line showing point <var>n</var> lines down
from the top of the window.  An argument of zero moves point’s line to
the top of the window.  A negative argument -<var>n</var> moves point’s
line <var>n</var> lines from the bottom of the window.  When given an
argument, <kbd>C-l</kbd> does not clear the screen or cycle through
different screen positions.

</p>
<a name="index-recenter_002dredisplay"></a>
<p>If the variable <code>recenter-redisplay</code> has a non-<code>nil</code>
value, each invocation of <kbd>C-l</kbd> also clears and redisplays the
screen; the special value <code>tty</code> (the default) says to do this on
text-terminal frames only.  Redisplaying is useful in case the screen
becomes garbled for any reason (see <a href="#Screen-Garbled">Screen Garbled</a>).

</p>
<a name="index-recenter"></a>
<p>The more primitive command <kbd>M-x recenter</kbd> behaves like
<code>recenter-top-bottom</code>, but does not cycle among screen positions.

</p>
<a name="index-C_002dM_002dl"></a>
<a name="index-reposition_002dwindow"></a>
<p><kbd>C-M-l</kbd> (<code>reposition-window</code>) scrolls the current window
heuristically in a way designed to get useful information onto the
screen.  For example, in a Lisp file, this command tries to get the
entire current defun onto the screen if possible.

</p>

<a name="Auto-Scrolling"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Horizontal-Scrolling" accesskey="n" rel="next">Horizontal Scrolling</a>, Previous: <a href="#Recentering" accesskey="p" rel="prev">Recentering</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Automatic-Scrolling"></a>
<h3 class="section">14.3Automatic Scrolling</h3>

<a name="index-automatic-scrolling"></a>
<p>Emacs performs <em>automatic scrolling</em> when point moves out of the
visible portion of the text.  Normally, automatic scrolling centers
point vertically in the window, but there are several ways to alter
this behavior.

</p>
<a name="index-scroll_002dconservatively"></a>
<p>If you set <code>scroll-conservatively</code> to a small number <var>n</var>,
then moving point just a little off the screen (no more than <var>n</var>
lines) causes Emacs to scroll just enough to bring point back on
screen; if doing so fails to make point visible, Emacs scrolls just
far enough to center point in the window.  If you set
<code>scroll-conservatively</code> to a large number (larger than 100),
automatic scrolling never centers point, no matter how far point
moves; Emacs always scrolls text just enough to bring point into view,
either at the top or bottom of the window depending on the scroll
direction.  By default, <code>scroll-conservatively</code> is&nbsp;0, which
means to always center point in the window.

</p>
<a name="index-scroll_002dstep"></a>
<p>Another way to control automatic scrolling is to customize the
variable <code>scroll-step</code>.  Its value determines the number of lines
by which to automatically scroll, when point moves off the screen.  If
scrolling by that number of lines fails to bring point back into view,
point is centered instead.  The default value is zero, which (by
default) causes point to always be centered after scrolling.

</p>
<a name="index-aggressive-scrolling"></a>
<a name="index-scroll_002dup_002daggressively"></a>
<a name="index-scroll_002ddown_002daggressively"></a>
<p>A third way to control automatic scrolling is to customize the
variables <code>scroll-up-aggressively</code> and
<code>scroll-down-aggressively</code>, which directly specify the vertical
position of point after scrolling.  The value of
<code>scroll-up-aggressively</code> should be either <code>nil</code> (the
default), or a floating point number <var>f</var> between 0 and 1.  The
latter means that when point goes below the bottom window edge (i.e.,
scrolling forward), Emacs scrolls the window so that point is <var>f</var>
parts of the window height from the bottom window edge.  Thus, larger
<var>f</var> means more aggressive scrolling: more new text is brought into
view.  The default value, <code>nil</code>, is equivalent to 0.5.

</p>
<p>Likewise, <code>scroll-down-aggressively</code> is used when point goes
above the top window edge (i.e., scrolling backward).  The value
specifies how far point should be from the top margin of the window
after scrolling.  Thus, as with <code>scroll-up-aggressively</code>, a
larger value is more aggressive.

</p>
<p>Note that the variables <code>scroll-conservatively</code>,
<code>scroll-step</code>, and <code>scroll-up-aggressively</code> /
<code>scroll-down-aggressively</code> control automatic scrolling in
contradictory ways.  Therefore, you should pick no more than one of
these methods to customize automatic scrolling.  In case you customize
multiple variables, the order of priority is:
<code>scroll-conservatively</code>, then <code>scroll-step</code>, and finally
<code>scroll-up-aggressively</code> / <code>scroll-down-aggressively</code>.

</p>
<a name="index-scroll_002dmargin"></a>
<a name="index-maximum_002dscroll_002dmargin"></a>
<p>The variable <code>scroll-margin</code> restricts how close point can come
to the top or bottom of a window (even if aggressive scrolling
specifies a fraction <var>f</var> that is larger than the window portion
between the top and the bottom margins).  Its value is a number of
screen lines; if point comes within that many lines of the top or
bottom of the window, Emacs performs automatic scrolling.  By default,
<code>scroll-margin</code> is 0.  The effective margin size is limited to a
quarter of the window height by default, but this limit can be
increased up to half (or decreased down to zero) by customizing
<code>maximum-scroll-margin</code>.

</p>

<a name="Horizontal-Scrolling"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Narrowing" accesskey="n" rel="next">Narrowing</a>, Previous: <a href="#Auto-Scrolling" accesskey="p" rel="prev">Auto Scrolling</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Horizontal-Scrolling-1"></a>
<h3 class="section">14.4Horizontal Scrolling</h3>
<a name="index-horizontal-scrolling"></a>

<a name="index-auto_002dhscroll_002dmode"></a>
<p><em>Horizontal scrolling</em> means shifting all the lines sideways
within a window, so that some of the text near the left margin is not
displayed.  When the text in a window is scrolled horizontally, text
lines are truncated rather than continued (see <a href="#Line-Truncation">Line Truncation</a>).
If a window shows truncated lines, Emacs performs automatic horizontal
scrolling whenever point moves off the left or right edge of the
screen.  By default, all the lines in the window are scrolled
horizontally together, but if you set the variable
<code>auto-hscroll-mode</code> to the special value of <code>current-line</code>,
only the line showing the cursor will be scrolled.  To disable
automatic horizontal scrolling entirely, set the variable
<code>auto-hscroll-mode</code> to <code>nil</code>.  Note that when the automatic
horizontal scrolling is turned off, if point moves off the edge of the
screen, the cursor disappears to indicate that.  (On text terminals,
the cursor is left at the edge instead.)

</p>
<a name="index-hscroll_002dmargin"></a>
<p>The variable <code>hscroll-margin</code> controls how close point can get
to the window’s left and right edges before automatic scrolling
occurs.  It is measured in columns.  For example, if the value is 5,
then moving point within 5 columns of an edge causes horizontal
scrolling away from that edge.

</p>
<a name="index-hscroll_002dstep"></a>
<p>The variable <code>hscroll-step</code> determines how many columns to
scroll the window when point gets too close to the edge.  Zero, the
default value, means to center point horizontally within the window.
A positive integer value specifies the number of columns to scroll by.
A floating-point number (whose value should be between 0 and 1)
specifies the fraction of the window’s width to scroll by.

</p>
<p>You can also perform explicit horizontal scrolling with the
following commands:

</p>
<dl compact="compact">
<dt><kbd>C-x &lt;</kbd></dt>
<dd><p>Scroll text in current window to the left (<code>scroll-left</code>).

</p></dd>
<dt><kbd>C-x &gt;</kbd></dt>
<dd><p>Scroll to the right (<code>scroll-right</code>).

</p></dd>
</dl>

<a name="index-C_002dx-_003c"></a>
<a name="index-C_002dx-_003e"></a>
<a name="index-scroll_002dleft"></a>
<a name="index-scroll_002dright"></a>
<p><kbd>C-x &lt;</kbd> (<code>scroll-left</code>) scrolls text in the selected window
to the left by the full width of the window, less two columns.  (In
other words, the text in the window moves left relative to the
window.)  With a numeric argument <var>n</var>, it scrolls by <var>n</var>
columns.

</p>
<p>If the text is scrolled to the left, and point moves off the left
edge of the window, the cursor will freeze at the left edge of the
window, until point moves back to the displayed portion of the text.
This is independent of the current setting of
<code>auto-hscroll-mode</code>, which, for text scrolled to the left, only
affects the behavior at the right edge of the window.

</p>
<p><kbd>C-x &gt;</kbd> (<code>scroll-right</code>) scrolls similarly to the right.
The window cannot be scrolled any farther to the right once it is
displayed normally, with each line starting at the window’s left
margin; attempting to do so has no effect.  This means that you don’t
have to calculate the argument precisely for <kbd><span class="nolinebreak">C-x</span>&nbsp;&gt;</kbd><!-- /@w -->; any
sufficiently large argument will restore the normal display.

</p>
<p>If you use those commands to scroll a window horizontally, that sets
a lower bound for automatic horizontal scrolling.  Automatic scrolling
will continue to scroll the window, but never farther to the right
than the amount you previously set by <code>scroll-left</code>.  When
<code>auto-hscroll-mode</code> is set to <code>current-line</code>, all the lines
other than the one showing the cursor will be scrolled by that minimal
amount.

</p>

<a name="Narrowing"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#View-Mode" accesskey="n" rel="next">View Mode</a>, Previous: <a href="#Horizontal-Scrolling" accesskey="p" rel="prev">Horizontal Scrolling</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Narrowing-1"></a>
<h3 class="section">14.5 Narrowing</h3>
<a name="index-widening"></a>
<a name="index-restriction"></a>
<a name="index-narrowing"></a>
<a name="index-accessible-portion"></a>

<p><em>Narrowing</em> means focusing in on some portion of the buffer,
making the rest temporarily inaccessible.  The portion which you can
still get to is called the <em>accessible portion</em>.  Canceling the
narrowing, which makes the entire buffer once again accessible, is
called <em>widening</em>.  The bounds of narrowing in effect in a buffer
are called the buffer’s <em>restriction</em>.

</p>
<p>Narrowing can make it easier to concentrate on a single subroutine or
paragraph by eliminating clutter.  It can also be used to limit the
range of operation of a replace command or repeating keyboard macro.

</p>
<dl compact="compact">
<dt><kbd>C-x n n</kbd></dt>
<dd><p>Narrow down to between point and mark (<code>narrow-to-region</code>).

</p></dd>
<dt><kbd>C-x n w</kbd></dt>
<dd><p>Widen to make the entire buffer accessible again (<code>widen</code>).

</p></dd>
<dt><kbd>C-x n p</kbd></dt>
<dd><p>Narrow down to the current page (<code>narrow-to-page</code>).

</p></dd>
<dt><kbd>C-x n d</kbd></dt>
<dd><p>Narrow down to the current defun (<code>narrow-to-defun</code>).

</p></dd>
</dl>

<p>When you have narrowed down to a part of the buffer, that part appears
to be all there is.  You can’t see the rest, you can’t move into it
(motion commands won’t go outside the accessible part), you can’t change
it in any way.  However, it is not gone, and if you save the file all
the inaccessible text will be saved.  The word ‘<samp>Narrow</samp>’ appears in
the mode line whenever narrowing is in effect.

</p>
<a name="index-C_002dx-n-n"></a>
<a name="index-narrow_002dto_002dregion"></a>
<p>The primary narrowing command is <kbd>C-x n n</kbd> (<code>narrow-to-region</code>).
It sets the current buffer’s restrictions so that the text in the current
region remains accessible, but all text before the region or after the
region is inaccessible.  Point and mark do not change.

</p>
<a name="index-C_002dx-n-p"></a>
<a name="index-narrow_002dto_002dpage"></a>
<a name="index-C_002dx-n-d"></a>
<a name="index-narrow_002dto_002ddefun"></a>
<p>Alternatively, use <kbd>C-x n p</kbd> (<code>narrow-to-page</code>) to narrow
down to the current page.  See <a href="#Pages">Pages</a>, for the definition of a page.
<kbd>C-x n d</kbd> (<code>narrow-to-defun</code>) narrows down to the defun
containing point (see <a href="#Defuns">Defuns</a>).

</p>
<a name="index-C_002dx-n-w"></a>
<a name="index-widen"></a>
<p>The way to cancel narrowing is to widen with <kbd>C-x n w</kbd>
(<code>widen</code>).  This makes all text in the buffer accessible again.

</p>
<p>You can get information on what part of the buffer you are narrowed down
to using the <kbd>C-x =</kbd> command.  See <a href="#Position-Info">Position Info</a>.

</p>
<p>Because narrowing can easily confuse users who do not understand it,
<code>narrow-to-region</code> is normally a disabled command.  Attempting to use
this command asks for confirmation and gives you the option of enabling it;
if you enable the command, confirmation will no longer be required for
it.  See <a href="#Disabling">Disabling</a>.

</p>

<a name="View-Mode"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Follow-Mode" accesskey="n" rel="next">Follow Mode</a>, Previous: <a href="#Narrowing" accesskey="p" rel="prev">Narrowing</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="View-Mode-1"></a>
<h3 class="section">14.6 View Mode</h3>
<a name="index-View-mode"></a>
<a name="index-mode_002c-View"></a>

<a name="index-s-_0028View-mode_0029"></a>
<a name="index-SPC-_0028View-mode_0029"></a>
<a name="index-DEL-_0028View-mode_0029"></a>
<p>View mode is a minor mode that lets you scan a buffer by sequential
screenfuls.  It provides commands for scrolling through the buffer
conveniently but not for changing it.  Apart from the usual Emacs
cursor motion commands, you can type <tt class="key">SPC</tt> to scroll forward one
windowful, <kbd>S-<span class="key">SPC</span></kbd> or <tt class="key">DEL</tt> to scroll backward, and <kbd>s</kbd> to
start an incremental search.

</p>
<a name="index-q-_0028View-mode_0029"></a>
<a name="index-e-_0028View-mode_0029"></a>
<a name="index-View_002dquit"></a>
<a name="index-View_002dexit"></a>
<p>Typing <kbd>q</kbd> (<code>View-quit</code>) disables View mode, and switches
back to the buffer and position before View mode was enabled.  Typing
<kbd>e</kbd> (<code>View-exit</code>) disables View mode, keeping the current
buffer and position.

</p>
<a name="index-view_002dbuffer"></a>
<a name="index-view_002dfile"></a>
<p><kbd>M-x view-buffer</kbd> prompts for an existing Emacs buffer, switches
to it, and enables View mode.  <kbd>M-x view-file</kbd> prompts for a file
and visits it with View mode enabled.

</p>

<a name="Follow-Mode"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Faces" accesskey="n" rel="next">Faces</a>, Previous: <a href="#View-Mode" accesskey="p" rel="prev">View Mode</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Follow-Mode-1"></a>
<h3 class="section">14.7 Follow Mode</h3>
<a name="index-Follow-mode"></a>
<a name="index-mode_002c-Follow"></a>
<a name="index-follow_002dmode"></a>
<a name="index-windows_002c-synchronizing"></a>
<a name="index-synchronizing-windows"></a>

<p><em>Follow mode</em> is a minor mode that makes two windows, both
showing the same buffer, scroll as a single tall virtual window.
To use Follow mode, go to a frame with just one window, split it into
two side-by-side windows using <kbd>C-x 3</kbd>, and then type <kbd>M-x
follow-mode</kbd>.  From then on, you can edit the buffer in either of the
two windows, or scroll either one; the other window follows it.

</p>
<p>In Follow mode, if you move point outside the portion visible in one
window and into the portion visible in the other window, that selects
the other window—again, treating the two as if they were parts of
one large window.

</p>
<p>To turn off Follow mode, type <kbd>M-x follow-mode</kbd> a second time.

</p>

<a name="Faces"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Colors" accesskey="n" rel="next">Colors</a>, Previous: <a href="#Follow-Mode" accesskey="p" rel="prev">Follow Mode</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Text-Faces"></a>
<h3 class="section">14.8 Text Faces</h3>
<a name="index-faces"></a>

<p>Emacs can display text in several different styles, called
<em>faces</em>.  Each face can specify various <em>face attributes</em>,
such as the font, height, weight, slant, foreground and background
color, and underlining or overlining.  Most major modes assign faces
to the text automatically, via Font Lock mode.  See <a href="#Font-Lock">Font Lock</a>, for
more information about how these faces are assigned.

</p>
<a name="index-list_002dfaces_002ddisplay"></a>
<p>To see what faces are currently defined, and what they look like,
type <kbd>M-x list-faces-display</kbd>.  With a prefix argument, this
prompts for a regular expression, and displays only faces with names
matching that regular expression (see <a href="#Regexps">Regexps</a>).

</p>
<a name="index-frame_002dbackground_002dmode"></a>
<p>It’s possible for a given face to look different in different
frames.  For instance, some text terminals do not support all face
attributes, particularly font, height, and width, and some support a
limited range of colors.  In addition, most Emacs faces are defined so
that their attributes are different on light and dark frame
backgrounds, for reasons of legibility.  By default, Emacs
automatically chooses which set of face attributes to display on each
frame, based on the frame’s current background color.  However, you
can override this by giving the variable <code>frame-background-mode</code>
a non-<code>nil</code> value.  A value of <code>dark</code> makes Emacs treat all
frames as if they have a dark background, whereas a value of
<code>light</code> makes it treat all frames as if they have a light
background.

</p>
<a name="index-background-color"></a>
<a name="index-default-face"></a>
<p>You can customize a face to alter its attributes, and save those
customizations for future Emacs sessions.  See <a href="#Face-Customization">Face Customization</a>,
for details.

</p>
<p>The <code>default</code> face is the default for displaying text, and all
of its attributes are specified.  Its background color is also used as
the frame’s background color.  See <a href="#Colors">Colors</a>.

</p>
<a name="index-cursor-face"></a>
<p>Another special face is the <code>cursor</code> face.  On graphical
displays, the background color of this face is used to draw the text
cursor.  None of the other attributes of this face have any effect;
the foreground color for text under the cursor is taken from the
background color of the underlying text.  On text terminals, the
appearance of the text cursor is determined by the terminal, not by
the <code>cursor</code> face.

</p>
<p>You can also use X resources to specify attributes of any particular
face.  See <a href="#Resources">Resources</a>.

</p>
<p>Emacs can display variable-width fonts, but some Emacs commands,
particularly indentation commands, do not account for variable
character display widths.  Therefore, we recommend not using
variable-width fonts for most faces, particularly those assigned by
Font Lock mode.

</p>

<a name="Colors"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Standard-Faces" accesskey="n" rel="next">Standard Faces</a>, Previous: <a href="#Faces" accesskey="p" rel="prev">Faces</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Colors-for-Faces"></a>
<h3 class="section">14.9 Colors for Faces</h3>

<p>Faces can have various foreground and background colors.  When you
specify a color for a face—for instance, when customizing the face
(see <a href="#Face-Customization">Face Customization</a>)—you can use either a <em>color name</em>
or an <em>RGB triplet</em>.

</p>
<a name="Color-Names"></a>
<h4 class="subsection">14.9.1 Color Names</h4>
<a name="index-color-name"></a>
<a name="index-list_002dcolors_002ddisplay"></a>
<a name="index-list_002dcolors_002dsort"></a>
<p>A color name is a pre-defined name, such as ‘<samp>dark orange</samp>’ or
‘<samp>medium sea green</samp>’.  To view a list of color names, type <kbd>M-x
list-colors-display</kbd>.  To control the order in which colors are shown,
customize <code>list-colors-sort</code>.  If you run this command on a
graphical display, it shows the full range of color names known to
Emacs (these are the standard X11 color names, defined in X’s
<samp>rgb.txt</samp> file).  If you run the command on a text terminal, it
shows only a small subset of colors that can be safely displayed on
such terminals.  However, Emacs understands X11 color names even on
text terminals; if a face is given a color specified by an X11 color
name, it is displayed using the closest-matching terminal color.

</p>
<a name="RGB-Triplets"></a>
<h4 class="subsection">14.9.2 RGB Triplets</h4>
<a name="index-RGB-triplet"></a>
<p>An RGB triplet is a string of the form ‘<samp>#RRGGBB</samp>’.  Each of the
primary color components is represented by a hexadecimal number
between ‘<samp>00</samp>’ (intensity 0) and ‘<samp>FF</samp>’ (the maximum intensity).
It is also possible to use one, three, or four hex digits for each
component, so ‘<samp>red</samp>’ can be represented as ‘<samp>#F00</samp>’,
‘<samp>#fff000000</samp>’, or ‘<samp>#ffff00000000</samp>’.  The components must have
the same number of digits.  For hexadecimal values A to F, either
upper or lower case are acceptable.

</p>
<p>The <kbd>M-x list-colors-display</kbd> command also shows the equivalent
RGB triplet for each named color.  For instance, ‘<samp>medium sea
green</samp>’ is equivalent to ‘<samp>#3CB371</samp>’.

</p>
<a name="index-face-colors_002c-setting"></a>
<a name="index-set_002dface_002dforeground"></a>
<a name="index-set_002dface_002dbackground"></a>
<p>You can change the foreground and background colors of a face with
<kbd>M-x set-face-foreground</kbd> and <kbd>M-x set-face-background</kbd>.
These commands prompt in the minibuffer for a face name and a color,
with completion, and then set that face to use the specified color.
They affect the face colors on all frames, but their effects do not
persist for future Emacs sessions, unlike using the customization
buffer or X resources.  You can also use frame parameters to set
foreground and background colors for a specific frame; See <a href="#Frame-Parameters">Frame Parameters</a>.

</p>

<a name="Standard-Faces"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Text-Scale" accesskey="n" rel="next">Text Scale</a>, Previous: <a href="#Colors" accesskey="p" rel="prev">Colors</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Standard-Faces-1"></a>
<h3 class="section">14.10 Standard Faces</h3>
<a name="index-standard-faces"></a>

<p>Here are the standard faces for specifying text appearance.  You can
apply them to specific text when you want the effects they produce.

</p>
<dl compact="compact">
<dt><code>default</code></dt>
<dd><p>This face is used for ordinary text that doesn’t specify any face.
Its background color is used as the frame’s background color.

</p></dd>
<dt><code>bold</code></dt>
<dd><p>This face uses a bold variant of the default font.

</p></dd>
<dt><code>italic</code></dt>
<dd><p>This face uses an italic variant of the default font.

</p></dd>
<dt><code>bold-italic</code></dt>
<dd><p>This face uses a bold italic variant of the default font.

</p></dd>
<dt><code>underline</code></dt>
<dd><p>This face underlines text.

</p></dd>
<dt><code>fixed-pitch</code></dt>
<dd><p>This face forces use of a fixed-width font.  It’s reasonable to
customize this face to use a different fixed-width font, if you like,
but you should not make it a variable-width font.

</p></dd>
<dt><code>fixed-pitch-serif</code></dt>
<dd><p>This face is like <code>fixed-pitch</code>, except the font has serifs and
looks more like traditional typewriting.

<a name="index-variable_002dpitch-face"></a>
</p></dd>
<dt><code>variable-pitch</code></dt>
<dd><p>This face forces use of a variable-width font.

<a name="index-shadow-face"></a>
</p></dd>
<dt><code>shadow</code></dt>
<dd><p>This face is used for making the text less noticeable than the surrounding
ordinary text.  Usually this can be achieved by using shades of gray in
contrast with either black or white default foreground color.

</p></dd>
</dl>

<p>Here’s an incomplete list of faces used to highlight parts of the
text temporarily for specific purposes.  (Many other modes define
their own faces for this purpose.)

</p>
<dl compact="compact">
<dt><code>highlight</code></dt>
<dd><p>This face is used for text highlighting in various contexts, such as
when the mouse cursor is moved over a hyperlink.

</p></dd>
<dt><code>isearch</code></dt>
<dd><p>This face is used to highlight the current Isearch match
(see <a href="#Incremental-Search">Incremental Search</a>).

</p></dd>
<dt><code>query-replace</code></dt>
<dd><p>This face is used to highlight the current Query Replace match
(see <a href="#Replace">Replace</a>).

</p></dd>
<dt><code>lazy-highlight</code></dt>
<dd><p>This face is used to highlight lazy matches for Isearch and Query
Replace (matches other than the current one).

</p></dd>
<dt><code>region</code></dt>
<dd><p>This face is used for displaying an active region (see <a href="#Mark">Mark</a>).
When Emacs is built with GTK+ support, its colors are taken from the
current GTK+ theme.

</p></dd>
<dt><code>secondary-selection</code></dt>
<dd><p>This face is used for displaying a secondary X selection (see <a href="#Secondary-Selection">Secondary Selection</a>).

</p></dd>
<dt><code>trailing-whitespace</code></dt>
<dd><p>The face for highlighting excess spaces and tabs at the end of a line
when <code>show-trailing-whitespace</code> is non-<code>nil</code> (see <a href="#Useless-Whitespace">Useless Whitespace</a>).

</p></dd>
<dt><code>escape-glyph</code></dt>
<dd><p>The face for displaying control characters and escape sequences
(see <a href="#Text-Display">Text Display</a>).

</p></dd>
<dt><code>homoglyph</code></dt>
<dd><p>The face for displaying lookalike characters, i.e., characters that
look like but are not the characters being represented
(see <a href="#Text-Display">Text Display</a>).

</p></dd>
<dt><code>nobreak-space</code></dt>
<dd><p>The face for displaying no-break space characters (see <a href="#Text-Display">Text Display</a>).

</p></dd>
<dt><code>nobreak-hyphen</code></dt>
<dd><p>The face for displaying no-break hyphen characters (see <a href="#Text-Display">Text Display</a>).

</p></dd>
</dl>

<p>The following faces control the appearance of parts of the Emacs
frame:

</p>
<dl compact="compact">
<dt><code>mode-line</code></dt>
<dd><a name="index-mode_002dline-face"></a>
<a name="index-faces-for-mode-lines"></a>
<p>This face is used for the mode line of the currently selected window,
and for menu bars when toolkit menus are not used.  By default, it’s
drawn with shadows for a raised effect on graphical displays, and
drawn as the inverse of the default face on non-windowed terminals.

</p></dd>
<dt><code>mode-line-inactive</code></dt>
<dd><a name="index-mode_002dline_002dinactive-face"></a>
<p>Like <code>mode-line</code>, but used for mode lines of the windows other
than the selected one (if <code>mode-line-in-non-selected-windows</code> is
non-<code>nil</code>).  This face inherits from <code>mode-line</code>, so changes
in that face affect mode lines in all windows.

</p></dd>
<dt><code>mode-line-highlight</code></dt>
<dd><a name="index-mode_002dline_002dhighlight-face"></a>
<p>Like <code>highlight</code>, but used for mouse-sensitive portions of text
on mode lines.  Such portions of text typically pop up tooltips
(see <a href="#Tooltips">Tooltips</a>) when the mouse pointer hovers above them.

</p></dd>
<dt><code>mode-line-buffer-id</code></dt>
<dd><a name="index-mode_002dline_002dbuffer_002did-face"></a>
<p>This face is used for buffer identification parts in the mode line.

</p></dd>
<dt><code>header-line</code></dt>
<dd><a name="index-header_002dline-face"></a>
<p>Similar to <code>mode-line</code> for a window’s header line, which appears
at the top of a window just as the mode line appears at the bottom.
Most windows do not have a header line—only some special modes, such
Info mode, create one.

</p></dd>
<dt><code>header-line-highlight</code></dt>
<dd><a name="index-header_002dline_002dhighlight-face"></a>
<p>Similar to <code>highlight</code> and <code>mode-line-highlight</code>, but used
for mouse-sensitive portions of text on header lines.  This is a
separate face because the <code>header-line</code> face might be customized
in a way that does not interact well with <code>highlight</code>.

</p></dd>
<dt><code>tab-line</code></dt>
<dd><a name="index-tab_002dline-face"></a>
<p>Similar to <code>mode-line</code> for a window’s tab line, which appears
at the top of a window with tabs representing window buffers.
See <a href="#Tab-Line">Tab Line</a>.

</p></dd>
<dt><code>vertical-border</code></dt>
<dd><a name="index-vertical_002dborder-face"></a>
<p>This face is used for the vertical divider between windows on text
terminals.

</p></dd>
<dt><code>minibuffer-prompt</code></dt>
<dd><a name="index-minibuffer_002dprompt-face"></a>
<a name="index-minibuffer_002dprompt_002dproperties"></a>
<p>This face is used for the prompt strings displayed in the minibuffer.
By default, Emacs automatically adds this face to the value of
<code>minibuffer-prompt-properties</code>, which is a list of text
properties (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Text-Properties">Text Properties</a> in <cite>the Emacs Lisp Reference
Manual</cite>) used to display the prompt text.  (This variable takes effect
when you enter the minibuffer.)

</p></dd>
<dt><code>fringe</code></dt>
<dd><a name="index-fringe-face"></a>
<p>The face for the fringes to the left and right of windows on graphic
displays.  (The fringes are the narrow portions of the Emacs frame
between the text area and the window’s right and left borders.)
See <a href="#Fringes">Fringes</a>.

</p></dd>
<dt><code>cursor</code></dt>
<dd><p>The <code>:background</code> attribute of this face specifies the color of
the text cursor.  See <a href="#Cursor-Display">Cursor Display</a>.

</p></dd>
<dt><code>tooltip</code></dt>
<dd><p>This face is used for tooltip text.  By default, if Emacs is built
with GTK+ support, tooltips are drawn via GTK+ and this face has no
effect.  See <a href="#Tooltips">Tooltips</a>.

</p></dd>
<dt><code>mouse</code></dt>
<dd><p>This face determines the color of the mouse pointer.

</p></dd>
</dl>

<p>The following faces likewise control the appearance of parts of the
Emacs frame, but only on text terminals, or when Emacs is built on X
with no toolkit support.  (For all other cases, the appearance of the
respective frame elements is determined by system-wide settings.)

</p>
<dl compact="compact">
<dt><code>scroll-bar</code></dt>
<dd><p>This face determines the visual appearance of the scroll bar.
See <a href="#Scroll-Bars">Scroll Bars</a>.

</p></dd>
<dt><code>tool-bar</code></dt>
<dd><p>This face determines the color of tool bar icons.  See <a href="#Tool-Bars">Tool Bars</a>.

</p></dd>
<dt><code>tab-bar</code></dt>
<dd><p>This face determines the color of tab bar icons.  See <a href="#Tab-Bars">Tab Bars</a>.

</p></dd>
<dt><code>menu</code></dt>
<dd><a name="index-menu-bar-appearance"></a>
<a name="index-menu-face_002c-no-effect-if-customized"></a>
<a name="index-customization-of-menu-face"></a>
<p>This face determines the colors and font of Emacs’s menus.  See <a href="#Menu-Bars">Menu Bars</a>.

</p></dd>
<dt><code>tty-menu-enabled-face</code></dt>
<dd><a name="index-faces-for-text_002dmode-menus"></a>
<a name="index-TTY-menu-faces"></a>
<p>This face is used to display enabled menu items on text-mode
terminals.

</p></dd>
<dt><code>tty-menu-disabled-face</code></dt>
<dd><p>This face is used to display disabled menu items on text-mode
terminals.

</p></dd>
<dt><code>tty-menu-selected-face</code></dt>
<dd><p>This face is used to display on text-mode terminals the menu item that
would be selected if you click a mouse or press <tt class="key">RET</tt>.

</p></dd>
</dl>


<a name="Text-Scale"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Font-Lock" accesskey="n" rel="next">Font Lock</a>, Previous: <a href="#Standard-Faces" accesskey="p" rel="prev">Standard Faces</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Text-Scale-1"></a>
<h3 class="section">14.11 Text Scale</h3>

<a name="index-adjust-buffer-face-height"></a>
<a name="index-text_002dscale_002dadjust"></a>
<a name="index-C_002dx-C_002d_002b"></a>
<a name="index-C_002dx-C_002d_002d"></a>
<a name="index-C_002dx-C_002d_003d"></a>
<a name="index-C_002dx-C_002d0"></a>
<a name="index-C_002dwheel_002ddown"></a>
<a name="index-C_002dwheel_002dup"></a>
<p>To increase the height of the default face in the current buffer,
type <kbd>C-x C-+</kbd> or <kbd>C-x C-=</kbd>.  To decrease it, type <kbd>C-x
C--</kbd>.  To restore the default (global) face height, type <kbd>C-x
C-0</kbd>.  These keys are all bound to the same command,
<code>text-scale-adjust</code>, which looks at the last key typed to
determine which action to take.

</p>
<p>Similarly, scrolling the mouse wheel with the <kbd>Ctrl</kbd> modifier
pressed, when the mouse pointer is above buffer text, will increase or
decrease the height of the default face, depending on the direction of
the scrolling.

</p>
<p>The final key of these commands may be repeated without the leading
<kbd>C-x</kbd>.  For instance, <kbd>C-x C-= C-= C-=</kbd> increases the face
height by three steps.  Each step scales the text height by a factor
of 1.2; to change this factor, customize the variable
<code>text-scale-mode-step</code>.  A numeric argument of 0
to the <code>text-scale-adjust</code> command restores the default height,
the same as typing <kbd>C-x C-0</kbd>.

</p>
<a name="index-increase-buffer-face-height"></a>
<a name="index-text_002dscale_002dincrease"></a>
<a name="index-decrease-buffer-face-height"></a>
<a name="index-text_002dscale_002ddecrease"></a>
<p>The commands <code>text-scale-increase</code> and
<code>text-scale-decrease</code> increase or decrease the height of the
default face, just like <kbd>C-x C-+</kbd> and <kbd>C-x C--</kbd> respectively.
You may find it convenient to bind to these commands, rather than
<code>text-scale-adjust</code>.

</p>
<a name="index-set-buffer-face-height"></a>
<a name="index-text_002dscale_002dset"></a>
<p>The command <code>text-scale-set</code> scales the height of the default
face in the current buffer to an absolute level specified by its
prefix argument.

</p>
<a name="index-text_002dscale_002dmode"></a>
<p>The above commands automatically enable the minor mode
<code>text-scale-mode</code> if the current font scaling is other than 1,
and disable it otherwise.

</p>

<a name="Font-Lock"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Highlight-Interactively" accesskey="n" rel="next">Highlight Interactively</a>, Previous: <a href="#Text-Scale" accesskey="p" rel="prev">Text Scale</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Font-Lock-mode"></a>
<h3 class="section">14.12 Font Lock mode</h3>
<a name="index-Font-Lock-mode"></a>
<a name="index-mode_002c-Font-Lock"></a>
<a name="index-syntax-highlighting-and-coloring"></a>

<p>Font Lock mode is a minor mode, always local to a particular buffer,
which assigns faces to (or <em>fontifies</em>) the text in the buffer.
Each buffer’s major mode tells Font Lock mode which text to fontify;
for instance, programming language modes fontify syntactically
relevant constructs like comments, strings, and function names.

</p>
<a name="index-font_002dlock_002dmode"></a>
<p>Font Lock mode is enabled by default in major modes that support it.
To toggle it in the current buffer, type <kbd>M-x font-lock-mode</kbd>.  A
positive numeric argument unconditionally enables Font Lock mode, and
a negative or zero argument disables it.

</p>
<a name="index-global_002dfont_002dlock_002dmode"></a>
<a name="index-global_002dfont_002dlock_002dmode-1"></a>
<p>Type <kbd>M-x global-font-lock-mode</kbd> to toggle Font Lock mode in all
buffers.  To impose this setting for future Emacs sessions, customize
the variable <code>global-font-lock-mode</code> (see <a href="#Easy-Customization">Easy Customization</a>), or add the following line to your init file:

</p>
<div class="example">
<pre class="example">(global-font-lock-mode 0)
</pre></div>

<p>If you have disabled Global Font Lock mode, you can still enable Font
Lock for specific major modes by adding the function
<code>font-lock-mode</code> to the mode hooks (see <a href="#Hooks">Hooks</a>).  For example,
to enable Font Lock mode for editing C files, you can do this:

</p>
<div class="example">
<pre class="example">(add-hook 'c-mode-hook 'font-lock-mode)
</pre></div>

<p>Font Lock mode uses several specifically named faces to do its job,
including <code>font-lock-string-face</code>, <code>font-lock-comment-face</code>,
and others.  The easiest way to find them all is to use <kbd>M-x
customize-group <span class="key">RET</span> font-lock-faces <span class="key">RET</span></kbd>.  You can then
use that customization buffer to customize the appearance of these
faces.  See <a href="#Face-Customization">Face Customization</a>.

</p>
<a name="index-font_002dlock_002dmaximum_002ddecoration"></a>
<p>You can customize the variable <code>font-lock-maximum-decoration</code>
to alter the amount of fontification applied by Font Lock mode, for
major modes that support this feature.  The value should be a number
(with 1 representing a minimal amount of fontification; some modes
support levels as high as 3); or <code>t</code>, meaning “as high as
possible” (the default).  To be effective for a given file buffer,
the customization of <code>font-lock-maximum-decoration</code> should be
done <em>before</em> the file is visited; if you already have the file
visited in a buffer when you customize this variable, kill the buffer
and visit the file again after the customization.

</p>
<p>You can also specify different numbers for particular major modes; for
example, to use level 1 for C/C++ modes, and the default level
otherwise, use the value

</p>
<div class="example">
<pre class="example">'((c-mode . 1) (c++-mode . 1)))
</pre></div>

<a name="index-incorrect-fontification"></a>
<a name="index-parenthesis-in-column-zero-and-fontification"></a>
<a name="index-brace-in-column-zero-and-fontification"></a>
<p>Comment and string fontification (or “syntactic” fontification)
relies on analysis of the syntactic structure of the buffer text.  For
the sake of speed, some modes, including Lisp mode, rely on a special
convention: an open-parenthesis or open-brace in the leftmost column
always defines the beginning of a defun, and is thus always outside
any string or comment.  Therefore, you should avoid placing an
open-parenthesis or open-brace in the leftmost column, if it is inside
a string or comment.  See <a href="#Left-Margin-Paren">Left Margin Paren</a>, for details.

</p>
<a name="index-font_002dlock_002dadd_002dkeywords"></a>
<p>Font Lock highlighting patterns already exist for most modes, but
you may want to fontify additional patterns.  You can use the function
<code>font-lock-add-keywords</code>, to add your own highlighting patterns
for a particular mode.  For example, to highlight ‘<samp>FIXME:</samp>’ words
in C comments, use this:

</p>
<div class="example">
<pre class="example">(add-hook 'c-mode-hook
          (lambda ()
           (font-lock-add-keywords nil
            '(("\\&lt;\\(FIXME\\):" 1
               font-lock-warning-face t)))))
</pre></div>

<a name="index-font_002dlock_002dremove_002dkeywords"></a>
<p>To remove keywords from the font-lock highlighting patterns, use the
function <code>font-lock-remove-keywords</code>.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Search_002dbased-Fontification">Search-based
Fontification</a> in <cite>The Emacs Lisp Reference Manual</cite>.

</p>
<a name="index-just_002din_002dtime-_0028JIT_0029-font_002dlock"></a>
<a name="index-background-syntax-highlighting"></a>
<p>Fontifying large buffers can take a long time.  To avoid large
delays when a file is visited, Emacs initially fontifies only the
visible portion of a buffer.  As you scroll through the buffer, each
portion that becomes visible is fontified as soon as it is displayed;
this type of Font Lock is called <em>Just-In-Time</em> (or <em>JIT</em>)
Lock.  You can control how JIT Lock behaves, including telling it to
perform fontification while idle, by customizing variables in the
customization group ‘<samp>jit-lock</samp>’.  See <a href="#Specific-Customization">Specific Customization</a>.

</p>

<a name="Highlight-Interactively"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Fringes" accesskey="n" rel="next">Fringes</a>, Previous: <a href="#Font-Lock" accesskey="p" rel="prev">Font Lock</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Interactive-Highlighting"></a>
<h3 class="section">14.13 Interactive Highlighting</h3>
<a name="index-highlighting-by-matching"></a>
<a name="index-interactive-highlighting"></a>
<a name="index-Highlight-Changes-mode"></a>

<a name="index-highlight_002dchanges_002dmode"></a>
<p>Highlight Changes mode is a minor mode that <em>highlights</em> the parts
of the buffer that were changed most recently, by giving that text a
different face.  To enable or disable Highlight Changes mode, use
<kbd>M-x highlight-changes-mode</kbd>.

</p>
<a name="index-Hi-Lock-mode"></a>
<a name="index-hi_002dlock_002dmode"></a>
<p>Hi Lock mode is a minor mode that highlights text that matches
regular expressions you specify.  For example, you can use it to
highlight all the references to a certain variable in a program source
file, highlight certain parts in a voluminous output of some program,
or highlight certain names in an article.  To enable or disable Hi
Lock mode, use the command <kbd>M-x hi-lock-mode</kbd>.  To enable Hi Lock
mode for all buffers, use <kbd>M-x global-hi-lock-mode</kbd> or place
<code>(global-hi-lock-mode 1)</code> in your <samp>.emacs</samp> file.

</p>
<p>Hi Lock mode works like Font Lock mode (see <a href="#Font-Lock">Font Lock</a>), except
that you specify explicitly the regular expressions to highlight.  You
can control them with the following commands.  (The key bindings
below that begin with <kbd>C-x w</kbd> are deprecated in favor of the
global <kbd>M-s h</kbd> bindings, and will be removed in some future Emacs
version.)

</p>
<dl compact="compact">
<dt><kbd>M-s h r <var>regexp</var> <span class="key">RET</span> <var>face</var> <span class="key">RET</span></kbd></dt>
<dt><kbd>C-x w h <var>regexp</var> <span class="key">RET</span> <var>face</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-M_002ds-h-r"></a>
<a name="index-C_002dx-w-h"></a>
<a name="index-highlight_002dregexp"></a>
<p>Highlight text that matches <var>regexp</var> using face <var>face</var>
(<code>highlight-regexp</code>).  The highlighting will remain as long as
the buffer is loaded.  For example, to highlight all occurrences of
the word “whim” using the default face (a yellow background), type
<kbd>M-s h r whim <span class="key">RET</span> <span class="key">RET</span></kbd>.  Any face can be used for
highlighting, Hi Lock provides several of its own and these are
pre-loaded into a list of default values.  While being prompted for a
face use <kbd>M-n</kbd> and <kbd>M-p</kbd> to cycle through them.  A prefix
numeric argument limits the highlighting to the corresponding
subexpression.

</p>
<a name="index-hi_002dlock_002dauto_002dselect_002dface"></a>
<p>Setting the option <code>hi-lock-auto-select-face</code> to a non-<code>nil</code>
value causes this command (and other Hi Lock commands that read faces)
to automatically choose the next face from the default list without
prompting.

</p>
<p>You can use this command multiple times, specifying various regular
expressions to highlight in different ways.

</p>
</dd>
<dt><kbd>M-s h u <var>regexp</var> <span class="key">RET</span></kbd></dt>
<dt><kbd>C-x w r <var>regexp</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-M_002ds-h-u"></a>
<a name="index-C_002dx-w-r"></a>
<a name="index-unhighlight_002dregexp"></a>
<p>Unhighlight <var>regexp</var> (<code>unhighlight-regexp</code>).  If you invoke
this from the menu, you select the expression to unhighlight from a
list.  If you invoke this from the keyboard, you use the minibuffer.
It will show the most recently added regular expression; use <kbd>M-n</kbd>
to show the next older expression and <kbd>M-p</kbd> to select the next
newer expression.  (You can also type the expression by hand, with
completion.)  When the expression you want to unhighlight appears in
the minibuffer, press <kbd><span class="key">RET</span></kbd> to exit the minibuffer and
unhighlight it.

</p>
</dd>
<dt><kbd>M-s h l <var>regexp</var> <span class="key">RET</span> <var>face</var> <span class="key">RET</span></kbd></dt>
<dt><kbd>C-x w l <var>regexp</var> <span class="key">RET</span> <var>face</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-M_002ds-h-l"></a>
<a name="index-C_002dx-w-l"></a>
<a name="index-highlight_002dlines_002dmatching_002dregexp"></a>
<a name="index-lines_002c-highlighting"></a>
<a name="index-highlighting-lines-of-text"></a>
<p>Highlight entire lines containing a match for <var>regexp</var>, using face
<var>face</var> (<code>highlight-lines-matching-regexp</code>).

</p>
</dd>
<dt><kbd>M-s h p <var>phrase</var> <span class="key">RET</span> <var>face</var> <span class="key">RET</span></kbd></dt>
<dt><kbd>C-x w p <var>phrase</var> <span class="key">RET</span> <var>face</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-M_002ds-h-p"></a>
<a name="index-C_002dx-w-p"></a>
<a name="index-highlight_002dphrase"></a>
<a name="index-phrase_002c-highlighting"></a>
<a name="index-highlighting-phrase"></a>
<p>Highlight matches of <var>phrase</var>, using face <var>face</var>
(<code>highlight-phrase</code>).  <var>phrase</var> can be any regexp,
but spaces will be replaced by matches to whitespace and
initial lower-case letters will become case insensitive.

</p>
</dd>
<dt><kbd>M-s h .</kbd></dt>
<dt><kbd>C-x w .</kbd></dt>
<dd><a name="index-M_002ds-h-_002e"></a>
<a name="index-C_002dx-w-_002e"></a>
<a name="index-highlight_002dsymbol_002dat_002dpoint"></a>
<a name="index-symbol_002c-highlighting"></a>
<a name="index-highlighting-symbol-at-point"></a>
<p>Highlight the symbol found near point, using the next available face
(<code>highlight-symbol-at-point</code>).

</p>
</dd>
<dt><kbd>M-s h w</kbd></dt>
<dt><kbd>C-x w b</kbd></dt>
<dd><a name="index-M_002ds-h-w"></a>
<a name="index-C_002dx-w-b"></a>
<a name="index-hi_002dlock_002dwrite_002dinteractive_002dpatterns"></a>
<p>Insert all the current highlighting regexp/face pairs into the buffer
at point, with comment delimiters to prevent them from changing your
program.  (This key binding runs the
<code>hi-lock-write-interactive-patterns</code> command.)

</p>
<p>These patterns are extracted from the comments, if appropriate, if you
invoke <kbd>M-x hi-lock-find-patterns</kbd>, or if you visit the file while
Hi Lock mode is enabled (since that runs <code>hi-lock-find-patterns</code>).

</p>
</dd>
<dt><kbd>M-s h f</kbd></dt>
<dt><kbd>C-x w i</kbd></dt>
<dd><a name="index-M_002ds-h-f"></a>
<a name="index-C_002dx-w-i"></a>
<a name="index-hi_002dlock_002dfind_002dpatterns"></a>
<p>Extract regexp/face pairs from comments in the current buffer
(<code>hi-lock-find-patterns</code>).  Thus, you can enter patterns
interactively with <code>highlight-regexp</code>, store them into the file
with <code>hi-lock-write-interactive-patterns</code>, edit them (perhaps
including different faces for different parenthesized parts of the
match), and finally use this command (<code>hi-lock-find-patterns</code>) to
have Hi Lock highlight the edited patterns.

</p>
<a name="index-hi_002dlock_002dfile_002dpatterns_002dpolicy"></a>
<p>The variable <code>hi-lock-file-patterns-policy</code> controls whether Hi
Lock mode should automatically extract and highlight patterns found in a
file when it is visited.  Its value can be <code>nil</code> (never highlight),
<code>ask</code> (query the user), or a function.  If it is a function,
<code>hi-lock-find-patterns</code> calls it with the patterns as argument; if
the function returns non-<code>nil</code>, the patterns are used.  The default
is <code>ask</code>.  Note that patterns are always highlighted if you call
<code>hi-lock-find-patterns</code> directly, regardless of the value of this
variable.

</p>
<a name="index-hi_002dlock_002dexclude_002dmodes"></a>
<p>Also, <code>hi-lock-find-patterns</code> does nothing if the current major
mode’s symbol is a member of the list <code>hi-lock-exclude-modes</code>.

</p></dd>
</dl>


<a name="Fringes"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Displaying-Boundaries" accesskey="n" rel="next">Displaying Boundaries</a>, Previous: <a href="#Highlight-Interactively" accesskey="p" rel="prev">Highlight Interactively</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Window-Fringes"></a>
<h3 class="section">14.14 Window Fringes</h3>
<a name="index-fringes"></a>

<a name="index-set_002dfringe_002dstyle"></a>
<a name="index-fringe_002dmode"></a>
<a name="index-fringe_002dmode-_0028variable_0029"></a>
<p>On graphical displays, each Emacs window normally has narrow
<em>fringes</em> on the left and right edges.  The fringes are used to
display symbols that provide information about the text in the window.
You can type <kbd>M-x fringe-mode</kbd> to toggle display of the fringes or
to modify their width.  This command affects fringes in all frames; to
modify fringes on the selected frame only, use <kbd>M-x
set-fringe-style</kbd>.  You can make your changes to the fringes permanent
by customizing the variable <code>fringe-mode</code>.

</p>
<p>The most common use of the fringes is to indicate a continuation
line (see <a href="#Continuation-Lines">Continuation Lines</a>).  When one line of text is split
into multiple screen lines, the left fringe shows a curving arrow for
each screen line except the first, indicating that this is not the
real beginning.  The right fringe shows a curving arrow for each
screen line except the last, indicating that this is not the real
end.  If the line’s direction is right-to-left (see <a href="#Bidirectional-Editing">Bidirectional Editing</a>), the meanings of the curving arrows in the fringes are
swapped.

</p>
<p>The fringes indicate line truncation (see <a href="#Line-Truncation">Line Truncation</a>) with
short horizontal arrows meaning there’s more text on this line which
is scrolled horizontally out of view.  Clicking the mouse on one of
the arrows scrolls the display horizontally in the direction of the
arrow.

</p>
<p>The fringes can also indicate other things, such as buffer
boundaries (see <a href="#Displaying-Boundaries">Displaying Boundaries</a>), unused lines near the end
of the window (see <a href="#indicate_002dempty_002dlines">indicate-empty-lines</a>), and where a program you
are debugging is executing (see <a href="#Debuggers">Debuggers</a>).

</p>
<a name="index-overflow_002dnewline_002dinto_002dfringe"></a>
<p>The fringe is also used for drawing the cursor, if the current line
is exactly as wide as the window and point is at the end of the line.
To disable this, change the variable
<code>overflow-newline-into-fringe</code> to <code>nil</code>; this causes Emacs
to continue or truncate lines that are exactly as wide as the window.

</p>
<p>If you customize <code>fringe-mode</code> to remove the fringes on one or
both sides of the window display, the features that display on the
fringe are not available.  Indicators of line continuation and
truncation are an exception: when fringes are not available, Emacs
uses the leftmost and rightmost character cells to indicate
continuation and truncation with special ASCII characters, see
<a href="#Continuation-Lines">Continuation Lines</a>, and <a href="#Line-Truncation">Line Truncation</a>.  This reduces the
width available for displaying text on each line, because the
character cells used for truncation and continuation indicators are
reserved for that purpose.  Since buffer text can include
bidirectional text, and thus both left-to-right and right-to-left
paragraphs (see <a href="#Bidirectional-Editing">Bidirectional Editing</a>), removing only one of the
fringes still reserves two character cells, one on each side of the
window, for truncation and continuation indicators, because these
indicators are displayed on opposite sides of the window in
right-to-left paragraphs.

</p>

<a name="Displaying-Boundaries"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Useless-Whitespace" accesskey="n" rel="next">Useless Whitespace</a>, Previous: <a href="#Fringes" accesskey="p" rel="prev">Fringes</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Displaying-Boundaries-1"></a>
<h3 class="section">14.15 Displaying Boundaries</h3>

<a name="index-mode_002c-display_002dfill_002dcolumn_002dindicator"></a>
<a name="index-display_002dfill_002dcolumn_002dindicator_002dmode"></a>
<a name="index-global_002ddisplay_002dfill_002dcolumn_002dindicator_002dmode"></a>
<p>Emacs can add an indicator to display a fill column position.  The
fill column indicator is a useful functionality especially in
<code>prog-mode</code> to indicate the position of a specific column.

</p>
<p>You can set the buffer-local variables
<code>display-fill-column-indicator</code> and
<code>display-fill-column-indicator-character</code> to activate the
indicator and control how it looks, respectively.

</p>
<p>Alternatively you can type <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">display-fill-column-indicator-mode</span></kbd><!-- /@w -->

or <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">global-display-fill-column-indicator-mode</span></kbd><!-- /@w -->  which
enables the indicator locally or globally, respectively, and also
chooses the character to use if none is already set.  It is possible
to use the first one to activate the indicator in a hook and the
second one to enable it globally.

</p>
<p>There are 2 buffer local variables and 1 face to customize this mode:

</p>
<dl compact="compact">
<dt><code>display-fill-column-indicator-column</code></dt>
<dd><a name="index-display_002dfill_002dcolumn_002dindicator_002dcolumn"></a>
<p>Specifies the column number where the indicator should be set.  It can
take positive numerical values for the column or the special value
<code>t</code> which means that the variable <code>fill-column</code> will be
used.

</p>
<p>Any other value disables the indicator.  The default value is <code>t</code>.

</p>
</dd>
<dt><code>display-fill-column-indicator-character</code></dt>
<dd><a name="index-display_002dfill_002dcolumn_002dindicator_002dcharacter"></a>
<p>Specifies the character used for the indicator.  This character can be
any valid character including Unicode ones if the font supports them.

</p>
<p>When the mode is enabled through the functions
<code>display-fill-column-indicator-mode</code> or
<code>global-display-fill-column-indicator-mode</code>, the initialization
functions check if this variable is non-<code>nil</code>, otherwise the
initialization tries to set it to <code>U+2502</code> or ‘<samp>|</samp>’.

</p>
</dd>
<dt><code>fill-column-indicator</code></dt>
<dd><a name="index-fill_002dcolumn_002dindicator"></a>
<p>Specifies the face used to display the indicator.  It inherits its
default values from the face <code>shadow</code> but without background
color.  To change the indicator color you need only set the foreground
color of this face.

</p></dd>
</dl>

<a name="index-indicate_002dbuffer_002dboundaries"></a>
<p>On graphical displays, Emacs can indicate the buffer boundaries in
the fringes.  If you enable this feature, the first line and the last
line are marked with angle images in the fringes.  This can be
combined with up and down arrow images which say whether it is
possible to scroll the window.

</p>
<p>The buffer-local variable <code>indicate-buffer-boundaries</code> controls
how the buffer boundaries and window scrolling is indicated in the
fringes.  If the value is <code>left</code> or <code>right</code>, both angle and
arrow bitmaps are displayed in the left or right fringe, respectively.

</p>
<p>If value is an alist (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Association-Lists">Association Lists</a> in <cite>the Emacs
Lisp Reference Manual</cite>), each element <code>(<var>indicator</var> .
<var>position</var>)</code> specifies the position of one of the indicators.  The
<var>indicator</var> must be one of <code>top</code>, <code>bottom</code>, <code>up</code>,
<code>down</code>, or <code>t</code> which specifies the default position for the
indicators not present in the alist.  The <var>position</var> is one of
<code>left</code>, <code>right</code>, or <code>nil</code> which specifies not to show
this indicator.

</p>
<p>For example, <code>((top . left) (t . right))</code> places the top angle
bitmap in left fringe, the bottom angle bitmap in right fringe, and
both arrow bitmaps in right fringe.  To show just the angle bitmaps in
the left fringe, but no arrow bitmaps, use <code>((top .  left)
(bottom . left))</code>.

</p>

<a name="Useless-Whitespace"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Selective-Display" accesskey="n" rel="next">Selective Display</a>, Previous: <a href="#Displaying-Boundaries" accesskey="p" rel="prev">Displaying Boundaries</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Useless-Whitespace-1"></a>
<h3 class="section">14.16 Useless Whitespace</h3>

<a name="index-trailing-whitespace"></a>
<a name="index-whitespace_002c-trailing"></a>
<a name="index-show_002dtrailing_002dwhitespace"></a>
<p>It is easy to leave unnecessary spaces at the end of a line, or
empty lines at the end of a buffer, without realizing it.  In most
cases, this <em>trailing whitespace</em> has no effect, but sometimes it
can be a nuisance.

</p>
<a name="index-trailing_002dwhitespace-face"></a>
<p>You can make trailing whitespace at the end of a line visible by
setting the buffer-local variable <code>show-trailing-whitespace</code> to
<code>t</code>.  Then Emacs displays trailing whitespace, using the face
<code>trailing-whitespace</code>.

</p>
<p>This feature does not apply when point is at the end of the line
containing the whitespace.  Strictly speaking, that is trailing
whitespace nonetheless, but displaying it specially in that case
looks ugly while you are typing in new text.  In this special case,
the location of point is enough to show you that the spaces are
present.

</p>
<a name="index-delete_002dtrailing_002dwhitespace"></a>
<a name="index-delete_002dtrailing_002dlines"></a>
<p>Type <kbd>M-x delete-trailing-whitespace</kbd> to delete all trailing
whitespace.  This command deletes all extra spaces at the end of each
line in the buffer, and all empty lines at the end of the buffer; to
ignore the latter, change the variable <code>delete-trailing-lines</code> to
<code>nil</code>.  If the region is active, the command instead deletes
extra spaces at the end of each line in the region.

</p>
<a name="index-indicate_002dempty_002dlines"></a>
<a name="index-unused-lines"></a>
<a name="index-fringes_002c-and-unused-line-indication"></a>
<a name="indicate_002dempty_002dlines"></a><p>On graphical displays, Emacs can indicate unused lines at the end of
the window with a small image in the left fringe (see <a href="#Fringes">Fringes</a>).
The image appears for screen lines that do not correspond to any
buffer text, so blank lines at the end of the buffer stand out because
they lack this image.  To enable this feature, set the buffer-local
variable <code>indicate-empty-lines</code> to a non-<code>nil</code> value.  You
can enable or disable this feature for all new buffers by setting the
default value of this variable, e.g., <code>(setq-default
indicate-empty-lines t)</code>.

</p>
<a name="index-Whitespace-mode"></a>
<a name="index-mode_002c-Whitespace"></a>
<a name="index-whitespace_002dmode"></a>
<a name="index-whitespace_002dstyle"></a>
<a name="index-whitespace_002dtoggle_002doptions"></a>
<p>Whitespace mode is a buffer-local minor mode that lets you
visualize many kinds of whitespace in the buffer, by either
drawing the whitespace characters with a special face or displaying
them as special glyphs.  To toggle this mode, type <kbd>M-x
whitespace-mode</kbd>.  The kinds of whitespace visualized are determined
by the list variable <code>whitespace-style</code>.  Individual elements in
that list can be toggled on or off in the current buffer by typing
<kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">whitespace-toggle-options</span></kbd><!-- /@w -->.  Here is a partial list
of possible elements (see the variable’s documentation for the full
list):

</p>
<dl compact="compact">
<dt><code>face</code></dt>
<dd><p>Enable all visualizations which use special faces.  This element has a
special meaning: if it is absent from the list, none of the other
visualizations take effect except <code>space-mark</code>, <code>tab-mark</code>,
and <code>newline-mark</code>.

</p>
</dd>
<dt><code>trailing</code></dt>
<dd><p>Highlight trailing whitespace.

</p>
</dd>
<dt><code>tabs</code></dt>
<dd><p>Highlight tab characters.

</p>
</dd>
<dt><code>spaces</code></dt>
<dd><p>Highlight space and non-breaking space characters.

</p>
</dd>
<dt><code>lines</code></dt>
<dd><a name="index-whitespace_002dline_002dcolumn"></a>
<p>Highlight lines longer than 80 columns.  To change the column limit,
customize the variable <code>whitespace-line-column</code>.

</p>
</dd>
<dt><code>newline</code></dt>
<dd><p>Highlight newlines.

</p>
</dd>
<dt><code>empty</code></dt>
<dd><p>Highlight empty lines at the beginning and/or end of the buffer.

</p>
</dd>
<dt><code>big-indent</code></dt>
<dd><a name="index-whitespace_002dbig_002dindent_002dregexp"></a>
<p>Highlight too-deep indentation.  By default any sequence of at least 4
consecutive tab characters or 32 consecutive space characters is
highlighted.  To change that, customize the regular expression
<code>whitespace-big-indent-regexp</code>.

</p>
</dd>
<dt><code>space-mark</code></dt>
<dd><p>Draw space and non-breaking characters with a special glyph.

</p>
</dd>
<dt><code>tab-mark</code></dt>
<dd><p>Draw tab characters with a special glyph.

</p>
</dd>
<dt><code>newline-mark</code></dt>
<dd><p>Draw newline characters with a special glyph.

</p></dd>
</dl>

<a name="index-global_002dwhitespace_002dtoggle_002doptions"></a>
<a name="index-global_002dwhitespace_002dmode"></a>
<p>Global Whitespace mode is a global minor mode that lets you visualize
whitespace in all buffers.  To toggle individual features, use
<kbd>M-x global-whitespace-toggle-options</kbd>.

</p>

<a name="Selective-Display"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Optional-Mode-Line" accesskey="n" rel="next">Optional Mode Line</a>, Previous: <a href="#Useless-Whitespace" accesskey="p" rel="prev">Useless Whitespace</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Selective-Display-1"></a>
<h3 class="section">14.17 Selective Display</h3>
<a name="index-selective-display"></a>
<a name="index-set_002dselective_002ddisplay"></a>
<a name="index-C_002dx-_0024"></a>

<p>Emacs has the ability to hide lines indented more than a given
number of columns.  You can use this to get an overview of a part of a
program.

</p>
<p>To hide lines in the current buffer, type <kbd>C-x $</kbd>
(<code>set-selective-display</code>) with a numeric argument <var>n</var>.  Then
lines with at least <var>n</var> columns of indentation disappear from the
screen.  The only indication of their presence is that three dots
(‘<samp>…</samp>’) appear at the end of each visible line that is
followed by one or more hidden ones.

</p>
<p>The commands <kbd>C-n</kbd> and <kbd>C-p</kbd> move across the hidden lines as
if they were not there.

</p>
<p>The hidden lines are still present in the buffer, and most editing
commands see them as usual, so you may find point in the middle of the
hidden text.  When this happens, the cursor appears at the end of the
previous line, after the three dots.  If point is at the end of the
visible line, before the newline that ends it, the cursor appears before
the three dots.

</p>
<p>To make all lines visible again, type <kbd>C-x $</kbd> with no argument.

</p>
<a name="index-selective_002ddisplay_002dellipses"></a>
<p>If you set the variable <code>selective-display-ellipses</code> to
<code>nil</code>, the three dots do not appear at the end of a line that
precedes hidden lines.  Then there is no visible indication of the
hidden lines.  This variable becomes local automatically when set.

</p>
<p>See also <a href="#Outline-Mode">Outline Mode</a> for another way to hide part of
the text in a buffer.

</p>

<a name="Optional-Mode-Line"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Text-Display" accesskey="n" rel="next">Text Display</a>, Previous: <a href="#Selective-Display" accesskey="p" rel="prev">Selective Display</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Optional-Mode-Line-Features"></a>
<h3 class="section">14.18 Optional Mode Line Features</h3>

<a name="index-buffer-size-display"></a>
<a name="index-display-of-buffer-size"></a>
<a name="index-size_002dindication_002dmode"></a>
<p>The buffer percentage <var>pos</var> indicates the percentage of the
buffer above the top of the window.  You can additionally display the
size of the buffer by typing <kbd>M-x size-indication-mode</kbd> to turn on
Size Indication mode.  The size will be displayed immediately
following the buffer percentage like this:

</p>
<div class="example">
<pre class="example"><var>pos</var> of <var>size</var>
</pre></div>

<p>Here <var>size</var> is the human readable representation of the number of
characters in the buffer, which means that ‘<samp>k</samp>’ for 10^3, ‘<samp>M</samp>’
for 10^6, ‘<samp>G</samp>’ for 10^9, etc., are used to abbreviate.

</p>
<a name="index-line-number-display"></a>
<a name="index-display-of-current-line-number"></a>
<a name="index-line_002dnumber_002dmode"></a>
<p>The current line number of point appears in the mode line when Line
Number mode is enabled.  Use the command <kbd>M-x line-number-mode</kbd> to
turn this mode on and off; normally it is on.  The line number appears
after the buffer percentage <var>pos</var>, with the letter ‘<samp>L</samp>’ to
indicate what it is.

</p>
<a name="index-Column-Number-mode"></a>
<a name="index-mode_002c-Column-Number"></a>
<a name="index-column_002dnumber_002dmode"></a>
<p>Similarly, you can display the current column number by turning on
Column Number mode with <kbd>M-x column-number-mode</kbd>.  The column
number is indicated by the letter ‘<samp>C</samp>’.  However, when both of
these modes are enabled, the line and column numbers are displayed in
parentheses, the line number first, rather than with ‘<samp>L</samp>’ and
‘<samp>C</samp>’.  For example: ‘<samp>(561,2)</samp>’.  See <a href="#Minor-Modes">Minor Modes</a>, for more
information about minor modes and about how to use these commands.

</p>
<a name="index-column_002dnumber_002dindicator_002dzero_002dbased"></a>
<p>In Column Number mode, the displayed column number counts from zero
starting at the left margin of the window.  If you would prefer for
the displayed column number to count from one, you may set
<code>column-number-indicator-zero-based</code> to <code>nil</code>.

</p>
<a name="index-narrowing_002c-and-line-number-display"></a>
<p>If you have narrowed the buffer (see <a href="#Narrowing">Narrowing</a>), the displayed
line number is relative to the accessible portion of the buffer.
Thus, it isn’t suitable as an argument to <code>goto-line</code>.  (Use
<code>what-line</code> command to see the line number relative to the whole
file.)

</p>
<a name="index-line_002dnumber_002ddisplay_002dlimit"></a>
<p>If the buffer is very large (larger than the value of
<code>line-number-display-limit</code>), Emacs won’t compute the line
number, because that would be too slow; therefore, the line number
won’t appear on the mode-line.  To remove this limit, set
<code>line-number-display-limit</code> to <code>nil</code>.

</p>
<a name="index-line_002dnumber_002ddisplay_002dlimit_002dwidth"></a>
<p>Line-number computation can also be slow if the lines in the buffer
are too long.  For this reason, Emacs doesn’t display line numbers if
the average width, in characters, of lines near point is larger than
the value of <code>line-number-display-limit-width</code>.  The default
value is 200 characters.

</p>
<a name="index-display_002dtime"></a>
<a name="index-time-_0028on-mode-line_0029"></a>
<p>Emacs can optionally display the time and system load in all mode
lines.  To enable this feature, type <kbd>M-x display-time</kbd> or customize
the option <code>display-time-mode</code>.  The information added to the mode
line looks like this:

</p>
<div class="example">
<pre class="example"><var>hh</var>:<var>mm</var>PM <var>l.ll</var>
</pre></div>

<p><a name="index-display_002dtime_002d24hr_002dformat"></a>

Here <var>hh</var> and <var>mm</var> are the hour and minute, followed always by
‘<samp>AM</samp>’ or ‘<samp>PM</samp>’.  <var>l.ll</var> is the average number, collected
for the last few minutes, of processes in the whole system that were
either running or ready to run (i.e., were waiting for an available
processor).  (Some fields may be missing if your operating system
cannot support them.)  If you prefer time display in 24-hour format,
set the variable <code>display-time-24hr-format</code> to <code>t</code>.

</p>
<a name="index-mail-_0028on-mode-line_0029"></a>
<a name="index-display_002dtime_002duse_002dmail_002dicon"></a>
<a name="index-display_002dtime_002dmail_002dface"></a>
<a name="index-display_002dtime_002dmail_002dfile"></a>
<a name="index-display_002dtime_002dmail_002ddirectory"></a>
<p>The word ‘<samp>Mail</samp>’ appears after the load level if there is mail
for you that you have not read yet.  On graphical displays, you can
use an icon instead of ‘<samp>Mail</samp>’ by customizing
<code>display-time-use-mail-icon</code>; this may save some space on the
mode line.  You can customize <code>display-time-mail-face</code> to make
the mail indicator prominent.  Use <code>display-time-mail-file</code> to
specify the mail file to check, or set
<code>display-time-mail-directory</code> to specify the directory to check
for incoming mail (any nonempty regular file in the directory is
considered to be newly arrived mail).

</p>
<a name="index-battery-status-_0028on-mode-line_0029"></a>
<a name="index-display_002dbattery_002dmode"></a>
<a name="index-display_002dbattery_002dmode-1"></a>
<a name="index-battery_002dmode_002dline_002dformat"></a>
<p>When running Emacs on a laptop computer, you can display the battery
charge on the mode-line, by using the command
<code>display-battery-mode</code> or customizing the variable
<code>display-battery-mode</code>.  The variable
<code>battery-mode-line-format</code> determines the way the battery charge
is displayed; the exact mode-line message depends on the operating
system, and it usually shows the current battery charge as a
percentage of the total charge.

</p>
<a name="index-mode-line_002c-3D-appearance"></a>
<a name="index-attributes-of-mode-line_002c-changing"></a>
<a name="index-non_002dintegral-number-of-lines-in-a-window"></a>
<p>On graphical displays, the mode line is drawn as a 3D box.  If you
don’t like this effect, you can disable it by customizing the
<code>mode-line</code> face and setting its <code>box</code> attribute to
<code>nil</code>.  See <a href="#Face-Customization">Face Customization</a>.

</p>
<a name="index-non_002dselected-windows_002c-mode-line-appearance"></a>
<p>By default, the mode line of nonselected windows is displayed in a
different face, called <code>mode-line-inactive</code>.  Only the selected
window is displayed in the <code>mode-line</code> face.  This helps show
which window is selected.  When the minibuffer is selected, since
it has no mode line, the window from which you activated the minibuffer
has its mode line displayed using <code>mode-line</code>; as a result,
ordinary entry to the minibuffer does not change any mode lines.

</p>
<a name="index-mode_002dline_002din_002dnon_002dselected_002dwindows"></a>
<p>You can disable use of <code>mode-line-inactive</code> by setting variable
<code>mode-line-in-non-selected-windows</code> to <code>nil</code>; then all mode
lines are displayed in the <code>mode-line</code> face.

</p>
<a name="index-eol_002dmnemonic_002dunix"></a>
<a name="index-eol_002dmnemonic_002ddos"></a>
<a name="index-eol_002dmnemonic_002dmac"></a>
<a name="index-eol_002dmnemonic_002dundecided"></a>
<p>You can customize the mode line display for each of the end-of-line
formats by setting each of the variables <code>eol-mnemonic-unix</code>,
<code>eol-mnemonic-dos</code>, <code>eol-mnemonic-mac</code>, and
<code>eol-mnemonic-undecided</code> to the strings you prefer.

</p>

<a name="Text-Display"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Cursor-Display" accesskey="n" rel="next">Cursor Display</a>, Previous: <a href="#Optional-Mode-Line" accesskey="p" rel="prev">Optional Mode Line</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="How-Text-Is-Displayed"></a>
<h3 class="section">14.19 How Text Is Displayed</h3>
<a name="index-characters-_0028in-text_0029"></a>
<a name="index-printing-character"></a>

<p>Most characters are <em>printing characters</em>: when they appear in a
buffer, they are displayed literally on the screen.  Printing
characters include <acronym>ASCII</acronym> numbers, letters, and punctuation
characters, as well as many non-<acronym>ASCII</acronym> characters.

</p>
<a name="index-tab_002dwidth"></a>
<a name="index-control-characters-on-display"></a>
<p>The <acronym>ASCII</acronym> character set contains non-printing <em>control
characters</em>.  Two of these are displayed specially: the newline
character (Unicode code point <code>U+000A</code>) is displayed by starting
a new line, while the tab character (<code>U+0009</code>) is displayed as a
space that extends to the next tab stop column (normally every 8
columns).  The number of spaces per tab is controlled by the
buffer-local variable <code>tab-width</code>, which must have an integer
value between 1 and 1000, inclusive.  Note that the way the tab
character in the buffer is displayed has nothing to do with the
definition of <tt class="key">TAB</tt> as a command.

</p>
<p>Other <acronym>ASCII</acronym> control characters, whose codes are below
<code>U+0020</code> (octal 40, decimal 32), are displayed as a caret
(‘<samp>^</samp>’) followed by the non-control version of the character, with
the <code>escape-glyph</code> face.  For instance, the ‘<samp>control-A</samp>’
character, <code>U+0001</code>, is displayed as ‘<samp>^A</samp>’.

</p>
<a name="index-octal-escapes"></a>
<a name="index-ctl_002darrow"></a>
<p>The raw bytes with codes <code>U+0080</code> (octal 200) through
<code>U+009F</code> (octal 237) are displayed as <em>octal escape
sequences</em>, with the <code>escape-glyph</code> face.  For instance,
character code <code>U+0098</code> (octal 230) is displayed as ‘<samp>\230</samp>’.
If you change the buffer-local variable <code>ctl-arrow</code> to
<code>nil</code>, the <acronym>ASCII</acronym> control characters are also displayed
as octal escape sequences instead of caret escape sequences.  (You can
also request that raw bytes be shown in hex, see <a href="#Display-Custom">display-raw-bytes-as-hex</a>.)

</p>
<a name="index-nobreak_002dchar_002ddisplay"></a>
<a name="index-non_002dbreaking-space"></a>
<a name="index-non_002dbreaking-hyphen"></a>
<a name="index-soft-hyphen"></a>
<a name="index-escape_002dglyph-face"></a>
<a name="index-nobreak_002dspace-face"></a>
<p>Some non-<acronym>ASCII</acronym> characters have the same appearance as an
<acronym>ASCII</acronym> space or hyphen (minus) character.  Such characters
can cause problems if they are entered into a buffer without your
realization, e.g., by yanking; for instance, source code compilers
typically do not treat non-<acronym>ASCII</acronym> spaces as whitespace
characters.  To deal with this problem, Emacs displays such characters
specially: it displays <code>U+00A0</code> (no-break space) with the
<code>nobreak-space</code> face, and it displays <code>U+00AD</code> (soft
hyphen), <code>U+2010</code> (hyphen), and <code>U+2011</code> (non-breaking
hyphen) with the <code>nobreak-hyphen</code> face.  To disable this, change
the variable <code>nobreak-char-display</code> to <code>nil</code>.  If you give
this variable a non-<code>nil</code> and non-<code>t</code> value, Emacs instead
displays such characters as a highlighted backslash followed by a
space or hyphen.

</p>
<p>You can customize the way any particular character code is displayed
by means of a display table.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Display-Tables">Display Tables</a> in <cite>The Emacs Lisp Reference Manual</cite>.

</p>
<a name="index-glyphless-characters"></a>
<a name="index-characters-with-no-font-glyphs"></a>
<a name="index-glyphless_002dchar-face"></a>
<p>On graphical displays, some characters may have no glyphs in any of
the fonts available to Emacs.  These <em>glyphless characters</em> are
normally displayed as boxes containing the hexadecimal character code.
Similarly, on text terminals, characters that cannot be displayed
using the terminal encoding (see <a href="#Terminal-Coding">Terminal Coding</a>) are normally
displayed as question signs.  You can control the display method by
customizing the variable <code>glyphless-char-display-control</code>.  You
can also customize the <code>glyphless-char</code> face to make these
characters more prominent on display.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Glyphless-Chars">Glyphless Character Display</a> in <cite>The Emacs Lisp Reference Manual</cite>,
for details.

</p>
<a name="index-curly-quotes_002c-and-terminal-capabilities"></a>
<a name="index-curved-quotes_002c-and-terminal-capabilities"></a>
<a name="index-homoglyph-face"></a>

<p>Emacs tries to determine if the curved quotes ‘<samp>‘</samp>’ and ‘<samp>’</samp>’
can be displayed on the current display.  By default, if this seems to
be so, then Emacs will translate the <acronym>ASCII</acronym> quotes (‘<samp>`</samp>’
and ‘<samp>'</samp>’), when they appear in messages and help texts, to these
curved quotes.  You can influence or inhibit this translation by
customizing the user option <code>text-quoting-style</code> (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Keys-in-Documentation">Keys in
Documentation</a> in <cite>The Emacs Lisp Reference Manual</cite>).

</p>
<p>If the curved quotes <tt>‘</tt>, <tt>’</tt>, <tt>“</tt>, and <tt>”</tt> are
known to look just like <acronym>ASCII</acronym> characters, they are shown
with the <code>homoglyph</code> face.  Curved quotes that are known not to
be displayable are shown as their <acronym>ASCII</acronym> approximations
<tt>`</tt>, <tt>'</tt>, and <tt>"</tt> with the <code>homoglyph</code> face.

</p>

<a name="Cursor-Display"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Line-Truncation" accesskey="n" rel="next">Line Truncation</a>, Previous: <a href="#Text-Display" accesskey="p" rel="prev">Text Display</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Displaying-the-Cursor"></a>
<h3 class="section">14.20 Displaying the Cursor</h3>
<a name="index-text-cursor"></a>

<a name="index-visible_002dcursor"></a>
<p>On a text terminal, the cursor’s appearance is controlled by the
terminal, largely out of the control of Emacs.  Some terminals offer
two different cursors: a visible static cursor, and a very
visible blinking cursor.  By default, Emacs uses the very visible
cursor, and switches to it when you start or resume Emacs.  If the
variable <code>visible-cursor</code> is <code>nil</code> when Emacs starts or
resumes, it uses the normal cursor.

</p>
<a name="index-cursor_002dtype"></a>
<p>On a graphical display, many more properties of the text cursor can
be altered.  To customize its color, change the <code>:background</code>
attribute of the face named <code>cursor</code> (see <a href="#Face-Customization">Face Customization</a>).  (The other attributes of this face have no effect;
the text shown under the cursor is drawn using the frame’s background
color.)  To change its shape, customize the buffer-local variable
<code>cursor-type</code>; possible values are <code>box</code> (the default),
<code>hollow</code> (a hollow box), <code>bar</code> (a vertical bar), <code>(bar
. <var>n</var>)</code> (a vertical bar <var>n</var> pixels wide), <code>hbar</code> (a
horizontal bar), <code>(hbar . <var>n</var>)</code> (a horizontal bar <var>n</var>
pixels tall), or <code>nil</code> (no cursor at all).

</p>
<a name="index-blink_002dcursor_002dmode"></a>
<a name="index-cursor_002c-blinking"></a>
<a name="index-blinking-cursor"></a>
<a name="index-blink_002dcursor_002dmode-1"></a>
<a name="index-blink_002dcursor_002dblinks"></a>
<a name="index-blink_002dcursor_002dalist"></a>
<p>By default, the cursor stops blinking after 10 blinks, if Emacs does
not get any input during that time; any input event restarts the
count.  You can customize the variable <code>blink-cursor-blinks</code> to
control that: its value says how many times to blink without input
before stopping.  Setting that variable to a zero or negative value
will make the cursor blink forever.  To disable cursor blinking
altogether, change the variable <code>blink-cursor-mode</code> to <code>nil</code>
(see <a href="#Easy-Customization">Easy Customization</a>), or add the line

</p>
<div class="lisp">
<pre class="lisp">  (blink-cursor-mode 0)
</pre></div>

<p>to your init file.  Alternatively, you can change how the cursor
looks when it blinks off by customizing the list variable
<code>blink-cursor-alist</code>.  Each element in the list should have the
form <code>(<var>on-type</var> . <var>off-type</var>)</code>; this means that if the
cursor is displayed as <var>on-type</var> when it blinks on (where
<var>on-type</var> is one of the cursor types described above), then it is
displayed as <var>off-type</var> when it blinks off.

</p>
<a name="index-x_002dstretch_002dcursor"></a>
<a name="index-wide-block-cursor"></a>
<p>Some characters, such as tab characters, are extra wide.  When
the cursor is positioned over such a character, it is normally drawn
with the default character width.  You can make the cursor stretch to
cover wide characters, by changing the variable
<code>x-stretch-cursor</code> to a non-<code>nil</code> value.

</p>
<a name="index-cursor-in-non_002dselected-windows"></a>
<a name="index-cursor_002din_002dnon_002dselected_002dwindows"></a>
<p>The cursor normally appears in non-selected windows as a
non-blinking hollow box.  (For a bar cursor, it instead appears as a
thinner bar.)  To turn off cursors in non-selected windows, change the
variable <code>cursor-in-non-selected-windows</code> to <code>nil</code>.

</p>
<a name="index-hl_002dline_002dmode"></a>
<a name="index-global_002dhl_002dline_002dmode"></a>
<a name="index-highlight-current-line"></a>
<p>To make the cursor even more visible, you can use HL Line mode, a
minor mode that highlights the line containing point.  Use <kbd>M-x
hl-line-mode</kbd> to enable or disable it in the current buffer.  <kbd>M-x
global-hl-line-mode</kbd> enables or disables the same mode globally.

</p>

<a name="Line-Truncation"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Visual-Line-Mode" accesskey="n" rel="next">Visual Line Mode</a>, Previous: <a href="#Cursor-Display" accesskey="p" rel="prev">Cursor Display</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Line-Truncation-1"></a>
<h3 class="section">14.21 Line Truncation</h3>

<a name="index-truncation"></a>
<a name="index-line-truncation"></a>
<p>As an alternative to continuation (see <a href="#Continuation-Lines">Continuation Lines</a>),
Emacs can display long lines by <em>truncation</em>.  This means that all
the characters that do not fit in the width of the screen or window do
not appear at all.  On graphical displays, a small straight arrow in
the fringe indicates truncation at either end of the line.  On text
terminals, this is indicated with ‘<samp>$</samp>’ signs in the rightmost
and/or leftmost columns.

</p>
<a name="index-truncate_002dlines"></a>
<a name="index-toggle_002dtruncate_002dlines"></a>
<p>Horizontal scrolling automatically causes line truncation
(see <a href="#Horizontal-Scrolling">Horizontal Scrolling</a>).  You can explicitly enable line
truncation for a particular buffer with the command <kbd>M-x
toggle-truncate-lines</kbd>.  This works by locally changing the variable
<code>truncate-lines</code>.  If that variable is non-<code>nil</code>, long lines
are truncated; if it is <code>nil</code>, they are continued onto multiple
screen lines.  Setting the variable <code>truncate-lines</code> in any way
makes it local to the current buffer; until that time, the default
value, which is normally <code>nil</code>, is in effect.

</p>
<p>If a split window becomes too narrow, Emacs may automatically enable
line truncation.  See <a href="#Split-Window">Split Window</a>, for the variable
<code>truncate-partial-width-windows</code> which controls this.

</p>

<a name="Visual-Line-Mode"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Display-Custom" accesskey="n" rel="next">Display Custom</a>, Previous: <a href="#Line-Truncation" accesskey="p" rel="prev">Line Truncation</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Visual-Line-Mode-1"></a>
<h3 class="section">14.22 Visual Line Mode</h3>

<a name="index-word-wrap"></a>
<p>Another alternative to ordinary line continuation is to use
<em>word wrap</em>.  Here, each long logical line is divided into two or
more screen lines, like in ordinary line continuation.  However, Emacs
attempts to wrap the line at word boundaries near the right window
edge.  (If the line’s direction is right-to-left, it is wrapped at the
left window edge instead.)  This makes the text easier to read, as
wrapping does not occur in the middle of words.

</p>
<a name="index-mode_002c-Visual-Line"></a>
<a name="index-Visual-Line-mode"></a>
<a name="index-visual_002dline_002dmode"></a>
<a name="index-global_002dvisual_002dline_002dmode"></a>
<p>Word wrap is enabled by Visual Line mode, an optional minor mode.
To turn on Visual Line mode in the current buffer, type <kbd>M-x
visual-line-mode</kbd>; repeating this command turns it off.  You can also
turn on Visual Line mode using the menu bar: in the Options menu,
select the ‘<samp>Line Wrapping in this Buffer</samp>’ submenu, followed by
the ‘<samp>Word Wrap (Visual Line mode)</samp>’ menu item.  While Visual Line
mode is enabled, the mode line shows the string ‘<samp>wrap</samp>’ in the
mode display.  The command <kbd>M-x global-visual-line-mode</kbd> toggles
Visual Line mode in all buffers.

</p>
<a name="index-beginning_002dof_002dvisual_002dline"></a>
<a name="index-end_002dof_002dvisual_002dline"></a>
<a name="index-next_002dlogical_002dline"></a>
<a name="index-previous_002dlogical_002dline"></a>
<p>In Visual Line mode, some editing commands work on screen lines
instead of logical lines: <kbd>C-a</kbd> (<code>beginning-of-visual-line</code>)
moves to the beginning of the screen line, <kbd>C-e</kbd>
(<code>end-of-visual-line</code>) moves to the end of the screen line, and
<kbd>C-k</kbd> (<code>kill-visual-line</code>) kills text to the end of the
screen line.

</p>
<p>To move by logical lines, use the commands <kbd>M-x
next-logical-line</kbd> and <kbd>M-x previous-logical-line</kbd>.  These move
point to the next logical line and the previous logical line
respectively, regardless of whether Visual Line mode is enabled.  If
you use these commands frequently, it may be convenient to assign key
bindings to them.  See <a href="#Init-Rebinding">Init Rebinding</a>.

</p>
<p>By default, word-wrapped lines do not display fringe indicators.
Visual Line mode is often used to edit files that contain many long
logical lines, so having a fringe indicator for each wrapped line
would be visually distracting.  You can change this by customizing the
variable <code>visual-line-fringe-indicators</code>.

</p>

<a name="Display-Custom"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Visual-Line-Mode" accesskey="p" rel="prev">Visual Line Mode</a>, Up: <a href="#Display" accesskey="u" rel="up">Display</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Customization-of-Display"></a>
<h3 class="section">14.23 Customization of Display</h3>

<p>This section describes variables that control miscellaneous aspects
of the appearance of the Emacs screen.  Beginning users can skip it.

</p>
<a name="index-display_002dline_002dnumbers"></a>
<a name="index-number-lines-in-a-buffer"></a>
<a name="index-display-line-numbers"></a>
<p>If you want to have Emacs display line numbers for every line in the
buffer, customize the buffer-local variable
<code>display-line-numbers</code>; it is <code>nil</code> by default.  This
variable can have several different values to support various modes of
line-number display:

</p>
<dl compact="compact">
<dt><code>t</code></dt>
<dd><p>Display (an absolute) line number before each non-continuation screen
line that displays buffer text.  If the line is a continuation line,
or if the entire screen line displays a display or an overlay string,
that line will not be numbered.

</p>
</dd>
<dt><code>relative</code></dt>
<dd><p>Display relative line numbers before non-continuation lines which show
buffer text.  The line numbers are relative to the line showing point,
so the numbers grow both up and down as lines become farther from the
current line.

</p>
</dd>
<dt><code>visual</code></dt>
<dd><p>This value causes Emacs to count lines visually: only lines actually
shown on the display will be counted (disregarding any lines in
invisible parts of text), and lines which wrap to consume more than
one screen line will be numbered that many times.  The displayed
numbers are relative, as with <code>relative</code> value above.  This is
handy in modes that fold text, such as Outline mode (see <a href="#Outline-Mode">Outline Mode</a>), and when you need to move by exact number of screen lines.

</p>
</dd>
<dt>anything else</dt>
<dd><p>Any other non-<code>nil</code> value is treated as <code>t</code>.

</p></dd>
</dl>

<a name="index-display_002dline_002dnumbers_002dmode"></a>
<a name="index-global_002ddisplay_002dline_002dnumbers_002dmode"></a>
<a name="index-display_002dline_002dnumbers_002dtype"></a>
<p>The command <kbd>M-x display-line-numbers-mode</kbd> provides a
convenient way to turn on display of line numbers.  This mode has a globalized
variant, <code>global-display-line-numbers-mode</code>.  The user option
<code>display-line-numbers-type</code> controls which sub-mode of
line-number display, described above, will these modes activate.

</p>
<p>Note that line numbers are not displayed in the minibuffer and in the
tooltips, even if you turn on <code>display-line-numbers-mode</code>
globally.

</p>
<a name="index-display_002dline_002dnumbers_002dcurrent_002dabsolute"></a>
<p>When Emacs displays relative line numbers, you can control the number
displayed before the current line, the line showing point.  By
default, Emacs displays the absolute number of the current line there,
even though all the other line numbers are relative.  If you customize
the variable <code>display-line-numbers-current-absolute</code> to a
<code>nil</code> value, the number displayed for the current line will be
zero.  This is handy if you don’t care about the number of the current
line, and want to leave more horizontal space for text in large
buffers.

</p>
<a name="index-display_002dline_002dnumbers_002dwiden"></a>
<p>In a narrowed buffer (see <a href="#Narrowing">Narrowing</a>) lines are normally numbered
starting at the beginning of the narrowing.  However, if you customize
the variable <code>display-line-numbers-widen</code> to a non-<code>nil</code>
value, line numbers will disregard any narrowing and will start at the
first character of the buffer.

</p>
<a name="index-display_002dline_002dnumbers_002doffset"></a>
<p>If the value of <code>display-line-numbers-offset</code> is non-zero, it is
added to each absolute line number, and lines are counted from the
beginning of the buffer, as if <code>display-line-numbers-widen</code> were
non-<code>nil</code>.  It has no effect when set to zero, or when line
numbers are not absolute.

</p>
<a name="index-display_002dline_002dnumbers_002dwidth_002dstart"></a>
<a name="index-display_002dline_002dnumbers_002dgrow_002donly"></a>
<a name="index-display_002dline_002dnumbers_002dwidth"></a>
<p>In selective display mode (see <a href="#Selective-Display">Selective Display</a>), and other modes
that hide many lines from display (such as Outline and Org modes), you
may wish to customize the variables
<code>display-line-numbers-width-start</code> and
<code>display-line-numbers-grow-only</code>, or set
<code>display-line-numbers-width</code> to a large enough value, to avoid
occasional miscalculations of space reserved for the line numbers.

</p>
<a name="index-line_002dnumber-face"></a>
<p>The line numbers are displayed in a special face <code>line-number</code>.
The current line number is displayed in a different face,
<code>line-number-current-line</code>, so you can make the current line’s
number have a distinct appearance, which will help locating the line
showing point. Additional faces <code>line-number-major-tick</code> and
<code>line-number-minor-tick</code> can be used to highlight the line numbers
of lines which are a multiple of certain numbers.  Customize
<code>display-line-numbers-major-tick</code> and
<code>display-line-numbers-minor-tick</code> respectively to set those
numbers.

</p>
<a name="index-visible_002dbell"></a>
<p>If the variable <code>visible-bell</code> is non-<code>nil</code>, Emacs attempts
to make the whole screen blink when it would normally make an audible bell
sound.  This variable has no effect if your terminal does not have a way
to make the screen blink.

</p>
<a name="index-echo_002dkeystrokes"></a>
<p>The variable <code>echo-keystrokes</code> controls the echoing of multi-character
keys; its value is the number of seconds of pause required to cause echoing
to start, or zero, meaning don’t echo at all.  The value takes effect when
there is something to echo.  See <a href="#Echo-Area">Echo Area</a>.

</p>
<a name="index-mouse-pointer"></a>
<a name="index-hourglass-pointer-display"></a>
<a name="index-display_002dhourglass"></a>
<a name="index-hourglass_002ddelay"></a>
<p>On graphical displays, Emacs displays the mouse pointer as an
hourglass if Emacs is busy.  To disable this feature, set the variable
<code>display-hourglass</code> to <code>nil</code>.  The variable
<code>hourglass-delay</code> determines the number of seconds of busy
time before the hourglass is shown; the default is 1.

</p>
<a name="index-make_002dpointer_002dinvisible"></a>
<p>If the mouse pointer lies inside an Emacs frame, Emacs makes it
invisible each time you type a character to insert text, to prevent it
from obscuring the text.  (To be precise, the hiding occurs when you
type a self-inserting character.  See <a href="#Inserting-Text">Inserting Text</a>.)  Moving
the mouse pointer makes it visible again.  To disable this feature,
set the variable <code>make-pointer-invisible</code> to <code>nil</code>.

</p>
<a name="index-underline_002dminimum_002doffset"></a>
<a name="index-x_002dunderline_002dat_002ddescent_002dline"></a>
<p>On graphical displays, the variable <code>underline-minimum-offset</code>
determines the minimum distance between the baseline and underline, in
pixels, for underlined text.  By default, the value is 1; increasing
it may improve the legibility of underlined text for certain fonts.
(However, Emacs will never draw the underline below the current line
area.)  The variable <code>x-underline-at-descent-line</code> determines how
to draw underlined text.  The default is <code>nil</code>, which means to
draw it at the baseline level of the font; if you change it to
<code>t</code>, Emacs draws the underline at the same height as the font’s
descent line.  (If non-default line spacing was specified for the
underlined text, see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Line-Height">Line Height</a> in <cite>The Emacs Lisp
Reference Manual</cite>, Emacs draws the underline below the additional
spacing.)

</p>
<a name="index-overline_002dmargin"></a>
<p>The variable <code>overline-margin</code> specifies the vertical position
of an overline above the text, including the height of the overline
itself, in pixels; the default is 2.

</p>
<a name="index-tty_002dsuppress_002dbold_002dinverse_002ddefault_002dcolors"></a>
<p>On some text terminals, bold face and inverse video together result
in text that is hard to read.  Call the function
<code>tty-suppress-bold-inverse-default-colors</code> with a non-<code>nil</code>
argument to suppress the effect of bold-face in this case.

</p>
<a name="index-display_002draw_002dbytes_002das_002dhex"></a>
<p>Raw bytes are displayed in octal format by default, for example a
byte with a decimal value of 128 is displayed as <code>\200</code>.  To
change display to the hexadecimal format of <code>\x80</code>, set the
variable <code>display-raw-bytes-as-hex</code> to <code>t</code>.

</p><hr>
<a name="Search"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Fixit" accesskey="n" rel="next">Fixit</a>, Previous: <a href="#Display" accesskey="p" rel="prev">Display</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Searching-and-Replacement"></a>
<h2 class="chapter">15Searching and Replacement</h2>
<a name="index-searching"></a>
<a name="index-finding-strings-within-text"></a>

<p>Like other editors, Emacs has commands to search for occurrences of
a string.  Emacs also has commands to replace occurrences of a string
with a different string.  There are also commands that do the same
thing, but search for patterns instead of fixed strings.

</p>
<p>You can also search multiple files under the control of <code>xref</code>
(see <a href="#Identifier-Search">Identifier Search</a>) or through the Dired <kbd>A</kbd> command
(see <a href="#Operating-on-Files">Operating on Files</a>), or ask the <code>grep</code> program to do it
(see <a href="#Grep-Searching">Grep Searching</a>).

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Incremental-Search" accesskey="1">Incremental Search</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Search happens as you type the string.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Nonincremental-Search" accesskey="2">Nonincremental Search</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Specify entire string and then search.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Word-Search" accesskey="3">Word Search</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Search for sequence of words.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Symbol-Search" accesskey="4">Symbol Search</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Search for a source code symbol.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Regexp-Search" accesskey="5">Regexp Search</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Search for match for a regexp.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Regexps" accesskey="6">Regexps</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Syntax of regular expressions.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Regexp-Backslash" accesskey="7">Regexp Backslash</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Regular expression constructs starting with ‘\’.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Regexp-Example" accesskey="8">Regexp Example</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A complex regular expression explained.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Lax-Search" accesskey="9">Lax Search</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Search ignores some distinctions among
                                similar characters, like letter-case.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Replace">Replace</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Search, and replace some or all matches.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Other-Repeating-Search">Other Repeating Search</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Operating on all matches for some regexp.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Search-Customizations">Search Customizations</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Various search customizations.

</td></tr>
</tbody></table>


<a name="Incremental-Search"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Nonincremental-Search" accesskey="n" rel="next">Nonincremental Search</a>, Up: <a href="#Search" accesskey="u" rel="up">Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Incremental-Search-1"></a>
<h3 class="section">15.1Incremental Search</h3>
<a name="index-incremental-search"></a>
<a name="index-isearch"></a>

<p>The principal search command in Emacs is <em>incremental</em>: it
begins searching as soon as you type the first character of the search
string.  As you type in the search string, Emacs shows you where the
string (as you have typed it so far) would be found.  When you have
typed enough characters to identify the place you want, you can stop.
Depending on what you plan to do next, you may or may not need to
terminate the search explicitly with <tt class="key">RET</tt>.

</p>
<dl compact="compact">
<dt><kbd>C-s</kbd></dt>
<dd><p>Incremental search forward (<code>isearch-forward</code>).

</p></dd>
<dt><kbd>C-r</kbd></dt>
<dd><p>Incremental search backward (<code>isearch-backward</code>).

</p></dd>
</dl>

<p>You can also invoke incremental search from the menu bar’s
‘<samp>Edit-&gt;Search</samp>’ menu.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Basic-Isearch" accesskey="1">Basic Isearch</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Basic incremental search commands.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Repeat-Isearch" accesskey="2">Repeat Isearch</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Searching for the same string again.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Isearch-Yank" accesskey="3">Isearch Yank</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands that grab text into the search string
                           or else edit the search string.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Error-in-Isearch" accesskey="4">Error in Isearch</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">When your string is not found.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Special-Isearch" accesskey="5">Special Isearch</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Special input in incremental search.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Not-Exiting-Isearch" accesskey="6">Not Exiting Isearch</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Prefix argument and scrolling commands.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Isearch-Minibuffer" accesskey="7">Isearch Minibuffer</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Incremental search of the minibuffer history.

</td></tr>
</tbody></table>


<a name="Basic-Isearch"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Repeat-Isearch" accesskey="n" rel="next">Repeat Isearch</a>, Up: <a href="#Incremental-Search" accesskey="u" rel="up">Incremental Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Basics-of-Incremental-Search"></a>
<h4 class="subsection">15.1.1 Basics of Incremental Search</h4>

<dl compact="compact">
<dt><kbd>C-s</kbd></dt>
<dd><p>Begin incremental search (<code>isearch-forward</code>).

</p></dd>
<dt><kbd>C-r</kbd></dt>
<dd><p>Begin reverse incremental search (<code>isearch-backward</code>).

</p></dd>
</dl>

<a name="index-C_002ds"></a>
<a name="index-isearch_002dforward"></a>
<p><kbd>C-s</kbd> (<code>isearch-forward</code>) starts a forward incremental
search.  It reads characters from the keyboard, and moves point just
past the end of the next occurrence of those characters in the buffer.

</p>
<p>For instance, if you type <kbd>C-s</kbd> and then <kbd>F</kbd>, that puts the
cursor after the first ‘<samp>F</samp>’ that occurs in the buffer after the
starting point.  If you then type <kbd>O</kbd>, the cursor moves to just
after the first ‘<samp>FO</samp>’; the ‘<samp>F</samp>’ in that ‘<samp>FO</samp>’ might not be
the first ‘<samp>F</samp>’ previously found.  After another <kbd>O</kbd>, the
cursor moves to just after the first ‘<samp>FOO</samp>’.

</p>
<a name="index-faces-for-highlighting-search-matches"></a>
<a name="index-isearch-face"></a>
<p>At each step, Emacs highlights the <em>current match</em>—the buffer
text that matches the search string—using the <code>isearch</code> face
(see <a href="#Faces">Faces</a>).  See <a href="#Search-Customizations">Search Customizations</a>, for various options
that customize this highlighting.  The current search string is also
displayed in the echo area.

</p>
<a name="index-isearch-input-item"></a>
<a name="index-input-item_002c-isearch"></a>
<a name="index-isearch_002ddelete_002dchar"></a>
<a name="index-DEL-_0028Incremental-search_0029"></a>
<p>If you make a mistake typing the search string, type <tt class="key">DEL</tt>
(<code>isearch-delete-char</code>).  Each <tt class="key">DEL</tt> cancels the last input
item entered during the search.  Emacs records a new <em>input item</em>
whenever you type a command that changes the search string, the
position of point, the success or failure of the search, the direction
of the search, the position of the other end of the current search
result, or the “wrappedness” of the search.  See <a href="#Error-in-Isearch">Error in Isearch</a>, for more about dealing with unsuccessful search.

</p>
<a name="index-exit-incremental-search"></a>
<a name="index-incremental-search_002c-exiting"></a>
<a name="index-isearch_002dexit"></a>
<a name="index-RET-_0028Incremental-search_0029"></a>
<p>When you are satisfied with the place you have reached, type
<tt class="key">RET</tt> (<code>isearch-exit</code>).  This stops searching, leaving the
cursor where the search brought it.  Also, any command not specially
meaningful in searches stops the searching and is then executed.
Thus, typing <kbd>C-a</kbd> exits the search and then moves to the
beginning of the line; typing one of the arrow keys exits the search
and performs the respective movement command; etc.  <tt class="key">RET</tt> is
necessary only if the next command you want to type is a printing
character, <tt class="key">DEL</tt>, <tt class="key">RET</tt>, or another character that is special
within searches (<kbd>C-q</kbd>, <kbd>C-w</kbd>, <kbd>C-r</kbd>, <kbd>C-s</kbd>,
<kbd>C-y</kbd>, <kbd>M-y</kbd>, <kbd>M-r</kbd>, <kbd>M-c</kbd>, <kbd>M-e</kbd>, and some others
described below).  You can fine-tune the commands that exit the
search; see <a href="#Not-Exiting-Isearch">Not Exiting Isearch</a>.

</p>
<p>As a special exception, entering <tt class="key">RET</tt> when the search string is
empty launches nonincremental search (see <a href="#Nonincremental-Search">Nonincremental Search</a>).
(This can be customized; see <a href="#Search-Customizations">Search Customizations</a>.)

</p>
<a name="index-isearch_002dabort"></a>
<a name="index-isearch_002dcancel"></a>
<a name="index-C_002dg-C_002dg-_0028Incremental-Search_0029"></a>
<a name="index-ESC-ESC-ESC-_0028Incremental-Search_0029"></a>
<p>To abandon the search and return to the place where you started,
type <kbd><span class="key">ESC</span> <span class="key">ESC</span> <span class="key">ESC</span></kbd> (<code>isearch-cancel</code>) or
<kbd>C-g C-g</kbd> (<code>isearch-abort</code>).

</p>
<p>When you exit the incremental search, it adds the original value of
point to the mark ring, without activating the mark; you can thus use
<kbd>C-u C-<span class="key">SPC</span></kbd> or <kbd>C-x C-x</kbd> to return to where you were
before beginning the search.  See <a href="#Mark-Ring">Mark Ring</a>.  (Emacs only does this
if the mark was not already active; if the mark was active when you
started the search, both <kbd>C-u C-<span class="key">SPC</span></kbd> and <kbd>C-x C-x</kbd> will
go to the mark.)

</p>
<a name="index-C_002dr"></a>
<a name="index-isearch_002dbackward"></a>
<p>To search backwards, use <kbd>C-r</kbd> (<code>isearch-backward</code>) instead
of <kbd>C-s</kbd> to start the search.  A backward search finds matches
that end before the starting point, just as a forward search finds
matches that begin after it.

</p>

<a name="Repeat-Isearch"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Isearch-Yank" accesskey="n" rel="next">Isearch Yank</a>, Previous: <a href="#Basic-Isearch" accesskey="p" rel="prev">Basic Isearch</a>, Up: <a href="#Incremental-Search" accesskey="u" rel="up">Incremental Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Repeating-Incremental-Search"></a>
<h4 class="subsection">15.1.2 Repeating Incremental Search</h4>

<a name="index-C_002ds-_0028Incremental-Search_0029"></a>
<a name="index-C_002dr-_0028Incremental-Search_0029"></a>
<a name="index-isearch_002drepeat_002dforward"></a>
<a name="index-isearch_002drepeat_002dbackward"></a>
<p>Suppose you search forward for ‘<samp>FOO</samp>’ and find a match, but not
the one you expected to find: the ‘<samp>FOO</samp>’ you were aiming for
occurs later in the buffer.  In this event, type another <kbd>C-s</kbd>
(<code>isearch-repeat-forward</code>) to move to the next occurrence of the
search string, or <kbd>C-r</kbd> (<code>isearch-repeat-backward</code>) to move
to the previous occurrence.  You can repeat these commands any number
of times.  Alternatively, you can supply a numeric prefix argument of
<var>n</var> to <kbd>C-s</kbd> and <kbd>C-r</kbd> to find the <var>n</var>th next or
previous occurrence.  If you overshoot, you can cancel some <kbd>C-s</kbd>
commands with <tt class="key">DEL</tt>.  Similarly, each <kbd>C-r</kbd>
(<code>isearch-repeat-backward</code>) in a backward incremental search
repeats the backward search.

</p>
<a name="index-lazy-search-highlighting"></a>
<p>If you pause for a little while during incremental search, Emacs
highlights all the other possible matches for the search string that
are present on the screen.  This helps you anticipate where you can
get to by typing <kbd>C-s</kbd> or <kbd>C-r</kbd> to repeat the search.  The
other matches are highlighted differently from the current match,
using the customizable face <code>lazy-highlight</code> (see <a href="#Faces">Faces</a>).  If
you don’t like this feature, you can disable it by setting
<code>isearch-lazy-highlight</code> to <code>nil</code>.  For other customizations
related to highlighting matches, see <a href="#Search-Customizations">Search Customizations</a>.

</p>
<p>After exiting a search, you can search for the same string again by
typing just <kbd>C-s C-s</kbd>.  The first <kbd>C-s</kbd> is the key that
invokes incremental search, and the second <kbd>C-s</kbd> means to search
again for the last search string.  Similarly, <kbd>C-r C-r</kbd> searches
backward for the last search string.  In determining the last search
string, it doesn’t matter whether that string was searched for with
<kbd>C-s</kbd> or <kbd>C-r</kbd>.

</p>
<p>If you are searching forward but you realize you were looking for
something before the starting point, type <kbd>C-r</kbd> to switch to a
backward search, leaving the search string unchanged.  Similarly,
<kbd>C-s</kbd> in a backward search switches to a forward search.

</p>
<a name="index-search_002c-wrapping-around"></a>
<a name="index-search_002c-overwrapped"></a>
<a name="index-wrapped-search"></a>
<a name="index-overwrapped-search"></a>
<p>If a search is failing and you ask to repeat it by typing another
<kbd>C-s</kbd>, it starts again from the beginning of the buffer.
Repeating a failing reverse search with <kbd>C-r</kbd> starts again from
the end.  This is called <em>wrapping around</em>, and ‘<samp>Wrapped</samp>’
appears in the search prompt once this has happened.  If you keep on
going past the original starting point of the search, it changes to
‘<samp>Overwrapped</samp>’, which means that you are revisiting matches that
you have already seen.

</p>
<a name="index-search-ring"></a>
<a name="index-isearch_002dring_002dadvance"></a>
<a name="index-isearch_002dring_002dretreat"></a>
<a name="index-M_002dn-_0028Incremental-search_0029"></a>
<a name="index-M_002dp-_0028Incremental-search_0029"></a>
<a name="index-search_002dring_002dmax"></a>
<p>To reuse earlier search strings, use the <em>search ring</em>.  The
commands <kbd>M-p</kbd> (<code>isearch-ring-retreat</code>) and <kbd>M-n</kbd>
(<code>isearch-ring-advance</code>) move through the ring to pick a search
string to reuse.  These commands leave the selected search ring
element in the minibuffer, where you can edit it.  Type
<kbd>C-s</kbd>/<kbd>C-r</kbd> or <tt class="key">RET</tt> to accept the string and start
searching for it.  The number of most recently used search strings
saved in the search ring is specified by the variable
<code>search-ring-max</code>, 16 by default.

</p>
<a name="index-incremental-search_002c-edit-search-string"></a>
<a name="index-interactively-edit-search-string"></a>
<a name="index-isearch_002dedit_002dstring"></a>
<a name="index-M_002de-_0028Incremental-search_0029"></a>
<a name="index-mouse_002d1-in-the-minibuffer-_0028Incremental-Search_0029"></a>
<p>To edit the current search string in the minibuffer without
replacing it with items from the search ring, type <kbd>M-e</kbd>
(<code>isearch-edit-string</code>) or click <kbd>mouse-1</kbd> in the minibuffer.
Type <tt class="key">RET</tt>, <kbd>C-s</kbd> or <kbd>C-r</kbd> to finish editing the string
and search for it.  Type <kbd>C-f</kbd> or <kbd><span class="key">RIGHT</span></kbd> to add to the
search string characters following point from the buffer from which
you started the search.

</p>

<a name="Isearch-Yank"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Error-in-Isearch" accesskey="n" rel="next">Error in Isearch</a>, Previous: <a href="#Repeat-Isearch" accesskey="p" rel="prev">Repeat Isearch</a>, Up: <a href="#Incremental-Search" accesskey="u" rel="up">Incremental Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Isearch-Yanking"></a>
<h4 class="subsection">15.1.3 Isearch Yanking</h4>

<p>In many cases, you will want to use text at or near point as your
search string.  The commands described in this subsection let you do
that conveniently.

</p>
<a name="index-C_002dw-_0028Incremental-search_0029"></a>
<a name="index-isearch_002dyank_002dword_002dor_002dchar"></a>
<p><kbd>C-w</kbd> (<code>isearch-yank-word-or-char</code>) appends the next
character or word at point to the search string.  This is an easy way
to search for another occurrence of the text at point.  (The decision
of whether to copy a character or a word is heuristic.)  With a prefix
numeric argument of <var>n</var>, append the next <var>n</var> characters or
words.

</p>
<a name="index-C_002dM_002dw-_0028Incremental-search_0029"></a>
<a name="index-isearch_002dyank_002dsymbol_002dor_002dchar"></a>
<p><kbd>C-M-w</kbd> (<code>isearch-yank-symbol-or-char</code>) appends the next
character or symbol at point to the search string.  This is an easy way
to search for another occurrence of the symbol at point.  (The decision
of whether to copy a character or a symbol is heuristic.)  With a prefix
numeric argument of <var>n</var>, append the next <var>n</var> characters or
symbols.

</p>
<a name="index-M_002ds-C_002de-_0028Incremental-search_0029"></a>
<a name="index-isearch_002dyank_002dline"></a>
<p><kbd>M-s C-e</kbd> (<code>isearch-yank-line</code>) appends the rest
of the current line to the search string.  If point is already at the
end of a line, it appends the next line.  With a prefix argument
<var>n</var>, it appends the next <var>n</var> lines.

</p>
<a name="index-C_002dM_002dz-_0028Incremental-search_0029"></a>
<a name="index-isearch_002dyank_002duntil_002dchar"></a>
<p>Similarly, <kbd>C-M-z</kbd> (<code>isearch-yank-until-char</code>) appends to
the search string everything from point until the next occurrence of
a specified character (not including that character).  This is especially
useful for keyboard macros, for example in programming languages or
markup languages in which that character marks a token boundary.  With
a prefix numeric argument of <var>n</var>, the command appends everything
from point to the <var>n</var>th occurrence of the specified character.

</p>
<a name="index-C_002dy-_0028Incremental-search_0029"></a>
<a name="index-M_002dy-_0028Incremental-search_0029"></a>
<a name="index-mouse_002d2-in-the-minibuffer-_0028Incremental-search_0029"></a>
<a name="index-isearch_002dyank_002dkill"></a>
<a name="index-isearch_002dyank_002dpop"></a>
<a name="index-isearch_002dyank_002dx_002dselection"></a>
<p>Within incremental search, <kbd>C-y</kbd> (<code>isearch-yank-kill</code>)
appends the current kill to the search string.  <kbd>M-y</kbd>
(<code>isearch-yank-pop</code>), if called after <kbd>C-y</kbd>, replaces that
appended text with an earlier kill, similar to the usual <kbd>M-y</kbd>
(<code>yank-pop</code>) command (see <a href="#Yanking">Yanking</a>).  Clicking <kbd>mouse-2</kbd>
in the echo area appends the current X selection (see <a href="#Primary-Selection">Primary Selection</a>) to the search string (<code>isearch-yank-x-selection</code>).

</p>
<a name="index-C_002dM_002dd-_0028Incremental-search_0029"></a>
<a name="index-C_002dM_002dy-_0028Incremental-search_0029"></a>
<a name="index-isearch_002ddel_002dchar"></a>
<a name="index-isearch_002dyank_002dchar"></a>
<p><kbd>C-M-d</kbd> (<code>isearch-del-char</code>) deletes the last character
from the search string, and <kbd>C-M-y</kbd> (<code>isearch-yank-char</code>)
appends the character after point to the search string.  An
alternative method to add the character after point is to enter the
minibuffer with <kbd>M-e</kbd> (see <a href="#Repeat-Isearch">Repeat Isearch</a>) and type <kbd>C-f</kbd>
or <kbd><span class="key">RIGHT</span></kbd> at the end of the search string in the
minibuffer.  Each <kbd>C-f</kbd> or <kbd><span class="key">RIGHT</span></kbd> you type adds another
character following point to the search string.

</p>
<p>Normally, when the search is case-insensitive, text yanked into the
search string is converted to lower case, so that the search remains
case-insensitive (see <a href="#Lax-Search">case folding</a>).  However, if the
value of the variable <code>search-upper-case</code> (see <a href="#Lax-Search">search-upper-case</a>) is other than <code>not-yanks</code>, that disables this
down-casing.

</p>

<a name="Error-in-Isearch"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Special-Isearch" accesskey="n" rel="next">Special Isearch</a>, Previous: <a href="#Isearch-Yank" accesskey="p" rel="prev">Isearch Yank</a>, Up: <a href="#Incremental-Search" accesskey="u" rel="up">Incremental Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Errors-in-Incremental-Search"></a>
<h4 class="subsection">15.1.4 Errors in Incremental Search</h4>

<a name="index-isearch_002dfail-face"></a>
<p>If your string is not found at all, the echo area says ‘<samp>Failing
I-Search</samp>’, and the cursor moves past the place where Emacs found as
much of your string as it could.  Thus, if you search for ‘<samp>FOOT</samp>’,
and there is no ‘<samp>FOOT</samp>’, you might see the cursor after the
‘<samp>FOO</samp>’ in ‘<samp>FOOL</samp>’.  In the echo area, the part of the search
string that failed to match is highlighted using the face
<code>isearch-fail</code>.

</p>
<p>At this point, there are several things you can do.  If your string
was mistyped, use <tt class="key">DEL</tt> to cancel a previous input item
(see <a href="#Basic-Isearch">Basic Isearch</a>), <kbd>C-M-d</kbd> to erase one character at a time,
or <kbd>M-e</kbd> to edit it.  If you like the place you have found, you
can type <tt class="key">RET</tt> to remain there.  Or you can type <kbd>C-g</kbd>, which
removes from the search string the characters that could not be found
(the ‘<samp>T</samp>’ in ‘<samp>FOOT</samp>’), leaving those that were found (the
‘<samp>FOO</samp>’ in ‘<samp>FOOT</samp>’).  A second <kbd>C-g</kbd> at that point cancels
the search entirely, returning point to where it was when the search
started.

</p>
<a name="index-quitting-_0028in-search_0029"></a>
<a name="index-C_002dg-_0028Incremental-search_0029"></a>
<p>The quit command, <kbd>C-g</kbd>, does special things during searches;
just what it does depends on the status of the search.  If the search
has found what you specified and is waiting for input, <kbd>C-g</kbd>
cancels the entire search, moving the cursor back to where you started
the search.  If <kbd>C-g</kbd> is typed when there are characters in the
search string that have not been found—because Emacs is still
searching for them, or because it has failed to find them—then the
search string characters which have not been found are discarded from
the search string.  With them gone, the search is now successful and
waiting for more input, so a second <kbd>C-g</kbd> will cancel the entire
search.

</p>

<a name="Special-Isearch"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Not-Exiting-Isearch" accesskey="n" rel="next">Not Exiting Isearch</a>, Previous: <a href="#Error-in-Isearch" accesskey="p" rel="prev">Error in Isearch</a>, Up: <a href="#Incremental-Search" accesskey="u" rel="up">Incremental Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Special-Input-for-Incremental-Search"></a>
<h4 class="subsection">15.1.5 Special Input for Incremental Search</h4>

<p>In addition to characters described in the previous subsections,
some of the other characters you type during incremental search have
special effects.  They are described here.

</p>
<p>To toggle lax space matching (see <a href="#Lax-Search">lax space
matching</a>), type <kbd>M-s <span class="key">SPC</span></kbd>.

</p>
<p>To toggle case sensitivity of the search, type <kbd>M-c</kbd> or
<kbd>M-s c</kbd>.  See <a href="#Lax-Search">case folding</a>.  If the search string
includes upper-case letters, the search is case-sensitive by default.

</p>
<p>To toggle whether or not the search will consider similar and
equivalent characters as a match, type <kbd>M-s '</kbd>.  See <a href="#Lax-Search">character folding</a>.  If the search string includes accented
characters, that disables character folding during that search.

</p>
<a name="index-invisible-text_002c-searching-for"></a>
<a name="index-M_002ds-i-_0028Incremental-search_0029"></a>
<a name="index-isearch_002dtoggle_002dinvisible"></a>
<p>To toggle whether or not invisible text is searched, type
<kbd>M-s i</kbd> (<code>isearch-toggle-invisible</code>).  See <a href="#Outline-Search">Outline Search</a>.

</p>
<a name="index-M_002dr-_0028Incremental-Search_0029"></a>
<a name="index-M_002ds-r-_0028Incremental-Search_0029"></a>
<a name="index-isearch_002dtoggle_002dregexp"></a>
<p>To toggle between non-regexp and regexp incremental search, type
<kbd>M-r</kbd> or <kbd>M-s r</kbd> (<code>isearch-toggle-regexp</code>).
See <a href="#Regexp-Search">Regexp Search</a>.

</p>
<p>To toggle symbol mode, type <kbd>M-s _</kbd>.  See <a href="#Symbol-Search">Symbol Search</a>.

</p>
<p>To search for a newline character, type <kbd>C-j</kbd> as part of the
search string.

</p>
<p>To search for non-<acronym>ASCII</acronym> characters, use one of the
following methods:

</p>
<ul>
<li> <a name="index-isearch_002dquote_002dchar"></a>
<a name="index-C_002dq-_0028Incremental-Search_0029"></a>

Type <kbd>C-q</kbd> (<code>isearch-quote-char</code>), followed by a non-graphic
character or a sequence of octal digits.  This adds a character to the
search string, similar to inserting into a buffer using <kbd>C-q</kbd>
(see <a href="#Inserting-Text">Inserting Text</a>).  For example, <kbd>C-q C-s</kbd> during
incremental search adds the ‘<samp>control-S</samp>’ character to the search
string.



</li><li> <a name="index-isearch_002dchar_002dby_002dname"></a>
<a name="index-C_002dx-8-RET-_0028Incremental-Search_0029"></a>

Type <kbd>C-x 8 <span class="key">RET</span></kbd> (<code>isearch-char-by-name</code>), followed by
a Unicode name or code-point in hex.  This adds the specified
character into the search string, similar to the usual
<code>insert-char</code> command (see <a href="#Inserting-Text">Inserting Text</a>).



</li><li> <a name="index-C_002d_005e-_0028Incremental-Search_0029"></a>
<a name="index-isearch_002dtoggle_002dinput_002dmethod"></a>
<a name="index-isearch_002dtoggle_002dspecified_002dinput_002dmethod"></a>

Use an input method (see <a href="#Input-Methods">Input Methods</a>).  If an input method is
enabled in the current buffer when you start the search, the same
method will be active in the minibuffer when you type the search
string.  While typing the search string, you can toggle the input
method with <kbd>C-\</kbd> (<code>isearch-toggle-input-method</code>).  You can
also turn on a non-default input method with <kbd>C-^</kbd>
(<code>isearch-toggle-specified-input-method</code>), which prompts for the
name of the input method.  When an input method is active during
incremental search, the search prompt includes the input method
mnemonic, like this:



<div class="example">
<pre class="example">I-search [<var>im</var>]:
</pre></div>

<p>where <var>im</var> is the mnemonic of the active input method.  Any input
method you enable during incremental search remains enabled in the
current buffer afterwards.

</p></li></ul>

<a name="index-M_002ds-o-_0028Incremental-Search_0029"></a>
<a name="index-isearch_002doccur"></a>
<p>Typing <kbd>M-s o</kbd> in incremental search invokes
<code>isearch-occur</code>, which runs <code>occur</code> with the current search
string.  See <a href="#Other-Repeating-Search">occur</a>.

</p>
<a name="index-isearch_002dquery_002dreplace"></a>
<a name="index-isearch_002dquery_002dreplace_002dregexp"></a>
<a name="index-M_002d_0025-_0028Incremental-search_0029"></a>
<a name="index-C_002dM_002d_0025-_0028Incremental-search_0029"></a>
<p>Typing <kbd>M-%</kbd> (<code>isearch-query-replace</code>) in incremental
search invokes <code>query-replace</code> or <code>query-replace-regexp</code>
(depending on search mode) with the current search string used as the
string to replace.  A negative prefix argument means to replace
backward.  See <a href="#Query-Replace">Query Replace</a>.  Typing <kbd>C-M-%</kbd>
(<code>isearch-query-replace-regexp</code>) invokes
<code>query-replace-regexp</code> with the current search string used as the
regexp to replace.

</p>
<a name="index-isearch_002dcomplete"></a>
<a name="index-M_002dTAB-_0028Incremental-search_0029"></a>
<p>Typing <kbd>M-<span class="key">TAB</span></kbd> in incremental search invokes
<code>isearch-complete</code>, which attempts to complete the search string
using the search ring (the previous search strings you used) as a list
of completion alternatives.  See <a href="#Completion">Completion</a>.  In many operating
systems, the <kbd>M-<span class="key">TAB</span></kbd> key sequence is captured by the window
manager; you then need to rebind <code>isearch-complete</code> to another
key sequence if you want to use it (see <a href="#Rebinding">Rebinding</a>).

</p>
<a name="index-M_002ds-h-r-_0028Incremental-Search_0029"></a>
<a name="index-isearch_002dhighlight_002dregexp"></a>
<a name="index-M_002ds-h-l-_0028Incremental-Search_0029"></a>
<a name="index-isearch_002dhighlight_002dlines_002dmatching_002dregexp"></a>
<p>You can exit the search while leaving the matches highlighted by
typing <kbd>M-s h r</kbd> (<code>isearch-highlight-regexp</code>).  This runs
<code>highlight-regexp</code> (see <a href="#Highlight-Interactively">Highlight Interactively</a>), passing it
the regexp derived from the search string and prompting you for the face
to use for highlighting.  To highlight <em>whole lines</em> containing
matches (rather than <em>just</em> the matches), type <kbd>M-s h l</kbd>
(<code>isearch-highlight-lines-matching-regexp</code>).  In either case, to
remove the highlighting, type <kbd>M-s h u</kbd> (<code>unhighlight-regexp</code>).

</p>
<a name="index-incremental-search_002c-help-on-special-keys"></a>
<a name="index-C_002dh-C_002dh-_0028Incremental-Search_0029"></a>
<a name="index-isearch_002dhelp_002dmap"></a>
<a name="index-isearch_002dmode_002dmap"></a>
<p>When incremental search is active, you can type <kbd>C-h C-h</kbd>
(<code>isearch-help-map</code>) to access interactive help options,
including a list of special key bindings.  These key bindings are part
of the keymap <code>isearch-mode-map</code> (see <a href="#Keymaps">Keymaps</a>).

</p>
<a name="index-incremental-search_002c-go-to-first-or-last-occurrence"></a>
<a name="index-M_002ds-M_002d_003e"></a>
<a name="index-M_002ds-M_002d_003c"></a>
<p>When incremental search is active, typing <kbd>M-s M-&gt;</kbd> will go to
the last occurrence of the search string, and <kbd>M-s M-&lt;</kbd> will go to
the first occurrence.  With a prefix numeric argument of <var>n</var>,
these commands will go to the <var>n</var>th occurrence of the search
string counting from the beginning or end of the buffer,
respectively.

</p>

<a name="Not-Exiting-Isearch"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Isearch-Minibuffer" accesskey="n" rel="next">Isearch Minibuffer</a>, Previous: <a href="#Special-Isearch" accesskey="p" rel="prev">Special Isearch</a>, Up: <a href="#Incremental-Search" accesskey="u" rel="up">Incremental Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Not-Exiting-Incremental-Search"></a>
<h4 class="subsection">15.1.6 Not Exiting Incremental Search</h4>

<p>This subsection describes how to control whether typing a command not
specifically meaningful in searches exits the search before executing
the command.  It also describes three categories of commands which you
can type without exiting the current incremental search, even though
they are not themselves part of incremental search.

</p>
<a name="index-search_002dexit_002doption"></a>
<p>Normally, typing a command that is not bound by the incremental
search exits the search before executing the command.  Thus, the
command operates on the buffer from which you invoked the search.
However, if you customize the variable <code>search-exit-option</code> to
<code>append</code>, the characters which you type that are not interpreted by
the incremental search are simply appended to the search string.  This
is so you could include in the search string control characters, such
as <kbd>C-a</kbd>, that would normally exit the search and invoke the
command bound to them on the buffer.

</p>
<dl compact="compact">
<dt>Prefix Arguments</dt>
<dd><a name="index-prefix-argument-commands_002c-during-incremental-search"></a>
<a name="index-isearch_002dallow_002dprefix"></a>
<p>In incremental search, when you type a command that specifies a
prefix argument (see <a href="#Arguments">Arguments</a>), by default it will apply either
to the next action in the search or to the command that exits the
search.  In other words, entering a prefix argument will not by itself
terminate the search.

</p>
<p>In previous versions of Emacs, entering a prefix argument always
terminated the search.  You can revert to this behavior by setting the
variable <code>isearch-allow-prefix</code> to <code>nil</code>.

</p>
<p>When <code>isearch-allow-scroll</code> is non-<code>nil</code> (see below),
prefix arguments always have the default behavior described above,
i.e., they don’t terminate the search, even if
<code>isearch-allow-prefix</code> is <code>nil</code>.

</p>
</dd>
<dt>Scrolling Commands</dt>
<dd><a name="index-scrolling-commands_002c-during-incremental-search"></a>
<a name="index-isearch_002dallow_002dscroll"></a>
<p>Normally, scrolling commands exit incremental search.  If you change
the variable <code>isearch-allow-scroll</code> to a non-<code>nil</code> value,
that enables the use of the scroll-bar, as well as keyboard scrolling
commands like <kbd>C-v</kbd>, <kbd>M-v</kbd>, and <kbd>C-l</kbd> (see <a href="#Scrolling">Scrolling</a>).
This applies only to calling these commands via their bound key
sequences—typing <kbd>M-x</kbd> will still exit the search.  You can give
prefix arguments to these commands in the usual way.  This feature
normally won’t let you scroll the current match out of visibility; but
if you customize <code>isearch-allow-scroll</code> to the special value
<code>unlimited</code>, that restriction is lifted.

</p>
<p>The <code>isearch-allow-scroll</code> feature also affects some other
commands, such as <kbd>C-x 2</kbd> (<code>split-window-below</code>) and
<kbd>C-x ^</kbd> (<code>enlarge-window</code>), which don’t exactly scroll but do
affect where the text appears on the screen.  It applies to any
command whose name has a non-<code>nil</code> <code>isearch-scroll</code>
property.  So you can control which commands are affected by changing
these properties.

</p>
<a name="index-prevent-commands-from-exiting-incremental-search"></a>
<p>For example, to make <kbd>C-h l</kbd> usable within an incremental search
in all future Emacs sessions, use <kbd>C-h c</kbd> to find what command it
runs (see <a href="#Key-Help">Key Help</a>), which is <code>view-lossage</code>.  Then you can
put the following line in your init file (see <a href="#Init-File">Init File</a>):

</p>
<div class="example">
<pre class="example">(put 'view-lossage 'isearch-scroll t)
</pre></div>

<p>This feature can be applied to any command that doesn’t permanently
change point, the buffer contents, the match data, the current buffer,
or the selected window and frame.  The command must not itself attempt
an incremental search.  This feature is disabled if
<code>isearch-allow-scroll</code> is <code>nil</code> (which it is by default).

</p>
</dd>
<dt>Motion Commands</dt>
<dd><a name="index-motion-commands_002c-during-incremental-search"></a>
<p>When <code>isearch-yank-on-move</code> is customized to <code>shift</code>,
you can extend the search string by holding down the shift key while
typing cursor motion commands.  It will yank text that ends at the new
position after moving point in the current buffer.

</p>
<p>When <code>isearch-yank-on-move</code> is <code>t</code>, you can extend the
search string without using the shift key for cursor motion commands,
but it applies only for certain motion command that have the
<code>isearch-move</code> property on their symbols.

</p></dd>
</dl>


<a name="Isearch-Minibuffer"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Not-Exiting-Isearch" accesskey="p" rel="prev">Not Exiting Isearch</a>, Up: <a href="#Incremental-Search" accesskey="u" rel="up">Incremental Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Searching-the-Minibuffer"></a>
<h4 class="subsection">15.1.7 Searching the Minibuffer</h4>
<a name="index-minibuffer-history_002c-searching"></a>

<p>If you start an incremental search while the minibuffer is active,
Emacs searches the contents of the minibuffer.  Unlike searching an
ordinary buffer, the search string is not shown in the echo area,
because that is used to display the minibuffer.

</p>
<p>If an incremental search fails in the minibuffer, it tries searching
the minibuffer history.  See <a href="#Minibuffer-History">Minibuffer History</a>.  You can visualize
the minibuffer and its history as a series of pages, with the
earliest history element on the first page and the current minibuffer
on the last page.  A forward search, <kbd>C-s</kbd>, searches forward to
later pages; a reverse search, <kbd>C-r</kbd>, searches backwards to
earlier pages.  Like in ordinary buffer search, a failing search can
wrap around, going from the last page to the first page or vice versa.

</p>
<p>When the current match is on a history element, that history element
is pulled into the minibuffer.  If you exit the incremental search
normally (e.g., by typing <tt class="key">RET</tt>), it remains in the minibuffer
afterwards.  Canceling the search, with <kbd>C-g</kbd>, restores the
contents of the minibuffer when you began the search.

</p>

<a name="Nonincremental-Search"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Word-Search" accesskey="n" rel="next">Word Search</a>, Previous: <a href="#Incremental-Search" accesskey="p" rel="prev">Incremental Search</a>, Up: <a href="#Search" accesskey="u" rel="up">Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Nonincremental-Search-1"></a>
<h3 class="section">15.2Nonincremental Search</h3>
<a name="index-nonincremental-search"></a>

<p>Emacs also has conventional nonincremental search commands, which require
you to type the entire search string before searching begins.

</p>
<dl compact="compact">
<dt><kbd>C-s <span class="key">RET</span> <var>string</var> <span class="key">RET</span></kbd></dt>
<dd><p>Search for <var>string</var>.

</p></dd>
<dt><kbd>C-r <span class="key">RET</span> <var>string</var> <span class="key">RET</span></kbd></dt>
<dd><p>Search backward for <var>string</var>.

</p></dd>
</dl>

<p>To start a nonincremental search, first type <kbd>C-s <span class="key">RET</span></kbd>.
This enters the minibuffer to read the search string; terminate the
string with <tt class="key">RET</tt>, and then the search takes place.  If the string
is not found, the search command signals an error.

</p>
<p>When you type <kbd>C-s <span class="key">RET</span></kbd>, the <kbd>C-s</kbd> invokes incremental
search as usual.  That command is specially programmed to invoke the
command for nonincremental search, if the string you specify is empty.
(Such an empty argument would otherwise be useless.)  <kbd>C-r
<span class="key">RET</span></kbd> does likewise, invoking the nonincremental
backward-searching command.

</p>
<p>Nonincremental search can also be invoked from the menu bar’s
‘<samp>Edit-&gt;Search</samp>’ menu.

</p>
<a name="index-search_002dforward"></a>
<a name="index-search_002dbackward"></a>
<p>You can also use two simpler commands, <kbd>M-x search-forward</kbd> and
<kbd>M-x search-backward</kbd>.  These commands look for the literal
strings you specify, and don’t support any of the lax-search features
(see <a href="#Lax-Search">Lax Search</a>) except case folding.

</p>

<a name="Word-Search"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Symbol-Search" accesskey="n" rel="next">Symbol Search</a>, Previous: <a href="#Nonincremental-Search" accesskey="p" rel="prev">Nonincremental Search</a>, Up: <a href="#Search" accesskey="u" rel="up">Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Word-Search-1"></a>
<h3 class="section">15.3Word Search</h3>
<a name="index-word-search"></a>

<p>A <em>word search</em> finds a sequence of words without regard to the
type of punctuation between them.  For instance, if you enter a search
string that consists of two words separated by a single space, the
search matches any sequence of those two words separated by one or
more spaces, newlines, or other punctuation characters.  This is
particularly useful for searching text documents, because you don’t
have to worry whether the words you are looking for are separated by
newlines or spaces.  Note that major modes for programming languages
or other specialized modes can modify the definition of a word to suit
their syntactic needs.

</p>
<dl compact="compact">
<dt><kbd>M-s w</kbd></dt>
<dd><p>If incremental search is active, toggle word search mode
(<code>isearch-toggle-word</code>); otherwise, begin an incremental forward
word search (<code>isearch-forward-word</code>).

</p></dd>
<dt><kbd>M-s w <span class="key">RET</span> <var>words</var> <span class="key">RET</span></kbd></dt>
<dd><p>Search for <var>words</var>, using a forward nonincremental word search.

</p></dd>
<dt><kbd>M-s w C-r <span class="key">RET</span> <var>words</var> <span class="key">RET</span></kbd></dt>
<dd><p>Search backward for <var>words</var>, using a nonincremental word search.

</p></dd>
<dt><kbd>M-s M-w</kbd></dt>
<dd><p>Search the Web for the text in region.

</p></dd>
</dl>

<a name="index-isearch_002dforward_002dword"></a>
<a name="index-isearch_002dtoggle_002dword"></a>
<a name="index-M_002ds-w"></a>
<p>To begin a forward incremental word search, type <kbd>M-s w</kbd>.  If
incremental search is not already active, this runs the command
<code>isearch-forward-word</code>.  If incremental search is already active
(whether a forward or backward search), <kbd>M-s w</kbd> runs the command
<code>isearch-toggle-word</code>, which switches to a word search while
keeping the direction of the search and the current search string
unchanged.  You can toggle word search back off by typing <kbd>M-s w</kbd>
again.

</p>
<a name="index-word_002dsearch_002dforward"></a>
<a name="index-word_002dsearch_002dbackward"></a>
<p>To begin a nonincremental word search, type <kbd>M-s w <span class="key">RET</span></kbd>
for a forward search, or <kbd>M-s w C-r <span class="key">RET</span></kbd> for a backward search.
These run the commands <code>word-search-forward</code> and
<code>word-search-backward</code> respectively.

</p>
<p>Incremental and nonincremental word searches differ slightly in the
way they find a match.  In a nonincremental word search, each word in
the search string must exactly match a whole word.  In an incremental
word search, the matching is more lax: while you are typing the search
string, its first and last words need not match whole words.  This is
so that the matching can proceed incrementally as you type.  This
additional laxity does not apply to the lazy highlight
(see <a href="#Incremental-Search">Incremental Search</a>), which always matches whole words.
While you are typing the search string, ‘<samp>Pending</samp>’ appears in the
search prompt until you use a search repeating key like <kbd>C-s</kbd>.

</p>
<p>The word search commands don’t perform character folding, and
toggling lax whitespace matching (see <a href="#Lax-Search">lax space
matching</a>) has no effect on them.

</p>
<a name="index-M_002ds-M_002dw"></a>
<a name="index-eww_002dsearch_002dwords"></a>
<a name="index-eww_002dsearch_002dprefix"></a>
<a name="index-Internet-search"></a>
<a name="index-search-Internet-for-keywords"></a>
<p>To search the Web for the text in region, type <kbd>M-s M-w</kbd>.  This
command performs an Internet search for the words in region using the
search engine whose <acronym>URL</acronym> is specified by the variable
<code>eww-search-prefix</code> (see <a href="https://www.gnu.org/software/emacs/manual/html_mono/eww.html#Basics">EWW</a> in <cite>The Emacs Web
Wowser Manual</cite>).  If the region is not active, or doesn’t contain any
words, this command prompts the user for a URL or keywords to search.

</p>


<a name="Symbol-Search"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Regexp-Search" accesskey="n" rel="next">Regexp Search</a>, Previous: <a href="#Word-Search" accesskey="p" rel="prev">Word Search</a>, Up: <a href="#Search" accesskey="u" rel="up">Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Symbol-Search-1"></a>
<h3 class="section">15.4Symbol Search</h3>
<a name="index-symbol-search"></a>

<p>A <em>symbol search</em> is much like an ordinary search, except that
the boundaries of the search must match the boundaries of a symbol.
The meaning of <em>symbol</em> in this context depends on the major mode,
and usually refers to a source code token, such as a Lisp symbol in
Emacs Lisp mode.  For instance, if you perform an incremental symbol
search for the Lisp symbol <code>forward-word</code>, it would not match
<code>isearch-forward-word</code>.  This feature is thus mainly useful for
searching source code.

</p>
<dl compact="compact">
<dt><kbd>M-s _</kbd></dt>
<dd><a name="index-isearch_002dtoggle_002dsymbol"></a>
<p>If incremental search is active, toggle symbol search mode
(<code>isearch-toggle-symbol</code>); otherwise, begin an incremental
forward symbol search (<code>isearch-forward-symbol</code>).

</p></dd>
<dt><kbd>M-s .</kbd></dt>
<dd><p>Start a symbol incremental search forward with the symbol found near
point added to the search string initially.

</p></dd>
<dt><kbd>M-s _ <span class="key">RET</span> <var>symbol</var> <span class="key">RET</span></kbd></dt>
<dd><p>Search forward for <var>symbol</var>, nonincrementally.

</p></dd>
<dt><kbd>M-s _ C-r <span class="key">RET</span> <var>symbol</var> <span class="key">RET</span></kbd></dt>
<dd><p>Search backward for <var>symbol</var>, nonincrementally.

</p></dd>
</dl>

<a name="index-M_002ds-_005f"></a>
<a name="index-M_002ds-_002e"></a>
<a name="index-isearch_002dforward_002dsymbol"></a>
<a name="index-isearch_002dforward_002dsymbol_002dat_002dpoint"></a>
<p>To begin a forward incremental symbol search, type <kbd>M-s _</kbd> (or
<kbd>M-s .</kbd> if the symbol to search is near point).  If incremental
search is not already active, <kbd>M-s _</kbd> runs the command
<code>isearch-forward-symbol</code> and <kbd>M-s .</kbd> runs the command
<code>isearch-forward-symbol-at-point</code>.  With a numeric prefix
argument of <var>n</var>, <kbd>M-s .</kbd> will search for the <var>n</var>the next
occurrence of the symbol at point; negative values of <var>n</var> search
backwards.  If incremental search is already active, <kbd>M-s _</kbd>
switches to a symbol search, preserving the direction of the search
and the current search string; you can disable symbol search by typing
<kbd>M-s _</kbd> again.  In incremental symbol search, while you are typing
the search string, only the beginning of the search string is required
to match the beginning of a symbol, and ‘<samp>Pending</samp>’ appears in the
search prompt until you use a search repeating key like <kbd>C-s</kbd>.

</p>
<p>To begin a nonincremental symbol search, type <kbd>M-s _ <span class="key">RET</span></kbd>
for a forward search, or <kbd>M-s _ C-r <span class="key">RET</span></kbd> or a backward
search.  In nonincremental symbol searches, the beginning and end of
the search string are required to match the beginning and end of a
symbol, respectively.

</p>
<p>The symbol search commands don’t perform character folding, and
toggling lax whitespace matching (see <a href="#Lax-Search">lax space
matching</a>) has no effect on them.

</p>

<a name="Regexp-Search"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Regexps" accesskey="n" rel="next">Regexps</a>, Previous: <a href="#Symbol-Search" accesskey="p" rel="prev">Symbol Search</a>, Up: <a href="#Search" accesskey="u" rel="up">Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Regular-Expression-Search"></a>
<h3 class="section">15.5Regular Expression Search</h3>
<a name="index-regexp-search"></a>
<a name="index-search-for-a-regular-expression"></a>

<p>A <em>regular expression</em> (or <em>regexp</em> for short) is a pattern
that denotes a class of alternative strings to match.  Emacs
provides both incremental and nonincremental ways to search for a
match for a regexp.  The syntax of regular expressions is explained in
the next section.

</p>
<dl compact="compact">
<dt><kbd>C-M-s</kbd></dt>
<dd><p>Begin incremental regexp search (<code>isearch-forward-regexp</code>).

</p></dd>
<dt><kbd>C-M-r</kbd></dt>
<dd><p>Begin reverse incremental regexp search (<code>isearch-backward-regexp</code>).

</p></dd>
</dl>

<a name="index-C_002dM_002ds"></a>
<a name="index-isearch_002dforward_002dregexp"></a>
<a name="index-C_002dM_002dr"></a>
<a name="index-isearch_002dbackward_002dregexp"></a>
<p>Incremental search for a regexp is done by typing <kbd>C-M-s</kbd>
(<code>isearch-forward-regexp</code>), by invoking <kbd>C-s</kbd> with a
prefix argument (whose value does not matter), or by typing <kbd>M-r</kbd>
within a forward incremental search.  This command reads a
search string incrementally just like <kbd>C-s</kbd>, but it treats the
search string as a regexp rather than looking for an exact match
against the text in the buffer.  Each time you add text to the search
string, you make the regexp longer, and the new regexp is searched
for.  To search backward for a regexp, use <kbd>C-M-r</kbd>
(<code>isearch-backward-regexp</code>), <kbd>C-r</kbd> with a prefix argument,
or <kbd>M-r</kbd> within a backward incremental search.

</p>
<a name="index-regexp_002dsearch_002dring_002dmax"></a>
<p>All of the special key sequences in an ordinary incremental search
(see <a href="#Special-Isearch">Special Isearch</a>) do similar things in an incremental regexp
search.  For instance, typing <kbd>C-s</kbd> immediately after starting the
search retrieves the last incremental search regexp used and searches
forward for it.  Incremental regexp and non-regexp searches have
independent defaults.  They also have separate search rings, which you
can access with <kbd>M-p</kbd> and <kbd>M-n</kbd>.  The maximum number of search
regexps saved in the search ring is determined by the value of
<code>regexp-search-ring-max</code>, 16 by default.

</p>
<p>Unlike ordinary incremental search, incremental regexp search
does not use lax space matching by default.  To toggle this feature
use <kbd>M-s <span class="key">SPC</span></kbd> (<code>isearch-toggle-lax-whitespace</code>).
Then any <tt class="key">SPC</tt> typed in incremental regexp search will match
any sequence of one or more whitespace characters.  The variable
<code>search-whitespace-regexp</code> specifies the regexp for the lax
space matching.  See <a href="#Special-Isearch">Special Isearch</a>.

</p>
<p>Also unlike ordinary incremental search, incremental regexp search
cannot use character folding (see <a href="#Lax-Search">Lax Search</a>).  (If you toggle
character folding during incremental regexp search with <kbd>M-s '</kbd>,
the search becomes a non-regexp search and the search pattern you
typed is interpreted as a literal string.)

</p>
<p>In some cases, adding characters to the regexp in an incremental
regexp search can make the cursor move back and start again.  For
example, if you have searched for ‘<samp>foo</samp>’ and you add ‘<samp>\|bar</samp>’,
the cursor backs up in case the first ‘<samp>bar</samp>’ precedes the first
‘<samp>foo</samp>’.  See <a href="#Regexps">Regexps</a>.

</p>
<p>Forward and backward regexp search are not symmetrical, because
regexp matching in Emacs always operates forward, starting with the
beginning of the regexp.  Thus, forward regexp search scans forward,
trying a forward match at each possible starting position.  Backward
regexp search scans backward, trying a forward match at each possible
starting position.  These search methods are not mirror images.

</p>
<a name="index-re_002dsearch_002dforward"></a>
<a name="index-re_002dsearch_002dbackward"></a>
<p>Nonincremental search for a regexp is done with the commands
<code>re-search-forward</code> and <code>re-search-backward</code>.  You can
invoke these with <kbd>M-x</kbd>, or by way of incremental regexp search
with <kbd>C-M-s <span class="key">RET</span></kbd> and <kbd>C-M-r <span class="key">RET</span></kbd>.  When you invoke
these commands with <kbd>M-x</kbd>, they search for the exact regexp you
specify, and thus don’t support any lax-search features (see <a href="#Lax-Search">Lax Search</a>) except case folding.

</p>
<p>If you use the incremental regexp search commands with a prefix argument, they perform ordinary string search, like <code>isearch-forward</code> and <code>isearch-backward</code>. 请参阅<a href="#Incremental-Search">增量搜索</a>。
</p>

<a name="Regexps"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Regexp-Backslash" accesskey="n" rel="next">Regexp Backslash</a>, Previous: <a href="#Regexp-Search" accesskey="p" rel="prev">Regexp Search</a>, Up: <a href="#Search" accesskey="u" rel="up">Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Syntax-of-Regular-Expressions"></a>
<h3 class="section">15.6Syntax of Regular Expressions</h3>
<a name="index-syntax-of-regexps"></a>
<a name="index-regular-expression"></a>
<a name="index-regexp"></a>

<p>This section (and this manual in general) describes regular
expression features that users typically use.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Regular-Expressions">Regular
Expressions</a> in <cite>The Emacs Lisp Reference Manual</cite>, for additional
features used mainly in Lisp programs.

</p>
<p>Regular expressions have a syntax in which a few characters are
<em>special constructs</em> and the rest are <em>ordinary</em>.  An ordinary
character matches that same character and nothing else.  The special
characters are ‘<samp>$^.*+?[\</samp>’.  The character ‘<samp>]</samp>’ is special if
it ends a character alternative (see below).  The character ‘<samp>-</samp>’
is special inside a character alternative.  Any other character
appearing in a regular expression is ordinary, unless a ‘<samp>\</samp>’
precedes it.  (When you use regular expressions in a Lisp program,
each ‘<samp>\</samp>’ must be doubled, see the example near the end of this
section.)

</p>
<p>For example, ‘<samp>f</samp>’ is not a special character, so it is ordinary, and
therefore ‘<samp>f</samp>’ is a regular expression that matches the string
‘<samp>f</samp>’ and no other string.  (It does <em>not</em> match the string
‘<samp>ff</samp>’.)  Likewise, ‘<samp>o</samp>’ is a regular expression that matches
only ‘<samp>o</samp>’.  (When case distinctions are being ignored, these regexps
also match ‘<samp>F</samp>’ and ‘<samp>O</samp>’, but we consider this a generalization
of “the same string”, rather than an exception.)

</p>
<p>Any two regular expressions <var>a</var> and <var>b</var> can be concatenated.
The result is a regular expression which matches a string if <var>a</var>
matches some amount of the beginning of that string and <var>b</var>
matches the rest of the string.  As a trivial example, concatenating
the regular expressions ‘<samp>f</samp>’ and ‘<samp>o</samp>’ gives the regular
expression ‘<samp>fo</samp>’, which matches only the string ‘<samp>fo</samp>’.  To do
something less trivial, you need to use one of the special characters.
Here is a list of them.

</p>
<dl compact="compact">
<dt><kbd>.</kbd> <span class="roman">(Period)</span></dt>
<dd><p>is a special character that matches any single character except a
newline.  For example, the regular expressions ‘<samp>a.b</samp>’ matches any
three-character string that begins with ‘<samp>a</samp>’ and ends with
‘<samp>b</samp>’.

</p>
</dd>
<dt><kbd>*</kbd></dt>
<dd><p>is not a construct by itself; it is a postfix operator that means to
match the preceding regular expression repetitively any number of
times, as many times as possible.  Thus, ‘<samp>o*</samp>’ matches any number
of ‘<samp>o</samp>’s, including no ‘<samp>o</samp>’s.

</p>
<p>‘<samp>*</samp>’ always applies to the <em>smallest</em> possible preceding
expression.  Thus, ‘<samp>fo*</samp>’ has a repeating ‘<samp>o</samp>’, not a repeating
‘<samp>fo</samp>’.  It matches ‘<samp>f</samp>’, ‘<samp>fo</samp>’, ‘<samp>foo</samp>’, and so on.

</p>
<p>The matcher processes a ‘<samp>*</samp>’ construct by matching, immediately,
as many repetitions as can be found.  Then it continues with the rest
of the pattern.  If that fails, backtracking occurs, discarding some
of the matches of the ‘<samp>*</samp>’-modified construct in case that makes
it possible to match the rest of the pattern.  For example, in matching
‘<samp>ca*ar</samp>’ against the string ‘<samp>caaar</samp>’, the ‘<samp>a*</samp>’ first
tries to match all three ‘<samp>a</samp>’s; but the rest of the pattern is
‘<samp>ar</samp>’ and there is only ‘<samp>r</samp>’ left to match, so this try fails.
The next alternative is for ‘<samp>a*</samp>’ to match only two ‘<samp>a</samp>’s.
With this choice, the rest of the regexp matches successfully.

</p>
</dd>
<dt><kbd>+</kbd></dt>
<dd><p>is a postfix operator, similar to ‘<samp>*</samp>’ except that it must match
the preceding expression at least once.  Thus, ‘<samp>ca+r</samp>’ matches the
strings ‘<samp>car</samp>’ and ‘<samp>caaaar</samp>’ but not the string ‘<samp>cr</samp>’,
whereas ‘<samp>ca*r</samp>’ matches all three strings.

</p>
</dd>
<dt><kbd>?</kbd></dt>
<dd><p>is a postfix operator, similar to ‘<samp>*</samp>’ except that it can match
the preceding expression either once or not at all.  Thus, ‘<samp>ca?r</samp>’
matches ‘<samp>car</samp>’ or ‘<samp>cr</samp>’, and nothing else.

</p>
</dd>
<dt><kbd>*?</kbd>, <kbd>+?</kbd>, <kbd>??</kbd></dt>
<dd><a name="index-non_002dgreedy-regexp-matching"></a>
<p>are non-<em>greedy</em> variants of the operators above.  The normal
operators ‘<samp>*</samp>’, ‘<samp>+</samp>’, ‘<samp>?</samp>’ match as much as they can, as
long as the overall regexp can still match.  With a following
‘<samp>?</samp>’, they will match as little as possible.

</p>
<p>Thus, both ‘<samp>ab*</samp>’ and ‘<samp>ab*?</samp>’ can match the string ‘<samp>a</samp>’
and the string ‘<samp>abbbb</samp>’; but if you try to match them both against
the text ‘<samp>abbb</samp>’, ‘<samp>ab*</samp>’ will match it all (the longest valid
match), while ‘<samp>ab*?</samp>’  will match just ‘<samp>a</samp>’ (the shortest
valid match).

</p>
<p>Non-greedy operators match the shortest possible string starting at a
given starting point; in a forward search, though, the earliest
possible starting point for match is always the one chosen.  Thus, if
you search for ‘<samp>a.*?$</samp>’ against the text ‘<samp>abbab</samp>’ followed by
a newline, it matches the whole string.  Since it <em>can</em> match
starting at the first ‘<samp>a</samp>’, it does.

</p>
</dd>
<dt><kbd>\{<var>n</var>\}</kbd></dt>
<dd><p>is a postfix operator specifying <var>n</var> repetitions—that is, the
preceding regular expression must match exactly <var>n</var> times in a
row.  For example, ‘<samp>x\{4\}</samp>’ matches the string ‘<samp>xxxx</samp>’ and
nothing else.

</p>
</dd>
<dt><kbd>\{<var>n</var>,<var>m</var>\}</kbd></dt>
<dd><p>is a postfix operator specifying between <var>n</var> and <var>m</var>
repetitions—that is, the preceding regular expression must match at
least <var>n</var> times, but no more than <var>m</var> times.  If <var>m</var> is
omitted, then there is no upper limit, but the preceding regular
expression must match at least <var>n</var> times.<br> ‘<samp>\{0,1\}</samp>’ is
equivalent to ‘<samp>?</samp>’. <br> ‘<samp>\{0,\}</samp>’ is equivalent to
‘<samp>*</samp>’. <br> ‘<samp>\{1,\}</samp>’ is equivalent to ‘<samp>+</samp>’.

</p>
</dd>
<dt><kbd>[ … ]</kbd></dt>
<dd><p>is a <em>character set</em>, beginning with ‘<samp>[</samp>’ and terminated by
‘<samp>]</samp>’.

</p>
<p>In the simplest case, the characters between the two brackets are what
this set can match.  Thus, ‘<samp>[ad]</samp>’ matches either one ‘<samp>a</samp>’ or
one ‘<samp>d</samp>’, and ‘<samp>[ad]*</samp>’ matches any string composed of just
‘<samp>a</samp>’s and ‘<samp>d</samp>’s (including the empty string).  It follows that
‘<samp>c[ad]*r</samp>’ matches ‘<samp>cr</samp>’, ‘<samp>car</samp>’, ‘<samp>cdr</samp>’,
‘<samp>caddaar</samp>’, etc.

</p>
<p>You can also include character ranges in a character set, by writing the
starting and ending characters with a ‘<samp>-</samp>’ between them.  Thus,
‘<samp>[a-z]</samp>’ matches any lower-case <acronym>ASCII</acronym> letter.  Ranges may be
intermixed freely with individual characters, as in ‘<samp>[a-z$%.]</samp>’,
which matches any lower-case <acronym>ASCII</acronym> letter or ‘<samp>$</samp>’, ‘<samp>%</samp>’ or
period.  As another example, ‘<samp>[α-ωί]</samp>’ matches all lower-case
Greek letters.

</p>
<p>You can also include certain special <em>character classes</em> in a
character set.  A ‘<samp>[:</samp>’ and balancing ‘<samp>:]</samp>’ enclose a
character class inside a character alternative.  For instance,
‘<samp>[[:alnum:]]</samp>’ matches any letter or digit.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Char-Classes">Char Classes</a> in <cite>The Emacs Lisp Reference Manual</cite>, for a list of character
classes.

</p>
<p>To include a ‘<samp>]</samp>’ in a character set, you must make it the first character.
For example, ‘<samp>[]a]</samp>’ matches ‘<samp>]</samp>’ or ‘<samp>a</samp>’.  To include a ‘<samp>-</samp>’,
write ‘<samp>-</samp>’ as the last character of the set, tho you can also put it first
or after a range.  Thus, ‘<samp>[]-]</samp>’ matches both ‘<samp>]</samp>’ and ‘<samp>-</samp>’.

</p>
<p>To include ‘<samp>^</samp>’ in a set, put it anywhere but at the beginning of
the set.  (At the beginning, it complements the set—see below.)

</p>
<p>When you use a range in case-insensitive search, you should write both
ends of the range in upper case, or both in lower case, or both should
be non-letters.  The behavior of a mixed-case range such as ‘<samp>A-z</samp>’
is somewhat ill-defined, and it may change in future Emacs versions.

</p>
</dd>
<dt><kbd>[^ … ]</kbd></dt>
<dd><p>‘<samp>[^</samp>’ begins a <em>complemented character set</em>, which matches any
character except the ones specified.  Thus, ‘<samp>[^a-z0-9A-Z]</samp>’ matches
all characters <em>except</em> <acronym>ASCII</acronym> letters and digits.

</p>
<p>‘<samp>^</samp>’ is not special in a character set unless it is the first
character.  The character following the ‘<samp>^</samp>’ is treated as if it
were first (in other words, ‘<samp>-</samp>’ and ‘<samp>]</samp>’ are not special there).

</p>
<p>A complemented character set can match a newline, unless newline is
mentioned as one of the characters not to match.  This is in contrast to
the handling of regexps in programs such as <code>grep</code>.

</p>
</dd>
<dt><kbd>^</kbd></dt>
<dd><p>is a special character that matches the empty string, but only at the
beginning of a line in the text being matched.  Otherwise it fails to
match anything.  Thus, ‘<samp>^foo</samp>’ matches a ‘<samp>foo</samp>’ that occurs at
the beginning of a line.

</p>
<p>For historical compatibility reasons, ‘<samp>^</samp>’ can be used with this
meaning only at the beginning of the regular expression, or after
‘<samp>\(</samp>’ or ‘<samp>\|</samp>’.

</p>
</dd>
<dt><kbd>$</kbd></dt>
<dd><p>is similar to ‘<samp>^</samp>’ but matches only at the end of a line.  Thus,
‘<samp>x+$</samp>’ matches a string of one ‘<samp>x</samp>’ or more at the end of a line.

</p>
<p>For historical compatibility reasons, ‘<samp>$</samp>’ can be used with this
meaning only at the end of the regular expression, or before ‘<samp>\)</samp>’
or ‘<samp>\|</samp>’.

</p>
</dd>
<dt><kbd>\</kbd></dt>
<dd><p>has two functions: it quotes the special characters (including
‘<samp>\</samp>’), and it introduces additional special constructs.

</p>
<p>Because ‘<samp>\</samp>’ quotes special characters, ‘<samp>\$</samp>’ is a regular
expression that matches only ‘<samp>$</samp>’, and ‘<samp>\[</samp>’ is a regular
expression that matches only ‘<samp>[</samp>’, and so on.

</p>
<p>See the following section for the special constructs that begin
with ‘<samp>\</samp>’.

</p></dd>
</dl>

<p>Note: for historical compatibility, special characters are treated as
ordinary ones if they are in contexts where their special meanings make no
sense.  For example, ‘<samp>*foo</samp>’ treats ‘<samp>*</samp>’ as ordinary since there is
no preceding expression on which the ‘<samp>*</samp>’ can act.  It is poor practice
to depend on this behavior; it is better to quote the special character anyway,
regardless of where it appears.

</p>
<p>As a ‘<samp>\</samp>’ is not special inside a character alternative, it can
never remove the special meaning of ‘<samp>-</samp>’ or ‘<samp>]</samp>’.  So you
should not quote these characters when they have no special meaning
either.  This would not clarify anything, since backslashes can
legitimately precede these characters where they <em>have</em> special
meaning, as in ‘<samp>[^\]</samp>’ (<code>"[^\\]"</code> for Lisp string syntax),
which matches any single character except a backslash.

</p>

<a name="Regexp-Backslash"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Regexp-Example" accesskey="n" rel="next">Regexp Example</a>, Previous: <a href="#Regexps" accesskey="p" rel="prev">Regexps</a>, Up: <a href="#Search" accesskey="u" rel="up">Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Backslash-in-Regular-Expressions"></a>
<h3 class="section">15.7Backslash in Regular Expressions</h3>

<p>For the most part, ‘<samp>\</samp>’ followed by any character matches only
that character.  However, there are several exceptions: two-character
sequences starting with ‘<samp>\</samp>’ that have special meanings.  The
second character in the sequence is always an ordinary character when
used on its own.  Here is a table of ‘<samp>\</samp>’ constructs.

</p>
<dl compact="compact">
<dt><kbd>\|</kbd></dt>
<dd><p>specifies an alternative.  Two regular expressions <var>a</var> and <var>b</var>
with ‘<samp>\|</samp>’ in between form an expression that matches some text if
either <var>a</var> matches it or <var>b</var> matches it.  It works by trying to
match <var>a</var>, and if that fails, by trying to match <var>b</var>.

</p>
<p>Thus, ‘<samp>foo\|bar</samp>’ matches either ‘<samp>foo</samp>’ or ‘<samp>bar</samp>’
but no other string.

</p>
<p>‘<samp>\|</samp>’ applies to the largest possible surrounding expressions.  Only a
surrounding ‘<samp>\( … \)</samp>’ grouping can limit the grouping power of
‘<samp>\|</samp>’.

</p>
<p>Full backtracking capability exists to handle multiple uses of ‘<samp>\|</samp>’.

</p>
</dd>
<dt><kbd>\( … \)</kbd></dt>
<dd><p>is a grouping construct that serves three purposes:

</p>
<ol>
<li>  To enclose a set of ‘<samp>\|</samp>’ alternatives for other operations.
Thus, ‘<samp>\(foo\|bar\)x</samp>’ matches either ‘<samp>foox</samp>’ or ‘<samp>barx</samp>’.



</li><li>  To enclose a complicated expression for the postfix operators ‘<samp>*</samp>’,
‘<samp>+</samp>’ and ‘<samp>?</samp>’ to operate on.  Thus, ‘<samp>ba\(na\)*</samp>’ matches
‘<samp>bananana</samp>’, etc., with any (zero or more) number of ‘<samp>na</samp>’
strings.



</li><li>  To record a matched substring for future reference.

</li></ol>

<p>This last application is not a consequence of the idea of a
parenthetical grouping; it is a separate feature that is assigned as a
second meaning to the same ‘<samp>\(&nbsp;…&nbsp;\)</samp>’<!-- /@w -->  construct.  In practice
there is usually no conflict between the two meanings; when there is
a conflict, you can use a shy group, described below.

</p>
</dd>
<dt><kbd>\(?: … \)</kbd></dt>
<dd><a name="index-shy-group_002c-in-regexp"></a>
<p>specifies a <em>shy group</em> that does not record the matched substring;
you can’t refer back to it with ‘<samp>\<var>d</var></samp>’ (see below).  This is
useful in mechanically combining regular expressions, so that you can
add groups for syntactic purposes without interfering with the
numbering of the groups that are meant to be referred to.

</p>
</dd>
<dt><kbd>\<var>d</var></kbd></dt>
<dd><a name="index-back-reference_002c-in-regexp"></a>
<p>matches the same text that matched the <var>d</var>th occurrence of a
‘<samp>\( … \)</samp>’ construct.  This is called a <em>back
reference</em>.

</p>
<p>After the end of a ‘<samp>\( … \)</samp>’ construct, the matcher remembers
the beginning and end of the text matched by that construct.  Then,
later on in the regular expression, you can use ‘<samp>\</samp>’ followed by the
digit <var>d</var> to mean “match the same text matched the <var>d</var>th time
by the ‘<samp>\( … \)</samp>’ construct”.

</p>
<p>The strings matching the first nine ‘<samp>\( … \)</samp>’ constructs
appearing in a regular expression are assigned numbers 1 through 9 in
the order that the open-parentheses appear in the regular expression.
So you can use ‘<samp>\1</samp>’ through ‘<samp>\9</samp>’ to refer to the text matched
by the corresponding ‘<samp>\( … \)</samp>’ constructs.

</p>
<p>For example, ‘<samp>\(.*\)\1</samp>’ matches any newline-free string that is
composed of two identical halves.  The ‘<samp>\(.*\)</samp>’ matches the first
half, which may be anything, but the ‘<samp>\1</samp>’ that follows must match
the same exact text.

</p>
<p>If a particular ‘<samp>\( … \)</samp>’ construct matches more than once
(which can easily happen if it is followed by ‘<samp>*</samp>’), only the last
match is recorded.

</p>
</dd>
<dt><kbd>\`</kbd></dt>
<dd><p>matches the empty string, but only at the beginning of the string or
buffer (or its accessible portion) being matched against.

</p>
</dd>
<dt><kbd>\'</kbd></dt>
<dd><p>matches the empty string, but only at the end of the string or buffer
(or its accessible portion) being matched against.

</p>
</dd>
<dt><kbd>\=</kbd></dt>
<dd><p>matches the empty string, but only at point.

</p>
</dd>
<dt><kbd>\b</kbd></dt>
<dd><p>matches the empty string, but only at the beginning or
end of a word.  Thus, ‘<samp>\bfoo\b</samp>’ matches any occurrence of
‘<samp>foo</samp>’ as a separate word.  ‘<samp>\bballs?\b</samp>’ matches
‘<samp>ball</samp>’ or ‘<samp>balls</samp>’ as a separate word.

</p>
<p>‘<samp>\b</samp>’ matches at the beginning or end of the buffer
regardless of what text appears next to it.

</p>
</dd>
<dt><kbd>\B</kbd></dt>
<dd><p>matches the empty string, but <em>not</em> at the beginning or
end of a word.

</p>
</dd>
<dt><kbd>\&lt;</kbd></dt>
<dd><p>matches the empty string, but only at the beginning of a word.
‘<samp>\&lt;</samp>’ matches at the beginning of the buffer only if a
word-constituent character follows.

</p>
</dd>
<dt><kbd>\&gt;</kbd></dt>
<dd><p>matches the empty string, but only at the end of a word.  ‘<samp>\&gt;</samp>’
matches at the end of the buffer only if the contents end with a
word-constituent character.

</p>
</dd>
<dt><kbd>\w</kbd></dt>
<dd><p>matches any word-constituent character.  The syntax table determines
which characters these are.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Syntax-Tables">Syntax Tables</a> in <cite>The Emacs Lisp Reference Manual</cite>.

</p>
</dd>
<dt><kbd>\W</kbd></dt>
<dd><p>matches any character that is not a word-constituent.

</p>
</dd>
<dt><kbd>\_&lt;</kbd></dt>
<dd><p>matches the empty string, but only at the beginning of a symbol.
A symbol is a sequence of one or more symbol-constituent characters.
A symbol-constituent character is a character whose syntax is either
‘<samp>w</samp>’ or ‘<samp>_</samp>’.  ‘<samp>\_&lt;</samp>’ matches at the beginning of the
buffer only if a symbol-constituent character follows.  As with words,
the syntax table determines which characters are symbol-constituent.

</p>
</dd>
<dt><kbd>\_&gt;</kbd></dt>
<dd><p>matches the empty string, but only at the end of a symbol.  ‘<samp>\_&gt;</samp>’
matches at the end of the buffer only if the contents end with a
symbol-constituent character.

</p>
</dd>
<dt><kbd>\s<var>c</var></kbd></dt>
<dd><p>matches any character whose syntax is <var>c</var>.  Here <var>c</var> is a
character that designates a particular syntax class: thus, ‘<samp>w</samp>’
for word constituent, ‘<samp>-</samp>’ or ‘<samp> </samp>’ for whitespace, ‘<samp>.</samp>’
for ordinary punctuation, etc.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Syntax-Class-Table">Syntax Class Table</a> in <cite>The Emacs Lisp Reference Manual</cite>.

</p>
</dd>
<dt><kbd>\S<var>c</var></kbd></dt>
<dd><p>matches any character whose syntax is not <var>c</var>.

</p>
<a name="index-categories-of-characters"></a>
<a name="index-characters-which-belong-to-a-specific-language"></a>
<a name="index-describe_002dcategories"></a>
</dd>
<dt><kbd>\c<var>c</var></kbd></dt>
<dd><p>matches any character that belongs to the category <var>c</var>.  For
example, ‘<samp>\cc</samp>’ matches Chinese characters, ‘<samp>\cg</samp>’ matches
Greek characters, etc.  For the description of the known categories,
type <kbd>M-x describe-categories <span class="key">RET</span></kbd>.

</p>
</dd>
<dt><kbd>\C<var>c</var></kbd></dt>
<dd><p>matches any character that does <em>not</em> belong to category
<var>c</var>.

</p></dd>
</dl>

<p>The constructs that pertain to words and syntax are controlled by
the setting of the syntax table.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Syntax-Tables">Syntax Tables</a> in <cite>The Emacs Lisp Reference Manual</cite>.

</p>

<a name="Regexp-Example"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Lax-Search" accesskey="n" rel="next">Lax Search</a>, Previous: <a href="#Regexp-Backslash" accesskey="p" rel="prev">Regexp Backslash</a>, Up: <a href="#Search" accesskey="u" rel="up">Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Regular-Expression-Example"></a>
<h3 class="section">15.8Regular Expression Example</h3>

<p>Here is an example of a regexp—similar to the regexp that Emacs
uses, by default, to recognize the end of a sentence, not including
the following space (i.e., the variable <code>sentence-end-base</code>):

</p>
<div class="example">
<pre class="verbatim">[.?!][]\"')}]*
</pre></div>

<p>This contains two parts in succession: a character set matching
period, ‘<samp>?</samp>’, or ‘<samp>!</samp>’, and a character set matching
close-brackets, quotes, or parentheses, repeated zero or more times.

</p>

<a name="Lax-Search"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Replace" accesskey="n" rel="next">Replace</a>, Previous: <a href="#Regexp-Example" accesskey="p" rel="prev">Regexp Example</a>, Up: <a href="#Search" accesskey="u" rel="up">Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Lax-Matching-During-Searching"></a>
<h3 class="section">15.9Lax Matching During Searching</h3>

<a name="index-lax-search"></a>
<a name="index-character-equivalence-in-search"></a>
<p>Normally, you’d want search commands to disregard certain minor
differences between the search string you type and the text being
searched.  For example, sequences of whitespace characters of
different length are usually perceived as equivalent; letter-case
differences usually don’t matter; etc.  This is known as
<em>character equivalence</em>.

</p>
<p>This section describes the Emacs lax search features, and how to
tailor them to your needs.

</p>
<a name="index-lax-space-matching-in-search"></a>
<a name="index-M_002ds-SPC-_0028Incremental-search_0029"></a>
<a name="index-SPC-_0028Incremental-search_0029"></a>
<a name="index-isearch_002dtoggle_002dlax_002dwhitespace"></a>
<a name="index-search_002dwhitespace_002dregexp"></a>
<p>By default, search commands perform <em>lax space matching</em>:
each space, or sequence of spaces, matches any sequence of one or more
whitespace characters in the text.  (Incremental regexp search has a
separate default; see <a href="#Regexp-Search">Regexp Search</a>.)  Hence, ‘<samp>foo&nbsp;bar</samp>’<!-- /@w -->

matches ‘<samp>foo&nbsp;bar</samp>’<!-- /@w -->, ‘<samp>foo&nbsp;&nbsp;bar</samp>’<!-- /@w -->,
‘<samp>foo&nbsp;&nbsp;&nbsp;bar</samp>’<!-- /@w -->, and so on (but not ‘<samp>foobar</samp>’).  More
precisely, Emacs matches each sequence of space characters in the
search string to a regular expression specified by the variable
<code>search-whitespace-regexp</code>.  For example, to make spaces match
sequences of newlines as well as spaces, set it to
‘<samp>"[[:space:]\n]+"</samp>’.  The default value of this variable depends
on the buffer’s major mode; most major modes classify spaces, tabs,
and formfeed characters as whitespace.

</p>
<p>If you want whitespace characters to match exactly, you can turn lax
space matching off by typing <kbd>M-s <span class="key">SPC</span></kbd>
(<code>isearch-toggle-lax-whitespace</code>) within an incremental search.
Another <kbd>M-s <span class="key">SPC</span></kbd> turns lax space matching back on.  To
disable lax whitespace matching for all searches, change
<code>search-whitespace-regexp</code> to <code>nil</code>; then each space in the
search string matches exactly one space.

</p>
<a name="index-case-folding-in-search"></a>
<a name="index-case_002dsensitivity-and-search"></a>
<p>Searches in Emacs by default ignore the case of the text they are
searching through, if you specify the search string in lower case.
Thus, if you specify searching for ‘<samp>foo</samp>’, then ‘<samp>Foo</samp>’ and
‘<samp>fOO</samp>’ also match.  Regexps, and in particular character sets,
behave likewise: ‘<samp>[ab]</samp>’ matches ‘<samp>a</samp>’ or ‘<samp>A</samp>’ or ‘<samp>b</samp>’
or ‘<samp>B</samp>’.  This feature is known as <em>case folding</em>, and it is
supported in both incremental and non-incremental search modes.

</p>
<a name="index-search_002dupper_002dcase"></a>
<p>An upper-case letter anywhere in the search string makes the search
case-sensitive.  Thus, searching for ‘<samp>Foo</samp>’ does not find
‘<samp>foo</samp>’ or ‘<samp>FOO</samp>’.  This applies to regular expression search
as well as to literal string search.  The effect ceases if you delete
the upper-case letter from the search string.  The variable
<code>search-upper-case</code> controls this: if it is non-<code>nil</code>, an
upper-case character in the search string makes the search
case-sensitive; setting it to <code>nil</code> disables this effect of
upper-case characters.  The default value of this variable is
<code>not-yanks</code>, which makes search case-sensitive if there are
upper-case letters in the search string, and also causes text yanked
into the search string (see <a href="#Isearch-Yank">Isearch Yank</a>) to be down-cased, so
that such searches are case-insensitive by default.

</p>
<a name="index-case_002dfold_002dsearch"></a>
<p>If you set the variable <code>case-fold-search</code> to <code>nil</code>, then
all letters must match exactly, including case.  This is a per-buffer
variable; altering the variable normally affects only the current buffer,
unless you change its default value.  See <a href="#Locals">Locals</a>.
This variable applies to nonincremental searches also, including those
performed by the replace commands (see <a href="#Replace">Replace</a>) and the minibuffer
history matching commands (see <a href="#Minibuffer-History">Minibuffer History</a>).

</p>
<a name="index-M_002dc-_0028Incremental-search_0029"></a>
<a name="index-M_002ds-c-_0028Incremental-search_0029"></a>
<a name="index-isearch_002dtoggle_002dcase_002dfold"></a>
<p>Typing <kbd>M-c</kbd> or <kbd>M-s c</kbd> (<code>isearch-toggle-case-fold</code>)
within an incremental search toggles the case sensitivity of that
search.  The effect does not extend beyond the current incremental
search, but it does override the effect of adding or removing an
upper-case letter in the current search.

</p>
<p>Several related variables control case-sensitivity of searching and
matching for specific commands or activities.  For instance,
<code>tags-case-fold-search</code> controls case sensitivity for
<code>find-tag</code>.  To find these variables, do <kbd>M-x
apropos-variable <span class="key">RET</span> case-fold-search <span class="key">RET</span></kbd>.

</p>
<a name="index-character-folding-in-search"></a>
<a name="index-equivalent-character-sequences"></a>
<p>Case folding disregards case distinctions among characters, making
upper-case characters match lower-case variants, and vice versa.  A
generalization of case folding is <em>character folding</em>, which
disregards wider classes of distinctions among similar characters.
For instance, under character folding the letter <code>a</code> matches all
of its accented cousins like <code>ä</code> and <code>á</code>, i.e., the
match disregards the diacritics that distinguish these
variants.  In addition, <code>a</code> matches other characters that
resemble it, or have it as part of their graphical representation,
such as U+249C <small>PARENTHESIZED LATIN SMALL LETTER A</small> and U+2100
<small>ACCOUNT OF</small> (which looks like a small <code>a</code> over <code>c</code>).
Similarly, the <acronym>ASCII</acronym> double-quote character <code>"</code> matches
all the other variants of double quotes defined by the Unicode
standard.  Finally, character folding can make a sequence of one or
more characters match another sequence of a different length: for
example, the sequence of two characters <code>ff</code> matches U+FB00
<small>LATIN SMALL LIGATURE FF</small>.  Character sequences that are not identical,
but match under character folding are known as <em>equivalent
character sequences</em>.

</p>
<a name="index-M_002ds-_0027-_0028Incremental-Search_0029"></a>
<a name="index-isearch_002dtoggle_002dchar_002dfold"></a>
<p>Generally, search commands in Emacs do not by default perform
character folding in order to match equivalent character sequences.
You can enable this behavior by customizing the variable
<code>search-default-mode</code> to <code>char-fold-to-regexp</code>.
See <a href="#Search-Customizations">Search Customizations</a>.  Within an incremental search, typing
<kbd>M-s '</kbd> (<code>isearch-toggle-char-fold</code>) toggles character
folding, but only for that search.  (Replace commands have a different
default, controlled by a separate option; see <a href="#Replacement-and-Lax-Matches">Replacement and Lax Matches</a>.)

</p>
<a name="index-char_002dfold_002dsymmetric"></a>
<p>By default, typing an explicit variant of a character, such as
<code>ä</code>, as part of the search string doesn’t match its base
character, such as <code>a</code>.  But if you customize the variable
<code>char-fold-symmetric</code> to <code>t</code>, then search commands treat
equivalent characters the same and use of any of a set of equivalent
characters in a search string finds any of them in the text being
searched, so typing an accented character <code>ä</code> matches the
letter <code>a</code> as well as all the other variants like <code>á</code>.

</p>
<a name="index-char_002dfold_002dinclude"></a>
<a name="index-char_002dfold_002dexclude"></a>
<p>You can add new foldings using the customizable variable
<code>char-fold-include</code>, or remove the existing ones using the
customizable variable <code>char-fold-exclude</code>.

</p>

<a name="Replace"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Other-Repeating-Search" accesskey="n" rel="next">Other Repeating Search</a>, Previous: <a href="#Lax-Search" accesskey="p" rel="prev">Lax Search</a>, Up: <a href="#Search" accesskey="u" rel="up">Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Replacement-Commands"></a>
<h3 class="section">15.10Replacement Commands</h3>
<a name="index-replacement"></a>
<a name="index-search_002dand_002dreplace-commands"></a>
<a name="index-string-substitution"></a>
<a name="index-global-substitution"></a>

<p>Emacs provides several commands for performing search-and-replace
operations.  In addition to the simple <kbd>M-x replace-string</kbd>
command, there is <kbd>M-%</kbd> (<code>query-replace</code>), which presents
each occurrence of the search pattern and asks you whether to replace
it.

</p>
<p>The replace commands normally operate on the text from point to the
end of the buffer.  When the region is active, they operate on it
instead (see <a href="#Mark">Mark</a>).  The basic replace commands replace one
<em>search string</em> (or regexp) with one <em>replacement string</em>.  It
is possible to perform several replacements in parallel, using the
command <code>expand-region-abbrevs</code> (see <a href="#Expanding-Abbrevs">Expanding Abbrevs</a>).

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Unconditional-Replace" accesskey="1">Unconditional Replace</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Replacing all matches for a string.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Regexp-Replace" accesskey="2">Regexp Replace</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Replacing all matches for a regexp.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Replacement-and-Lax-Matches" accesskey="3">Replacement and Lax Matches</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">
                            
                            Lax searching for text to replace.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Query-Replace" accesskey="4">Query Replace</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to use querying.

</td></tr>
</tbody></table>


<a name="Unconditional-Replace"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Regexp-Replace" accesskey="n" rel="next">Regexp Replace</a>, Up: <a href="#Replace" accesskey="u" rel="up">Replace</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Unconditional-Replacement"></a>
<h4 class="subsection">15.10.1 Unconditional Replacement</h4>
<a name="index-replace_002dstring"></a>

<dl compact="compact">
<dt><kbd>M-x replace-string <span class="key">RET</span> <var>string</var> <span class="key">RET</span> <var>newstring</var> <span class="key">RET</span></kbd></dt>
<dd><p>Replace every occurrence of <var>string</var> with <var>newstring</var>.

</p></dd>
</dl>

<p>To replace every instance of ‘<samp>foo</samp>’ after point with ‘<samp>bar</samp>’,
use the command <kbd>M-x replace-string</kbd> with the two arguments
‘<samp>foo</samp>’ and ‘<samp>bar</samp>’.  Replacement happens only in the text after
point, so if you want to cover the whole buffer you must go to the
beginning first.  All occurrences up to the end of the buffer are
replaced; to limit replacement to part of the buffer, activate the
region around that part.  When the region is active, replacement is
limited to the region (see <a href="#Mark">Mark</a>).

</p>
<p>When <code>replace-string</code> exits, it leaves point at the last
occurrence replaced.  It adds the prior position of point (where the
<code>replace-string</code> command was issued) to the mark ring, without
activating the mark; use <kbd>C-u C-<span class="key">SPC</span></kbd> to move back there.
See <a href="#Mark-Ring">Mark Ring</a>.

</p>
<p>A prefix argument restricts replacement to matches that are
surrounded by word boundaries.

</p>
<p>See <a href="#Replacement-and-Lax-Matches">Replacement and Lax Matches</a>, for details about
case-sensitivity and character folding in replace commands.

</p>

<a name="Regexp-Replace"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Replacement-and-Lax-Matches" accesskey="n" rel="next">Replacement and Lax Matches</a>, Previous: <a href="#Unconditional-Replace" accesskey="p" rel="prev">Unconditional Replace</a>, Up: <a href="#Replace" accesskey="u" rel="up">Replace</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Regexp-Replacement"></a>
<h4 class="subsection">15.10.2 Regexp Replacement</h4>
<a name="index-replace_002dregexp"></a>

<p>The <kbd>M-x replace-string</kbd> command replaces exact matches for a
single string.  The similar command <kbd>M-x replace-regexp</kbd> replaces
any match for a specified regular expression pattern (see <a href="#Regexps">Regexps</a>).

</p>
<dl compact="compact">
<dt><kbd>M-x replace-regexp <span class="key">RET</span> <var>regexp</var> <span class="key">RET</span> <var>newstring</var> <span class="key">RET</span></kbd></dt>
<dd><p>Replace every match for <var>regexp</var> with <var>newstring</var>.

</p></dd>
</dl>

<a name="index-back-reference_002c-in-regexp-replacement"></a>
<p>In <code>replace-regexp</code>, the <var>newstring</var> need not be constant: it can refer to all or part of what is matched by the <var>regexp</var>. ‘<samp>\&amp;</samp>’ in <var>newstring</var> stands for the entire match being replaced. ‘<samp>\<var>d</var></samp>’ in <var>newstring</var>, where <var>d</var> is a digit starting from 1, stands for whatever matched the <var>d</var>th parenthesized grouping in <var>regexp</var>. (This is called a “back reference”.) ‘<samp>\#</samp>’ refers to the count of replacements already made in this command, as a decimal number. In the first replacement, ‘<samp>\#</samp>’ stands for ‘<samp>0</samp>’; in the second, for ‘<samp>1</samp>’; and so on. 例如,
</p>
<div class="example">
<pre class="example">M-x replace-regexp <span class="key">RET</span> c[ad]+r <span class="key">RET</span> \&amp;-safe <span class="key">RET</span>
</pre></div>

<p>replaces (for example) ‘<samp>cadr</samp>’ with ‘<samp>cadr-safe</samp>’ and ‘<samp>cddr</samp>’
with ‘<samp>cddr-safe</samp>’.

</p>
<div class="example">
<pre class="example">M-x replace-regexp <span class="key">RET</span> \(c[ad]+r\)-safe <span class="key">RET</span> \1 <span class="key">RET</span>
</pre></div>

<p>performs the inverse transformation.  To include a ‘<samp>\</samp>’ in the
text to replace with, you must enter ‘<samp>\\</samp>’.

</p>
<p>If you want to enter part of the replacement string by hand each
time, use ‘<samp>\?</samp>’ in the replacement string.  Each replacement will
ask you to edit the replacement string in the minibuffer, putting
point where the ‘<samp>\?</samp>’ was.

</p>
<p>The remainder of this subsection is intended for specialized tasks
and requires knowledge of Lisp.  Most readers can skip it.

</p>
<p>You can use Lisp expressions to calculate parts of the
replacement string.  To do this, write ‘<samp>\,</samp>’ followed by the
expression in the replacement string.  Each replacement calculates the
value of the expression and converts it to text without quoting (if
it’s a string, this means using the string’s contents), and uses it in
the replacement string in place of the expression itself.  If the
expression is a symbol, one space in the replacement string after the
symbol name goes with the symbol name, so the value replaces them
both.

</p>
<p>Inside such an expression, you can use some special sequences.
‘<samp>\&amp;</samp>’ and ‘<samp>\<var>d</var></samp>’ refer here, as usual, to the entire
match as a string, and to a submatch as a string.  <var>d</var> may be
multiple digits, and the value of ‘<samp>\<var>d</var></samp>’ is <code>nil</code> if the
<var>d</var>’th parenthesized grouping did not match.  You can also use
‘<samp>\#&amp;</samp>’ and ‘<samp>\#<var>d</var></samp>’ to refer to those matches as numbers
(this is valid when the match or submatch has the form of a numeral).
‘<samp>\#</samp>’ here too stands for the number of already-completed
replacements.

</p>
<p>For example, we can exchange ‘<samp>x</samp>’ and ‘<samp>y</samp>’ this way:

</p>
<div class="example">
<pre class="example">M-x replace-regexp <span class="key">RET</span> \(x\)\|y <span class="key">RET</span>
\,(if \1 "y" "x") <span class="key">RET</span>
</pre></div>

<p>For computing replacement strings for ‘<samp>\,</samp>’, the <code>format</code>
function is often useful (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Formatting-Strings">Formatting Strings</a> in <cite>The Emacs
Lisp Reference Manual</cite>).  For example, to add consecutively numbered
strings like ‘<samp>ABC00042</samp>’ to columns 73 to&nbsp;80<!-- /@w -->  (unless they are
already occupied), you can use

</p>
<div class="example">
<pre class="example">M-x replace-regexp <span class="key">RET</span> ^.\{0,72\}$ <span class="key">RET</span>
\,(format "%-72sABC%05d" \&amp; \#) <span class="key">RET</span>
</pre></div>


<a name="Replacement-and-Lax-Matches"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Query-Replace" accesskey="n" rel="next">Query Replace</a>, Previous: <a href="#Regexp-Replace" accesskey="p" rel="prev">Regexp Replace</a>, Up: <a href="#Replace" accesskey="u" rel="up">Replace</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Replace-Commands-and-Lax-Matches"></a>
<h4 class="subsection">15.10.3 Replace Commands and Lax Matches</h4>

<p>This subsection describes the behavior of replace commands with
respect to lax matches (see <a href="#Lax-Search">Lax Search</a>) and how to customize it.
In general, replace commands mostly default to stricter matching than
their search counterparts.

</p>
<a name="index-lax-space-matching-in-replace-commands"></a>
<a name="index-replace_002dlax_002dwhitespace"></a>
<p>Unlike incremental search, the replacement commands do not use lax
space matching (see <a href="#Lax-Search">lax space matching</a>) by default.
To enable lax space matching for replacement, change the variable
<code>replace-lax-whitespace</code> to non-<code>nil</code>.  (This only affects
how Emacs finds the text to replace, not the replacement text.)

</p>
<a name="index-replace_002dregexp_002dlax_002dwhitespace"></a>
<p>A companion variable <code>replace-regexp-lax-whitespace</code> controls
whether <code>query-replace-regexp</code> uses lax whitespace matching when
searching for patterns.

</p>
<a name="index-case-folding-in-replace-commands"></a>
<p>If the first argument of a replace command is all lower case, the
command ignores case while searching for occurrences to
replace—provided <code>case-fold-search</code> is non-<code>nil</code> and
<code>search-upper-case</code> is also non-<code>nil</code>.  If
<code>search-upper-case</code> (see <a href="#Lax-Search">search-upper-case</a>) is
<code>nil</code>, whether searching ignores case is determined by
<code>case-fold-search</code> alone, regardless of letter-case of the
command’s first argument.  If <code>case-fold-search</code> is set to
<code>nil</code>, case is always significant in all searches.

</p>
<a name="index-case_002dreplace"></a>
<p>In addition, when the <var>newstring</var> argument is all or partly lower
case, replacement commands try to preserve the case pattern of each
occurrence.  Thus, the command

</p>
<div class="example">
<pre class="example">M-x replace-string <span class="key">RET</span> foo <span class="key">RET</span> bar <span class="key">RET</span>
</pre></div>

<p>replaces a lower case ‘<samp>foo</samp>’ with a lower case ‘<samp>bar</samp>’, an
all-caps ‘<samp>FOO</samp>’ with ‘<samp>BAR</samp>’, and a capitalized ‘<samp>Foo</samp>’ with
‘<samp>Bar</samp>’.  (These three alternatives—lower case, all caps, and
capitalized, are the only ones that <code>replace-string</code> can
distinguish.)

</p>
<p>If upper-case letters are used in the replacement string, they remain
upper case every time that text is inserted.  If upper-case letters are
used in the first argument, the second argument is always substituted
exactly as given, with no case conversion.  Likewise, if either
<code>case-replace</code> or <code>case-fold-search</code> is set to <code>nil</code>,
replacement is done without case conversion.

</p>
<a name="index-character-folding-in-replace-commands"></a>
<p>The replacement commands by default do not use character folding
(see <a href="#Lax-Search">character folding</a>) when looking for the text to
replace.  To enable character folding for matching in
<code>query-replace</code> and <code>replace-string</code>, set the variable
<code>replace-char-fold</code> to a non-<code>nil</code> value.  (This
setting does not affect the replacement text, only how Emacs finds the
text to replace.  It also doesn’t affect <code>replace-regexp</code>.)

</p>

<a name="Query-Replace"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Replacement-and-Lax-Matches" accesskey="p" rel="prev">Replacement and Lax Matches</a>, Up: <a href="#Replace" accesskey="u" rel="up">Replace</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Query-Replace-1"></a>
<h4 class="subsection">15.10.4 Query Replace</h4>
<a name="index-query-replace"></a>

<dl compact="compact">
<dt><kbd>M-% <var>string</var> <span class="key">RET</span> <var>newstring</var> <span class="key">RET</span></kbd></dt>
<dd><p>Replace some occurrences of <var>string</var> with <var>newstring</var>.

</p></dd>
<dt><kbd>C-M-% <var>regexp</var> <span class="key">RET</span> <var>newstring</var> <span class="key">RET</span></kbd></dt>
<dd><p>Replace some matches for <var>regexp</var> with <var>newstring</var>.

</p></dd>
</dl>

<a name="index-M_002d_0025"></a>
<a name="index-query_002dreplace"></a>
<p>If you want to change only some of the occurrences of ‘<samp>foo</samp>’ to
‘<samp>bar</samp>’, not all of them, use <kbd>M-%</kbd> (<code>query-replace</code>).
This command finds occurrences of ‘<samp>foo</samp>’ one by one, displays each
occurrence and asks you whether to replace it.  Aside from querying,
<code>query-replace</code> works just like <code>replace-string</code>
(see <a href="#Unconditional-Replace">Unconditional Replace</a>).  In particular, it preserves case
provided <code>case-replace</code> is non-<code>nil</code>, as it normally is
(see <a href="#Replacement-and-Lax-Matches">Replacement and Lax Matches</a>).  A numeric argument means to
consider only occurrences that are bounded by word-delimiter
characters.  A negative prefix argument replaces backward.

</p>
<a name="index-C_002dM_002d_0025"></a>
<a name="index-query_002dreplace_002dregexp"></a>
<p><kbd>C-M-%</kbd> performs regexp search and replace (<code>query-replace-regexp</code>).
It works like <code>replace-regexp</code> except that it queries
like <code>query-replace</code>.

</p>
<a name="index-query_002dreplace_002dfrom_002dto_002dseparator"></a>
<p>You can reuse earlier replacements with these commands.  When
<code>query-replace</code> or <code>query-replace-regexp</code> prompts for the
search string, use <kbd>M-p</kbd> and <kbd>M-n</kbd> to show previous
replacements in the form ‘<samp><var>from</var> -&gt; <var>to</var></samp>’, where
<var>from</var> is the search pattern, <var>to</var> is its replacement, and the
separator between them is determined by the value of the variable
<code>query-replace-from-to-separator</code>.  Type <tt class="key">RET</tt> to select the
desired replacement.  If the value of this variable is <code>nil</code>,
replacements are not added to the command history, and cannot be
reused.

</p>
<a name="index-faces-for-highlighting-query-replace"></a>
<a name="index-query_002dreplace-face"></a>
<a name="index-lazy_002dhighlight-face_002c-in-replace"></a>
<a name="index-query_002dreplace_002dhighlight"></a>
<a name="index-query_002dreplace_002dlazy_002dhighlight"></a>
<a name="index-query_002dreplace_002dshow_002dreplacement"></a>
<p>These commands highlight the current match using the face
<code>query-replace</code>.  You can disable this highlight by setting the
variable <code>query-replace-highlight</code> to <code>nil</code>.  They highlight
other matches using <code>lazy-highlight</code> just like incremental search
(see <a href="#Incremental-Search">Incremental Search</a>); this can be disabled by setting
<code>query-replace-lazy-highlight</code> to <code>nil</code>.  By default,
<code>query-replace-regexp</code> will show the substituted replacement
string for the current match in the minibuffer.  If you want to keep
special sequences ‘<samp>\&amp;</samp>’ and ‘<samp>\<var>n</var></samp>’ unexpanded, customize
<code>query-replace-show-replacement</code> variable.

</p>
<a name="index-query_002dreplace_002dskip_002dread_002donly"></a>
<p>The variable <code>query-replace-skip-read-only</code>, if set
non-<code>nil</code>, will cause replacement commands to ignore matches in
read-only text.  The default is not to ignore them.

</p>
<p>The characters you can type when you are shown a match for the string
or regexp are:

</p>

<dl compact="compact">
<dt><kbd><span class="key">SPC</span></kbd></dt>
<dt><kbd>y</kbd></dt>
<dd><p>to replace the occurrence with <var>newstring</var>.

</p>
</dd>
<dt><kbd><span class="key">DEL</span></kbd></dt>
<dt><kbd><span class="key">Delete</span></kbd></dt>
<dt><kbd><span class="key">BACKSPACE</span></kbd></dt>
<dt><kbd>n</kbd></dt>
<dd><p>to skip to the next occurrence without replacing this one.

</p>
</dd>
<dt><kbd>, <span class="roman">(Comma)</span></kbd></dt>
<dd><p>to replace this occurrence and display the result.  You are then asked
for another input character to say what to do next.  Since the
replacement has already been made, <tt class="key">DEL</tt> and <tt class="key">SPC</tt> are
equivalent in this situation; both move to the next occurrence.

</p>
<p>You can type <kbd>C-r</kbd> at this point (see below) to alter the replaced
text.  You can also undo the replacement with the <code>undo</code> command
(e.g., type <kbd>C-x u</kbd>; see <a href="#Undo">Undo</a>); this exits the
<code>query-replace</code>, so if you want to do further replacement you
must use <kbd>C-x <span class="key">ESC</span> <span class="key">ESC</span> <span class="key">RET</span></kbd> to restart
(see <a href="#Repetition">Repetition</a>).

</p>
</dd>
<dt><kbd><span class="key">RET</span></kbd></dt>
<dt><kbd>q</kbd></dt>
<dd><p>to exit without doing any more replacements.

</p>
</dd>
<dt><kbd>. <span class="roman">(Period)</span></kbd></dt>
<dd><p>to replace this occurrence and then exit without searching for more
occurrences.

</p>
</dd>
<dt><kbd>!</kbd></dt>
<dd><p>to replace all remaining occurrences without asking again.

</p>
</dd>
<dt><kbd>^</kbd></dt>
<dd><p>to go back to the position of the previous occurrence (or what used to
be an occurrence), in case you changed it by mistake or want to
reexamine it.

</p>
</dd>
<dt><kbd>u</kbd></dt>
<dd><p>to undo the last replacement and go back to where that replacement was
made.

</p>
</dd>
<dt><kbd>U</kbd></dt>
<dd><p>to undo all the replacements and go back to where the first
replacement was made.

</p>
</dd>
<dt><kbd>C-r</kbd></dt>
<dd><p>to enter a recursive editing level, in case the occurrence needs to be
edited rather than just replaced with <var>newstring</var>.  When you are
done, exit the recursive editing level with <kbd>C-M-c</kbd> to proceed to
the next occurrence.  See <a href="#Recursive-Edit">Recursive Edit</a>.

</p>
</dd>
<dt><kbd>C-w</kbd></dt>
<dd><p>to delete the occurrence, and then enter a recursive editing level as in
<kbd>C-r</kbd>.  Use the recursive edit to insert text to replace the deleted
occurrence of <var>string</var>.  When done, exit the recursive editing level
with <kbd>C-M-c</kbd> to proceed to the next occurrence.

</p>
</dd>
<dt><kbd>e</kbd></dt>
<dd><p>to edit the replacement string in the minibuffer.  When you exit the
minibuffer by typing <tt class="key">RET</tt>, the minibuffer contents replace the
current occurrence of the pattern.  They also become the new
replacement string for any further occurrences.

</p>
</dd>
<dt><kbd>C-l</kbd></dt>
<dd><p>to redisplay the screen.  Then you must type another character to
specify what to do with this occurrence.

</p>
</dd>
<dt><kbd>Y <span class="roman">(Upper-case)</span></kbd></dt>
<dd><p>to replace all remaining occurrences in all remaining buffers in
multi-buffer replacements (like the Dired <kbd>Q</kbd> command that performs
query replace on selected files).  It answers this question and all
subsequent questions in the series with “yes”, without further
user interaction.

</p>
</dd>
<dt><kbd>N <span class="roman">(Upper-case)</span></kbd></dt>
<dd><p>to skip to the next buffer in multi-buffer replacements without
replacing remaining occurrences in the current buffer.  It answers
this question “no”, gives up on the questions for the current buffer,
and continues to the next buffer in the sequence.

</p>
</dd>
<dt><kbd>C-h</kbd></dt>
<dt><kbd>?</kbd></dt>
<dt><kbd><span class="key">F1</span></kbd></dt>
<dd><p>to display a message summarizing these options.  Then you must type
another character to specify what to do with this occurrence.

</p></dd>
</dl>

<p>Aside from this, any other character exits the <code>query-replace</code>,
and is then reread as part of a key sequence.  Thus, if you type
<kbd>C-k</kbd>, it exits the <code>query-replace</code> and then kills to end of
line.  In particular, <kbd>C-g</kbd> simply exits the <code>query-replace</code>.

</p>
<p>To restart a <code>query-replace</code> once it is exited, use <kbd>C-x
<span class="key">ESC</span> <span class="key">ESC</span></kbd>, which repeats the <code>query-replace</code> because it
used the minibuffer to read its arguments.  See <a href="#Repetition">C-x <tt class="key">ESC</tt>
<tt class="key">ESC</tt></a>.

</p>
<a name="index-invisible-text_002c-and-query_002dreplace"></a>
<p>The option <code>search-invisible</code> determines how <code>query-replace</code>
treats invisible text.  See <a href="#Outline-Search">Outline Search</a>.

</p>
<p>See <a href="#Operating-on-Files">Operating on Files</a>, for the Dired <kbd>Q</kbd> command which
performs query replace on selected files.  See also <a href="#Transforming-File-Names">Transforming File Names</a>, for Dired commands to rename, copy, or link files by
replacing regexp matches in file names.

</p>

<a name="Other-Repeating-Search"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Search-Customizations" accesskey="n" rel="next">Search Customizations</a>, Previous: <a href="#Replace" accesskey="p" rel="prev">Replace</a>, Up: <a href="#Search" accesskey="u" rel="up">Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Other-Search_002dand_002dLoop-Commands"></a>
<h3 class="section">15.11Other Search-and-Loop Commands</h3>

<p>Here are some other commands that find matches for a regular
expression.  They all ignore case in matching, if the pattern contains
no upper-case letters and <code>case-fold-search</code> is non-<code>nil</code>.
Aside from <code>multi-occur</code> and <code>multi-occur-in-matching-buffers</code>,
which always search the whole buffer, all operate on the text from point
to the end of the buffer, or on the region if it is active.

</p>
<dl compact="compact">
<dd><a name="index-multi_002disearch_002dbuffers"></a>
<a name="index-isearch-multiple-buffers"></a>
<a name="index-multiple_002dbuffer-isearch"></a>
</dd>
<dt><kbd>M-x multi-isearch-buffers</kbd></dt>
<dd><p>Prompt for one or more buffer names, ending with <tt class="key">RET</tt>; then,
begin a multi-buffer incremental search in those buffers.  (If the
search fails in one buffer, the next <kbd>C-s</kbd> tries searching the
next specified buffer, and so forth.)  With a prefix argument, prompt
for a regexp and begin a multi-buffer incremental search in buffers
matching that regexp.

</p>
<a name="index-multi_002disearch_002dbuffers_002dregexp"></a>
</dd>
<dt><kbd>M-x multi-isearch-buffers-regexp</kbd></dt>
<dd><p>This command is just like <code>multi-isearch-buffers</code>, except it
performs an incremental regexp search.

</p>
<a name="index-multi_002disearch_002dfiles"></a>
<a name="index-isearch-multiple-files"></a>
<a name="index-multiple_002dfile-isearch"></a>
</dd>
<dt><kbd>M-x multi-isearch-files</kbd></dt>
<dd><p>Prompt for one or more file names, ending with <tt class="key">RET</tt>; then,
begin a multi-file incremental search in those files.  (If the
search fails in one file, the next <kbd>C-s</kbd> tries searching the
next specified file, and so forth.)  With a prefix argument, prompt
for a regexp and begin a multi-file incremental search in files
matching that regexp.

</p>
<a name="index-multi_002disearch_002dfiles_002dregexp"></a>
</dd>
<dt><kbd>M-x multi-isearch-files-regexp</kbd></dt>
<dd><p>This command is just like <code>multi-isearch-files</code>, except it
performs an incremental regexp search.

</p>
<p>In some modes that set the buffer-local variable
<code>multi-isearch-next-buffer-function</code> (e.g., in Change Log mode)
a multi-file incremental search is activated automatically.

</p>
<a name="index-Occur-mode"></a>
<a name="index-mode_002c-Occur"></a>
<a name="index-match-_0028face-name_0029"></a>
<a name="index-list_002dmatching_002dlines_002ddefault_002dcontext_002dlines"></a>
<a name="index-list_002dmatching_002dlines_002djump_002dto_002dcurrent_002dline"></a>
<a name="index-M_002ds-o"></a>
<a name="index-occur"></a>
</dd>
<dt><kbd>M-x occur</kbd></dt>
<dt><kbd>M-s o</kbd></dt>
<dd><p>Prompt for a regexp, and display a list showing each line in the
buffer that contains a match for it.  If you type <kbd>M-n</kbd> at the
prompt, you can reuse search strings from previous incremental
searches.  The text that matched is highlighted using the <code>match</code>
face.  A numeric argument <var>n</var> specifies that <var>n</var> lines of
context are to be displayed before and after each matching line.

</p>
<p>The default number of context lines is specified by the variable
<code>list-matching-lines-default-context-lines</code>.  When
<code>list-matching-lines-jump-to-current-line</code> is non-<code>nil</code> the
current line is shown highlighted with face
<code>list-matching-lines-current-line-face</code> and the point is set at
the first match after such line.

</p>
<p>You can also run <kbd>M-s o</kbd> when an incremental search is active;
this uses the current search string.

</p>
<p>Note that matches for the regexp you type are extended to include
complete lines, and a match that starts before the previous match ends
is not considered a match.

</p>
<a name="index-RET-_0028Occur-mode_0029"></a>
<a name="index-o-_0028Occur-mode_0029"></a>
<a name="index-C_002do-_0028Occur-mode_0029"></a>
<p>In the <samp>*Occur*</samp> buffer, you can click on each entry, or move
point there and type <tt class="key">RET</tt>, to visit the corresponding position in
the buffer that was searched.  <kbd>o</kbd> and <kbd>C-o</kbd> display the match
in another window; <kbd>C-o</kbd> does not select it.  Alternatively, you
can use the <kbd>M-g M-n</kbd> (<code>next-error</code>) command to visit the
occurrences one by one (see <a href="#Compilation-Mode">Compilation Mode</a>).

</p>
<a name="index-Occur-Edit-mode"></a>
<a name="index-mode_002c-Occur-Edit"></a>
<p>Typing <kbd>e</kbd> in the <samp>*Occur*</samp> buffer switches to Occur Edit
mode, in which edits made to the entries are also applied to the text
in the originating buffer.  Type <kbd>C-c C-c</kbd> to return to Occur
mode.

</p>
<a name="index-list_002dmatching_002dlines"></a>
<p>The command <kbd>M-x list-matching-lines</kbd> is a synonym for <kbd>M-x
occur</kbd>.

</p>
<a name="index-multi_002doccur"></a>
</dd>
<dt><kbd>M-x multi-occur</kbd></dt>
<dd><p>This command is just like <code>occur</code>, except it is able to search
through multiple buffers.  It asks you to specify the buffer names one
by one.

</p>
<a name="index-multi_002doccur_002din_002dmatching_002dbuffers"></a>
</dd>
<dt><kbd>M-x multi-occur-in-matching-buffers</kbd></dt>
<dd><p>This command is similar to <code>multi-occur</code>, except the buffers to
search are specified by a regular expression that matches visited file
names.  With a prefix argument, it uses the regular expression to
match buffer names instead.

</p>
<a name="index-how_002dmany"></a>
</dd>
<dt><kbd>M-x how-many</kbd></dt>
<dd><p>Prompt for a regexp, and print the number of matches for it in the
buffer after point.  If the region is active, this operates on the
region instead.

</p>
<a name="index-flush_002dlines"></a>
</dd>
<dt><kbd>M-x flush-lines</kbd></dt>
<dd><p>Prompt for a regexp, and delete each line that contains a match for
it, operating on the text after point.  When the command finishes,
it prints the number of deleted matching lines.

</p>
<p>This command deletes the current line if it contains a match starting
after point.  If the region is active, it operates on the region
instead; if a line partially contained in the region contains a match
entirely contained in the region, it is deleted.

</p>
<p>If a match is split across lines, <code>flush-lines</code> deletes all those
lines.  It deletes the lines before starting to look for the next
match; hence, it ignores a match starting on the same line at which
another match ended.

</p>
<a name="index-keep_002dlines"></a>
</dd>
<dt><kbd>M-x keep-lines</kbd></dt>
<dd><p>Prompt for a regexp, and delete each line that <em>does not</em> contain
a match for it, operating on the text after point.  If point is not at
the beginning of a line, this command always keeps the current line.
If the region is active, the command operates on the region instead;
it never deletes lines that are only partially contained in the region
(a newline that ends a line counts as part of that line).

</p>
<p>If a match is split across lines, this command keeps all those lines.

</p></dd>
</dl>


<a name="Search-Customizations"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Other-Repeating-Search" accesskey="p" rel="prev">Other Repeating Search</a>, Up: <a href="#Search" accesskey="u" rel="up">Search</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Tailoring-Search-to-Your-Needs"></a>
<h3 class="section">15.12Tailoring Search to Your Needs</h3>
<a name="index-search-customizations"></a>

<p>This section describes miscellaneous search-related customizations
not described elsewhere.

</p>
<a name="index-default-search-mode"></a>
<a name="index-search-mode_002c-default"></a>
<p>The default search mode for the incremental search is specified by
the variable <code>search-default-mode</code>.  It can be <code>nil</code>,
<code>t</code>, or a function.  If it is <code>nil</code>, the default mode is to
do literal searches without character folding, but with case folding
and lax-whitespace matches as determined by <code>case-fold-search</code>
and <code>search-whitespace-regexp</code>, respectively (see <a href="#Lax-Search">Lax Search</a>).  If the value is <code>t</code>, incremental search defaults to
regexp searches.  The default value specifies a function that only
performs case folding and lax-whitespace matching.

</p>
<a name="index-search_002dhighlight"></a>
<p>The current match of an on-going incremental search is highlighted
using the <code>isearch</code> face.  This highlighting can be disabled by
setting the variable <code>search-highlight</code> to <code>nil</code>.

</p>
<a name="index-lazy-highlighting-customizations"></a>
<a name="index-isearch_002dlazy_002dhighlight"></a>
<a name="index-lazy_002dhighlight-face"></a>
<p>The other matches for the search string that are visible on display
are highlighted using the <code>lazy-highlight</code> face.  Setting the
variable <code>isearch-lazy-highlight</code> to <code>nil</code> disables this
highlighting.  Here are some other variables that customize the lazy
highlighting:

</p>
<dl compact="compact">
<dt><code>lazy-highlight-initial-delay</code></dt>
<dd><a name="index-lazy_002dhighlight_002dinitial_002ddelay"></a>
<p>Time in seconds to wait before highlighting visible matches.

</p>
</dd>
<dt><code>lazy-highlight-interval</code></dt>
<dd><a name="index-lazy_002dhighlight_002dinterval"></a>
<p>Time in seconds between highlighting successive matches.

</p>
</dd>
<dt><code>lazy-highlight-max-at-a-time</code></dt>
<dd><a name="index-lazy_002dhighlight_002dmax_002dat_002da_002dtime"></a>
<p>The maximum number of matches to highlight before checking for input.
A large number can take some time to highlight, so if you want to
continue searching and type <kbd>C-s</kbd> or <kbd>C-r</kbd> during that time,
Emacs will not respond until it finishes highlighting all those
matches.  Thus, smaller values make Emacs more responsive.

</p>
</dd>
<dt><code>isearch-lazy-count</code></dt>
<dd><a name="index-isearch_002dlazy_002dcount"></a>
<p>Show the current match number and the total number of matches in the
search prompt.

</p>
</dd>
<dt><code>lazy-count-prefix-format</code></dt>
<dt><code>lazy-count-suffix-format</code></dt>
<dd><a name="index-lazy_002dcount_002dprefix_002dformat"></a>
<a name="index-lazy_002dcount_002dsuffix_002dformat"></a>
<p>These two variables determine the format of showing the current and
the total number of matches for <code>isearch-lazy-count</code>.

</p></dd>
</dl>

<a name="index-search_002dnonincremental_002dinstead"></a>
<p>Normally, entering <tt class="key">RET</tt> within incremental search when the
search string is empty launches a nonincremental search.  (Actually,
it lets you edit the search string, and the next <tt class="key">RET</tt> does the
search.)  However, if you customize the variable
<code>search-nonincremental-instead</code> to <code>nil</code>, typing <tt class="key">RET</tt>
will always exit the incremental search, even if the search string is
empty.

</p>
<a name="index-isearch_002dhide_002dimmediately"></a>
<p>By default, incremental search and query-replace commands match
invisible text, but hide any such matches as soon as the current match
moves off the invisible text.  If you customize the variable
<code>isearch-hide-immediately</code> to <code>nil</code>, any invisible text
where matches were found stays on display until the search or the
replace command exits.

</p>
<a name="index-search-display-on-slow-terminals"></a>
<a name="index-search_002dslow_002dspeed"></a>
<a name="index-search_002dslow_002dwindow_002dlines"></a>
<p>Searching incrementally on slow terminals, such as displays
connected to remote machines over slow connection, could be annoying
due to the need to redraw large portions of the display as the search
proceeds.  Emacs provides a special display mode for slow terminals,
whereby search pops up a separate small window and displays the text
surrounding the match in that window.  Small windows display faster,
so the annoying effect of slow speed is alleviated.  The variable
<code>search-slow-speed</code> determines the baud rate threshold below
which Emacs will use this display mode.  The variable
<code>search-slow-window-lines</code> controls the number of lines in the
window Emacs pops up for displaying the search results; the default is
1 line.  Normally, this window will pop up at the bottom of the window
that displays the buffer where you start searching, but if the value
of <code>search-slow-window-lines</code> is negative, that means to put the
window at the top and give it the number of lines that is the absolute
value of <code>search-slow-window-lines</code>.

</p><hr>
<a name="Fixit"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Keyboard-Macros" accesskey="n" rel="next">Keyboard Macros</a>, Previous: <a href="#Search" accesskey="p" rel="prev">Search</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Commands-for-Fixing-Typos"></a>
<h2 class="chapter">16Commands for Fixing Typos</h2>
<a name="index-typos_002c-fixing"></a>
<a name="index-mistakes_002c-correcting"></a>

<p>In this chapter we describe commands that are useful when you catch
a mistake while editing.  The most fundamental of these commands is
the undo command <kbd>C-/</kbd> (also bound to <kbd>C-x u</kbd> and <kbd>C-_</kbd>).
This undoes a single command, or a
part of a command (as in the case of <code>query-replace</code>), or several
consecutive character insertions.  Consecutive repetitions of
<kbd>C-/</kbd> undo earlier and earlier changes, back to the limit of the
undo information available.

</p>
<p>Aside from the commands described here, you can erase text using
deletion commands such as <tt class="key">DEL</tt> (<code>delete-backward-char</code>).
These were described earlier in this manual.  See <a href="#Erasing">Erasing</a>.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Undo" accesskey="1">Undo</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The Undo commands.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Transpose" accesskey="2">Transpose</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Exchanging two characters, words, lines, lists...

</td></tr>
<tr><td align="left" valign="top">• <a href="#Fixing-Case" accesskey="3">Fixing Case</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Correcting case of last word entered.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Spelling" accesskey="4">Spelling</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Apply spelling checker to a word, or a whole file.

</td></tr>
</tbody></table>


<a name="Undo"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Transpose" accesskey="n" rel="next">Transpose</a>, Up: <a href="#Fixit" accesskey="u" rel="up">Fixit</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Undo-1"></a>
<h3 class="section">16.1Undo</h3>
<a name="index-undo"></a>
<a name="index-changes_002c-undoing"></a>

<p>The <em>undo</em> command reverses recent changes in the buffer’s text.
Each buffer records changes individually, and the undo command always
applies to the current buffer.  You can undo all the changes in a
buffer for as far back as the buffer’s records go.  Usually, each editing
command makes a separate entry in the undo records, but some commands
such as <code>query-replace</code> divide their changes into multiple
entries for flexibility in undoing.  Consecutive character insertion
commands are usually grouped together into a single undo record, to
make undoing less tedious.

</p>
<dl compact="compact">
<dt><kbd>C-/</kbd></dt>
<dt><kbd>C-x u</kbd></dt>
<dt><kbd>C-_</kbd></dt>
<dd><p>Undo one entry in the current buffer’s undo records (<code>undo</code>).

</p></dd>
</dl>

<a name="index-C_002dx-u"></a>
<a name="index-C_002d_005f"></a>
<a name="index-C_002d_002f"></a>
<a name="index-undo-1"></a>
<p>To begin to undo, type <kbd>C-/</kbd> (or its aliases, <kbd>C-_</kbd> or
<kbd>C-x u</kbd>)<a name="DOCF6" href="#FOOT6"><sup>6</sup></a>.  This undoes the most recent change in the buffer,
and moves point back to where it was before that change.
  Consecutive repetitions of <kbd>C-/</kbd> (or its aliases) undo earlier
and earlier changes in the current buffer.  If all the recorded
changes have already been undone, the undo command signals an error.

</p>
<a name="index-redo"></a>
<a name="index-undo_002donly"></a>
<p>Any command other than an undo command breaks the sequence of undo
commands.  Starting from that moment, the entire sequence of undo
commands that you have just performed are themselves placed into the
undo record.  Therefore, to re-apply changes you have undone, type
<kbd>C-f</kbd> or any other command that harmlessly breaks the sequence of
undoing; then type <kbd>C-/</kbd> one or more times to undo some of the
undo commands.

</p>
<p>Alternatively, if you want to resume undoing, without redoing
previous undo commands, use <kbd>M-x undo-only</kbd>.  This is like
<code>undo</code>, but will not redo changes you have just undone.

</p>
<p>If you notice that a buffer has been modified accidentally, the
easiest way to recover is to type <kbd>C-/</kbd> repeatedly until the stars
disappear from the front of the mode line (see <a href="#Mode-Line">Mode Line</a>).
Whenever an undo command makes the stars disappear from the mode line,
it means that the buffer contents are the same as they were when the
file was last read in or saved.  If you do not remember whether you
changed the buffer deliberately, type <kbd>C-/</kbd> once.  When you see
the last change you made undone, you will see whether it was an
intentional change.  If it was an accident, leave it undone.  If it
was deliberate, redo the change as described above.

</p>
<p>Alternatively, you can discard all the changes since the buffer was
last visited or saved with <kbd>M-x revert-buffer</kbd>
(see <a href="#Reverting">Reverting</a>).

</p>
<a name="index-selective-undo"></a>
<a name="index-C_002du-C_002d_002f"></a>
<p>When there is an active region, any use of <code>undo</code> performs
<em>selective undo</em>: it undoes the most recent change within the
region, instead of the entire buffer.  However, when Transient Mark
mode is off (see <a href="#Disabled-Transient-Mark">Disabled Transient Mark</a>), <kbd>C-/</kbd> always
operates on the entire buffer, ignoring the region.  In this case, you
can perform selective undo by supplying a prefix argument to the
<code>undo</code> command: <kbd>C-u C-/</kbd>.  To undo further changes in the
same region, repeat the <code>undo</code> command (no prefix argument is
needed).

</p>
<p>Some specialized buffers do not make undo records.  Buffers whose
names start with spaces never do; these buffers are used internally by
Emacs to hold text that users don’t normally look at or edit.

</p>
<a name="index-undo_002dlimit"></a>
<a name="index-undo_002dstrong_002dlimit"></a>
<a name="index-undo_002douter_002dlimit"></a>
<a name="index-undo-limit"></a>
<p>When the undo information for a buffer becomes too large, Emacs discards
the oldest records from time to time (during <em>garbage
collection</em>).  You can specify how much undo information to keep by
setting the variables <code>undo-limit</code>, <code>undo-strong-limit</code>, and
<code>undo-outer-limit</code>.  Their values are expressed in bytes.

</p>
<p>The variable <code>undo-limit</code> sets a soft limit: Emacs keeps undo
data for enough commands to reach this size, and perhaps exceed it,
but does not keep data for any earlier commands beyond that.  Its
default value is 160000.  The variable <code>undo-strong-limit</code> sets a
stricter limit: any previous command (though not the most recent one)
that pushes the size past this amount is forgotten.  The default value
of <code>undo-strong-limit</code> is 240000.

</p>
<p>Regardless of the values of those variables, the most recent change
is never discarded unless it gets bigger than <code>undo-outer-limit</code>
(normally 24,000,000).  At that point, Emacs discards the undo data and
warns you about it.  This is the only situation in which you cannot
undo the last command.  If this happens, you can increase the value of
<code>undo-outer-limit</code> to make it even less likely to happen in the
future.  But if you didn’t expect the command to create such large
undo data, then it is probably a bug and you should report it.
See <a href="#Bugs">Reporting Bugs</a>.

</p>

<a name="Transpose"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Fixing-Case" accesskey="n" rel="next">Fixing Case</a>, Previous: <a href="#Undo" accesskey="p" rel="prev">Undo</a>, Up: <a href="#Fixit" accesskey="u" rel="up">Fixit</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Transposing-Text"></a>
<h3 class="section">16.2Transposing Text</h3>

<dl compact="compact">
<dt><kbd>C-t</kbd></dt>
<dd><p>Transpose two characters (<code>transpose-chars</code>).

</p></dd>
<dt><kbd>M-t</kbd></dt>
<dd><p>Transpose two words (<code>transpose-words</code>).

</p></dd>
<dt><kbd>C-M-t</kbd></dt>
<dd><p>Transpose two balanced expressions (<code>transpose-sexps</code>).

</p></dd>
<dt><kbd>C-x C-t</kbd></dt>
<dd><p>Transpose two lines (<code>transpose-lines</code>).

</p></dd>
<dt><kbd>M-x transpose-sentences</kbd></dt>
<dd><p>Transpose two sentences (<code>transpose-sentences</code>).

</p></dd>
<dt><kbd>M-x transpose-paragraphs</kbd></dt>
<dd><p>Transpose two paragraphs (<code>transpose-paragraphs</code>).

</p></dd>
<dt><kbd>M-x transpose-regions</kbd></dt>
<dd><p>Transpose two regions.

</p></dd>
</dl>

<a name="index-C_002dt"></a>
<a name="index-transpose_002dchars"></a>
<p>The common error of transposing two characters can be fixed, when they
are adjacent, with the <kbd>C-t</kbd> command (<code>transpose-chars</code>).  Normally,
<kbd>C-t</kbd> transposes the two characters on either side of point.  When
given at the end of a line, rather than transposing the last character of
the line with the newline, which would be useless, <kbd>C-t</kbd> transposes the
last two characters on the line.  So, if you catch your transposition error
right away, you can fix it with just a <kbd>C-t</kbd>.  If you don’t catch it so
fast, you must move the cursor back between the two transposed
characters before you type <kbd>C-t</kbd>.  If you transposed a space with
the last character of the word before it, the word motion commands
(<kbd>M-f</kbd>, <kbd>M-b</kbd>, etc.) are a good way of getting there.
Otherwise, a reverse search (<kbd>C-r</kbd>) is often the best way.
See <a href="#Search">Search</a>.

</p>
<a name="index-C_002dx-C_002dt"></a>
<a name="index-transpose_002dlines"></a>
<a name="index-M_002dt"></a>
<a name="index-transpose_002dwords"></a>
<p><kbd>M-t</kbd> transposes the word before point with the word after point
(<code>transpose-words</code>).  It moves point forward over a word,
dragging the word preceding or containing point forward as well.  The
punctuation characters between the words do not move.  For example,
‘<samp>FOO,&nbsp;BAR</samp>’<!-- /@w -->  transposes into ‘<samp>BAR,&nbsp;FOO</samp>’<!-- /@w -->  rather than
‘<samp>BAR&nbsp;FOO,</samp>’<!-- /@w -->.  When point is at the end of the line, it will
transpose the word before point with the first word on the next line.

</p>
<a name="index-transpose_002dsentences"></a>
<a name="index-transpose_002dparagraphs"></a>
<p><kbd>C-M-t</kbd> (<code>transpose-sexps</code>) is a similar command for
transposing two expressions (see <a href="#Expressions">Expressions</a>), and <kbd>C-x C-t</kbd>
(<code>transpose-lines</code>) exchanges lines.  <kbd>M-x
transpose-sentences</kbd> and <kbd>M-x transpose-paragraphs</kbd> transpose
sentences and paragraphs, respectively.  These commands work like
<kbd>M-t</kbd> except as regards the units of text they transpose.

</p>
<p>A numeric argument to a transpose command serves as a repeat count: it
tells the transpose command to move the character (or word or
expression or line) before or containing point across several other
characters (or words or expressions or lines).  For example, <kbd><span class="nolinebreak">C-u</span>&nbsp;3&nbsp;<span class="nolinebreak">C-t</span></kbd><!-- /@w -->  moves the character before point forward across three other
characters.  It would change ‘<samp>f∗oobar</samp>’ into
‘<samp>oobf∗ar</samp>’.  This is equivalent to repeating <kbd>C-t</kbd>
three times.  <kbd>C-u - 4 M-t</kbd> moves the word before point backward
across four words.  <kbd>C-u - C-M-t</kbd> would cancel the effect of plain
<kbd>C-M-t</kbd>.

</p>
<p>A numeric argument of zero is assigned a special meaning (because
otherwise a command with a repeat count of zero would do nothing): to
transpose the character (or word or expression or line) ending after
point with the one ending after the mark.

</p>
<a name="index-transpose_002dregions"></a>
<p><kbd>M-x transpose-regions</kbd> transposes the text between point and
mark with the text between the last two marks pushed to the mark ring
(see <a href="#Setting-Mark">Setting Mark</a>).  With a numeric prefix argument, it transposes
the text between point and mark with the text between two successive
marks that many entries back in the mark ring.  This command is best
used for transposing multiple characters (or words or sentences or
paragraphs) in one go.

</p>

<a name="Fixing-Case"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Spelling" accesskey="n" rel="next">Spelling</a>, Previous: <a href="#Transpose" accesskey="p" rel="prev">Transpose</a>, Up: <a href="#Fixit" accesskey="u" rel="up">Fixit</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Case-Conversion"></a>
<h3 class="section">16.3Case Conversion</h3>

<dl compact="compact">
<dt><kbd>M-- M-l</kbd></dt>
<dd><p>Convert last word to lower case.  Note <kbd>Meta--</kbd> is Meta-minus.

</p></dd>
<dt><kbd>M-- M-u</kbd></dt>
<dd><p>Convert last word to all upper case.

</p></dd>
<dt><kbd>M-- M-c</kbd></dt>
<dd><p>Convert last word to lower case with capital initial.

</p></dd>
</dl>

<a name="index-M_002d_002d-M_002dl"></a>
<a name="index-M_002d_002d-M_002du"></a>
<a name="index-M_002d_002d-M_002dc"></a>
<p>A very common error is to type words in the wrong case.  Because of this,
the word case-conversion commands <kbd>M-l</kbd>, <kbd>M-u</kbd>, and <kbd>M-c</kbd> have a
special feature when used with a negative argument: they do not move the
cursor.  As soon as you see you have mistyped the last word, you can simply
case-convert it and go on typing.  See <a href="#Case">Case</a>.

</p>

<a name="Spelling"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Fixing-Case" accesskey="p" rel="prev">Fixing Case</a>, Up: <a href="#Fixit" accesskey="u" rel="up">Fixit</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Checking-and-Correcting-Spelling"></a>
<h3 class="section">16.4Checking and Correcting Spelling</h3>
<a name="index-spelling_002c-checking-and-correcting"></a>
<a name="index-checking-spelling"></a>
<a name="index-correcting-spelling"></a>

<p>This section describes the commands to check the spelling of a
single word or of a portion of a buffer.  These commands only work if
a spelling checker program, one of Hunspell, Aspell, Ispell or
Enchant, is installed.  These programs are not part of Emacs, but one
of them is usually installed on GNU/Linux and other free operating
systems.
See <a href="http://aspell.net/man-html/index.html/index.html#Top">Aspell</a> in <cite>The Aspell Manual</cite>.

</p>
<dl compact="compact">
<dt><kbd>M-$</kbd></dt>
<dd><p>Check and correct spelling of the word at point (<code>ispell-word</code>).
If the region is active, do it for all words in the region instead.

</p></dd>
<dt><kbd>M-x ispell</kbd></dt>
<dd><p>Check and correct spelling of all words in the buffer.  If the region
is active, do it for all words in the region instead.

</p></dd>
<dt><kbd>M-x ispell-buffer</kbd></dt>
<dd><p>Check and correct spelling in the buffer.

</p></dd>
<dt><kbd>M-x ispell-region</kbd></dt>
<dd><p>Check and correct spelling in the region.

</p></dd>
<dt><kbd>M-x ispell-message</kbd></dt>
<dd><p>Check and correct spelling in a draft mail message, excluding cited
material.

</p></dd>
<dt><kbd>M-x ispell-change-dictionary <span class="key">RET</span> <var>dict</var> <span class="key">RET</span></kbd></dt>
<dd><p>Restart the spell-checker process, using <var>dict</var> as the dictionary.

</p></dd>
<dt><kbd>M-x ispell-kill-ispell</kbd></dt>
<dd><p>Kill the spell-checker subprocess.

</p></dd>
<dt><kbd>M-<span class="key">TAB</span></kbd></dt>
<dt><kbd><span class="key">ESC</span> <span class="key">TAB</span></kbd></dt>
<dt><kbd>C-M-i</kbd></dt>
<dd><p>Complete the word before point based on the spelling dictionary
(<code>ispell-complete-word</code>).

</p></dd>
<dt><kbd>M-x flyspell-mode</kbd></dt>
<dd><p>Enable Flyspell mode, which highlights all misspelled words.

</p></dd>
<dt><kbd>M-x flyspell-prog-mode</kbd></dt>
<dd><p>Enable Flyspell mode for comments and strings only.

</p></dd>
</dl>

<a name="index-M_002d_0024"></a>
<a name="index-ispell_002dword"></a>
<p>To check the spelling of the word around or before point, and
optionally correct it as well, type <kbd>M-$</kbd> (<code>ispell-word</code>).
If a region is active, <kbd>M-$</kbd> checks the spelling of all words
within the region.  See <a href="#Mark">Mark</a>.  (When Transient Mark mode is off,
<kbd>M-$</kbd> always acts on the word around or before point, ignoring the
region; see <a href="#Disabled-Transient-Mark">Disabled Transient Mark</a>.)

</p>
<a name="index-ispell"></a>
<a name="index-ispell_002dbuffer"></a>
<a name="index-ispell_002dregion"></a>
<a name="index-spell_002dchecking-the-active-region"></a>
<p>Similarly, the command <kbd>M-x ispell</kbd> performs spell-checking in
the region if one is active, or in the entire buffer otherwise.  The
commands <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">ispell-buffer</span></kbd><!-- /@w -->  and <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">ispell-region</span></kbd><!-- /@w -->

explicitly perform spell-checking on the entire buffer or the region
respectively.  To check spelling in an email message you are writing,
use <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">ispell-message</span></kbd><!-- /@w -->; that command checks the whole buffer,
except for material that is indented or appears to be cited from other
messages.  See <a href="#Sending-Mail">Sending Mail</a>.

</p>
<p>When one of these commands encounters what appears to be an
incorrect word, it asks you what to do.  It usually displays a list of
numbered <em>near-misses</em>—words that are close to the incorrect word.
Then you must type a single-character response.  Here are the valid
responses:

</p>
<dl compact="compact">
<dt><kbd><var>digit</var></kbd></dt>
<dd><p>Replace the word, just this time, with one of the displayed
near-misses.  Each near-miss is listed with a digit; type that digit
to select it.

</p>
</dd>
<dt><kbd><span class="key">SPC</span></kbd></dt>
<dd><p>Skip this word—continue to consider it incorrect, but don’t change it
here.

</p>
</dd>
<dt><kbd>r <var>new</var> <span class="key">RET</span></kbd></dt>
<dd><p>Replace the word, just this time, with <var>new</var>.  (The replacement
string will be rescanned for more spelling errors.)

</p>
</dd>
<dt><kbd>R <var>new</var> <span class="key">RET</span></kbd></dt>
<dd><p>Replace the word with <var>new</var>, and do a <code>query-replace</code> so you
can replace it elsewhere in the buffer if you wish.  (The replacements
will be rescanned for more spelling errors.)

</p>
</dd>
<dt><kbd>a</kbd></dt>
<dd><p>Accept the incorrect word—treat it as correct, but only in this
editing session.

</p>
</dd>
<dt><kbd>A</kbd></dt>
<dd><p>Accept the incorrect word—treat it as correct, but only in this
editing session and for this buffer.

</p>
</dd>
<dt><kbd>i</kbd></dt>
<dd><p>Insert this word in your private dictionary file so that it will be
considered correct from now on, even in future sessions.

</p>
</dd>
<dt><kbd>m</kbd></dt>
<dd><p>Like <kbd>i</kbd>, but you can also specify dictionary completion
information.

</p>
</dd>
<dt><kbd>u</kbd></dt>
<dd><p>Insert the lower-case version of this word in your private dictionary
file.

</p>
</dd>
<dt><kbd>l <var>word</var> <span class="key">RET</span></kbd></dt>
<dd><p>Look in the dictionary for words that match <var>word</var>.  These words
become the new list of near-misses; you can select one of them as
the replacement by typing a digit.  You can use ‘<samp>*</samp>’ in <var>word</var> as a
wildcard.

</p>
</dd>
<dt><kbd>C-g</kbd></dt>
<dt><kbd>X</kbd></dt>
<dd><p>Quit interactive spell-checking, leaving point at the word that was
being checked.  You can restart checking again afterward with <kbd><span class="nolinebreak">C-u</span>&nbsp;<span class="nolinebreak">M-$</span></kbd><!-- /@w -->.

</p>
</dd>
<dt><kbd>x</kbd></dt>
<dd><p>Quit interactive spell-checking and move point back to where it was
when you started spell-checking.

</p>
</dd>
<dt><kbd>q</kbd></dt>
<dd><p>Quit interactive spell-checking and kill the spell-checker subprocess.

</p>
</dd>
<dt><kbd>?</kbd></dt>
<dd><p>Show the list of options.

</p></dd>
</dl>

<a name="index-ispell_002dcomplete_002dword"></a>
<p>In Text mode and related modes, <kbd>M-<span class="key">TAB</span></kbd>
(<code>ispell-complete-word</code>) performs in-buffer completion based on
spelling correction.  Insert the beginning of a word, and then type
<kbd>M-<span class="key">TAB</span></kbd>; this shows a list of completions.  (If your
window manager intercepts <kbd>M-<span class="key">TAB</span></kbd>, type <kbd><span class="key">ESC</span>&nbsp;<span class="key">TAB</span></kbd><!-- /@w -->  or <kbd>C-M-i</kbd>.)  Each completion is listed with a digit or
character; type that digit or character to choose it.

</p>
<a name="index-ispell-program"></a>
<a name="index-ispell_002dkill_002dispell"></a>
<p>Once started, the spell-checker subprocess continues
to run, waiting for something to do, so that subsequent spell-checking
commands complete more quickly.  If you want to get rid of the
process, use <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">ispell-kill-ispell</span></kbd><!-- /@w -->.  This is not usually
necessary, since the process uses no processor time except when you do
spelling correction.

</p>
<a name="index-ispell_002ddictionary"></a>
<a name="index-ispell_002dlocal_002ddictionary"></a>
<a name="index-ispell_002dpersonal_002ddictionary"></a>
<a name="index-ispell_002dchange_002ddictionary"></a>
<p>Spell-checkers look up spelling in two dictionaries:
the standard dictionary and your personal dictionary.  The standard
dictionary is specified by the variable <code>ispell-local-dictionary</code>
or, if that is <code>nil</code>, by the variable <code>ispell-dictionary</code>.
If both are <code>nil</code>, the spelling program’s default dictionary is
used.  The command <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">ispell-change-dictionary</span></kbd><!-- /@w -->  sets the
standard dictionary for the buffer and then restarts the subprocess,
so that it will use a different standard dictionary.  Your personal
dictionary is specified by the variable
<code>ispell-personal-dictionary</code>.  If that is <code>nil</code>, the
spelling program looks for a personal dictionary in a default
location, which is specific to each spell-checker.

</p>
<a name="index-ispell_002dcomplete_002dword_002ddict"></a>
<p>A separate dictionary is used for word completion.  The variable
<code>ispell-complete-word-dict</code> specifies the file name of this
dictionary.  The completion dictionary must be different because it
cannot use the information about roots and affixes of the words, which
spell-checking uses to detect variations of words.  For some
languages, there is a spell-checking dictionary but no word completion
dictionary.

</p>
<a name="index-Flyspell-mode"></a>
<a name="index-mode_002c-Flyspell"></a>
<a name="index-flyspell_002dmode"></a>
<p>Flyspell mode is a minor mode that performs automatic spell-checking
of the text you type as you type it.  When it finds a word that it
does not recognize, it highlights that word.  Type <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">flyspell-mode</span></kbd><!-- /@w -->  to toggle Flyspell mode in the current buffer.  To
enable Flyspell mode in all text mode buffers, add
<code>flyspell-mode</code> to <code>text-mode-hook</code>.  See <a href="#Hooks">Hooks</a>.  Note
that, as Flyspell mode needs to check each word across which you move,
it will slow down cursor motion and scrolling commands.  It also
doesn’t automatically check the text you didn’t type or move across;
use <code>flyspell-region</code> or <code>flyspell-buffer</code> for that.

</p>
<a name="index-flyspell_002dcorrect_002dword"></a>
<a name="index-flyspell_002dauto_002dcorrect_002dword"></a>
<a name="index-flyspell_002dcorrect_002dword_002dbefore_002dpoint"></a>
<p>When Flyspell mode highlights a word as misspelled, you can click on
it with <kbd>mouse-2</kbd> (<code>flyspell-correct-word</code>) to display a menu
of possible corrections and actions.  In addition, <kbd>C-.</kbd> or
<kbd><span class="key">ESC</span>-<span class="key">TAB</span></kbd> (<code>flyspell-auto-correct-word</code>) will
propose various successive corrections for the word at point, and
<kbd><span class="nolinebreak">C-c</span>&nbsp;$</kbd><!-- /@w -->  (<code>flyspell-correct-word-before-point</code>) will pop up a
menu of possible corrections.  Of course, you can always correct the
misspelled word by editing it manually in any way you like.

</p>
<a name="index-flyspell_002dprog_002dmode"></a>
<p>Flyspell Prog mode works just like ordinary Flyspell mode, except
that it only checks words in comments and string constants.  This
feature is useful for editing programs.  Type <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">flyspell-prog-mode</span></kbd><!-- /@w -->  to enable or disable this mode in the current
buffer.  To enable this mode in all programming mode buffers, add
<code>flyspell-prog-mode</code> to <code>prog-mode-hook</code> (see <a href="#Hooks">Hooks</a>).

</p><hr>
<a name="Keyboard-Macros"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Files" accesskey="n" rel="next">Files</a>, Previous: <a href="#Fixit" accesskey="p" rel="prev">Fixit</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Keyboard-Macros-1"></a>
<h2 class="chapter">17 Keyboard Macros</h2>
<a name="index-defining-keyboard-macros"></a>
<a name="index-keyboard-macro"></a>

<p>In this chapter we describe how to record a sequence of editing
commands so you can repeat it conveniently later.

</p>
<p>A <em>keyboard macro</em> is a command defined by an Emacs user to stand for
another sequence of keys.  For example, if you discover that you are
about to type <kbd>C-n M-d C-d</kbd> forty times, you can speed your work by
defining a keyboard macro to do <kbd>C-n M-d C-d</kbd>, and then executing
it 39 more times.

</p>
<p>You define a keyboard macro by executing and recording the commands
which are its definition.  Put differently, as you define a keyboard
macro, the definition is being executed for the first time.  This way,
you can see the effects of your commands, so that you don’t have to
figure them out in your head.  When you close the definition, the
keyboard macro is defined and also has been, in effect, executed once.
You can then do the whole thing over again by invoking the macro.

</p>
<p>Keyboard macros differ from ordinary Emacs commands in that they are
written in the Emacs command language rather than in Lisp.  This makes it
easier for the novice to write them, and makes them more convenient as
temporary hacks.  However, the Emacs command language is not powerful
enough as a programming language to be useful for writing anything
intelligent or general.  For such things, Lisp must be used.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Basic-Keyboard-Macro" accesskey="1">Basic Keyboard Macro</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Defining and running keyboard macros.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Keyboard-Macro-Ring" accesskey="2">Keyboard Macro Ring</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Where previous keyboard macros are saved.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Keyboard-Macro-Counter" accesskey="3">Keyboard Macro Counter</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Inserting incrementing numbers in macros.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Keyboard-Macro-Query" accesskey="4">Keyboard Macro Query</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Making keyboard macros do different things each
                               time.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Save-Keyboard-Macro" accesskey="5">Save Keyboard Macro</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Giving keyboard macros names; saving them in
                               files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Edit-Keyboard-Macro" accesskey="6">Edit Keyboard Macro</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Editing keyboard macros.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Keyboard-Macro-Step_002dEdit" accesskey="7">Keyboard Macro Step-Edit</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Interactively executing and editing a keyboard
                               macro.

</td></tr>
</tbody></table>


<a name="Basic-Keyboard-Macro"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Keyboard-Macro-Ring" accesskey="n" rel="next">Keyboard Macro Ring</a>, Up: <a href="#Keyboard-Macros" accesskey="u" rel="up">Keyboard Macros</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Basic-Use"></a>
<h3 class="section">17.1 Basic Use</h3>

<dl compact="compact">
<dt><kbd><span class="key">F3</span></kbd></dt>
<dd><p>Start defining a keyboard macro
(<code>kmacro-start-macro-or-insert-counter</code>).

</p></dd>
<dt><kbd><span class="key">F4</span></kbd></dt>
<dd><p>If a keyboard macro is being defined, end the definition; otherwise,
execute the most recent keyboard macro
(<code>kmacro-end-or-call-macro</code>).

</p></dd>
<dt><kbd>C-u <span class="key">F3</span></kbd></dt>
<dd><p>Re-execute last keyboard macro, then append keys to its definition.

</p></dd>
<dt><kbd>C-u C-u <span class="key">F3</span></kbd></dt>
<dd><p>Append keys to the last keyboard macro without re-executing it.

</p></dd>
<dt><kbd>C-x C-k r</kbd></dt>
<dd><p>Run the last keyboard macro on each line that begins in the region
(<code>apply-macro-to-region-lines</code>).

</p></dd>
<dt><kbd>C-x (</kbd></dt>
<dd><p>Start defining a keyboard macro (old style)
(<code>kmacro-start-macro</code>); with a prefix argument, append keys to
the last macro.

</p></dd>
<dt><kbd>C-x )</kbd></dt>
<dd><p>End a macro definition (old style) (<code>kmacro-end-macro</code>); prefix
argument serves as the repeat count for executing the macro.

</p></dd>
<dt><kbd>C-x e</kbd></dt>
<dd><p>Execute the most recently defined keyboard macro
(<code>kmacro-end-and-call-macro</code>); prefix argument serves as repeat
count.

</p></dd>
</dl>

<a name="index-F3"></a>
<a name="index-F4"></a>
<a name="index-kmacro_002dstart_002dmacro_002dor_002dinsert_002dcounter"></a>
<a name="index-kmacro_002dend_002dor_002dcall_002dmacro"></a>
<a name="index-kmacro_002dend_002dand_002dcall_002dmacro"></a>
<p>To start defining a keyboard macro, type <tt class="key">F3</tt>. From then on, your keys continue to be executed, but also become part of the definition of the macro. ‘<samp>Def</samp>’ appears in the mode line to remind you of what is going on. When you are finished, type <tt class="key">F4</tt> (<code>kmacro-end-or-call-macro</code>) to terminate the definition. 例如,
</p>
<div class="example">
<pre class="example"><span class="key">F3</span> M-f foo <span class="key">F4</span>
</pre></div>

<p>defines a macro to move forward a word and then insert ‘<samp>foo</samp>’.
Note that <tt class="key">F3</tt> and <tt class="key">F4</tt> do not become part of the macro.

</p>
<p>After defining the macro, you can call it with <tt class="key">F4</tt>.  For the
above example, this has the same effect as typing <kbd>M-f foo</kbd> again.
(Note the two roles of the <tt class="key">F4</tt> command: it ends the macro if you
are in the process of defining one, or calls the last macro
otherwise.)  You can also supply <tt class="key">F4</tt> with a numeric prefix
argument ‘<samp>n</samp>’, which means to invoke the macro ‘<samp>n</samp>’ times.  An
argument of zero repeats the macro indefinitely, until it gets an
error or you type <kbd>C-g</kbd> (or, on MS-DOS, <kbd>C-<span class="key">BREAK</span></kbd>).

</p>
<p>The above example demonstrates a handy trick that you can employ
with keyboard macros: if you wish to repeat an operation at regularly
spaced places in the text, include a motion command as part of the
macro.  In this case, repeating the macro inserts the string
‘<samp>foo</samp>’ after each successive word.

</p>
<p>After terminating the definition of a keyboard macro, you can append
more keystrokes to its definition by typing <kbd>C-u <span class="key">F3</span></kbd>.  This
is equivalent to plain <tt class="key">F3</tt> followed by retyping the whole
definition so far.  As a consequence, it re-executes the macro as
previously defined.  If you change the variable
<code>kmacro-execute-before-append</code> to <code>nil</code>, the existing macro
will not be re-executed before appending to it (the default is
<code>t</code>).  You can also add to the end of the definition of the last
keyboard macro without re-executing it by typing <kbd>C-u C-u
<span class="key">F3</span></kbd>.

</p>
<p>When a command reads an argument with the minibuffer, your minibuffer input becomes part of the macro along with the command. So when you replay the macro, the command gets the same argument as when you entered the macro. 例如,
</p>
<div class="example">
<pre class="example"><span class="key">F3</span> C-a C-k C-x b foo <span class="key">RET</span> C-y C-x b <span class="key">RET</span> <span class="key">F4</span>
</pre></div>

<p>defines a macro that kills the current line, yanks it into the buffer
‘<samp>foo</samp>’, then returns to the original buffer.

</p>
<p>Most keyboard commands work as usual in a keyboard macro definition,
with some exceptions.  Typing <kbd>C-g</kbd> (<code>keyboard-quit</code>) quits
the keyboard macro definition.  Typing <kbd>C-M-c</kbd>
(<code>exit-recursive-edit</code>) can be unreliable: it works as you’d
expect if exiting a recursive edit that started within the macro, but
if it exits a recursive edit that started before you invoked the
keyboard macro, it also necessarily exits the keyboard macro too.
Mouse events are also unreliable, even though you can use them in a
keyboard macro: when the macro replays the mouse event, it uses the
original mouse position of that event, the position that the mouse had
while you were defining the macro.  The effect of this may be hard to
predict.

</p>
<a name="index-apply_002dmacro_002dto_002dregion_002dlines"></a>
<a name="index-C_002dx-C_002dk-r"></a>
<p>The command <kbd>C-x C-k r</kbd> (<code>apply-macro-to-region-lines</code>)
repeats the last defined keyboard macro on each line that begins in
the region.  It does this line by line, by moving point to the
beginning of the line and then executing the macro.

</p>
<a name="index-C_002dx-_0028"></a>
<a name="index-C_002dx-_0029"></a>
<a name="index-C_002dx-e"></a>
<a name="index-kmacro_002dstart_002dmacro"></a>
<a name="index-kmacro_002dend_002dmacro"></a>
<p>In addition to the <tt class="key">F3</tt> and <tt class="key">F4</tt> commands described above,
Emacs also supports an older set of key bindings for defining and
executing keyboard macros.  To begin a macro definition, type <kbd>C-x
(</kbd> (<code>kmacro-start-macro</code>); as with <tt class="key">F3</tt>, a prefix argument
appends this definition to the last keyboard macro.  To end a macro
definition, type <kbd>C-x )</kbd> (<code>kmacro-end-macro</code>).  To execute
the most recent macro, type <kbd>C-x e</kbd>
(<code>kmacro-end-and-call-macro</code>).  If you enter <kbd>C-x e</kbd> while
defining a macro, the macro is terminated and executed immediately.
Immediately after typing <kbd>C-x e</kbd>, you can type <kbd>e</kbd> repeatedly
to immediately repeat the macro one or more times.  You can also give
<kbd>C-x e</kbd> a repeat argument, just like <tt class="key">F4</tt> (when it is used to
execute a macro).

</p>
<p><kbd>C-x )</kbd> can be given a repeat count as an argument.  This means
to repeat the macro right after defining it.  The macro definition
itself counts as the first repetition, since it is executed as you
define it, so <kbd>C-u 4 C-x )</kbd> executes the macro immediately 3
additional times.

</p>

<a name="Keyboard-Macro-Ring"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Keyboard-Macro-Counter" accesskey="n" rel="next">Keyboard Macro Counter</a>, Previous: <a href="#Basic-Keyboard-Macro" accesskey="p" rel="prev">Basic Keyboard Macro</a>, Up: <a href="#Keyboard-Macros" accesskey="u" rel="up">Keyboard Macros</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="The-Keyboard-Macro-Ring"></a>
<h3 class="section">17.2 The Keyboard Macro Ring</h3>

<p>All defined keyboard macros are recorded in the <em>keyboard macro
ring</em>.  There is only one keyboard macro ring, shared by all buffers.

</p>
<dl compact="compact">
<dt><kbd>C-x C-k C-k</kbd></dt>
<dd><p>Execute the keyboard macro at the head of the ring (<code>kmacro-end-or-call-macro-repeat</code>).

</p></dd>
<dt><kbd>C-x C-k C-n</kbd></dt>
<dd><p>Rotate the keyboard macro ring to the next macro (defined earlier)
(<code>kmacro-cycle-ring-next</code>).

</p></dd>
<dt><kbd>C-x C-k C-p</kbd></dt>
<dd><p>Rotate the keyboard macro ring to the previous macro (defined later)
(<code>kmacro-cycle-ring-previous</code>).

</p></dd>
</dl>

<p>All commands which operate on the keyboard macro ring use the same <kbd>C-x C-k</kbd> prefix. Most of these commands can be executed and repeated immediately after each other without repeating the <kbd>C-x C-k</kbd> prefix. 例如,
</p>
<div class="example">
<pre class="example">C-x C-k C-p C-p C-k C-k C-k C-n C-n C-k C-p C-k C-d
</pre></div>

<p>will rotate the keyboard macro ring to the second-previous macro,
execute the resulting head macro three times, rotate back to the
original head macro, execute that once, rotate to the previous
macro, execute that, and finally delete it from the macro ring.

</p>
<a name="index-kmacro_002dend_002dor_002dcall_002dmacro_002drepeat"></a>
<a name="index-C_002dx-C_002dk-C_002dk"></a>
<p>The command <kbd>C-x C-k C-k</kbd> (<code>kmacro-end-or-call-macro-repeat</code>)
executes the keyboard macro at the head of the macro ring.  You can
repeat the macro immediately by typing another <kbd>C-k</kbd>, or you can
rotate the macro ring immediately by typing <kbd>C-n</kbd> or <kbd>C-p</kbd>.

</p>
<p>When a keyboard macro is being defined, <kbd>C-x C-k C-k</kbd> behaves
like <tt class="key">F4</tt> except that, immediately afterward, you can use most key
bindings of this section without the <kbd>C-x C-k</kbd> prefix.  For
instance, another <kbd>C-k</kbd> will re-execute the macro.

</p>
<a name="index-kmacro_002dcycle_002dring_002dnext"></a>
<a name="index-C_002dx-C_002dk-C_002dn"></a>
<a name="index-kmacro_002dcycle_002dring_002dprevious"></a>
<a name="index-C_002dx-C_002dk-C_002dp"></a>
<p>The commands <kbd>C-x C-k C-n</kbd> (<code>kmacro-cycle-ring-next</code>) and
<kbd>C-x C-k C-p</kbd> (<code>kmacro-cycle-ring-previous</code>) rotate the
macro ring, bringing the next or previous keyboard macro to the head
of the macro ring.  The definition of the new head macro is displayed
in the echo area.  You can continue to rotate the macro ring
immediately by repeating just <kbd>C-n</kbd> and <kbd>C-p</kbd> until the
desired macro is at the head of the ring.  To execute the new macro
ring head immediately, just type <kbd>C-k</kbd>.

</p>
<p>Note that Emacs treats the head of the macro ring as the last
defined keyboard macro.  For instance, <tt class="key">F4</tt> will execute that
macro, and <kbd>C-x C-k n</kbd> will give it a name.

</p>
<a name="index-kmacro_002dring_002dmax"></a>
<p>The maximum number of macros stored in the keyboard macro ring is
determined by the customizable variable <code>kmacro-ring-max</code>.

</p>

<a name="Keyboard-Macro-Counter"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Keyboard-Macro-Query" accesskey="n" rel="next">Keyboard Macro Query</a>, Previous: <a href="#Keyboard-Macro-Ring" accesskey="p" rel="prev">Keyboard Macro Ring</a>, Up: <a href="#Keyboard-Macros" accesskey="u" rel="up">Keyboard Macros</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="The-Keyboard-Macro-Counter"></a>
<h3 class="section">17.3 The Keyboard Macro Counter</h3>

<p>Each keyboard macro has an associated counter, which is initialized
to 0 when you start defining the macro.  This <em>current counter</em>
allows you to insert a number into the buffer that depends on the
number of times the macro has been called.  The counter is normally
incremented each time its value is inserted into the buffer.

</p>
<p>In addition to the current counter, keyboard macros also maintain the
<em>previous counter</em>, which records the value the current counter
had last time it was incremented or set.  Note that incrementing the
current counter by zero, e.g., with <kbd><span class="nolinebreak">C-u</span>&nbsp;0&nbsp;<span class="nolinebreak">C-x</span>&nbsp;<span class="nolinebreak">C-k</span>&nbsp;<span class="nolinebreak">C-i</span></kbd><!-- /@w -->, also
records the value of the current counter as the previous counter
value.

</p>
<dl compact="compact">
<dt><kbd><span class="key">F3</span></kbd></dt>
<dd><p>In a keyboard macro definition, insert the keyboard macro counter
value in the buffer (<code>kmacro-start-macro-or-insert-counter</code>).

</p></dd>
<dt><kbd>C-x C-k C-i</kbd></dt>
<dd><p>Insert the keyboard macro counter value in the buffer
(<code>kmacro-insert-counter</code>).

</p></dd>
<dt><kbd>C-x C-k C-c</kbd></dt>
<dd><p>Set the keyboard macro counter (<code>kmacro-set-counter</code>).

</p></dd>
<dt><kbd>C-x C-k C-a</kbd></dt>
<dd><p>Add the prefix arg to the keyboard macro counter (<code>kmacro-add-counter</code>).

</p></dd>
<dt><kbd>C-x C-k C-f</kbd></dt>
<dd><p>Specify the format for inserting the keyboard macro counter
(<code>kmacro-set-format</code>).

</p></dd>
</dl>

<a name="index-kmacro_002dinsert_002dcounter"></a>
<a name="index-C_002dx-C_002dk-C_002di"></a>
<p>When you are defining a keyboard macro, the command <tt class="key">F3</tt>
(<code>kmacro-start-macro-or-insert-counter</code>) inserts the current
value of the keyboard macro’s counter into the buffer, and increments
the counter by 1.  (If you are not defining a macro, <tt class="key">F3</tt> begins a
macro definition instead.  See <a href="#Basic-Keyboard-Macro">Basic Keyboard Macro</a>.)  You can use
a numeric prefix argument to specify a different increment.  If you
just specify a <kbd>C-u</kbd> prefix, that inserts the previous counter
value, and doesn’t change the current value.

</p>
<p>As an example, let us show how the keyboard macro counter can be
used to build a numbered list.  Consider the following key sequence:

</p>
<div class="example">
<pre class="example"><span class="key">F3</span> C-a <span class="key">F3</span> . <span class="key">SPC</span> <span class="key">F4</span>
</pre></div>

<p>As part of this keyboard macro definition, the string ‘<samp>0. </samp>’ was
inserted into the beginning of the current line.  If you now move
somewhere else in the buffer and type <tt class="key">F4</tt> to invoke the macro,
the string ‘<samp>1. </samp>’ is inserted at the beginning of that line.
Subsequent invocations insert ‘<samp>2. </samp>’, ‘<samp>3. </samp>’, and so forth.

</p>
<p>The command <kbd>C-x C-k C-i</kbd> (<code>kmacro-insert-counter</code>) does
the same thing as <tt class="key">F3</tt>, but it can be used outside a keyboard
macro definition.  When no keyboard macro is being defined or
executed, it inserts and increments the counter of the macro at the
head of the keyboard macro ring.

</p>
<a name="index-kmacro_002dset_002dcounter"></a>
<a name="index-C_002dx-C_002dk-C_002dc"></a>
<p>The command <kbd>C-x C-k C-c</kbd> (<code>kmacro-set-counter</code>) sets the
current macro counter to the value of the numeric argument.  If you use
it inside the macro, it operates on each repetition of the macro.  If
you specify just <kbd>C-u</kbd> as the prefix, while executing the macro,
that resets the counter to the value it had at the beginning of the
current repetition of the macro (undoing any increments so far in this
repetition).

</p>
<a name="index-kmacro_002dadd_002dcounter"></a>
<a name="index-C_002dx-C_002dk-C_002da"></a>
<p>The command <kbd>C-x C-k C-a</kbd> (<code>kmacro-add-counter</code>) adds the
prefix argument to the current macro counter.  With just <kbd>C-u</kbd> as
argument, it resets the counter to the last value inserted by any
keyboard macro.  (Normally, when you use this, the last insertion
will be in the same macro and it will be the same counter.)

</p>
<a name="index-kmacro_002dset_002dformat"></a>
<a name="index-C_002dx-C_002dk-C_002df"></a>
<p>The command <kbd>C-x C-k C-f</kbd> (<code>kmacro-set-format</code>) prompts for
the format to use when inserting the macro counter.  The default
format is ‘<samp>%d</samp>’, which means to insert the number in decimal
without any padding.  You can exit with empty minibuffer to reset the
format to this default.  You can specify any format string that the
<code>format</code> function accepts and that makes sense with a single
integer extra argument (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Formatting-Strings">Formatting Strings</a> in <cite>The Emacs
Lisp Reference Manual</cite>).  Do not put the format string inside double
quotes when you insert it in the minibuffer.

</p>
<p>If you use this command while no keyboard macro is being defined or
executed, the new format affects all subsequent macro definitions.
Existing macros continue to use the format in effect when they were
defined.  If you set the format while defining a keyboard macro, this
affects the macro being defined from that point on, but it does not
affect subsequent macros.  Execution of the macro will, at each step,
use the format in effect at that step during its definition.  Changes
to the macro format during execution of a macro, like the
corresponding changes during its definition, have no effect on
subsequent macros.

</p>
<p>The format set by <kbd>C-x C-k C-f</kbd> does not affect insertion of
numbers stored in registers.

</p>
<p>If you use a register as a counter, incrementing it on each
repetition of the macro, that accomplishes the same thing as a
keyboard macro counter.  See <a href="#Number-Registers">Number Registers</a>.  For most purposes,
it is simpler to use a keyboard macro counter.

</p>

<a name="Keyboard-Macro-Query"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Save-Keyboard-Macro" accesskey="n" rel="next">Save Keyboard Macro</a>, Previous: <a href="#Keyboard-Macro-Counter" accesskey="p" rel="prev">Keyboard Macro Counter</a>, Up: <a href="#Keyboard-Macros" accesskey="u" rel="up">Keyboard Macros</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Executing-Macros-with-Variations"></a>
<h3 class="section">17.4 Executing Macros with Variations</h3>

<p>In a keyboard macro, you can create an effect similar to that of
<code>query-replace</code>, in that the macro asks you each time around
whether to make a change.

</p>
<dl compact="compact">
<dt><kbd>C-x q</kbd></dt>
<dd><p>When this point is reached during macro execution, ask for confirmation
(<code>kbd-macro-query</code>).

</p></dd>
</dl>

<a name="index-C_002dx-q"></a>
<a name="index-kbd_002dmacro_002dquery"></a>
<p>While defining the macro, type <kbd>C-x q</kbd> at the point where you
want the query to occur.  During macro definition, the <kbd>C-x q</kbd>
does nothing, but when you run the macro later, <kbd>C-x q</kbd> asks you
interactively whether to continue.

</p>
<p>The valid responses when <kbd>C-x q</kbd> asks are:

</p>
<dl compact="compact">
<dt><tt class="key">SPC</tt> (or <kbd>y</kbd>)</dt>
<dd><p>Continue executing the keyboard macro.

</p>
</dd>
<dt><tt class="key">DEL</tt> (or <kbd>n</kbd>)</dt>
<dd><p>Skip the remainder of this repetition of the macro, and start right
away with the next repetition.

</p>
</dd>
<dt><tt class="key">RET</tt> (or <kbd>q</kbd>)</dt>
<dd><p>Skip the remainder of this repetition and cancel further repetitions.

</p>
</dd>
<dt><kbd>C-r</kbd></dt>
<dd><p>Enter a recursive editing level, in which you can perform editing
which is not part of the macro.  When you exit the recursive edit
using <kbd>C-M-c</kbd>, you are asked again how to continue with the
keyboard macro.  If you type a <tt class="key">SPC</tt> at this time, the rest of the
macro definition is executed.  It is up to you to leave point and the
text in a state such that the rest of the macro will do what you want.

</p></dd>
</dl>

<p><kbd>C-u C-x q</kbd>, which is <kbd>C-x q</kbd> with a prefix argument,
performs a completely different function.  It enters a recursive edit
reading input from the keyboard, both when you type it during the
definition of the macro, and when it is executed from the macro.  During
definition, the editing you do inside the recursive edit does not become
part of the macro.  During macro execution, the recursive edit gives you
a chance to do some particularized editing on each repetition.
See <a href="#Recursive-Edit">Recursive Edit</a>.

</p>

<a name="Save-Keyboard-Macro"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Edit-Keyboard-Macro" accesskey="n" rel="next">Edit Keyboard Macro</a>, Previous: <a href="#Keyboard-Macro-Query" accesskey="p" rel="prev">Keyboard Macro Query</a>, Up: <a href="#Keyboard-Macros" accesskey="u" rel="up">Keyboard Macros</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Naming-and-Saving-Keyboard-Macros"></a>
<h3 class="section">17.5 Naming and Saving Keyboard Macros</h3>

<dl compact="compact">
<dt><kbd>C-x C-k n</kbd></dt>
<dd><p>Give a command name (for the duration of the Emacs session) to the most
recently defined keyboard macro (<code>kmacro-name-last-macro</code>).

</p></dd>
<dt><kbd>C-x C-k b</kbd></dt>
<dd><p>Bind the most recently defined keyboard macro to a key sequence (for
the duration of the session) (<code>kmacro-bind-to-key</code>).

</p></dd>
<dt><kbd>M-x insert-kbd-macro</kbd></dt>
<dd><p>Insert in the buffer a keyboard macro’s definition, as Lisp code.

</p></dd>
</dl>

<a name="index-saving-keyboard-macros"></a>
<a name="index-kmacro_002dname_002dlast_002dmacro"></a>
<a name="index-C_002dx-C_002dk-n"></a>
<p>If you wish to save a keyboard macro for later use, you can give it
a name using <kbd>C-x C-k n</kbd> (<code>kmacro-name-last-macro</code>).
This reads a name as an argument using the minibuffer and defines that
name to execute the last keyboard macro, in its current form.  (If you
later add to the definition of this macro, that does not alter the
name’s definition as a macro.)  The macro name is a Lisp symbol, and
defining it in this way makes it a valid command name for calling with
<kbd>M-x</kbd> or for binding a key to with <code>global-set-key</code>
(see <a href="#Keymaps">Keymaps</a>).  If you specify a name that has a prior definition
other than a keyboard macro, an error message is shown and nothing is
changed.

</p>
<a name="index-binding-keyboard-macros"></a>
<a name="index-kmacro_002dbind_002dto_002dkey"></a>
<a name="index-C_002dx-C_002dk-b"></a>
<p>You can also bind the last keyboard macro (in its current form) to a
key, using <kbd>C-x C-k b</kbd> (<code>kmacro-bind-to-key</code>) followed by the
key sequence you want to bind.  You can bind to any key sequence in
the global keymap, but since most key sequences already have other
bindings, you should select the key sequence carefully.  If you try to
bind to a key sequence with an existing binding (in any keymap), this
command asks you for confirmation before replacing the existing binding.

</p>
<p>To avoid problems caused by overriding existing bindings, the key sequences <kbd>C-x C-k 0</kbd> through <kbd>C-x C-k 9</kbd> and <kbd>C-x C-k A</kbd> through <kbd>C-x C-k Z</kbd> are reserved for your own keyboard macro bindings. In fact, to bind to one of these key sequences, you only need to type the digit or letter rather than the whole key sequences. 例如,
</p>
<div class="example">
<pre class="example">C-x C-k b 4
</pre></div>

<p>will bind the last keyboard macro to the key sequence <kbd>C-x C-k 4</kbd>.

</p>
<a name="index-insert_002dkbd_002dmacro"></a>
<p>Once a macro has a command name, you can save its definition in a file.
Then it can be used in another editing session.  First, visit the file
you want to save the definition in.  Then use this command:

</p>
<div class="example">
<pre class="example">M-x insert-kbd-macro <span class="key">RET</span> <var>macroname</var> <span class="key">RET</span>
</pre></div>

<p>This inserts some Lisp code that, when executed later, will define the
same macro with the same definition it has now.  (You don’t need to
understand Lisp code to do this, because <code>insert-kbd-macro</code> writes
the Lisp code for you.)  Then save the file.  You can load the file
later with <code>load-file</code> (see <a href="#Lisp-Libraries">Lisp Libraries</a>).  If the file you
save in is your init file <samp>~/.emacs</samp> (see <a href="#Init-File">Init File</a>) then the
macro will be defined each time you run Emacs.

</p>
<p>If you give <code>insert-kbd-macro</code> a prefix argument, it makes
additional Lisp code to record the keys (if any) that you have bound
to <var>macroname</var>, so that the macro will be reassigned the same keys
when you load the file.

</p>

<a name="Edit-Keyboard-Macro"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Keyboard-Macro-Step_002dEdit" accesskey="n" rel="next">Keyboard Macro Step-Edit</a>, Previous: <a href="#Save-Keyboard-Macro" accesskey="p" rel="prev">Save Keyboard Macro</a>, Up: <a href="#Keyboard-Macros" accesskey="u" rel="up">Keyboard Macros</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Editing-a-Keyboard-Macro"></a>
<h3 class="section">17.6 Editing a Keyboard Macro</h3>

<dl compact="compact">
<dt><kbd>C-x C-k C-e</kbd></dt>
<dd><p>Edit the last defined keyboard macro (<code>kmacro-edit-macro</code>).

</p></dd>
<dt><kbd>C-x C-k e <var>name</var> <span class="key">RET</span></kbd></dt>
<dd><p>Edit a previously defined keyboard macro <var>name</var> (<code>edit-kbd-macro</code>).

</p></dd>
<dt><kbd>C-x C-k l</kbd></dt>
<dd><p>Edit the last 300 keystrokes as a keyboard macro
(<code>kmacro-edit-lossage</code>).

</p></dd>
</dl>

<a name="index-kmacro_002dedit_002dmacro"></a>
<a name="index-C_002dx-C_002dk-C_002de"></a>
<a name="index-C_002dx-C_002dk-RET"></a>
<p>You can edit the last keyboard macro by typing <kbd>C-x C-k C-e</kbd> or
<kbd>C-x C-k <span class="key">RET</span></kbd> (<code>kmacro-edit-macro</code>).  This formats the
macro definition in a buffer and enters a specialized major mode for
editing it.  Type <kbd>C-h m</kbd> once in that buffer to display details
of how to edit the macro.  When you are finished editing, type
<kbd>C-c C-c</kbd>.

</p>
<a name="index-edit_002dkbd_002dmacro"></a>
<a name="index-C_002dx-C_002dk-e"></a>
<p>You can edit a named keyboard macro or a macro bound to a key by typing
<kbd>C-x C-k e</kbd> (<code>edit-kbd-macro</code>).  Follow that with the
keyboard input that you would use to invoke the macro—<kbd>C-x e</kbd> or
<kbd>M-x <var>name</var></kbd> or some other key sequence.

</p>
<a name="index-kmacro_002dedit_002dlossage"></a>
<a name="index-C_002dx-C_002dk-l"></a>
<p>You can edit the last 300 keystrokes as a macro by typing
<kbd>C-x C-k l</kbd> (<code>kmacro-edit-lossage</code>).

</p>

<a name="Keyboard-Macro-Step_002dEdit"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Edit-Keyboard-Macro" accesskey="p" rel="prev">Edit Keyboard Macro</a>, Up: <a href="#Keyboard-Macros" accesskey="u" rel="up">Keyboard Macros</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Stepwise-Editing-a-Keyboard-Macro"></a>
<h3 class="section">17.7 Stepwise Editing a Keyboard Macro</h3>

<a name="index-kmacro_002dstep_002dedit_002dmacro"></a>
<a name="index-C_002dx-C_002dk-SPC"></a>
<p>You can interactively replay and edit the last keyboard
macro, one command at a time, by typing <kbd>C-x C-k <span class="key">SPC</span></kbd>
(<code>kmacro-step-edit-macro</code>).  Unless you quit the macro using
<kbd>q</kbd> or <kbd>C-g</kbd>, the edited macro replaces the last macro on the
macro ring.

</p>
<p>This macro editing feature shows the last macro in the minibuffer
together with the first (or next) command to be executed, and prompts
you for an action.  You can enter <kbd>?</kbd> to get a summary of your
options.  These actions are available:

</p>
<ul>
<li> <tt class="key">SPC</tt> and <kbd>y</kbd> execute the current command, and advance to the
next command in the keyboard macro.

</li><li> <kbd>n</kbd>, <kbd>d</kbd>, and <tt class="key">DEL</tt> skip and delete the current command.

</li><li> <kbd>f</kbd> skips the current command in this execution of the keyboard
macro, but doesn’t delete it from the macro.

</li><li> <tt class="key">TAB</tt> executes the current command, as well as all similar
commands immediately following the current command; for example, <tt class="key">TAB</tt>
may be used to insert a sequence of characters (corresponding to a
sequence of <code>self-insert-command</code> commands).

</li><li> <kbd>c</kbd> continues execution (without further editing) until the end of
the keyboard macro.  If execution terminates normally, the edited
macro replaces the original keyboard macro.

</li><li> <kbd>C-k</kbd> skips and deletes the rest of the keyboard macro,
terminates step-editing, and replaces the original keyboard macro
with the edited macro.

</li><li> <kbd>q</kbd> and <kbd>C-g</kbd> cancels the step-editing of the keyboard macro;
discarding any changes made to the keyboard macro.

</li><li> <kbd>i <var>key</var>… C-j</kbd> reads and executes a series of key sequences (not
including the final <kbd>C-j</kbd>), and inserts them before the current
command in the keyboard macro, without advancing over the current
command.

</li><li> <kbd>I <var>key</var>…</kbd> reads one key sequence, executes it, and inserts it
before the current command in the keyboard macro, without advancing
over the current command.

</li><li> <kbd>r <var>key</var>… C-j</kbd> reads and executes a series of key sequences (not
including the final <kbd>C-j</kbd>), and replaces the current command in
the keyboard macro with them, advancing over the inserted key
sequences.

</li><li> <kbd>R <var>key</var>…</kbd> reads one key sequence, executes it, and replaces the
current command in the keyboard macro with that key sequence,
advancing over the inserted key sequence.

</li><li> <kbd>a <var>key</var>… C-j</kbd> executes the current command, then reads and
executes a series of key sequences (not including the final
<kbd>C-j</kbd>), and inserts them after the current command in the keyboard
macro; it then advances over the current command and the inserted key
sequences.

</li><li> <kbd>A <var>key</var>… C-j</kbd> executes the rest of the commands in the keyboard
macro, then reads and executes a series of key sequences (not
including the final <kbd>C-j</kbd>), and appends them at the end of the
keyboard macro; it then terminates the step-editing and replaces the
original keyboard macro with the edited macro.

</li></ul>

<a name="Files"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Buffers" accesskey="n" rel="next">Buffers</a>, Previous: <a href="#Keyboard-Macros" accesskey="p" rel="prev">Keyboard Macros</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="File-Handling"></a>
<h2 class="chapter">18 File Handling</h2>
<a name="index-files"></a>

<p>The operating system stores data permanently in named <em>files</em>, so
most of the text you edit with Emacs comes from a file and is ultimately
stored in a file.

</p>
<p>To edit a file, you must tell Emacs to read the file and prepare a
buffer containing a copy of the file’s text.  This is called
<em>visiting</em> the file.  Editing commands apply directly to text in the
buffer; that is, to the copy inside Emacs.  Your changes appear in the
file itself only when you <em>save</em> the buffer back into the file.

</p>
<p>In addition to visiting and saving files, Emacs can delete, copy,
rename, and append to files, keep multiple versions of them, and operate
on file directories.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#File-Names" accesskey="1">File Names</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to type and edit file-name arguments.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Visiting" accesskey="2">Visiting</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Visiting a file prepares Emacs to edit the file.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Saving" accesskey="3">Saving</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Saving makes your changes permanent.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Reverting" accesskey="4">Reverting</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Reverting cancels all the changes not saved.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Auto-Revert" accesskey="5">Auto Revert</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Keeping buffers automatically up-to-date.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Auto-Save" accesskey="6">Auto Save</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Auto Save periodically protects against loss of data.

</td></tr>
<tr><td align="left" valign="top">• <a href="#File-Aliases" accesskey="7">File Aliases</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Handling multiple names for one file.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Directories" accesskey="8">Directories</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Creating, deleting, and listing file directories.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Comparing-Files" accesskey="9">Comparing Files</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Finding where two files differ.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Diff-Mode">Diff Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Mode for editing file differences.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Copying-and-Naming">Copying and Naming</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Copying, naming and renaming files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Misc-File-Ops">Misc File Ops</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Other things you can do on files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Compressed-Files">Compressed Files</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Accessing compressed files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#File-Archives">File Archives</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Operating on tar, zip, jar etc. archive files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Remote-Files">Remote Files</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Accessing files on other machines.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Quoted-File-Names">Quoted File Names</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Quoting special characters in file names.

</td></tr>
<tr><td align="left" valign="top">• <a href="#File-Name-Cache">File Name Cache</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Completion against a list of files you often use.

</td></tr>
<tr><td align="left" valign="top">• <a href="#File-Conveniences">File Conveniences</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Convenience features for finding files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Image-Mode">Image Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Viewing image files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Filesets">Filesets</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Handling sets of files.

</td></tr>
</tbody></table>


<a name="File-Names"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Visiting" accesskey="n" rel="next">Visiting</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="File-Names-1"></a>
<h3 class="section">18.1 File Names</h3>
<a name="index-file-names"></a>

<a name="index-default-file-name"></a>
<p>Many Emacs commands that operate on a file require you to specify
the file name, using the minibuffer (see <a href="#Minibuffer-File">Minibuffer File</a>).

</p>
<p>While in the minibuffer, you can use the usual completion and
history commands (see <a href="#Minibuffer">Minibuffer</a>).  Note that file name completion
ignores file names whose extensions appear in the variable
<code>completion-ignored-extensions</code> (see <a href="#Completion-Options">Completion Options</a>).
Note also that most commands use permissive completion with
confirmation for reading file names: you are allowed to submit a
nonexistent file name, but if you type <tt class="key">RET</tt> immediately after
completing up to a nonexistent file name, Emacs prints
‘<samp>[Confirm]</samp>’ and you must type a second <tt class="key">RET</tt> to confirm.
See <a href="#Completion-Exit">Completion Exit</a>, for details.

</p>
<p>Minibuffer history commands offer some special features for reading
file names, see <a href="#Minibuffer-History">Minibuffer History</a>.

</p>
<a name="index-default-directory_002c-of-a-buffer"></a>
<a name="index-default_002ddirectory"></a>
<p>Each buffer has a <em>default directory</em>, stored in the
buffer-local variable <code>default-directory</code>.  Whenever Emacs reads
a file name using the minibuffer, it usually inserts the default
directory into the minibuffer as the initial contents.  You can
inhibit this insertion by changing the variable
<code>insert-default-directory</code> to <code>nil</code> (see <a href="#Minibuffer-File">Minibuffer File</a>).  Regardless, Emacs always assumes that any relative file name
is relative to the default directory, e.g., entering a file name
without a directory specifies a file in the default directory.

</p>
<a name="index-cd"></a>
<a name="index-pwd"></a>
<p>When you visit a file, Emacs sets <code>default-directory</code> in the
visiting buffer to the directory of its file.  When you create a new
buffer that is not visiting a file, via a command like <kbd>C-x b</kbd>,
its default directory is usually copied from the buffer that was
current at the time (see <a href="#Select-Buffer">Select Buffer</a>).  You can use the command
<kbd>M-x pwd</kbd> to see the value of <code>default-directory</code> in the
current buffer.  The command <kbd>M-x cd</kbd> prompts for a directory’s
name, and sets the buffer’s <code>default-directory</code> to that directory
(doing this does not change the buffer’s file name, if any).

</p>
<p>As an example, when you visit the file <samp>/u/rms/gnu/gnu.tasks</samp>,
the default directory is set to <samp>/u/rms/gnu/</samp>.  If you invoke a
command that reads a file name, entering just ‘<samp>foo</samp>’ in the
minibuffer, with a directory omitted, specifies the file
<samp>/u/rms/gnu/foo</samp>; entering ‘<samp>../.login</samp>’ specifies
<samp>/u/rms/.login</samp>; and entering ‘<samp>new/foo</samp>’ specifies
<samp>/u/rms/gnu/new/foo</samp>.

</p>
<p>When typing a file name into the minibuffer, you can make use of a
couple of shortcuts: a double slash ignores everything before the
second slash in the pair, and ‘<samp>~/</samp>’ is your home directory.
See <a href="#Minibuffer-File">Minibuffer File</a>.

</p>
<a name="index-environment-variables-in-file-names"></a>
<a name="index-expansion-of-environment-variables"></a>
<a name="index-_0024-in-file-names"></a>
<a name="File-Names-with-_0024"></a><p>The character ‘<samp>$</samp>’ is used to
substitute an environment variable into a file name.  The name of the
environment variable consists of all the alphanumeric characters after
the ‘<samp>$</samp>’; alternatively, it can be enclosed in braces after the
‘<samp>$</samp>’.  For example, if you have used the shell command
<code>export FOO=rms/hacks</code> to set up an environment variable named
<code>FOO</code>, then both <samp>/u/$FOO/test.c</samp> and
<samp>/u/${FOO}/test.c</samp> are abbreviations for
<samp>/u/rms/hacks/test.c</samp>.  If the environment variable is not
defined, no substitution occurs, so that the character ‘<samp>$</samp>’ stands
for itself.  Note that environment variables set outside Emacs affect
Emacs only if they are applied before Emacs is started.

</p>
<p>To access a file with ‘<samp>$</samp>’ in its name, if the ‘<samp>$</samp>’ causes
expansion, type ‘<samp>$$</samp>’.  This pair is converted to a single
‘<samp>$</samp>’ at the same time that variable substitution is performed for
a single ‘<samp>$</samp>’.  Alternatively, quote the whole file name with
‘<samp>/:</samp>’ (see <a href="#Quoted-File-Names">Quoted File Names</a>).  File names which begin with a
literal ‘<samp>~</samp>’ should also be quoted with ‘<samp>/:</samp>’.

</p>
<p>You can include non-<acronym>ASCII</acronym> characters in file names.
See <a href="#File-Name-Coding">File Name Coding</a>.

</p>

<a name="Visiting"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Saving" accesskey="n" rel="next">Saving</a>, Previous: <a href="#File-Names" accesskey="p" rel="prev">File Names</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Visiting-Files"></a>
<h3 class="section">18.2 Visiting Files</h3>
<a name="index-visiting-files"></a>
<a name="index-open-file"></a>

<dl compact="compact">
<dt><kbd>C-x C-f</kbd></dt>
<dd><p>Visit a file (<code>find-file</code>).

</p></dd>
<dt><kbd>C-x C-r</kbd></dt>
<dd><p>Visit a file for viewing, without allowing changes to it
(<code>find-file-read-only</code>).

</p></dd>
<dt><kbd>C-x C-v</kbd></dt>
<dd><p>Visit a different file instead of the one visited last
(<code>find-alternate-file</code>).

</p></dd>
<dt><kbd>C-x 4 f</kbd></dt>
<dd><p>Visit a file, in another window (<code>find-file-other-window</code>).  Don’t
alter what is displayed in the selected window.

</p></dd>
<dt><kbd>C-x 5 f</kbd></dt>
<dd><p>Visit a file, in a new frame (<code>find-file-other-frame</code>).  Don’t
alter what is displayed in the selected frame.

</p></dd>
<dt><kbd>M-x find-file-literally</kbd></dt>
<dd><p>Visit a file with no conversion of the contents.

</p></dd>
</dl>

<a name="index-files_002c-visiting-and-saving"></a>
<a name="index-saving-files"></a>
<p><em>Visiting</em> a file means reading its contents into an Emacs
buffer so you can edit them.  Emacs makes a new buffer for each file
that you visit.

</p>
<a name="index-C_002dx-C_002df"></a>
<a name="index-find_002dfile"></a>
<p>To visit a file, type <kbd>C-x C-f</kbd> (<code>find-file</code>) and use the
minibuffer to enter the name of the desired file.  While in the
minibuffer, you can abort the command by typing <kbd>C-g</kbd>.  See <a href="#File-Names">File Names</a>, for details about entering file names into minibuffers.

</p>
<p>If the specified file exists but the system does not allow you to
read it, an error message is displayed in the echo area (on GNU and
Unix systems you might be able to visit such a file using the
‘<samp>su</samp>’ or ‘<samp>sudo</samp>’ methods; see <a href="#Remote-Files">Remote Files</a>).  Otherwise,
you can tell that <kbd>C-x C-f</kbd> has completed successfully by the
appearance of new text on the screen, and by the buffer name shown in
the mode line (see <a href="#Mode-Line">Mode Line</a>).  Emacs normally constructs the
buffer name from the file name, omitting the directory name.  For
example, a file named <samp>/usr/rms/emacs.tex</samp> is visited in a buffer
named ‘<samp>emacs.tex</samp>’.  If there is already a buffer with that name,
Emacs constructs a unique name; the normal method is to add a suffix
based on the directory name (e.g., ‘<samp>&lt;rms&gt;</samp>’, ‘<samp>&lt;tmp&gt;</samp>’,
and so on), but you can select other methods.  See <a href="#Uniquify">Uniquify</a>.

</p>
<a name="index-creating-files"></a>
<p>To create a new file, just visit it using the same command, <kbd>C-x
C-f</kbd>.  Emacs displays ‘<samp>(New file)</samp>’ in the echo area, but in other
respects behaves as if you had visited an existing empty file.

</p>
<a name="index-modified-_0028buffer_0029"></a>
<p>After visiting a file, the changes you make with editing commands are
made in the Emacs buffer.  They do not take effect in the visited
file, until you <em>save</em> the buffer (see <a href="#Saving">Saving</a>).  If a buffer
contains changes that have not been saved, we say the buffer is
<em>modified</em>.  This implies that some changes will be lost if the
buffer is not saved.  The mode line displays two stars near the left
margin to indicate that the buffer is modified.

</p>
<p>If you visit a file that is already in Emacs, <kbd>C-x C-f</kbd> switches
to the existing buffer instead of making another copy.  Before doing
so, it checks whether the file has changed since you last visited or
saved it.  If the file has changed, Emacs offers to reread it.

</p>
<a name="index-large_002dfile_002dwarning_002dthreshold"></a>
<a name="index-file_002c-warning-when-size-is-large"></a>
<a name="index-size-of-file_002c-warning-when-visiting"></a>
<a name="index-maximum-buffer-size-exceeded_002c-error-message"></a>
<p>If you try to visit a file larger than
<code>large-file-warning-threshold</code> (the default is 10000000, which is
about 10 megabytes), Emacs asks you for confirmation first.  You can
answer <kbd>y</kbd> to proceed with visiting the file or <kbd>l</kbd> to visit
the file literally (see below).  Visiting large files literally speeds
up navigation and editing of such files, because various
potentially-expensive features are turned off.  Note, however, that
Emacs cannot visit files that are larger than the maximum Emacs buffer
size, which is limited by the amount of memory Emacs can allocate and
by the integers that Emacs can represent (see <a href="#Buffers">Buffers</a>).  If you
try, Emacs displays an error message saying that the maximum buffer
size has been exceeded.

</p>
<a name="index-wildcard-characters-in-file-names"></a>
<a name="index-find_002dfile_002dwildcards"></a>
<p>If the file name you specify contains shell-style wildcard
characters, Emacs visits all the files that match it.  (On
case-insensitive filesystems, Emacs matches the wildcards disregarding
the letter case.)  Wildcards include ‘<samp>?</samp>’, ‘<samp>*</samp>’, and
‘<samp>[…]</samp>’ sequences.  To enter the wild card ‘<samp>?</samp>’ in a file
name in the minibuffer, you need to type <kbd>C-q ?</kbd>.  See <a href="#Quoted-File-Names">Quoted File Names</a>, for information on how to visit a file whose name
actually contains wildcard characters.  You can disable the wildcard
feature by customizing <code>find-file-wildcards</code>.

</p>
<a name="index-C_002dx-C_002dv"></a>
<a name="index-find_002dalternate_002dfile"></a>
<p>If you visit the wrong file unintentionally by typing its name
incorrectly, type <kbd>C-x C-v</kbd> (<code>find-alternate-file</code>) to visit
the file you really wanted.  <kbd>C-x C-v</kbd> is similar to <kbd>C-x
C-f</kbd>, but it kills the current buffer (after first offering to save it
if it is modified).  When <kbd>C-x C-v</kbd> reads the file name to visit,
it inserts the entire default file name in the buffer, with point just
after the directory part; this is convenient if you made a slight
error in typing the name.

</p>
<a name="index-find_002dfile_002drun_002ddired"></a>
<p>If you visit a file that is actually a directory, Emacs invokes
Dired, the Emacs directory browser.  See <a href="#Dired">Dired</a>.  You can disable
this behavior by setting the variable <code>find-file-run-dired</code> to
<code>nil</code>; in that case, it is an error to try to visit a directory.

</p>
<p>Files which are actually collections of other files, or <em>file
archives</em>, are visited in special modes which invoke a Dired-like
environment to allow operations on archive members.  See <a href="#File-Archives">File Archives</a>, for more about these features.

</p>
<p>If you visit a file that the operating system won’t let you modify,
or that is marked read-only, Emacs makes the buffer read-only too, so
that you won’t go ahead and make changes that you’ll have trouble
saving afterward.  You can make the buffer writable with <kbd>C-x C-q</kbd>
(<code>read-only-mode</code>).  See <a href="#Misc-Buffer">Misc Buffer</a>.

</p>
<a name="index-C_002dx-C_002dr"></a>
<a name="index-find_002dfile_002dread_002donly"></a>
<p>If you want to visit a file as read-only in order to protect
yourself from entering changes accidentally, visit it with the command
<kbd>C-x C-r</kbd> (<code>find-file-read-only</code>) instead of <kbd>C-x C-f</kbd>.

</p>
<a name="index-C_002dx-4-f"></a>
<a name="index-find_002dfile_002dother_002dwindow"></a>
<p><kbd>C-x 4 f</kbd> (<code>find-file-other-window</code>) is like <kbd>C-x C-f</kbd>
except that the buffer containing the specified file is selected in another
window.  The window that was selected before <kbd>C-x 4 f</kbd> continues to
show the same buffer it was already showing.  If this command is used when
only one window is being displayed, that window is split in two, with one
window showing the same buffer as before, and the other one showing the
newly requested file.  See <a href="#Windows">Windows</a>.

</p>
<a name="index-C_002dx-5-f"></a>
<a name="index-find_002dfile_002dother_002dframe"></a>
<p><kbd>C-x 5 f</kbd> (<code>find-file-other-frame</code>) is similar, but opens a
new frame, or selects any existing frame showing the specified file.
See <a href="#Frames">Frames</a>.

</p>
<a name="index-file-selection-dialog"></a>
<p>On graphical displays, there are two additional methods for visiting
files.  Firstly, when Emacs is built with a suitable GUI toolkit,
commands invoked with the mouse (by clicking on the menu bar or tool
bar) use the toolkit’s standard file selection dialog instead of
prompting for the file name in the minibuffer.  On GNU/Linux and Unix
platforms, Emacs does this when built with GTK+, LessTif, and Motif
toolkits; on MS-Windows and Mac, the GUI version does that by default.
For information on how to customize this, see <a href="#Dialog-Boxes">Dialog Boxes</a>.

</p>
<p>Secondly, Emacs supports drag and drop: dropping a file into an
ordinary Emacs window visits the file using that window.  As an
exception, dropping a file into a window displaying a Dired buffer
moves or copies the file into the displayed directory.  For details,
see <a href="#Drag-and-Drop">Drag and Drop</a>, and <a href="#Misc-Dired-Features">Misc Dired Features</a>.

</p>
<p>On text-mode terminals and on graphical displays when Emacs was
built without a GUI toolkit, you can visit files via the menu-bar
‘<samp>File</samp>’ menu, which has the ‘<samp>Visit New File</samp>’ and the
‘<samp>Open File</samp>’ items.

</p>
<p>Each time you visit a file, Emacs automatically scans its contents
to detect what character encoding and end-of-line convention it uses,
and converts these to Emacs’s internal encoding and end-of-line
convention within the buffer.  When you save the buffer, Emacs
performs the inverse conversion, writing the file to disk with its
original encoding and end-of-line convention.  See <a href="#Coding-Systems">Coding Systems</a>.

</p>
<a name="index-find_002dfile_002dliterally"></a>
<p>If you wish to edit a file as a sequence of <acronym>ASCII</acronym>
characters with no special encoding or conversion, use the <kbd>M-x
find-file-literally</kbd> command.  This visits a file, like <kbd>C-x C-f</kbd>,
but does not do format conversion (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Format-Conversion">Format
Conversion</a> in <cite>the Emacs Lisp Reference Manual</cite>), character code
conversion (see <a href="#Coding-Systems">Coding Systems</a>), or automatic uncompression
(see <a href="#Compressed-Files">Compressed Files</a>), and does not add a final newline because
of <code>require-final-newline</code> (see <a href="#Customize-Save">Customize Save</a>).  If you have
already visited the same file in the usual (non-literal) manner, this
command asks you whether to visit it literally instead.

</p>
<a name="index-find_002dfile_002dhook"></a>
<a name="index-find_002dfile_002dnot_002dfound_002dfunctions"></a>
<p>Two special hook variables allow extensions to modify the operation
of visiting files.  Visiting a file that does not exist runs the
functions in <code>find-file-not-found-functions</code>; this variable holds
a list of functions, which are called one by one (with no arguments)
until one of them returns non-<code>nil</code>.  This is not a normal hook,
and the name ends in ‘<samp>-functions</samp>’ rather than ‘<samp>-hook</samp>’ to
indicate that fact.

</p>
<p>Successful visiting of any file, whether existing or not, calls the
functions in <code>find-file-hook</code>, with no arguments.  This variable
is a normal hook.  In the case of a nonexistent file, the
<code>find-file-not-found-functions</code> are run first.  See <a href="#Hooks">Hooks</a>.

</p>
<p>There are several ways to specify automatically the major mode for
editing the file (see <a href="#Choosing-Modes">Choosing Modes</a>), and to specify local
variables defined for that file (see <a href="#File-Variables">File Variables</a>).

</p>

<a name="Saving"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Reverting" accesskey="n" rel="next">Reverting</a>, Previous: <a href="#Visiting" accesskey="p" rel="prev">Visiting</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Saving-Files"></a>
<h3 class="section">18.3 Saving Files</h3>

<p><em>Saving</em> a buffer in Emacs means writing its contents back into the file
that was visited in the buffer.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Save-Commands" accesskey="1">Save Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands for saving files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Backup" accesskey="2">Backup</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How Emacs saves the old version of your file.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Customize-Save" accesskey="3">Customize Save</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Customizing the saving of files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Interlocking" accesskey="4">Interlocking</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How Emacs protects against simultaneous editing
                          of one file by two users.

</td></tr>
<tr><td align="left" valign="top">• <a href="#File-Shadowing" accesskey="5">Shadowing</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Copying files to “shadows” automatically.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Time-Stamps" accesskey="6">Time Stamps</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Emacs can update time stamps on saved files.

</td></tr>
</tbody></table>


<a name="Save-Commands"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Backup" accesskey="n" rel="next">Backup</a>, Up: <a href="#Saving" accesskey="u" rel="up">Saving</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Commands-for-Saving-Files"></a>
<h4 class="subsection">18.3.1 Commands for Saving Files</h4>

<p>These are the commands that relate to saving and writing files.

</p>
<dl compact="compact">
<dt><kbd>C-x C-s</kbd></dt>
<dd><p>Save the current buffer to its file (<code>save-buffer</code>).

</p></dd>
<dt><kbd>C-x s</kbd></dt>
<dd><p>Save any or all buffers to their files (<code>save-some-buffers</code>).

</p></dd>
<dt><kbd>M-~</kbd></dt>
<dd><p>Forget that the current buffer has been changed (<code>not-modified</code>).
With prefix argument (<kbd>C-u</kbd>), mark the current buffer as changed.

</p></dd>
<dt><kbd>C-x C-w</kbd></dt>
<dd><p>Save the current buffer with a specified file name (<code>write-file</code>).

</p></dd>
<dt><kbd>M-x set-visited-file-name</kbd></dt>
<dd><p>Change the file name under which the current buffer will be saved.

</p></dd>
</dl>

<a name="index-C_002dx-C_002ds"></a>
<a name="index-save_002dbuffer"></a>
<p>When you wish to save the file and make your changes permanent, type
<kbd>C-x C-s</kbd> (<code>save-buffer</code>).  After saving is finished, <kbd>C-x C-s</kbd>
displays a message like this:

</p>
<div class="example">
<pre class="example">Wrote /u/rms/gnu/gnu.tasks
</pre></div>

<p>If the current buffer is not modified (no changes have been made in it
since the buffer was created or last saved), saving is not really
done, because it would have no effect.  Instead, <kbd>C-x C-s</kbd>
displays a message like this in the echo area:

</p>
<div class="example">
<pre class="example">(No changes need to be saved)
</pre></div>

<p>With a prefix argument, <kbd>C-u C-x C-s</kbd>, Emacs also marks the buffer
to be backed up when the next save is done.  See <a href="#Backup">Backup</a>.

</p>
<a name="index-C_002dx-s"></a>
<a name="index-save_002dsome_002dbuffers"></a>
<p>The command <kbd>C-x s</kbd> (<code>save-some-buffers</code>) offers to save any
or all modified buffers.  It asks you what to do with each buffer.  The
possible responses are analogous to those of <code>query-replace</code>:

</p>
<dl compact="compact">
<dt><kbd>y</kbd></dt>
<dt><kbd><span class="key">SPC</span></kbd></dt>
<dd><p>Save this buffer and ask about the rest of the buffers.

</p></dd>
<dt><kbd>n</kbd></dt>
<dt><kbd><span class="key">DEL</span></kbd></dt>
<dd><p>Don’t save this buffer, but ask about the rest of the buffers.

</p></dd>
<dt><kbd>!</kbd></dt>
<dd><p>Save this buffer and all the rest with no more questions.

</p></dd>
<dt><kbd>q</kbd></dt>
<dt><kbd><span class="key">RET</span></kbd></dt>
<dd><p>Terminate <code>save-some-buffers</code> without any more saving.

</p></dd>
<dt><kbd>.</kbd></dt>
<dd><p>Save this buffer, then exit <code>save-some-buffers</code> without even asking
about other buffers.

</p></dd>
<dt><kbd>C-r</kbd></dt>
<dd><p>View the buffer that you are currently being asked about.  When you exit
View mode, you get back to <code>save-some-buffers</code>, which asks the
question again.

</p></dd>
<dt><kbd>C-f</kbd></dt>
<dd><p>Exit <code>save-some-buffers</code> and visit the buffer that you are
currently being asked about.

</p></dd>
<dt><kbd>d</kbd></dt>
<dd><p>Diff the buffer against its corresponding file, so you can see what
changes you would be saving.  This calls the command
<code>diff-buffer-with-file</code> (see <a href="#Comparing-Files">Comparing Files</a>).

</p></dd>
<dt><kbd>C-h</kbd></dt>
<dd><p>Display a help message about these options.

</p></dd>
</dl>

<p><a name="index-save_002dsome_002dbuffers_002ddefault_002dpredicate"></a>

You can customize the value of
<code>save-some-buffers-default-predicate</code> to control which buffers
Emacs will ask about.

</p>
<p><kbd>C-x C-c</kbd>, the key sequence to exit Emacs, invokes
<code>save-some-buffers</code> and therefore asks the same questions.

</p>
<a name="index-M_002d_007e"></a>
<a name="index-not_002dmodified"></a>
<p>If you have changed a buffer but do not wish to save the changes,
you should take some action to prevent it.  Otherwise, each time you
use <kbd>C-x s</kbd> or <kbd>C-x C-c</kbd>, you are liable to save this buffer
by mistake.  One thing you can do is type <kbd>M-~</kbd>
(<code>not-modified</code>), which clears out the indication that the buffer
is modified.  If you do this, none of the save commands will believe
that the buffer needs to be saved.  (‘<samp>~</samp>’ is often used as a
mathematical symbol for “not”; thus <kbd>M-~</kbd> is “not”, metafied.)
Alternatively, you can cancel all the changes made since the file was
visited or saved, by reading the text from the file again.  This is
called <em>reverting</em>.  See <a href="#Reverting">Reverting</a>.  (You could also undo all
the changes by repeating the undo command <kbd>C-x u</kbd> until you have
undone all the changes; but reverting is easier.)

</p>
<a name="index-set_002dvisited_002dfile_002dname"></a>
<p><kbd>M-x set-visited-file-name</kbd> alters the name of the file that the
current buffer is visiting.  It reads the new file name using the
minibuffer.  Then it marks the buffer as visiting that file name, and
changes the buffer name correspondingly.  <code>set-visited-file-name</code>
does not save the buffer in the newly visited file; it just alters the
records inside Emacs in case you do save later.  It also marks the
buffer as modified so that <kbd>C-x C-s</kbd> in that buffer
<em>will</em> save.

</p>
<a name="index-C_002dx-C_002dw"></a>
<a name="index-write_002dfile"></a>
<p>If you wish to mark the buffer as visiting a different file and save
it right away, use <kbd>C-x C-w</kbd> (<code>write-file</code>).  This is
equivalent to <code>set-visited-file-name</code> followed by <kbd>C-x C-s</kbd>,
except that <kbd>C-x C-w</kbd> asks for confirmation if the file exists.
<kbd>C-x C-s</kbd> used on a buffer that is not visiting a file has the
same effect as <kbd>C-x C-w</kbd>; that is, it reads a file name, marks the
buffer as visiting that file, and saves it there.  The default file
name in a buffer that is not visiting a file is made by combining the
buffer name with the buffer’s default directory (see <a href="#File-Names">File Names</a>).

</p>
<p>If the new file name implies a major mode, then <kbd>C-x C-w</kbd> switches
to that major mode, in most cases.  The command
<code>set-visited-file-name</code> also does this.  See <a href="#Choosing-Modes">Choosing Modes</a>.

</p>
<p>If Emacs is about to save a file and sees that the date of the latest
version on disk does not match what Emacs last read or wrote, Emacs
notifies you of this fact, because it probably indicates a problem caused
by simultaneous editing and requires your immediate attention.
See <a href="#Interlocking">Simultaneous Editing</a>.

</p>

<a name="Backup"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Customize-Save" accesskey="n" rel="next">Customize Save</a>, Previous: <a href="#Save-Commands" accesskey="p" rel="prev">Save Commands</a>, Up: <a href="#Saving" accesskey="u" rel="up">Saving</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Backup-Files"></a>
<h4 class="subsection">18.3.2 Backup Files</h4>
<a name="index-backup-file"></a>
<a name="index-make_002dbackup_002dfiles"></a>

<p>On most operating systems, rewriting a file automatically destroys all
record of what the file used to contain.  Thus, saving a file from Emacs
throws away the old contents of the file—or it would, except that
Emacs carefully copies the old contents to another file, called the
<em>backup</em> file, before actually saving.

</p>
<p>Emacs makes a backup for a file only the first time the file is
saved from a buffer.  No matter how many times you subsequently save
the file, its backup remains unchanged.  However, if you kill the
buffer and then visit the file again, a new backup file will be made.

</p>
<p>For most files, the variable <code>make-backup-files</code> determines
whether to make backup files.  On most operating systems, its default
value is <code>t</code>, so that Emacs does write backup files.

</p>
<p>For files managed by a version control system (see <a href="#Version-Control">Version Control</a>), the variable <code>vc-make-backup-files</code> determines whether
to make backup files.  By default it is <code>nil</code>, since backup files
are redundant when you store all the previous versions in a version
control system.
See <a href="#General-VC-Options">General VC Options</a>.

</p>
<p>At your option, Emacs can keep either a single backup for each file,
or make a series of numbered backup files for each file that you edit.
See <a href="#Backup-Names">Backup Names</a>.

</p>
<a name="index-backup_002denable_002dpredicate"></a>
<a name="index-temporary_002dfile_002ddirectory"></a>
<a name="index-small_002dtemporary_002dfile_002ddirectory"></a>
<p>The default value of the <code>backup-enable-predicate</code> variable
prevents backup files being written for files in the directories used
for temporary files, specified by <code>temporary-file-directory</code> or
<code>small-temporary-file-directory</code>.

</p>
<p>You can explicitly tell Emacs to make another backup file from a
buffer, even though that buffer has been saved before.  If you save
the buffer with <kbd>C-u C-x C-s</kbd>, the version thus saved will be made
into a backup file if you save the buffer again.  <kbd>C-u C-u C-x
C-s</kbd> saves the buffer, but first makes the previous file contents into
a new backup file.  <kbd>C-u C-u C-u C-x C-s</kbd> does both things: it
makes a backup from the previous contents, and arranges to make
another from the newly saved contents if you save again.

</p>
<a name="index-backup_002ddirectory_002dalist"></a>
<p>You can customize the variable <code>backup-directory-alist</code> to
specify that files matching certain patterns should be backed up in
specific directories.  A typical use is to add an element <code>("."
. <var>dir</var>)</code> to make all backups in the directory with absolute name
<var>dir</var>.  Emacs modifies the backup file names to avoid clashes
between files with the same names originating in different
directories.  Alternatively, adding, <code>("." . ".~")</code> would make
backups in the invisible subdirectory <samp>.~</samp> of the original file’s
directory.  Emacs creates the directory, if necessary, to make the
backup.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Backup-Names" accesskey="1">Names</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How backup files are named.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Backup-Deletion" accesskey="2">Deletion</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Emacs deletes excess numbered backups.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Backup-Copying" accesskey="3">Copying</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Backups can be made by copying or renaming.

</td></tr>
</tbody></table>


<a name="Backup-Names"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Backup-Deletion" accesskey="n" rel="next">Backup Deletion</a>, Up: <a href="#Backup" accesskey="u" rel="up">Backup</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Single-or-Numbered-Backups"></a>
<h4 class="subsubsection">18.3.2.1 Single or Numbered Backups</h4>
<a name="index-backup-file-names"></a>
<a name="index-names-of-backup-files"></a>

<a name="index-_007e_002c-in-names-of-backup-files"></a>
<a name="index-tilde-_0028_007e_0029-at-end-of-backup-file-name"></a>
<p>When Emacs makes a backup file, its name is normally constructed by
appending ‘<samp>~</samp>’ to the file name being edited; thus, the backup
file for <samp>eval.c</samp> would be <samp>eval.c~</samp>.

</p>
<a name="index-_007e_002f_002eemacs_002ed_002f_0025backup_0025_007e"></a>
<p>If access control stops Emacs from writing backup files under the
usual names, it writes the backup file as <samp>~/.emacs.d/%backup%~</samp>.
Only one such file can exist, so only the most recently made such
backup is available.

</p>
<p>Emacs can also make <em>numbered backup files</em>.  Numbered backup
file names contain ‘<samp>.~</samp>’, the number, and another ‘<samp>~</samp>’ after
the original file name.  Thus, the backup files of <samp>eval.c</samp> would
be called <samp>eval.c.~1~</samp>, <samp>eval.c.~2~</samp>, and so on, all the way
through names like <samp>eval.c.~259~</samp> and beyond.

</p>
<a name="index-version_002dcontrol"></a>
<p>The variable <code>version-control</code> determines whether to make
single backup files or multiple numbered backup files.  Its possible
values are:

</p>
<dl compact="compact">
<dt><code>nil</code></dt>
<dd><p>Make numbered backups for files that have numbered backups already.
Otherwise, make single backups.  This is the default.

</p></dd>
<dt><code>t</code></dt>
<dd><p>Make numbered backups.

</p></dd>
<dt><code>never</code></dt>
<dd><p>Never make numbered backups; always make single backups.

</p></dd>
</dl>

<p>The usual way to set this variable is globally, through your init file
or the customization buffer.  However, you can set
<code>version-control</code> locally in an individual buffer to control the
making of backups for that buffer’s file (see <a href="#Locals">Locals</a>).  You can
have Emacs set <code>version-control</code> locally whenever you visit a
given file (see <a href="#File-Variables">File Variables</a>).  Some modes, such as Rmail mode,
set this variable.

</p>
<a name="index-VERSION_005fCONTROL-environment-variable"></a>
<p>If you set the environment variable <code>VERSION_CONTROL</code>, to tell
various GNU utilities what to do with backup files, Emacs also obeys the
environment variable by setting the Lisp variable <code>version-control</code>
accordingly at startup.  If the environment variable’s value is ‘<samp>t</samp>’
or ‘<samp>numbered</samp>’, then <code>version-control</code> becomes <code>t</code>; if the
value is ‘<samp>nil</samp>’ or ‘<samp>existing</samp>’, then <code>version-control</code>
becomes <code>nil</code>; if it is ‘<samp>never</samp>’ or ‘<samp>simple</samp>’, then
<code>version-control</code> becomes <code>never</code>.

</p>
<a name="index-make_002dbackup_002dfile_002dname_002dfunction"></a>
<p>If you set the variable <code>make-backup-file-name-function</code> to
a suitable Lisp function, you can override the usual way Emacs
constructs backup file names.

</p>

<a name="Backup-Deletion"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Backup-Copying" accesskey="n" rel="next">Backup Copying</a>, Previous: <a href="#Backup-Names" accesskey="p" rel="prev">Backup Names</a>, Up: <a href="#Backup" accesskey="u" rel="up">Backup</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Automatic-Deletion-of-Backups"></a>
<h4 class="subsubsection">18.3.2.2 Automatic Deletion of Backups</h4>

<p>To prevent excessive consumption of disk space, Emacs can delete numbered
backup versions automatically.  Generally Emacs keeps the first few backups
and the latest few backups, deleting any in between.  This happens every
time a new backup is made.

</p>
<a name="index-kept_002dold_002dversions"></a>
<a name="index-kept_002dnew_002dversions"></a>
<p>The two variables <code>kept-old-versions</code> and
<code>kept-new-versions</code> control this deletion.  Their values are,
respectively, the number of oldest (lowest-numbered) backups to keep
and the number of newest (highest-numbered) ones to keep, each time a
new backup is made.  The backups in the middle (excluding those oldest
and newest) are the excess middle versions—those backups are
deleted.  These variables’ values are used when it is time to delete
excess versions, just after a new backup version is made; the newly
made backup is included in the count in <code>kept-new-versions</code>.  By
default, both variables are 2.

</p>
<a name="index-delete_002dold_002dversions"></a>
<p>If <code>delete-old-versions</code> is <code>t</code>, Emacs deletes the excess
backup files silently.  If it is <code>nil</code>, the default, Emacs asks
you whether it should delete the excess backup versions.  If it has
any other value, then Emacs never automatically deletes backups.

</p>
<p>Dired’s <kbd>.</kbd> (Period) command can also be used to delete old versions.
See <a href="#Flagging-Many-Files">Flagging Many Files</a>.

</p>

<a name="Backup-Copying"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Backup-Deletion" accesskey="p" rel="prev">Backup Deletion</a>, Up: <a href="#Backup" accesskey="u" rel="up">Backup</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Copying-vs_002e-Renaming"></a>
<h4 class="subsubsection">18.3.2.3 Copying vs. Renaming</h4>

<p>Backup files can be made by copying the old file or by renaming it.
This makes a difference when the old file has multiple names (hard
links).  If the old file is renamed into the backup file, then the
alternate names become names for the backup file.  If the old file is
copied instead, then the alternate names remain names for the file
that you are editing, and the contents accessed by those names will be
the new contents.

</p>
<p>The method of making a backup file may also affect the file’s owner
and group.  If copying is used, these do not change.  If renaming is used,
you become the file’s owner, and the file’s group becomes the default
(different operating systems have different defaults for the group).

</p>
<a name="index-backup_002dby_002dcopying"></a>
<a name="index-backup_002dby_002dcopying_002dwhen_002dlinked"></a>
<a name="index-backup_002dby_002dcopying_002dwhen_002dmismatch"></a>
<a name="index-backup_002dby_002dcopying_002dwhen_002dprivileged_002dmismatch"></a>
<a name="index-file-ownership_002c-and-backup"></a>
<a name="index-backup_002c-and-user_002did"></a>
<p>The choice of renaming or copying is made as follows:

</p>
<ul>
<li>  If the variable <code>backup-by-copying</code> is non-<code>nil</code> (the
default is <code>nil</code>), use copying.



</li><li>  Otherwise, if the variable <code>backup-by-copying-when-linked</code> is
non-<code>nil</code> (the default is <code>nil</code>), and the file has multiple
names, use copying.



</li><li>  Otherwise, if the variable <code>backup-by-copying-when-mismatch</code> is
non-<code>nil</code> (the default is <code>t</code>), and renaming would change
the file’s owner or group, use copying.



<p>If you change <code>backup-by-copying-when-mismatch</code> to <code>nil</code>,
Emacs checks the numeric user-id of the file’s owner and the numeric
group-id of the file’s group.  If either is
no greater than <code>backup-by-copying-when-privileged-mismatch</code>, then it
behaves as though <code>backup-by-copying-when-mismatch</code> is
non-<code>nil</code> anyway.

</p>
</li><li>  Otherwise, renaming is the default choice.

</li></ul>

<p>When a file is managed with a version control system (see <a href="#Version-Control">Version Control</a>), Emacs does not normally make backups in the usual way for
that file.  But <em>committing</em> (a.k.a. <em>checking in</em>,
see <a href="#VCS-Concepts">VCS Concepts</a>) new versions of files is similar in some ways
to making backups.  One unfortunate similarity is that these
operations typically break hard links, disconnecting the file name you
visited from any alternate names for the same file.  This has nothing
to do with Emacs—the version control system does it.

</p>

<a name="Customize-Save"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Interlocking" accesskey="n" rel="next">Interlocking</a>, Previous: <a href="#Backup" accesskey="p" rel="prev">Backup</a>, Up: <a href="#Saving" accesskey="u" rel="up">Saving</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Customizing-Saving-of-Files"></a>
<h4 class="subsection">18.3.3 Customizing Saving of Files</h4>

<a name="index-require_002dfinal_002dnewline"></a>
<p>If the value of the variable <code>require-final-newline</code> is
<code>t</code>, saving or writing a file silently puts a newline at the end
if there isn’t already one there.  If the value is <code>visit</code>, Emacs
adds a newline at the end of any file that doesn’t have one, just
after it visits the file.  (This marks the buffer as modified, and you
can undo it.)  If the value is <code>visit-save</code>, Emacs adds such
newlines both on visiting and on saving.  If the value is <code>nil</code>,
Emacs leaves the end of the file unchanged; any other non-<code>nil</code>
value means Emacs asks you whether to add a newline.  The default is
<code>nil</code>.

</p>
<a name="index-mode_002drequire_002dfinal_002dnewline"></a>
<p>Some major modes are designed for specific kinds of files that are
always supposed to end in newlines.  Such major modes set the variable
<code>require-final-newline</code> to the value of
<code>mode-require-final-newline</code>, which defaults to <code>t</code>.  By
setting the latter variable, you can control how these modes handle
final newlines.

</p>
<a name="index-write_002dregion_002dinhibit_002dfsync"></a>
<p>Normally, when a program writes a file, the operating system briefly
caches the file’s data in main memory before committing the data to
disk.  This can greatly improve performance; for example, when running
on laptops, it can avoid a disk spin-up each time a file is written.
However, it risks data loss if the operating system crashes before
committing the cache to disk.

</p>
<p>To lessen this risk, Emacs can invoke the <code>fsync</code> system call
after saving a file.  Using <code>fsync</code> does not eliminate the risk
of data loss, partly because many systems do not implement
<code>fsync</code> properly, and partly because Emacs’s file-saving
procedure typically relies also on directory updates that might not
survive a crash even if <code>fsync</code> works properly.

</p>
<p>The <code>write-region-inhibit-fsync</code> variable controls whether
Emacs invokes <code>fsync</code> after saving a file.  The variable’s
default value is <code>nil</code> when Emacs is interactive, and <code>t</code>
when Emacs runs in batch mode (see <a href="#Initial-Options">Batch Mode</a>).

</p>
<p>Emacs never uses <code>fsync</code> when writing auto-save files, as these
files might lose data anyway.

</p>

<a name="Interlocking"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#File-Shadowing" accesskey="n" rel="next">File Shadowing</a>, Previous: <a href="#Customize-Save" accesskey="p" rel="prev">Customize Save</a>, Up: <a href="#Saving" accesskey="u" rel="up">Saving</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Protection-against-Simultaneous-Editing"></a>
<h4 class="subsection">18.3.4 Protection against Simultaneous Editing</h4>

<a name="index-file-dates"></a>
<a name="index-simultaneous-editing"></a>
<p>Simultaneous editing occurs when two users visit the same file, both
make changes, and then both save them.  If nobody is informed that
this is happening, whichever user saves first would later find that
their changes were lost.

</p>
<p>On some systems, Emacs notices immediately when the second user starts
to change the file, and issues an immediate warning.  On all systems,
Emacs checks when you save the file, and warns if you are about to
overwrite another user’s changes.  You can prevent loss of the other
user’s work by taking the proper corrective action instead of saving the
file.

</p>
<a name="index-ask_002duser_002dabout_002dlock"></a>
<a name="index-locking-files"></a>
<a name="index-_002e_0023_002c-lock-file-names"></a>
<a name="index-file-locking"></a>
<p>When you make the first modification in an Emacs buffer that is
visiting a file, Emacs records that the file is <em>locked</em> by you.
(It does this by creating a specially-named symbolic link<a name="DOCF7" href="#FOOT7"><sup>7</sup></a> with special contents in the same directory.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#File-Locks">(elisp)File
Locks</a>, for more details.)  Emacs removes the lock when you
save the changes.  The idea is that the file is locked whenever an
Emacs buffer visiting it has unsaved changes.

</p>
<a name="index-create_002dlockfiles"></a>
<p>You can prevent the creation of lock files by setting the variable
<code>create-lockfiles</code> to <code>nil</code>.  <strong>Caution:</strong> by
doing so you will lose the benefits that this feature provides.

</p>
<a name="index-collision"></a>
<p>If you begin to modify the buffer while the visited file is locked by
someone else, this constitutes a <em>collision</em>.  When Emacs detects a
collision, it asks you what to do, by calling the Lisp function
<code>ask-user-about-lock</code>.  You can redefine this function for the sake
of customization.  The standard definition of this function asks you a
question and accepts three possible answers:

</p>
<dl compact="compact">
<dt><kbd>s</kbd></dt>
<dd><p>Steal the lock.  Whoever was already changing the file loses the lock,
and you gain the lock.

</p></dd>
<dt><kbd>p</kbd></dt>
<dd><p>Proceed.  Go ahead and edit the file despite its being locked by someone else.

</p></dd>
<dt><kbd>q</kbd></dt>
<dd><p>退出。This causes an error (<code>file-locked</code>), and the buffer contents remain unchanged—the modification you were trying to make does not actually take place.
</p></dd>
</dl>

<p>If Emacs or the operating system crashes, this may leave behind lock
files which are stale, so you may occasionally get warnings about
spurious collisions.  When you determine that the collision is
spurious, just use <kbd>p</kbd> to tell Emacs to go ahead anyway.

</p>
<p>Note that locking works on the basis of a file name; if a file has
multiple names, Emacs does not prevent two users from editing it
simultaneously under different names.

</p>
<p>A lock file cannot be written in some circumstances, e.g., if Emacs
lacks the system permissions or cannot create lock files for some
other reason.  In these cases, Emacs can still detect the collision
when you try to save a file, by checking the file’s last-modification
date.  If the file has changed since the last time Emacs visited or
saved it, that implies that changes have been made in some other way,
and will be lost if Emacs proceeds with saving.  Emacs then displays a
warning message and asks for confirmation before saving; answer
<kbd>yes</kbd> to save, and <kbd>no</kbd> or <kbd>C-g</kbd> cancel the save.

</p>
<p>If you are notified that simultaneous editing has already taken
place, one way to compare the buffer to its file is the <kbd>M-x
diff-buffer-with-file</kbd> command.  See <a href="#Comparing-Files">Comparing Files</a>.

</p>

<a name="File-Shadowing"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Time-Stamps" accesskey="n" rel="next">Time Stamps</a>, Previous: <a href="#Interlocking" accesskey="p" rel="prev">Interlocking</a>, Up: <a href="#Saving" accesskey="u" rel="up">Saving</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Shadowing-Files"></a>
<h4 class="subsection">18.3.5 Shadowing Files</h4>
<a name="index-shadow-files"></a>
<a name="index-file-shadows"></a>
<a name="index-shadow_002dinitialize"></a>

<p>You can arrange to keep identical <em>shadow</em> copies of certain
files in more than one place—possibly on different machines.  To do
this, first you must set up a <em>shadow file group</em>, which is a set
of identically-named files shared between a list of sites.  The file
group is permanent and applies to further Emacs sessions as well as
the current one.  Once the group is set up, every time you exit Emacs,
it will copy the file you edited to the other files in its group.  You
can also do the copying without exiting Emacs, by typing <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">shadow-copy-files</span></kbd><!-- /@w -->.

</p>
<a name="index-shadow-cluster"></a>
<p>A <em>shadow cluster</em> is a group of hosts that share directories, so
that copying to or from one of them is sufficient to update the file
on all of them.  Each shadow cluster has a name, and specifies the
network address of a primary host (the one we copy files to), and a
regular expression that matches the host names of all the other hosts
in the cluster.  You can define a shadow cluster with <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">shadow-define-cluster</span></kbd><!-- /@w -->.

</p>
<dl compact="compact">
<dt><kbd>M-x shadow-initialize</kbd></dt>
<dd><p>Set up file shadowing.

</p></dd>
<dt><kbd>M-x shadow-define-literal-group</kbd></dt>
<dd><p>Declare a single file to be shared between sites.

</p></dd>
<dt><kbd>M-x shadow-define-regexp-group</kbd></dt>
<dd><p>Make all files that match each of a group of files be shared between hosts.

</p></dd>
<dt><kbd>M-x shadow-define-cluster <span class="key">RET</span> <var>name</var> <span class="key">RET</span></kbd></dt>
<dd><p>Define a shadow file cluster <var>name</var>.

</p></dd>
<dt><kbd>M-x shadow-copy-files</kbd></dt>
<dd><p>Copy all pending shadow files.

</p></dd>
<dt><kbd>M-x shadow-cancel</kbd></dt>
<dd><p>Cancel the instruction to shadow some files.

</p></dd>
</dl>

<p>To set up a shadow file group, use <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">shadow-define-literal-group</span></kbd><!-- /@w -->  or <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">shadow-define-regexp-group</span></kbd><!-- /@w -->.  See their documentation strings for
further information.

</p>
<p>Before copying a file to its shadows, Emacs asks for confirmation.
You can answer “no” to bypass copying of this file, this time.  If
you want to cancel the shadowing permanently for a certain file, use
<kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">shadow-cancel</span></kbd><!-- /@w -->  to eliminate or change the shadow file group.

</p>
<p>File Shadowing is not available on MS Windows.

</p>

<a name="Time-Stamps"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#File-Shadowing" accesskey="p" rel="prev">File Shadowing</a>, Up: <a href="#Saving" accesskey="u" rel="up">Saving</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Updating-Time-Stamps-Automatically"></a>
<h4 class="subsection">18.3.6 Updating Time Stamps Automatically</h4>
<a name="index-time-stamps"></a>
<a name="index-modification-dates"></a>
<a name="index-locale_002c-date-format"></a>

<p>You can arrange to put a time stamp in a file, so that it is updated
automatically each time you edit and save the file.  The time stamp
must be in the first eight lines of the file, and you should insert it
like this:

</p>
<div class="example">
<pre class="example">Time-stamp: &lt;&gt;
</pre></div>

<p>or like this:

</p>
<div class="example">
<pre class="example">Time-stamp: " "
</pre></div>

<a name="index-time_002dstamp"></a>
<p>Then add the function <code>time-stamp</code> to the hook
<code>before-save-hook</code> (see <a href="#Hooks">Hooks</a>).  When you save the file, this
function then automatically updates the time stamp with the current
date and time.  You can also use the command <kbd>M-x time-stamp</kbd> to
update the time stamp manually.  By default the time stamp is
formatted according to your locale setting (see <a href="#Environment">Environment</a>) and
time zone (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Time-of-Day">Time of Day</a> in <cite>The Emacs Lisp Reference
Manual</cite>).  For customizations, see the Custom group <code>time-stamp</code>.

</p>

<a name="Reverting"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Auto-Revert" accesskey="n" rel="next">Auto Revert</a>, Previous: <a href="#Saving" accesskey="p" rel="prev">Saving</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Reverting-a-Buffer"></a>
<h3 class="section">18.4 Reverting a Buffer</h3>
<a name="index-revert_002dbuffer"></a>
<a name="index-drastic-changes"></a>
<a name="index-reread-a-file"></a>

<p>If you have made extensive changes to a file-visiting buffer and
then change your mind, you can <em>revert</em> the changes and go back to
the saved version of the file.  To do this, type <kbd>M-x
revert-buffer</kbd>.  Since reverting unintentionally could lose a lot of
work, Emacs asks for confirmation first.

</p>
<p>The <code>revert-buffer</code> command tries to position point in such a
way that, if the file was edited only slightly, you will be at
approximately the same part of the text as before.  But if you have
made major changes, point may end up in a totally different location.

</p>
<p>Reverting marks the buffer as not modified.  However, it adds the
reverted changes as a single modification to the buffer’s undo history
(see <a href="#Undo">Undo</a>).  Thus, after reverting, you can type <kbd>C-/</kbd> or its
aliases to bring the reverted changes back, if you happen to change
your mind.

</p>
<p>Some kinds of buffers that are not associated with files, such as
Dired buffers, can also be reverted.  For them, reverting means
recalculating their contents.  Buffers created explicitly with
<kbd>C-x b</kbd> cannot be reverted; <code>revert-buffer</code> reports an error
if you try.

</p>
<a name="index-revert_002dwithout_002dquery"></a>
<p>When you edit a file that changes automatically and frequently—for
example, a log of output from a process that continues to run—it may
be useful for Emacs to revert the file without querying you.  To
request this behavior, set the variable <code>revert-without-query</code> to
a list of regular expressions.  When a file name matches one of these
regular expressions, <code>find-file</code> and <code>revert-buffer</code> will
revert it automatically if it has changed—provided the buffer itself
is not modified.  (If you have edited the text, it would be wrong to
discard your changes.)

</p>
<p>You can also tell Emacs to revert buffers automatically when their
visited files change on disk; see <a href="#Auto-Revert">Auto Revert</a>.

</p>

<a name="Auto-Revert"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Auto-Save" accesskey="n" rel="next">Auto Save</a>, Previous: <a href="#Reverting" accesskey="p" rel="prev">Reverting</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Auto-Revert_003a-Keeping-buffers-automatically-up_002dto_002ddate"></a>
<h3 class="section">18.5 Auto Revert: Keeping buffers automatically up-to-date</h3>
<a name="index-Global-Auto-Revert-mode"></a>
<a name="index-mode_002c-Global-Auto-Revert"></a>
<a name="index-Auto-Revert-mode"></a>
<a name="index-mode_002c-Auto-Revert"></a>
<a name="index-global_002dauto_002drevert_002dmode"></a>
<a name="index-auto_002drevert_002dmode"></a>
<a name="index-auto_002drevert_002dtail_002dmode"></a>

<p>A buffer can get out of sync with respect to its visited file on
disk if that file is changed by another program.  To keep it up to
date, you can enable Auto Revert mode by typing <kbd>M-x auto-revert-mode</kbd>.
This automatically reverts the buffer when its visited file changes on
disk.  To do the same for all file buffers, type
<kbd>M-x global-auto-revert-mode</kbd> to enable Global Auto Revert mode.

</p>
<p>Auto Revert will not revert a buffer if it has unsaved changes, or if
its file on disk is deleted or renamed.

</p>
<p>One use of Auto Revert mode is to “tail” a file such as a system
log, so that changes made to that file by other programs are
continuously displayed.  To do this, just move the point to the end of
the buffer, and it will stay there as the file contents change.
However, if you are sure that the file will only change by growing at
the end, use Auto Revert Tail mode instead
(<code>auto-revert-tail-mode</code>).  It is more efficient for this.
Auto Revert Tail mode also works for remote files.

</p>
<a name="index-auto_002drevert_002dverbose"></a>
<p>When a buffer is auto-reverted, a message is generated.  This can be
suppressed by setting <code>auto-revert-verbose</code> to <code>nil</code>.

</p>
<a name="index-auto_002drevert_002dremote_002dfiles"></a>
<p>The Auto Revert modes do not check or revert remote files, because
that is usually too slow.  This behavior can be changed by setting the
variable <code>auto-revert-remote-files</code> to non-<code>nil</code>.

</p>
<a name="index-file-notifications"></a>
<a name="index-auto_002drevert_002duse_002dnotify"></a>
<a name="index-auto_002drevert_002dinterval"></a>
<p>By default, Auto Revert mode works using <em>file notifications</em>,
whereby changes in the filesystem are reported to Emacs by the OS.
You can disable use of file notifications by customizing the variable
<code>auto-revert-use-notify</code> to a <code>nil</code> value, then Emacs will
check for file changes by polling every five seconds.  You can change
the polling interval through the variable <code>auto-revert-interval</code>.

</p>
<p>Not all systems support file notifications; where they are not
supported, <code>auto-revert-use-notify</code> will be <code>nil</code> by
default.

</p>
<a name="index-auto_002drevert_002davoid_002dpolling"></a>
<a name="index-auto_002drevert_002dnotify_002dexclude_002ddir_002dregexp"></a>
<p>By default, Auto Revert mode will poll files for changes
periodically even when file notifications are used.  Polling is
unnecessary in many cases, and turning it off may save power by
relying on notifications only.  To do so, set the variable
<code>auto-revert-avoid-polling</code> to non-<code>nil</code>.  However,
notification is ineffective on certain file systems; mainly network
file system on Unix-like machines, where files can be altered from
other machines.  For such file systems, polling may be necessary.
To force polling when
<code>auto-revert-avoid-polling</code> is non-<code>nil</code>, set
<code>auto-revert-notify-exclude-dir-regexp</code> to match files that
should be excluded from using notification.

</p>
<p>In Dired buffers (see <a href="#Dired">Dired</a>), Auto Revert mode refreshes the
buffer when a file is created or deleted in the buffer’s directory.

</p>
<p>See <a href="#VC-Undo">VC Undo</a>, for commands to revert to earlier versions of files
under version control.  See <a href="#VC-Mode-Line">VC Mode Line</a>, for Auto Revert
peculiarities when visiting files under version control.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Non_002dFile-Buffers" accesskey="1">Non-File Buffers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Auto Reverting Non-File Buffers.

</td></tr>
</tbody></table>


<a name="Non_002dFile-Buffers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Up: <a href="#Auto-Revert" accesskey="u" rel="up">Auto Revert</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Auto-Reverting-Non_002dFile-Buffers"></a>
<h4 class="subsection">18.5.1 Auto Reverting Non-File Buffers</h4>

<p>Global Auto Revert Mode normally only reverts file buffers.  There are
two ways to auto-revert certain non-file buffers: by enabling Auto
Revert Mode in those buffers (using <kbd>M-x auto-revert-mode</kbd>); and
by setting <code>global-auto-revert-non-file-buffers</code> to a
non-<code>nil</code> value.  The latter enables Auto Reverting for all types
of buffers for which it is implemented (listed in the menu below).

</p>
<p>Like file buffers, non-file buffers should normally not revert while
you are working on them, or while they contain information that might
get lost after reverting.  Therefore, they do not revert if they are
modified.  This can get tricky, because deciding when a non-file
buffer should be marked modified is usually more difficult than for
file buffers.

</p>
<p>Another tricky detail is that, for efficiency reasons, Auto Revert
often does not try to detect all possible changes in the buffer, only
changes that are major or easy to detect.  Hence, enabling
auto-reverting for a non-file buffer does not always guarantee that
all information in the buffer is up-to-date, and does not necessarily
make manual reverts useless.

</p>
<p>At the other extreme, certain buffers automatically revert every
<code>auto-revert-interval</code> seconds.  (This currently only applies to
the Buffer Menu.)  In this case, Auto Revert does not print any
messages while reverting, even when <code>auto-revert-verbose</code> is
non-<code>nil</code>.

</p>
<a name="index-buffer_002dauto_002drevert_002dby_002dnotification"></a>
<p>Some non-file buffers can be updated reliably by file notification on
their default directory; Dired buffers is an example.  The major mode
can indicate this by setting <code>buffer-auto-revert-by-notification</code>
to a non-<code>nil</code> value in that buffer, allowing Auto Revert to
avoid periodic polling.  Such notification does not include changes to
files in that directory, only to the directory itself.

</p>
<p>The details depend on the particular types of buffers and are
explained in the corresponding sections.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Auto-Reverting-the-Buffer-Menu" accesskey="1">Auto Reverting the Buffer Menu</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Auto Revert of the Buffer Menu.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Auto-Reverting-Dired" accesskey="2">Auto Reverting Dired</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Auto Revert of Dired buffers.

</td></tr>
</tbody></table>


<a name="Auto-Reverting-the-Buffer-Menu"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Auto-Reverting-Dired" accesskey="n" rel="next">Auto Reverting Dired</a>, Up: <a href="#Non_002dFile-Buffers" accesskey="u" rel="up">Non-File Buffers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Auto-Reverting-the-Buffer-Menu-1"></a>
<h4 class="subsubsection">18.5.1.1 Auto Reverting the Buffer Menu</h4>

<p>If auto-reverting of non-file buffers is enabled, the Buffer Menu
(see <a href="#Several-Buffers">Several Buffers</a>)
automatically reverts every
<code>auto-revert-interval</code> seconds, whether there is a need for it or
not.  (It would probably take longer to check whether there is a need
than to actually revert.)

</p>
<p>If the Buffer Menu inappropriately gets marked modified, just revert
it manually using <kbd>g</kbd> and auto-reverting will resume.  However, if
you marked certain buffers to get deleted or to be displayed, you have
to be careful, because reverting erases all marks.  The fact that
adding marks sets the buffer’s modified flag prevents Auto Revert from
automatically erasing the marks.

</p>

<a name="Auto-Reverting-Dired"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Auto-Reverting-the-Buffer-Menu" accesskey="p" rel="prev">Auto Reverting the Buffer Menu</a>, Up: <a href="#Non_002dFile-Buffers" accesskey="u" rel="up">Non-File Buffers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Auto-Reverting-Dired-buffers"></a>
<h4 class="subsubsection">18.5.1.2 Auto Reverting Dired buffers</h4>

<p>Dired buffers only auto-revert when the file list of the buffer’s main
directory changes (e.g., when a new file is added or deleted).  They
do not auto-revert when information about a particular file changes
(e.g., when the size changes) or when inserted subdirectories change.
To be sure that <em>all</em> listed information is up to date, you have
to manually revert using <kbd>g</kbd>, <em>even</em> if auto-reverting is
enabled in the Dired buffer.  Sometimes, you might get the impression
that modifying or saving files listed in the main directory actually
does cause auto-reverting.  This is because making changes to a file,
or saving it, very often causes changes in the directory itself; for
instance, through backup files or auto-save files.  However, this is
not guaranteed.

</p>
<p>If the Dired buffer is marked modified and there are no changes you
want to protect, then most of the time you can make auto-reverting
resume by manually reverting the buffer using <kbd>g</kbd>.  There is one
exception.  If you flag or mark files, you can safely revert the
buffer.  This will not erase the flags or marks (unless the marked
file has been deleted, of course).  However, the buffer will stay
modified, even after reverting, and auto-reverting will not resume.
This is because, if you flag or mark files, you may be working on the
buffer and you might not want the buffer to change without warning.
If you want auto-reverting to resume in the presence of marks and
flags, mark the buffer non-modified using <kbd>M-~</kbd>.  However, adding,
deleting or changing marks or flags will mark it modified again.

</p>
<p>Remote Dired buffers are currently not auto-reverted.  Neither are
Dired buffers for which you used shell wildcards or file arguments to
list only some of the files.  <samp>*Find*</samp> and <samp>*Locate*</samp>
buffers do not auto-revert either.

</p>
<p>Note that auto-reverting Dired buffers may not work satisfactorily on
some systems.

</p>

<a name="Auto-Save"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#File-Aliases" accesskey="n" rel="next">File Aliases</a>, Previous: <a href="#Auto-Revert" accesskey="p" rel="prev">Auto Revert</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Auto_002dSaving_003a-Protection-Against-Disasters"></a>
<h3 class="section">18.6 Auto-Saving: Protection Against Disasters</h3>
<a name="index-Auto-Save-mode"></a>
<a name="index-mode_002c-Auto-Save"></a>
<a name="index-crashes"></a>

<p>From time to time, Emacs automatically saves each visited file in a
separate file, without altering the file you actually use.  This is
called <em>auto-saving</em>.  It prevents you from losing more than a
limited amount of work if the system crashes.

</p>
<a name="index-auto_002dsave_002dno_002dmessage"></a>
<p>When Emacs determines that it is time for auto-saving, it considers
each buffer, and each is auto-saved if auto-saving is enabled for it
and it has been changed since the last time it was auto-saved.  When
the <code>auto-save-no-message</code> variable is set to <code>nil</code> (the
default), the message ‘<samp>Auto-saving...</samp>’ is displayed in the echo
area during auto-saving, if any files are actually auto-saved; to
disable these messages, customize the variable to a non-<code>nil</code>
value.  Errors occurring during auto-saving are caught so that they do
not interfere with the execution of commands you have been typing.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Auto-Save-Files" accesskey="1">文件</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The file where auto-saved changes are
                                  actually made until you save the file.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Auto-Save-Control" accesskey="2">Control</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Controlling when and how often to auto-save.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Recover" accesskey="3">Recover</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Recovering text from auto-save files.

</td></tr>
</tbody></table>


<a name="Auto-Save-Files"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Auto-Save-Control" accesskey="n" rel="next">Auto Save Control</a>, Up: <a href="#Auto-Save" accesskey="u" rel="up">Auto Save</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Auto_002dSave-Files"></a>
<h4 class="subsection">18.6.1 Auto-Save Files</h4>

<p>Auto-saving does not normally save in the files that you visited,
because it can be very undesirable to save a change that you did not
want to make permanent.  Instead, auto-saving is done in a different
file called the <em>auto-save file</em>, and the visited file is changed
only when you request saving explicitly (such as with <kbd>C-x C-s</kbd>).

</p>
<a name="index-_0023_002c-in-auto_002dsave-file-names"></a>
<p>Normally, the auto-save file name is made by appending ‘<samp>#</samp>’ to the
front and rear of the visited file name.  Thus, a buffer visiting file
<samp>foo.c</samp> is auto-saved in a file <samp>#foo.c#</samp>.  Most buffers that
are not visiting files are auto-saved only if you request it explicitly;
when they are auto-saved, the auto-save file name is made by appending
‘<samp>#</samp>’ to the front and rear of buffer name, then
adding digits and letters at the end for uniqueness.  For
example, the <samp>*mail*</samp> buffer in which you compose messages to be
sent might be auto-saved in a file named <samp>#*mail*#704juu</samp>.  Auto-save file
names are made this way unless you reprogram parts of Emacs to do
something different (the functions <code>make-auto-save-file-name</code> and
<code>auto-save-file-name-p</code>).  The file name to be used for auto-saving
in a buffer is calculated when auto-saving is turned on in that buffer.

</p>
<a name="index-auto_002dsave-for-remote-files"></a>
<a name="index-auto_002dsave_002dfile_002dname_002dtransforms"></a>
<p>The variable <code>auto-save-file-name-transforms</code> allows a degree
of control over the auto-save file name.  It lets you specify a series
of regular expressions and replacements to transform the auto save
file name.  The default value puts the auto-save files for remote
files (see <a href="#Remote-Files">Remote Files</a>) into the temporary file directory on the
local machine.

</p>
<p>When you delete a substantial part of the text in a large buffer, auto
save turns off temporarily in that buffer.  This is because if you
deleted the text unintentionally, you might find the auto-save file more
useful if it contains the deleted text.  To reenable auto-saving after
this happens, save the buffer with <kbd>C-x C-s</kbd>, or use <kbd>C-u 1 M-x
auto-save-mode</kbd>.

</p>
<a name="index-auto_002dsave_002dvisited_002dmode"></a>
<p>If you want auto-saving to be done in the visited file rather than
in a separate auto-save file, enable the global minor mode
<code>auto-save-visited-mode</code>.  In this mode, auto-saving is identical
to explicit saving.  Note that this mode is orthogonal to the
<code>auto-save</code> mode described above; you can enable both at the same
time.  However, if <code>auto-save</code> mode is active in some buffer and
the obsolete <code>auto-save-visited-file-name</code> variable is set to a
non-<code>nil</code> value, that buffer won’t be affected by
<code>auto-save-visited-mode</code>.

</p>
<p>You can use the variable <code>auto-save-visited-interval</code> to
customize the interval between auto-save operations in
<code>auto-save-visited-mode</code>; by default it’s five seconds.
<code>auto-save-interval</code> and <code>auto-save-timeout</code> have no effect
on <code>auto-save-visited-mode</code>.  See <a href="#Auto-Save-Control">Auto Save Control</a>, for
details on these variables.

</p>
<a name="index-delete_002dauto_002dsave_002dfiles"></a>
<p>A buffer’s auto-save file is deleted when you save the buffer in its
visited file.  (You can inhibit this by setting the variable
<code>delete-auto-save-files</code> to <code>nil</code>.)  Changing the visited
file name with <kbd>C-x C-w</kbd> or <code>set-visited-file-name</code> renames
any auto-save file to go with the new visited name.

</p>

<a name="Auto-Save-Control"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Recover" accesskey="n" rel="next">Recover</a>, Previous: <a href="#Auto-Save-Files" accesskey="p" rel="prev">Auto Save Files</a>, Up: <a href="#Auto-Save" accesskey="u" rel="up">Auto Save</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Controlling-Auto_002dSaving"></a>
<h4 class="subsection">18.6.2 Controlling Auto-Saving</h4>

<a name="index-auto_002dsave_002ddefault"></a>
<a name="index-auto_002dsave_002dmode"></a>
<p>Each time you visit a file, auto-saving is turned on for that file’s
buffer if the variable <code>auto-save-default</code> is non-<code>nil</code> (but
not in batch mode; see <a href="#Initial-Options">Initial Options</a>).  The default for this
variable is <code>t</code>, so auto-saving is the usual practice for
file-visiting buffers.  To toggle auto-saving in the current buffer,
type <kbd>M-x auto-save-mode</kbd>.  Auto Save mode acts as a buffer-local
minor mode (see <a href="#Minor-Modes">Minor Modes</a>).

</p>
<a name="index-auto_002dsave_002dinterval"></a>
<p>Emacs auto-saves periodically based on how many characters you have
typed since the last auto-save.  The variable
<code>auto-save-interval</code> specifies how many characters there are
between auto-saves.  By default, it is 300.  Emacs doesn’t accept
values that are too small: if you customize <code>auto-save-interval</code>
to a value less than 20, Emacs will behave as if the value is 20.

</p>
<a name="index-auto_002dsave_002dtimeout"></a>
<p>Auto-saving also takes place when you stop typing for a while.  By
default, it does this after 30 seconds of idleness (at this time,
Emacs may also perform garbage collection; see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Garbage-Collection">Garbage
Collection</a> in <cite>The Emacs Lisp Reference Manual</cite>).  To change
this interval, customize the variable <code>auto-save-timeout</code>.  The
actual time period is longer if the current buffer is long; this is a
heuristic which aims to keep out of your way when you are editing long
buffers, in which auto-save takes an appreciable amount of time.
Auto-saving during idle periods accomplishes two things: first, it
makes sure all your work is saved if you go away from the terminal for
a while; second, it may avoid some auto-saving while you are actually
typing.

</p>
<a name="index-auto_002dsave_002dvisited_002dinterval"></a>
<p>When <code>auto-save-visited-mode</code> is enabled, Emacs will auto-save
file-visiting buffers after five seconds of idle time.  You can
customize the variable <code>auto-save-visited-interval</code> to change the
idle time interval.

</p>
<p>Emacs also does auto-saving whenever it gets a fatal error.  This
includes killing the Emacs job with a shell command such as ‘<samp>kill
%emacs</samp>’, or disconnecting a phone line or network connection.

</p>
<a name="index-do_002dauto_002dsave"></a>
<p>You can perform an auto-save explicitly with the command <kbd>M-x
do-auto-save</kbd>.

</p>

<a name="Recover"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Auto-Save-Control" accesskey="p" rel="prev">Auto Save Control</a>, Up: <a href="#Auto-Save" accesskey="u" rel="up">Auto Save</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Recovering-Data-from-Auto_002dSaves"></a>
<h4 class="subsection">18.6.3 Recovering Data from Auto-Saves</h4>

<a name="index-recover_002dfile"></a>
<p>You can use the contents of an auto-save file to recover from a loss
of data with the command <kbd>M-x recover-file <span class="key">RET</span> <var>file</var>
<span class="key">RET</span></kbd>.  This visits <var>file</var> and then (after your confirmation)
restores the contents from its auto-save file <samp>#<var>file</var>#</samp>.
You can then save with <kbd>C-x C-s</kbd> to put the recovered text into
<var>file</var> itself.  For example, to recover file <samp>foo.c</samp> from its
auto-save file <samp>#foo.c#</samp>, do:

</p>
<div class="example">
<pre class="example">M-x recover-file <span class="key">RET</span> foo.c <span class="key">RET</span>
yes <span class="key">RET</span>
C-x C-s
</pre></div>

<p>Before asking for confirmation, <kbd>M-x recover-file</kbd> displays a
directory listing describing the specified file and the auto-save file,
so you can compare their sizes and dates.  If the auto-save file
is older, <kbd>M-x recover-file</kbd> does not offer to read it.

</p>
<a name="index-recover_002dsession"></a>
<p>If Emacs or the computer crashes, you can recover all the files you
were editing from their auto save files with the command <kbd>M-x
recover-session</kbd>.  This first shows you a list of recorded interrupted
sessions.  Move point to the one you choose, and type <kbd>C-c C-c</kbd>.

</p>
<p>Then <code>recover-session</code> asks about each of the files that were
being edited during that session, asking whether to recover that file.
If you answer <kbd>y</kbd>, it calls <code>recover-file</code>, which works in its
normal fashion.  It shows the dates of the original file and its
auto-save file, and asks once again whether to recover that file.

</p>
<p>When <code>recover-session</code> is done, the files you’ve chosen to
recover are present in Emacs buffers.  You should then save them.  Only
this—saving them—updates the files themselves.

</p>
<a name="index-auto_002dsave_002dlist_002dfile_002dprefix"></a>
<p>Emacs records information about interrupted sessions in files named
<samp>.saves-<var>pid</var>-<var>hostname</var>~</samp> in the directory
<samp>~/.emacs.d/auto-save-list/</samp>.  This directory is determined by
the variable <code>auto-save-list-file-prefix</code>.  If you set
<code>auto-save-list-file-prefix</code> to <code>nil</code>, sessions are not
recorded for recovery.

</p>

<a name="File-Aliases"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Directories" accesskey="n" rel="next">Directories</a>, Previous: <a href="#Auto-Save" accesskey="p" rel="prev">Auto Save</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="File-Name-Aliases"></a>
<h3 class="section">18.7 File Name Aliases</h3>
<a name="index-symbolic-links-_0028visiting_0029"></a>
<a name="index-hard-links-_0028visiting_0029"></a>

<p>Symbolic links and hard links both make it possible for several file
names to refer to the same file.  Hard links are alternate names that
refer directly to the file; all the names are equally valid, and no one
of them is preferred.  By contrast, a symbolic link is a kind of defined
alias: when <samp>foo</samp> is a symbolic link to <samp>bar</samp>, you can use
either name to refer to the file, but <samp>bar</samp> is the real name, while
<samp>foo</samp> is just an alias.  More complex cases occur when symbolic
links point to directories.

</p>
<a name="index-find_002dfile_002dexisting_002dother_002dname"></a>
<a name="index-find_002dfile_002dsuppress_002dsame_002dfile_002dwarnings"></a>
<p>Normally, if you visit a file which Emacs is already visiting under
a different name, Emacs displays a message in the echo area and uses
the existing buffer visiting that file.  This can happen on systems
that support hard or symbolic links, or if you use a long file name on
a system that truncates long file names, or on a case-insensitive file
system.  You can suppress the message by setting the variable
<code>find-file-suppress-same-file-warnings</code> to a non-<code>nil</code>
value.  You can disable this feature entirely by setting the variable
<code>find-file-existing-other-name</code> to <code>nil</code>: then if you visit
the same file under two different names, you get a separate buffer for
each file name.

</p>
<a name="index-find_002dfile_002dvisit_002dtruename"></a>
<a name="index-truenames-of-files"></a>
<a name="index-file-truenames"></a>
<p>If the variable <code>find-file-visit-truename</code> is non-<code>nil</code>,
then the file name recorded for a buffer is the file’s <em>truename</em>
(made by replacing all symbolic links with their target names), rather
than the name you specify.  Setting <code>find-file-visit-truename</code> also
implies the effect of <code>find-file-existing-other-name</code>.

</p>
<a name="index-directory-name-abbreviation"></a>
<a name="index-directory_002dabbrev_002dalist"></a>
<p>Sometimes, a directory is ordinarily accessed through a symbolic
link, and you may want Emacs to preferentially show its linked
name.  To do this, customize <code>directory-abbrev-alist</code>.  Each
element in this list should have the form <code>(<var>from</var>
. <var>to</var>)</code>, which means to replace <var>from</var> with <var>to</var> whenever
<var>from</var> appears in a directory name.  The <var>from</var> string is a
regular expression (see <a href="#Regexps">Regexps</a>).  It is matched against directory
names anchored at the first character, and should start with ‘<samp>\`</samp>’
(to support directory names with embedded newlines, which would defeat
‘<samp>^</samp>’).  The <var>to</var> string should be an ordinary absolute
directory name pointing to the same directory.  Do not use ‘<samp>~</samp>’ to
stand for a home directory in the <var>to</var> string; Emacs performs
these substitutions separately.  Here’s an example, from a system on
which <samp>/home/fsf</samp> is normally accessed through a symbolic link
named <samp>/fsf</samp>:

</p>
<div class="example">
<pre class="example">(("\\`/home/fsf" . "/fsf"))
</pre></div>


<a name="Directories"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Comparing-Files" accesskey="n" rel="next">Comparing Files</a>, Previous: <a href="#File-Aliases" accesskey="p" rel="prev">File Aliases</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="File-Directories"></a>
<h3 class="section">18.8 File Directories</h3>

<a name="index-file-directory"></a>
<a name="index-directory-listing"></a>
<p>The file system groups files into <em>directories</em>.  A <em>directory
listing</em> is a list of all the files in a directory.  Emacs provides
commands to create and delete directories, and to make directory
listings in brief format (file names only) and verbose format (sizes,
dates, and other attributes included).  Emacs also includes a
directory browser feature called Dired, which you can invoke with
<kbd>C-x d</kbd>; see <a href="#Dired">Dired</a>.

</p>
<dl compact="compact">
<dt><kbd>C-x C-d <var>dir-or-pattern</var> <span class="key">RET</span></kbd></dt>
<dd><p>Display a brief directory listing (<code>list-directory</code>).

</p></dd>
<dt><kbd>C-u C-x C-d <var>dir-or-pattern</var> <span class="key">RET</span></kbd></dt>
<dd><p>Display a verbose directory listing.

</p></dd>
<dt><kbd>M-x make-directory <span class="key">RET</span> <var>dirname</var> <span class="key">RET</span></kbd></dt>
<dd><p>Create a new directory named <var>dirname</var>.

</p></dd>
<dt><kbd>M-x delete-directory <span class="key">RET</span> <var>dirname</var> <span class="key">RET</span></kbd></dt>
<dd><p>Delete the directory named <var>dirname</var>.  If it isn’t empty,
you will be asked whether you want to delete it recursively.

</p></dd>
</dl>

<a name="index-list_002ddirectory"></a>
<a name="index-C_002dx-C_002dd"></a>
<p>The command to display a directory listing is <kbd>C-x C-d</kbd> (<code>list-directory</code>). It reads using the minibuffer a file name which is either a directory to be listed or a wildcard-containing pattern for the files to be listed. 例如,
</p>
<div class="example">
<pre class="example">C-x C-d /u2/emacs/etc <span class="key">RET</span>
</pre></div>

<p>lists all the files in directory <samp>/u2/emacs/etc</samp>.  Here is an
example of specifying a file name pattern:

</p>
<div class="example">
<pre class="example">C-x C-d /u2/emacs/src/*.c <span class="key">RET</span>
</pre></div>

<p>Normally, <kbd>C-x C-d</kbd> displays a brief directory listing containing
just file names.  A numeric argument (regardless of value) tells it to
make a verbose listing including sizes, dates, and owners (like
‘<samp>ls -l</samp>’).

</p>
<a name="index-list_002ddirectory_002dbrief_002dswitches"></a>
<a name="index-list_002ddirectory_002dverbose_002dswitches"></a>
<p>The text of a directory listing is mostly obtained by running
<code>ls</code> in an inferior process.  Two Emacs variables control the
switches passed to <code>ls</code>: <code>list-directory-brief-switches</code> is
a string giving the switches to use in brief listings (<code>"-CF"</code> by
default), and <code>list-directory-verbose-switches</code> is a string
giving the switches to use in a verbose listing (<code>"-l"</code> by
default).

</p>
<p>In verbose directory listings, Emacs adds information about the
amount of free space on the disk that contains the directory.

</p>
<p>The command <kbd>M-x delete-directory</kbd> prompts for a directory’s name
using the minibuffer, and deletes the directory if it is empty.  If
the directory is not empty, you will be asked whether you want to
delete it recursively.  On systems that have a “Trash” (or “Recycle
Bin”) feature, you can make this command move the specified directory
to the Trash instead of deleting it outright, by changing the variable
<code>delete-by-moving-to-trash</code> to <code>t</code>.  See <a href="#Misc-File-Ops">Misc File Ops</a>,
for more information about using the Trash.

</p>

<a name="Comparing-Files"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Diff-Mode" accesskey="n" rel="next">Diff Mode</a>, Previous: <a href="#Directories" accesskey="p" rel="prev">Directories</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Comparing-Files-1"></a>
<h3 class="section">18.9 Comparing Files</h3>
<a name="index-comparing-files"></a>

<a name="index-diff"></a>
<a name="index-diff_002dswitches"></a>
<p>The command <kbd>M-x diff</kbd> prompts for two file names, using the
minibuffer, and displays the differences between the two files in a
buffer named <samp>*diff*</samp>.  This works by running the <code>diff</code>
program, using options taken from the variable <code>diff-switches</code>.
The value of <code>diff-switches</code> should be a string; the default is
<code>"-u"</code> to specify a unified context diff.
See <a href="http://www.gnu.org/software/diffutils/manual/diffutils#Top">Diff</a> in <cite>Comparing and Merging Files</cite>, for more
information about the <code>diff</code> program.

</p>
<p>The output of the <code>diff</code> command is shown using a major mode
called Diff mode.  See <a href="#Diff-Mode">Diff Mode</a>.

</p>
<p>A (much more sophisticated) alternative is <kbd>M-x ediff</kbd>
(see <a href="http://www.gnu.org/software/emacs/manual/html_mono/ediff.html#Top">Ediff</a> in <cite>The Ediff Manual</cite>).

</p>
<a name="index-diff_002dbackup"></a>
<p>The command <kbd>M-x diff-backup</kbd> compares a specified file with its
most recent backup.  If you specify the name of a backup file,
<code>diff-backup</code> compares it with the source file that it is a
backup of.  In all other respects, this behaves like <kbd>M-x diff</kbd>.

</p>
<a name="index-diff_002dbuffer_002dwith_002dfile"></a>
<p>The command <kbd>M-x diff-buffer-with-file</kbd> compares a specified
buffer with its corresponding file.  This shows you what changes you
would make to the file if you save the buffer.

</p>
<a name="index-diff_002dbuffers"></a>
<p>The command <kbd>M-x diff-buffers</kbd> compares the contents of two
specified buffers.

</p>
<a name="index-compare_002dwindows"></a>
<p>The command <kbd>M-x compare-windows</kbd> compares the text in the
current window with that in the window that was the selected window
before you selected the current one.  (For more information about
windows in Emacs, <a href="#Windows">Windows</a>.)  Comparison starts at point in each
window, after pushing each initial point value on the mark ring
(see <a href="#Mark-Ring">Mark Ring</a>) in its respective buffer.  Then it moves point
forward in each window, one character at a time, until it reaches
characters that don’t match.  Then the command exits.

</p>
<p>If point in the two windows is followed by non-matching text when
the command starts, <kbd>M-x compare-windows</kbd> tries heuristically to
advance up to matching text in the two windows, and then exits.  So if
you use <kbd>M-x compare-windows</kbd> repeatedly, each time it either
skips one matching range or finds the start of another.

</p>
<a name="index-compare_002dignore_002dcase"></a>
<a name="index-compare_002dignore_002dwhitespace"></a>
<p>With a numeric argument, <code>compare-windows</code> ignores changes in
whitespace.  If the variable <code>compare-ignore-case</code> is
non-<code>nil</code>, the comparison ignores differences in case as well.
If the variable <code>compare-ignore-whitespace</code> is non-<code>nil</code>,
<code>compare-windows</code> by default ignores changes in whitespace, but a
prefix argument turns that off for that single invocation of the
command.

</p>
<a name="index-Smerge-mode"></a>
<a name="index-smerge_002dmode"></a>
<a name="index-failed-merges"></a>
<a name="index-merges_002c-failed"></a>
<a name="index-comparing-3-files-_0028diff3_0029"></a>
<p>You can use <kbd>M-x smerge-mode</kbd> to turn on Smerge mode, a minor
mode for editing output from the <code>diff3</code> program.  This is
typically the result of a failed merge from a version control system
update outside VC, due to conflicting changes to a file.  Smerge
mode provides commands to resolve conflicts by selecting specific
changes.

</p>
<p>See <a href="#Emerge">Emerge</a>,
for the Emerge facility, which provides a powerful interface for
merging files.

</p>

<a name="Diff-Mode"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Copying-and-Naming" accesskey="n" rel="next">Copying and Naming</a>, Previous: <a href="#Comparing-Files" accesskey="p" rel="prev">Comparing Files</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Diff-Mode-1"></a>
<h3 class="section">18.10 Diff Mode</h3>
<a name="index-Diff-mode"></a>
<a name="index-diff_002dmode"></a>
<a name="index-patches_002c-editing"></a>

<p>Diff mode is a major mode used for the output of <kbd>M-x diff</kbd> and
other similar commands.  This kind of output is called a <em>patch</em>,
because it can be passed to the <code>patch</code> command to
automatically apply the specified changes.  To select Diff mode
manually, type <kbd>M-x diff-mode</kbd>.

</p>
<a name="index-hunk_002c-diff"></a>
<p>The changes specified in a patch are grouped into <em>hunks</em>, which
are contiguous chunks of text that contain one or more changed lines.
Hunks usually also include unchanged lines to provide context for the
changes.  Each hunk is preceded by a <em>hunk header</em>, which
specifies the old and new line numbers where the hunk’s changes occur.
Diff mode highlights each hunk header, to distinguish it from the
actual contents of the hunk.

</p>
<p>The first hunk in a patch is preceded by a file header, which shows
the names of the new and the old versions of the file, and their time
stamps.  If a patch shows changes for more than one file, each file
has such a header before the first hunk of that file’s changes.

</p>
<a name="index-diff_002dupdate_002don_002dthe_002dfly"></a>
<p>You can edit a Diff mode buffer like any other buffer.  (If it is
read-only, you need to make it writable first; see <a href="#Misc-Buffer">Misc Buffer</a>.)
Whenever you edit a hunk, Diff mode attempts to automatically correct
the line numbers in the hunk headers, to ensure that the patch remains
correct, and could still be applied by <code>patch</code>.  To disable
automatic line number correction, change the variable
<code>diff-update-on-the-fly</code> to <code>nil</code>.

</p>
<p>Diff mode arranges for hunks to be treated as compiler error
messages by <kbd>M-g M-n</kbd> and other commands that handle error messages
(see <a href="#Compilation-Mode">Compilation Mode</a>).  Thus, you can use the compilation-mode
commands to visit the corresponding source locations.

</p>
<p>In addition, Diff mode provides the following commands to navigate,
manipulate and apply parts of patches:

</p>
<dl compact="compact">
<dt><kbd>M-n</kbd></dt>
<dd><a name="index-diff_002dhunk_002dnext"></a>
<p>Move to the next hunk-start (<code>diff-hunk-next</code>).  With prefix
argument <var>n</var>, move forward to the <var>n</var>th next hunk.

</p>
<a name="index-diff_002drefine"></a>
<p>By default, Diff mode <em>refines</em> hunks as Emacs displays them,
highlighting their changes with better granularity.  Alternatively, if
you set <code>diff-refine</code> to the symbol <code>navigation</code>, Diff mode
only refines the hunk you move to with this command or with
<code>diff-hunk-prev</code>.

</p>
</dd>
<dt><kbd>M-p</kbd></dt>
<dd><a name="index-diff_002dhunk_002dprev"></a>
<p>Move to the previous hunk-start (<code>diff-hunk-prev</code>).  With prefix
argument <var>n</var>, move back to the <var>n</var>th previous hunk.  Like
<kbd>M-n</kbd>, this command refines the hunk you move to if you set
<code>diff-refine</code> to the symbol <code>navigation</code>.

</p>
</dd>
<dt><kbd>M-}</kbd></dt>
<dd><a name="index-diff_002dfile_002dnext"></a>
<p>Move to the next file-start, in a multi-file patch
(<code>diff-file-next</code>).  With prefix argument <var>n</var>, move forward
to the start of the <var>n</var>th next file.

</p>
</dd>
<dt><kbd>M-{</kbd></dt>
<dd><a name="index-diff_002dfile_002dprev"></a>
<p>Move to the previous file-start, in a multi-file patch
(<code>diff-file-prev</code>).  With prefix argument <var>n</var>, move back to
the start of the <var>n</var>th previous file.

</p>
</dd>
<dt><kbd>M-k</kbd></dt>
<dd><a name="index-diff_002dhunk_002dkill"></a>
<p>Kill the hunk at point (<code>diff-hunk-kill</code>).

</p>
</dd>
<dt><kbd>M-K</kbd></dt>
<dd><a name="index-diff_002dfile_002dkill"></a>
<p>In a multi-file patch, kill the current file part.
(<code>diff-file-kill</code>).

</p>
</dd>
<dt><kbd>C-c C-a</kbd></dt>
<dd><a name="index-diff_002dapply_002dhunk"></a>
<a name="index-patches_002c-applying"></a>
<p>Apply this hunk to its target file (<code>diff-apply-hunk</code>).  With a
prefix argument of <kbd>C-u</kbd>, revert this hunk, i.e. apply the
reverse of the hunk, which changes the “new” version into the “old”
version.  If <code>diff-jump-to-old-file</code> is non-<code>nil</code>, apply the
hunk to the “old” version of the file instead.

</p>
</dd>
<dt><kbd>C-c C-b</kbd></dt>
<dd><a name="index-diff_002drefine_002dhunk"></a>
<p>Highlight the changes of the hunk at point with a finer granularity
(<code>diff-refine-hunk</code>).  This allows you to see exactly which parts
of each changed line were actually changed.

</p>
<a name="index-diff_002drefine-1"></a>
<p>By default, Diff mode refines hunks as Emacs displays them, so you may
find this command useful if you customize <code>diff-refine</code> to a
non-default value.

</p>
</dd>
<dt><kbd>C-c C-c</kbd></dt>
<dd><a name="index-diff_002dgoto_002dsource"></a>
<a name="index-diff_002djump_002dto_002dold_002dfile"></a>
<p>Go to the source file and line corresponding to this hunk
(<code>diff-goto-source</code>).  By default, this jumps to the “new”
version of the file, the one shown first on the file header.
With a prefix argument, jump to the “old” version instead.  If
<code>diff-jump-to-old-file</code> is non-<code>nil</code>, this command by
default jumps to the “old” file, and the meaning of the prefix
argument is reversed.  If the prefix argument is a number greater than
8 (e.g., if you type <kbd>C-u C-u C-c C-c</kbd>), then this command also
sets <code>diff-jump-to-old-file</code> for the next invocation.
If the source file is under version control (see <a href="#Version-Control">Version Control</a>),
this jumps to the work file by default.  With a prefix argument, jump
to the “old” revision of the file (see <a href="#Old-Revisions">Old Revisions</a>), when
point is on the old line, or otherwise jump to the “new” revision.

</p>
</dd>
<dt><kbd>C-c C-e</kbd></dt>
<dd><a name="index-diff_002dediff_002dpatch"></a>
<p>Start an Ediff session with the patch (<code>diff-ediff-patch</code>).
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/ediff.html#Top">Ediff</a> in <cite>The Ediff Manual</cite>.

</p>
</dd>
<dt><kbd>C-c C-n</kbd></dt>
<dd><a name="index-diff_002drestrict_002dview"></a>
<p>Restrict the view to the current hunk (<code>diff-restrict-view</code>).
See <a href="#Narrowing">Narrowing</a>.  With a prefix argument, restrict the
view to the current file of a multiple-file patch.  To widen again,
use <kbd>C-x n w</kbd> (<code>widen</code>).

</p>
</dd>
<dt><kbd>C-c C-r</kbd></dt>
<dd><a name="index-diff_002dreverse_002ddirection"></a>
<p>Reverse the direction of comparison for the entire buffer
(<code>diff-reverse-direction</code>).  With a prefix argument, reverse the
direction only inside the current region (see <a href="#Mark">Mark</a>).  Reversing
the direction means changing the hunks and the file-start headers to
produce a patch that would change the “new” version into the “old”
one.

</p>
</dd>
<dt><kbd>C-c C-s</kbd></dt>
<dd><a name="index-diff_002dsplit_002dhunk"></a>
<p>Split the hunk at point (<code>diff-split-hunk</code>) into two separate
hunks.  This inserts a hunk header and modifies the header of the
current hunk.  This command is useful for manually editing patches,
and only works with the <em>unified diff format</em> produced by the
<samp>-u</samp> or <samp>--unified</samp> options to the <code>diff</code>
program.  If you need to split a hunk in the <em>context diff format</em>
produced by the <samp>-c</samp> or <samp>--context</samp> options to
<code>diff</code>, first convert the buffer to the unified diff format
with <kbd>C-c C-u</kbd>.

</p>
</dd>
<dt><kbd>C-c C-d</kbd></dt>
<dd><a name="index-diff_002dunified_002d_003econtext"></a>
<p>Convert the entire buffer to the <em>context diff format</em>
(<code>diff-unified-&gt;context</code>).  With a prefix argument, convert only
the hunks within the region.

</p>
</dd>
<dt><kbd>C-c C-u</kbd></dt>
<dd><a name="index-diff_002dcontext_002d_003eunified"></a>
<p>Convert the entire buffer to unified diff format
(<code>diff-context-&gt;unified</code>).  With a prefix argument, convert
unified format to context format.  When the mark is active, convert
only the hunks within the region.

</p>
</dd>
<dt><kbd>C-c C-w</kbd></dt>
<dd><a name="index-diff_002dignore_002dwhitespace_002dhunk"></a>
<p>Re-generate the current hunk, disregarding changes in whitespace
(<code>diff-ignore-whitespace-hunk</code>).

</p>
</dd>
<dt><kbd>C-x 4 A</kbd></dt>
<dd><a name="index-diff_002dadd_002dchange_002dlog_002dentries_002dother_002dwindow"></a>
<a name="index-add_002dchange_002dlog_002dentry_002dother_002dwindow_002c-in-Diff-mode"></a>
<p>Generate a ChangeLog entry, like <kbd>C-x 4 a</kbd> does (see <a href="#Change-Log">Change Log</a>), for each one of the hunks
(<code>diff-add-change-log-entries-other-window</code>).  This creates a
skeleton of the log of changes that you can later fill with the actual
descriptions of the changes.  <kbd>C-x 4 a</kbd> itself in Diff mode
operates on behalf of the current hunk’s file, but gets the function
name from the patch itself.  This is useful for making log entries for
functions that are deleted by the patch.

</p></dd>
</dl>

<a name="index-trailing-whitespace_002c-in-patches"></a>
<a name="index-diff_002ddelete_002dtrailing_002dwhitespace"></a>
<p>Patches sometimes include trailing whitespace on modified lines, as
an unintentional and undesired change.  There are two ways to deal
with this problem.  Firstly, if you enable Whitespace mode in a Diff
buffer (see <a href="#Useless-Whitespace">Useless Whitespace</a>), it automatically highlights
trailing whitespace in modified lines.  Secondly, you can use the
command <kbd>M-x diff-delete-trailing-whitespace</kbd>, which searches for
trailing whitespace in the lines modified by the patch, and removes
that whitespace in both the patch and the patched source file(s).
This command does not save the modifications that it makes, so you can
decide whether to save the changes (the list of modified files is
displayed in the echo area).  With a prefix argument, it tries to
modify the original (“old”) source files rather than the patched
(“new”) source files.

</p>
<a name="index-diff_002dfont_002dlock_002dsyntax"></a>
<p>If non-<code>nil</code>, fragments of source in hunks are highlighted
according to the appropriate major mode.

</p>

<a name="Copying-and-Naming"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Misc-File-Ops" accesskey="n" rel="next">Misc File Ops</a>, Previous: <a href="#Diff-Mode" accesskey="p" rel="prev">Diff Mode</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Copying_002c-Naming-and-Renaming-Files"></a>
<h3 class="section">18.11 Copying, Naming and Renaming Files</h3>

<p>Emacs has several commands for copying, naming, and renaming files.
All of them read two file names, <var>old</var> (or <var>target</var>) and
<var>new</var>, using the minibuffer, and then copy or adjust a file’s name
accordingly; they do not accept wildcard file names.

</p>
<p>In all these commands, if the argument <var>new</var> is just a directory
name (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Directory-Names">Directory Names</a> in <cite>the Emacs Lisp Reference
Manual</cite>), the real new name is in that directory, with the same
non-directory component as <var>old</var>.  For example, the command
<kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">rename-file</span>&nbsp;<span class="key">RET</span>&nbsp;~/foo&nbsp;<span class="key">RET</span>&nbsp;/tmp/&nbsp;<span class="key">RET</span></kbd><!-- /@w -->

renames <samp>~/foo</samp> to <samp>/tmp/foo</samp>.  On GNU and other POSIX-like
systems, directory names end in ‘<samp>/</samp>’.

</p>
<p>All these commands ask for confirmation when the new file name already
exists.

</p>
<a name="index-copy_002dfile"></a>
<a name="index-copying-files"></a>
<p><kbd>M-x copy-file</kbd> copies the contents of the file <var>old</var> to the
file <var>new</var>.

</p>
<a name="index-copy_002ddirectory"></a>
<p><kbd>M-x copy-directory</kbd> copies directories, similar to the
<code>cp -r</code> shell command.  If <var>new</var> is a directory name, it
creates a copy of the <var>old</var> directory and puts it in <var>new</var>.
Otherwise it copies all the contents of <var>old</var> into a new directory
named <var>new</var>.

</p>
<a name="index-renaming-files"></a>
<a name="index-rename_002dfile"></a>
<p><kbd>M-x rename-file</kbd> renames file <var>old</var> as <var>new</var>.  If the
file name <var>new</var> already exists, you must confirm with <kbd>yes</kbd> or
renaming is not done; this is because renaming causes the old meaning
of the name <var>new</var> to be lost.  If <var>old</var> and <var>new</var> are on
different file systems, the file <var>old</var> is copied and deleted.

</p>
<p>If a file is under version control (see <a href="#Version-Control">Version Control</a>), you
should rename it using <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">vc-rename-file</span></kbd><!-- /@w -->  instead of
<kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">rename-file</span></kbd><!-- /@w -->.  See <a href="#VC-Delete_002fRename">VC Delete/Rename</a>.

</p>
<a name="index-add_002dname_002dto_002dfile"></a>
<a name="index-hard-links-_0028creation_0029"></a>
<p><kbd>M-x add-name-to-file</kbd> adds an additional name to an existing
file without removing the old name.  The new name is created as a hard
link to the existing file.  The new name must belong on the same file
system that the file is on.  On MS-Windows, this command works only if
the file resides in an NTFS file system.  On MS-DOS, and some remote
system types, it works by copying the file.

</p>
<a name="index-make_002dsymbolic_002dlink"></a>
<a name="index-symbolic-links-_0028creation_0029"></a>
<p><kbd>M-x make-symbolic-link</kbd> creates a symbolic link named
<var>new</var>, which points at <var>target</var>.  The effect is that future
attempts to open file <var>new</var> will refer to whatever file is named
<var>target</var> at the time the opening is done, or will get an error if
the name <var>target</var> is nonexistent at that time.  This command does
not expand the argument <var>target</var>, so that it allows you to specify
a relative name as the target of the link.  However, this command
does expand leading ‘<samp>~</samp>’ in <var>target</var> so that you can easily
specify home directories, and strips leading ‘<samp>/:</samp>’ so that you can
specify relative names beginning with literal ‘<samp>~</samp>’ or ‘<samp>/:</samp>’.
See <a href="#Quoted-File-Names">Quoted File Names</a>.  On MS-Windows, this command works only on
MS Windows Vista and later.  When <var>new</var> is remote,
it works depending on the system type.

</p>

<a name="Misc-File-Ops"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Compressed-Files" accesskey="n" rel="next">Compressed Files</a>, Previous: <a href="#Copying-and-Naming" accesskey="p" rel="prev">Copying and Naming</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Miscellaneous-File-Operations"></a>
<h3 class="section">18.12 Miscellaneous File Operations</h3>

<p>Emacs has commands for performing many other operations on files.
All operate on one file; they do not accept wildcard file names.

</p>
<a name="index-delete_002dfile"></a>
<a name="index-deletion-_0028of-files_0029"></a>
<p><kbd>M-x delete-file</kbd> prompts for a file and deletes it.  If you are
deleting many files in one directory, it may be more convenient to use
Dired rather than <code>delete-file</code>.  See <a href="#Dired-Deletion">Dired Deletion</a>.

</p>
<a name="index-trash"></a>
<a name="index-recycle-bin"></a>
<a name="index-move_002dfile_002dto_002dtrash"></a>
<p><kbd>M-x move-file-to-trash</kbd> moves a file into the system
<em>Trash</em> (or <em>Recycle Bin</em>).  This is a facility available on
most operating systems; files that are moved into the Trash can be
brought back later if you change your mind.  (The way to restore
trashed files is system-dependent.)

</p>
<a name="index-delete_002dby_002dmoving_002dto_002dtrash"></a>
<p>By default, Emacs deletion commands do <em>not</em> use the Trash.  To
use the Trash (when it is available) for common deletion commands,
change the variable <code>delete-by-moving-to-trash</code> to <code>t</code>.
This affects the commands <kbd>M-x delete-file</kbd> and <kbd>M-x
delete-directory</kbd> (see <a href="#Directories">Directories</a>), as well as the deletion
commands in Dired (see <a href="#Dired-Deletion">Dired Deletion</a>).  Supplying a prefix
argument to <kbd>M-x delete-file</kbd> or <kbd>M-x delete-directory</kbd> makes
them delete outright, instead of using the Trash, regardless of
<code>delete-by-moving-to-trash</code>.

</p>
<p>If a file is under version control (see <a href="#Version-Control">Version Control</a>), you
should delete it using <kbd>M-x vc-delete-file</kbd> instead of <kbd>M-x
delete-file</kbd>.  See <a href="#VC-Delete_002fRename">VC Delete/Rename</a>.

</p>
<a name="index-C_002dx-i"></a>
<a name="index-insert_002dfile"></a>
<p><kbd>M-x insert-file</kbd> (also <kbd>C-x i</kbd>) inserts a copy of the
contents of the specified file into the current buffer at point,
leaving point unchanged before the contents.  The position after the
inserted contents is added to the mark ring, without activating the
mark (see <a href="#Mark-Ring">Mark Ring</a>).

</p>
<a name="index-insert_002dfile_002dliterally"></a>
<p><kbd>M-x insert-file-literally</kbd> is like <kbd>M-x insert-file</kbd>,
except the file is inserted literally: it is treated as a sequence
of <acronym>ASCII</acronym> characters with no special encoding or conversion,
similar to the <kbd>M-x find-file-literally</kbd> command
(see <a href="#Visiting">Visiting</a>).

</p>
<a name="index-write_002dregion"></a>
<p><kbd>M-x write-region</kbd> is the inverse of <kbd>M-x insert-file</kbd>; it
copies the contents of the region into the specified file.  <kbd>M-x
append-to-file</kbd> adds the text of the region to the end of the
specified file.  See <a href="#Accumulating-Text">Accumulating Text</a>.  The variable
<code>write-region-inhibit-fsync</code> applies to these commands, as well
as saving files; see <a href="#Customize-Save">Customize Save</a>.

</p>
<a name="index-set_002dfile_002dmodes"></a>
<a name="index-file-modes"></a>
<a name="index-file-permissions"></a>
<p><kbd>M-x set-file-modes</kbd> reads a file name followed by a <em>file
mode</em>, and applies that file mode to the specified file.  File modes,
also called <em>file permissions</em>, determine whether a file can be
read, written to, or executed, and by whom.  This command reads file
modes using the same symbolic or octal format accepted by the
<code>chmod</code> command; for instance, ‘<samp>u+x</samp>’ means to add
execution permission for the user who owns the file.  It has no effect
on operating systems that do not support file modes.  <code>chmod</code> is a
convenience alias for this function.

</p>

<a name="Compressed-Files"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#File-Archives" accesskey="n" rel="next">File Archives</a>, Previous: <a href="#Misc-File-Ops" accesskey="p" rel="prev">Misc File Ops</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Accessing-Compressed-Files"></a>
<h3 class="section">18.13 Accessing Compressed Files</h3>
<a name="index-compression"></a>
<a name="index-uncompression"></a>
<a name="index-Auto-Compression-mode"></a>
<a name="index-mode_002c-Auto-Compression"></a>
<a name="index-gzip"></a>

<p>Emacs automatically uncompresses compressed files when you visit
them, and automatically recompresses them if you alter them and save
them.  Emacs recognizes compressed files by their file names.  File
names ending in ‘<samp>.gz</samp>’ indicate a file compressed with
<code>gzip</code>.  Other endings indicate other compression programs.

</p>
<p>Automatic uncompression and compression apply to all the operations in
which Emacs uses the contents of a file.  This includes visiting it,
saving it, inserting its contents into a buffer, loading it, and byte
compiling it.

</p>
<a name="index-auto_002dcompression_002dmode"></a>
<a name="index-auto_002dcompression_002dmode-1"></a>
<p>To disable this feature, type the command <kbd>M-x
auto-compression-mode</kbd>.  You can disable it permanently by
customizing the variable <code>auto-compression-mode</code>.

</p>

<a name="File-Archives"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Remote-Files" accesskey="n" rel="next">Remote Files</a>, Previous: <a href="#Compressed-Files" accesskey="p" rel="prev">Compressed Files</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="File-Archives-1"></a>
<h3 class="section">18.14 File Archives</h3>
<a name="index-mode_002c-tar"></a>
<a name="index-Tar-mode"></a>
<a name="index-file-archives"></a>

<p>A file whose name ends in ‘<samp>.tar</samp>’ is normally an <em>archive</em>
made by the <code>tar</code> program.  Emacs views these files in a special
mode called Tar mode which provides a Dired-like list of the contents
(see <a href="#Dired">Dired</a>).  You can move around through the list just as you
would in Dired, and visit the subfiles contained in the archive.
However, not all Dired commands are available in Tar mode.

</p>
<p>If Auto Compression mode is enabled (see <a href="#Compressed-Files">Compressed Files</a>), then
Tar mode is used also for compressed archives—files with extensions
‘<samp>.tgz</samp>’, <code>.tar.Z</code> and <code>.tar.gz</code>.

</p>
<p>The keys <kbd>e</kbd>, <kbd>f</kbd> and <tt class="key">RET</tt> all extract a component file
into its own buffer.  You can edit it there, and if you save the
buffer, the edited version will replace the version in the Tar buffer.
Clicking with the mouse on the file name in the Tar buffer does
likewise.  <kbd>v</kbd> extracts a file into a buffer in View mode
(see <a href="#View-Mode">View Mode</a>).  <kbd>o</kbd> extracts the file and displays it in
another window, so you could edit the file and operate on the archive
simultaneously.

</p>
<p>The <kbd>I</kbd> key adds a new (regular) file to the archive.  The file
is initially empty, but can readily be edited using the commands
above.  The command inserts the new file before the current one, so
that using it on the topmost line of the Tar buffer makes the new file
the first one in the archive, and using it at the end of the buffer
makes it the last one.

</p>
<p><kbd>d</kbd> marks a file for deletion when you later use <kbd>x</kbd>, and
<kbd>u</kbd> unmarks a file, as in Dired.  <kbd>C</kbd> copies a file from the
archive to disk and <kbd>R</kbd> renames a file within the archive.
<kbd>g</kbd> reverts the buffer from the archive on disk.  The keys
<kbd>M</kbd>, <kbd>G</kbd>, and <kbd>O</kbd> change the file’s permission bits,
group, and owner, respectively.

</p>
<p>Saving the Tar buffer writes a new version of the archive to disk with
the changes you made to the components.

</p>
<p>You don’t need the <code>tar</code> program to use Tar mode—Emacs reads
the archives directly.  However, accessing compressed archives
requires the appropriate uncompression program.

</p>
<a name="index-Archive-mode"></a>
<a name="index-mode_002c-archive"></a>
<a name="index-arc"></a>
<a name="index-jar"></a>
<a name="index-zip"></a>
<a name="index-rar"></a>
<a name="index-lzh"></a>
<a name="index-zoo"></a>
<a name="index-7z"></a>
<a name="index-Java-class-archives"></a>
<a name="index-unzip-archives"></a>
<p>A separate but similar Archive mode is used for <code>arc</code>,
<code>jar</code>, <code>lzh</code>, <code>zip</code>, <code>rar</code>, <code>7z</code>, and
<code>zoo</code> archives, as well as <code>exe</code> files that are
self-extracting executables.

</p>
<p>The key bindings of Archive mode are similar to those in Tar mode,
with the addition of the <kbd>m</kbd> key which marks a file for subsequent
operations, and <kbd>M-<span class="key">DEL</span></kbd> which unmarks all the marked files.
Also, the <kbd>a</kbd> key toggles the display of detailed file
information, for those archive types where it won’t fit in a single
line.  Operations such as renaming a subfile, or changing its mode or
owner, are supported only for some of the archive formats.

</p>
<p>Unlike Tar mode, Archive mode runs the archiving programs to unpack
and repack archives.  However, you don’t need these programs to look
at the archive table of contents, only to extract or manipulate the
subfiles in the archive.  Details of the program names and their
options can be set in the ‘<samp>Archive</samp>’ Customize group
(see <a href="#Customization-Groups">Customization Groups</a>).

</p>

<a name="Remote-Files"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Quoted-File-Names" accesskey="n" rel="next">Quoted File Names</a>, Previous: <a href="#File-Archives" accesskey="p" rel="prev">File Archives</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Remote-Files-1"></a>
<h3 class="section">18.15 Remote Files</h3>

<a name="index-Tramp"></a>
<a name="index-FTP"></a>
<a name="index-remote-file-access"></a>
<p>You can refer to files on other machines using a special file name
syntax:

</p>
<div class="example">
<pre class="example">/<var>method</var>:<var>host</var>:<var>filename</var>
/<var>method</var>:<var>user</var>@<var>host</var>:<var>filename</var>
/<var>method</var>:<var>user</var>@<var>host</var>#<var>port</var>:<var>filename</var>
</pre></div>

<p>To carry out this request, Emacs uses a remote-login program such as
<code>ssh</code>.
You must always specify in the file name which method to use—for
example, <samp>/ssh:<var>user</var>@<var>host</var>:<var>filename</var></samp> uses
<code>ssh</code>.  When you specify the pseudo method ‘<samp>-</samp>’ in the
file name, Emacs chooses the method as follows:

</p>
<ol>
<li>  If the host name starts with ‘<samp>ftp.</samp>’ (with dot), Emacs uses FTP.

</li><li>  If the user name is ‘<samp>ftp</samp>’ or ‘<samp>anonymous</samp>’, Emacs uses FTP.

</li><li>  If the variable <code>tramp-default-method</code> is set to ‘<samp>ftp</samp>’,
Emacs uses FTP.

</li><li>  If <code>ssh-agent</code> is running, Emacs uses <code>scp</code>.

</li><li>  Otherwise, Emacs uses <code>ssh</code>.

</li></ol>

<a name="index-disabling-remote-files"></a>
<p>You can entirely turn off the remote file name feature by setting the
variable <code>tramp-mode</code> to <code>nil</code>.  You can turn off the
feature in individual cases by quoting the file name with ‘<samp>/:</samp>’
(see <a href="#Quoted-File-Names">Quoted File Names</a>).

</p>
<a name="index-ange_002dftp"></a>
<p>Remote file access through FTP is handled by the Ange-FTP package, which
is documented in the following.  Remote file access through the other
methods is handled by the Tramp package, which has its own manual.
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/tramp.html#Top">The Tramp Manual</a> in <cite>The Tramp Manual</cite>.

</p>
<a name="index-ange_002dftp_002ddefault_002duser"></a>
<a name="index-user-name-for-remote-file-access"></a>
<p>When the Ange-FTP package is used, Emacs logs in through FTP using
the name <var>user</var>, if that is specified in the remote file name.  If
<var>user</var> is unspecified, Emacs logs in using your user name on the
local system; but if you set the variable <code>ange-ftp-default-user</code>
to a string, that string is used instead.  When logging in, Emacs may
also ask for a password.

</p>
<a name="index-backups-for-remote-files"></a>
<a name="index-ange_002dftp_002dmake_002dbackup_002dfiles"></a>
<p>For performance reasons, Emacs does not make backup files for files
accessed via FTP by default.  To make it do so, change the variable
<code>ange-ftp-make-backup-files</code> to a non-<code>nil</code> value.

</p>
<p>By default, auto-save files for remote files are made in the
temporary file directory on the local machine, as specified by the
variable <code>auto-save-file-name-transforms</code>.  See <a href="#Auto-Save-Files">Auto Save Files</a>.

</p>
<a name="index-anonymous-FTP"></a>
<a name="index-ange_002dftp_002dgenerate_002danonymous_002dpassword"></a>
<p>To visit files accessible by anonymous FTP, you use special user
names ‘<samp>anonymous</samp>’ or ‘<samp>ftp</samp>’.  Passwords for these user names
are handled specially.  The variable
<code>ange-ftp-generate-anonymous-password</code> controls what happens: if
the value of this variable is a string, then that string is used as
the password; if non-<code>nil</code> (the default), then the value of
<code>user-mail-address</code> is used; if <code>nil</code>, then Emacs prompts
you for a password as usual (see <a href="#Passwords">Passwords</a>).

</p>
<a name="index-firewall_002c-and-accessing-remote-files"></a>
<a name="index-gateway_002c-and-remote-file-access-with-ange_002dftp"></a>
<a name="index-ange_002dftp_002dsmart_002dgateway"></a>
<a name="index-ange_002dftp_002dgateway_002dhost"></a>
<p>Sometimes you may be unable to access files on a remote machine
because a <em>firewall</em> in between blocks the connection for security
reasons.  If you can log in on a <em>gateway</em> machine from which the
target files <em>are</em> accessible, and whose FTP server supports
gatewaying features, you can still use remote file names; all you have
to do is specify the name of the gateway machine by setting the
variable <code>ange-ftp-gateway-host</code>, and set
<code>ange-ftp-smart-gateway</code> to <code>t</code>.  Otherwise you may be able
to make remote file names work, but the procedure is complex.  You can
read the instructions by typing <kbd>M-x finder-commentary <span class="key">RET</span>
ange-ftp <span class="key">RET</span></kbd>.

</p>

<a name="Quoted-File-Names"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#File-Name-Cache" accesskey="n" rel="next">File Name Cache</a>, Previous: <a href="#Remote-Files" accesskey="p" rel="prev">Remote Files</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Quoted-File-Names-1"></a>
<h3 class="section">18.16 Quoted File Names</h3>

<a name="index-quoting-file-names"></a>
<a name="index-file-names_002c-quote-special-characters"></a>
<p>You can <em>quote</em> an absolute file name to prevent special
characters and syntax in it from having their special effects.
The way to do this is to add ‘<samp>/:</samp>’ at the beginning.

</p>
<p>For example, you can quote a local file name which appears remote, to
prevent it from being treated as a remote file name.  Thus, if you have
a directory named <samp>/foo:</samp> and a file named <samp>bar</samp> in it, you
can refer to that file in Emacs as ‘<samp>/:/foo:/bar</samp>’.

</p>
<p>If you want to quote only special characters in the local part of a
remote file name, you can quote just the local part.
‘<samp>/ssh:baz:/:/foo:/bar</samp>’ refers to the file <samp>bar</samp> of directory
<samp>/foo:</samp> on the host <samp>baz</samp>.

</p>
<p>‘<samp>/:</samp>’ can also prevent ‘<samp>~</samp>’ from being treated as a special
character for a user’s home directory.  For example, <samp>/:/tmp/~hack</samp>
refers to a file whose name is <samp>~hack</samp> in directory <samp>/tmp</samp>.

</p>
<p>Quoting with ‘<samp>/:</samp>’ is also a way to enter in the minibuffer a
file name that contains ‘<samp>$</samp>’.  In order for this to work, the
‘<samp>/:</samp>’ must be at the beginning of the minibuffer contents.  (You
can also double each ‘<samp>$</samp>’; see <a href="#File-Names-with-_0024">File Names with $</a>.)

</p>
<p>You can also quote wildcard characters with ‘<samp>/:</samp>’, for visiting.
For example, <samp>/:/tmp/foo*bar</samp> visits the file
<samp>/tmp/foo*bar</samp>.

</p>
<p>Another method of getting the same result is to enter
<samp>/tmp/foo[*]bar</samp>, which is a wildcard specification that matches
only <samp>/tmp/foo*bar</samp>.  However, in many cases there is no need to
quote the wildcard characters because even unquoted they give the
right result.  For example, if the only file name in <samp>/tmp</samp> that
starts with ‘<samp>foo</samp>’ and ends with ‘<samp>bar</samp>’ is <samp>foo*bar</samp>,
then specifying <samp>/tmp/foo*bar</samp> will visit only
<samp>/tmp/foo*bar</samp>.

</p>

<a name="File-Name-Cache"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#File-Conveniences" accesskey="n" rel="next">File Conveniences</a>, Previous: <a href="#Quoted-File-Names" accesskey="p" rel="prev">Quoted File Names</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="File-Name-Cache-1"></a>
<h3 class="section">18.17 File Name Cache</h3>

<a name="index-file-name-caching"></a>
<a name="index-cache-of-file-names"></a>
<a name="index-find"></a>
<a name="index-C_002dTAB"></a>
<a name="index-file_002dcache_002dminibuffer_002dcomplete"></a>
<p>You can use the <em>file name cache</em> to make it easy to locate a
file by name, without having to remember exactly where it is located.
When typing a file name in the minibuffer, <kbd>C-<span class="key">TAB</span></kbd>
(<code>file-cache-minibuffer-complete</code>) completes it using the file
name cache.  If you repeat <kbd>C-<span class="key">TAB</span></kbd>, that cycles through the
possible completions of what you had originally typed.  (However, note
that the <kbd>C-<span class="key">TAB</span></kbd> character cannot be typed on most text
terminals.)

</p>
<p>The file name cache does not fill up automatically.  Instead, you
load file names into the cache using these commands:

</p>
<a name="index-file_002dcache_002dadd_002ddirectory"></a>
<dl compact="compact">
<dt><kbd>M-x file-cache-add-directory <span class="key">RET</span> <var>directory</var> <span class="key">RET</span></kbd></dt>
<dd><p>Add each file name in <var>directory</var> to the file name cache.

</p></dd>
<dt><kbd>M-x file-cache-add-directory-using-find <span class="key">RET</span> <var>directory</var> <span class="key">RET</span></kbd></dt>
<dd><p>Add each file name in <var>directory</var> and all of its nested
subdirectories to the file name cache.

</p></dd>
<dt><kbd>M-x file-cache-add-directory-using-locate <span class="key">RET</span> <var>directory</var> <span class="key">RET</span></kbd></dt>
<dd><p>Add each file name in <var>directory</var> and all of its nested
subdirectories to the file name cache, using <code>locate</code> to find
them all.

</p></dd>
<dt><kbd>M-x file-cache-add-directory-list <span class="key">RET</span> <var>variable</var> <span class="key">RET</span></kbd></dt>
<dd><p>Add each file name in each directory listed in <var>variable</var> to the
file name cache.  <var>variable</var> should be a Lisp variable whose value
is a list of directories, like <code>load-path</code>.

</p></dd>
<dt><kbd>M-x file-cache-clear-cache <span class="key">RET</span></kbd></dt>
<dd><p>Clear the cache; that is, remove all file names from it.

</p></dd>
</dl>

<p>The file name cache is not persistent: it is kept and maintained
only for the duration of the Emacs session.  You can view the contents
of the cache with the <code>file-cache-display</code> command.

</p>

<a name="File-Conveniences"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Image-Mode" accesskey="n" rel="next">Image Mode</a>, Previous: <a href="#File-Name-Cache" accesskey="p" rel="prev">File Name Cache</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Convenience-Features-for-Finding-Files"></a>
<h3 class="section">18.18 Convenience Features for Finding Files</h3>

<p>In this section, we introduce some convenient facilities for finding
recently-opened files, reading file names from a buffer.

</p>
<a name="index-recentf_002dmode"></a>
<a name="index-recentf_002dmode-1"></a>
<a name="index-recentf_002dsave_002dlist"></a>
<a name="index-recentf_002dedit_002dlist"></a>
<p>If you enable Recentf mode, with <kbd>M-x recentf-mode</kbd>, the
‘<samp>File</samp>’ menu includes a submenu containing a list of recently
opened files.  <kbd>M-x recentf-save-list</kbd> saves the current
<code>recentf-list</code> to a file, and <kbd>M-x recentf-edit-list</kbd> edits
it.

</p>
<p>The <kbd>M-x ffap</kbd> command generalizes <code>find-file</code> with more
powerful heuristic defaults (see <a href="#FFAP">FFAP</a>), often based on the text at
point.  Partial Completion mode offers other features extending
<code>find-file</code>, which can be used with <code>ffap</code>.
See <a href="#Completion-Options">Completion Options</a>.

</p>

<a name="Image-Mode"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Filesets" accesskey="n" rel="next">Filesets</a>, Previous: <a href="#File-Conveniences" accesskey="p" rel="prev">File Conveniences</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Viewing-Image-Files"></a>
<h3 class="section">18.19 Viewing Image Files</h3>

<a name="index-image_002dmode"></a>
<a name="index-image_002dtoggle_002ddisplay"></a>
<a name="index-images_002c-viewing"></a>
<p>Visiting image files automatically selects Image mode.  In this
major mode, you can type <kbd>C-c C-c</kbd> (<code>image-toggle-display</code>)
to toggle between displaying the file as an image in the Emacs buffer,
and displaying its underlying text (or raw byte) representation.
Additionally you can type <kbd>C-c C-x</kbd> (<code>image-toggle-hex-display</code>)
to toggle between displaying the file as an image in the Emacs buffer,
and displaying it in hex representation.  Displaying the file as an
image works only if Emacs is compiled with support for displaying
such images.

</p>
<a name="index-image_002dauto_002dresize"></a>
<a name="index-image_002dauto_002dresize_002don_002dwindow_002dresize"></a>
<p>If the displayed image is wider or taller than the window in which it
is displayed, the usual point motion keys (<kbd>C-f</kbd>, <kbd>C-p</kbd>, and
so forth) cause different parts of the image to be displayed.
However, by default images are resized automatically to fit the
window, so this is only necessary if you customize the default
behavior by using the options <code>image-auto-resize</code> and
<code>image-auto-resize-on-window-resize</code>.

</p>
<a name="index-image_002dtransform_002dfit_002dboth"></a>
<a name="index-image_002dtransform_002dset_002dscale"></a>
<a name="index-image_002dtransform_002dreset"></a>
<p>To resize the image manually you can use the command
<code>image-transform-fit-both</code> bound to <kbd>s b</kbd>
that fits the image to both the window height and width.
To scale the image specifying a scale factor, use the command
<code>image-transform-set-scale</code> bound to <kbd>s s</kbd>.
To reset all transformations to the initial state, use
<code>image-transform-reset</code> bound to <kbd>s 0</kbd>.

</p>
<a name="index-image_002dnext_002dfile"></a>
<a name="index-image_002dprevious_002dfile"></a>
<p>You can press <kbd>n</kbd> (<code>image-next-file</code>) and <kbd>p</kbd>
(<code>image-previous-file</code>) to visit the next image file and the
previous image file in the same directory, respectively.

</p>
<a name="index-image_002dmode_002dmark_002dfile"></a>
<a name="index-image_002dmode_002dunmark_002dfile"></a>
<a name="index-image_002dmode_002dcopy_002dfile_002dname_002das_002dkill"></a>
<p>When looking through images, it’s sometimes convenient to be able to
mark the files for later processing (for instance, if you want to
select a group of images to copy somewhere else).  The <kbd>m</kbd>
(<code>image-mode-mark-file</code>) command will mark the current file in
any Dired buffer(s) that display the current file’s directory.  If no
such buffer is open, the directory is opened in a new buffer.  To
unmark files, use the <kbd>u</kbd> (<code>image-mode-mark-file</code>) command.
Finally, if you just want to copy the current buffers file name to the
kill ring, you can use the <kbd>w</kbd>
(<code>image-mode-copy-file-name-as-kill</code>) command.

</p>
<a name="index-image_002dtoggle_002danimation"></a>
<a name="index-image_002dnext_002dframe"></a>
<a name="index-image_002dprevious_002dframe"></a>
<a name="index-image_002dgoto_002dframe"></a>
<a name="index-image_002dincrease_002dspeed"></a>
<a name="index-image_002ddecrease_002dspeed"></a>
<a name="index-image_002dreset_002dspeed"></a>
<a name="index-image_002dreverse_002dspeed"></a>
<a name="index-image_002danimate_002dloop"></a>
<a name="index-image-animation"></a>
<a name="index-animated-images"></a>
<p>If the image can be animated, the command <tt class="key">RET</tt>
(<code>image-toggle-animation</code>) starts or stops the animation.
Animation plays once, unless the option <code>image-animate-loop</code> is
non-<code>nil</code>.  With <kbd>f</kbd> (<code>image-next-frame</code>) and <kbd>b</kbd>
(<code>image-previous-frame</code>) you can step through the individual
frames.  Both commands accept a numeric prefix to step through several
frames at once.  You can go to a specific frame with <kbd>F</kbd>
(<code>image-goto-frame</code>).  Frames are indexed from 1.  Typing <kbd>a
+</kbd> (<code>image-increase-speed</code>) increases the speed of the animation,
<kbd>a -</kbd> (<code>image-decrease-speed</code>) decreases it, and <kbd>a r</kbd>
(<code>image-reverse-speed</code>) reverses it.  The command <kbd>a 0</kbd>
(<code>image-reset-speed</code>) resets the speed to the original value.

</p>
<a name="index-ImageMagick-support"></a>
<a name="index-imagemagick_002denabled_002dtypes"></a>
<a name="index-imagemagick_002dtypes_002dinhibit"></a>
<p>If Emacs was compiled with support for the ImageMagick library, it
can use ImageMagick to render a wide variety of images.  The variable
<code>imagemagick-enabled-types</code> lists the image types that Emacs may
render using ImageMagick; each element in the list should be an
internal ImageMagick name for an image type, as a symbol or an
equivalent string (e.g., <code>BMP</code> for <samp>.bmp</samp> images).  To
enable ImageMagick for all possible image types, change
<code>imagemagick-enabled-types</code> to <code>t</code>.  The variable
<code>imagemagick-types-inhibit</code> lists the image types which should
never be rendered using ImageMagick, regardless of the value of
<code>imagemagick-enabled-types</code> (the default list includes types like
<code>C</code> and <code>HTML</code>, which ImageMagick can render as an image
but Emacs should not).  To disable ImageMagick entirely, change
<code>imagemagick-types-inhibit</code> to <code>t</code>.

</p>
<a name="index-image_002duse_002dexternal_002dconverter"></a>
<p>If Emacs doesn’t have native support for the image format in
question, and <code>image-use-external-converter</code> is non-<code>nil</code>,
Emacs will try to determine whether there are external utilities that
can be used to transform the image in question to <acronym>PNG</acronym> before
displaying.  GraphicsMagick, ImageMagick and <code>ffmpeg</code> are
currently supported for image conversions.

</p>
<a name="index-thumbs_002dmode"></a>
<a name="index-mode_002c-Thumbs"></a>
<p>The Image-Dired package can also be used to view images as
thumbnails.  See <a href="#Image_002dDired">Image-Dired</a>.

</p>

<a name="Filesets"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Image-Mode" accesskey="p" rel="prev">Image Mode</a>, Up: <a href="#Files" accesskey="u" rel="up">Files</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Filesets-1"></a>
<h3 class="section">18.20 Filesets</h3>
<a name="index-filesets"></a>
<a name="index-sets-of-files"></a>

<a name="index-filesets_002dinit"></a>
<p>If you regularly edit a certain group of files, you can define them
as a <em>fileset</em>.  This lets you perform certain operations, such as
visiting, <code>query-replace</code>, and shell commands on all the files at
once.  To make use of filesets, you must first add the expression
<code>(filesets-init)</code> to your init file (see <a href="#Init-File">Init File</a>).  This
adds a ‘<samp>Filesets</samp>’ sub-menu to the menu bar’s ‘<samp>File</samp>’ menu.

</p>
<a name="index-filesets_002dadd_002dbuffer"></a>
<a name="index-filesets_002dremove_002dbuffer"></a>
<p>The simplest way to define a fileset is by adding files to it one at
a time.  To add a file to fileset <var>name</var>, visit the file and type
<kbd>M-x filesets-add-buffer <span class="key">RET</span> <var>name</var> <span class="key">RET</span></kbd>.  If
there is no fileset <var>name</var>, this creates a new one, which
initially contains only the current file.  The command <kbd>M-x
filesets-remove-buffer</kbd> removes the current file from a fileset.

</p>
<p>You can also edit the list of filesets directly, with <kbd>M-x
filesets-edit</kbd> (or by choosing ‘<samp>Edit Filesets</samp>’ from the
‘<samp>Filesets</samp>’ menu).  The editing is performed in a Customize buffer
(see <a href="#Easy-Customization">Easy Customization</a>).  Normally, a fileset is a simple list of
files, but you can also define a fileset as a regular expression
matching file names.  Some examples of these more complicated filesets
are shown in the Customize buffer.  Remember to select ‘<samp>Save for
future sessions</samp>’ if you want to use the same filesets in future Emacs
sessions.

</p>
<p>You can use the command <kbd>M-x filesets-open</kbd> to visit all the
files in a fileset, and <kbd>M-x filesets-close</kbd> to close them.  Use
<kbd>M-x filesets-run-cmd</kbd> to run a shell command on all the files in
a fileset.  These commands are also available from the ‘<samp>Filesets</samp>’
menu, where each existing fileset is represented by a submenu.

</p>
<p>See <a href="#Version-Control">Version Control</a>, for a different concept of filesets:
groups of files bundled together for version control operations.
Filesets of that type are unnamed, and do not persist across Emacs
sessions.

</p><hr>
<a name="Buffers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Windows" accesskey="n" rel="next">Windows</a>, Previous: <a href="#Files" accesskey="p" rel="prev">Files</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Using-Multiple-Buffers"></a>
<h2 class="chapter">19 Using Multiple Buffers</h2>

<a name="index-buffers"></a>
<p>The text you are editing in Emacs resides in an object called a
<em>buffer</em>.  Each time you visit a file, a buffer is used to hold
the file’s text.  Each time you invoke Dired, a buffer is used to hold
the directory listing.  If you send a message with <kbd>C-x m</kbd>, a
buffer is used to hold the text of the message.  When you ask for a
command’s documentation, that appears in a buffer named <samp>*Help*</samp>.

</p>
<p>Buffers exist as long as they are in use, and are deleted
(“killed”) when no longer needed, either by you (see <a href="#Kill-Buffer">Kill Buffer</a>) or by Emacs (e.g., when you exit Emacs, see <a href="#Exiting">Exiting</a>).

</p>
<p>Each buffer has a unique name, which can be of any length.  When a
buffer is displayed in a window, its name is shown in the mode line
(see <a href="#Mode-Line">Mode Line</a>).  The distinction between upper and lower case
matters in buffer names.  Most buffers are made by visiting files, and
their names are derived from the files’ names; however, you can also
create an empty buffer with any name you want.  A newly started Emacs
has several buffers, including one named <samp>*scratch*</samp>, which can
be used for evaluating Lisp expressions and is not associated with any
file (see <a href="#Lisp-Interaction">Lisp Interaction</a>).

</p>
<a name="index-selected-buffer"></a>
<a name="index-current-buffer"></a>
<p>At any time, one and only one buffer is <em>selected</em>; we call it
the <em>current buffer</em>.  We sometimes say that a command operates on
“the buffer”; this really means that it operates on the current
buffer.  When there is only one Emacs window, the buffer displayed in
that window is current.  When there are multiple windows, the buffer
displayed in the <em>selected window</em> is current.  See <a href="#Windows">Windows</a>.

</p>
<a name="index-buffer-contents"></a>
<a name="index-contents-of-a-buffer"></a>
<p>A buffer’s <em>contents</em> consist of a series of characters, each of
which optionally carries a set of text properties
(see <a href="#International-Chars">Text properties</a>) that can specify more
information about that character.

</p>
<p>Aside from its textual contents, each buffer records several pieces
of information, such as what file it is visiting (if any), whether it
is modified, and what major mode and minor modes are in effect
(see <a href="#Modes">Modes</a>).  These are stored in <em>buffer-local
variables</em>—variables that can have a different value in each buffer.
See <a href="#Locals">Locals</a>.

</p>
<a name="index-buffer-size_002c-maximum"></a>
<p>A buffer’s size cannot be larger than some maximum, which is defined
by the largest buffer position representable by <em>Emacs integers</em>.
This is because Emacs tracks buffer positions using that data type.
For typical 64-bit machines, this maximum buffer size is <em>2^{61} - 2</em>
bytes, or about 2 EiB.  For typical 32-bit machines, the maximum is
usually <em>2^{29} - 2</em> bytes, or about 512 MiB.  Buffer sizes are
also limited by the amount of memory in the system.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Select-Buffer" accesskey="1">Select Buffer</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Creating a new buffer or reselecting an old one.

</td></tr>
<tr><td align="left" valign="top">• <a href="#List-Buffers" accesskey="2">List Buffers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Getting a list of buffers that exist.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Misc-Buffer" accesskey="3">Misc Buffer</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Renaming; changing read-only status; copying text.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Kill-Buffer" accesskey="4">Kill Buffer</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Killing buffers you no longer need.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Several-Buffers" accesskey="5">Several Buffers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to go through the list of all buffers
                          and operate variously on several of them.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Indirect-Buffers" accesskey="6">Indirect Buffers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">An indirect buffer shares the text of another buffer.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Buffer-Convenience" accesskey="7">Buffer Convenience</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Convenience and customization features for
                          buffer handling.

</td></tr>
</tbody></table>


<a name="Select-Buffer"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#List-Buffers" accesskey="n" rel="next">List Buffers</a>, Up: <a href="#Buffers" accesskey="u" rel="up">Buffers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Creating-and-Selecting-Buffers"></a>
<h3 class="section">19.1 Creating and Selecting Buffers</h3>
<a name="index-change-buffers"></a>
<a name="index-switch-buffers"></a>

<dl compact="compact">
<dt><kbd>C-x b <var>buffer</var> <span class="key">RET</span></kbd></dt>
<dd><p>Select or create a buffer named <var>buffer</var> (<code>switch-to-buffer</code>).

</p></dd>
<dt><kbd>C-x 4 b <var>buffer</var> <span class="key">RET</span></kbd></dt>
<dd><p>Similar, but select <var>buffer</var> in another window
(<code>switch-to-buffer-other-window</code>).

</p></dd>
<dt><kbd>C-x 5 b <var>buffer</var> <span class="key">RET</span></kbd></dt>
<dd><p>Similar, but select <var>buffer</var> in a separate frame
(<code>switch-to-buffer-other-frame</code>).

</p></dd>
<dt><kbd>C-x <span class="key">LEFT</span></kbd></dt>
<dd><p>Select the previous buffer in the buffer list (<code>previous-buffer</code>).

</p></dd>
<dt><kbd>C-x <span class="key">RIGHT</span></kbd></dt>
<dd><p>Select the next buffer in the buffer list (<code>next-buffer</code>).

</p></dd>
<dt><kbd>C-u M-g M-g</kbd></dt>
<dt><kbd>C-u M-g g</kbd></dt>
<dd><p>Read a number <var>n</var> and move to line <var>n</var> in the most recently
selected buffer other than the current buffer, in another window.

</p></dd>
</dl>

<a name="index-C_002dx-b"></a>
<a name="index-switch_002dto_002dbuffer"></a>
<p>The <kbd>C-x b</kbd> (<code>switch-to-buffer</code>) command reads a buffer
name using the minibuffer.  Then it makes that buffer current, and
displays it in the currently-selected window.  An empty input
specifies the buffer that was current most recently among those not
now displayed in any window.

</p>
<p>While entering the buffer name, you can use the usual completion and
history commands (see <a href="#Minibuffer">Minibuffer</a>).  Note that <kbd>C-x b</kbd>, and
related commands, use <em>permissive completion with confirmation</em>
for minibuffer completion: if you type <tt class="key">RET</tt> when the minibuffer
text names a nonexistent buffer, Emacs prints ‘<samp>[Confirm]</samp>’ and you
must type a second <tt class="key">RET</tt> to submit that buffer name.
See <a href="#Completion-Exit">Completion Exit</a>, for details.  For other completion options and
features, see <a href="#Completion-Options">Completion Options</a>.

</p>
<p>If you specify a buffer that does not exist, <kbd>C-x b</kbd> creates a new, empty buffer that is not visiting any file, and selects it for editing. The default value of the variable <code>major-mode</code> determines the new buffer’s major mode; the default value is Fundamental mode. 请参阅<a href="#Major-Modes">主模式</a>。One reason to create a new buffer is to use it for making temporary notes. If you try to save it, Emacs asks for the file name to use, and the buffer’s major mode is re-established taking that file name into account (see <a href="#Choosing-Modes">Choosing Modes</a>).
</p>
<a name="index-C_002dx-LEFT"></a>
<a name="index-C_002dx-RIGHT"></a>
<a name="index-next_002dbuffer"></a>
<a name="index-previous_002dbuffer"></a>
<p>For conveniently switching between a few buffers, use the commands
<kbd>C-x <span class="key">LEFT</span></kbd> and <kbd>C-x <span class="key">RIGHT</span></kbd>.  <kbd>C-x <span class="key">LEFT</span></kbd>
(<code>previous-buffer</code>) selects the previous buffer (following the
order of most recent selection in the current frame), while <kbd>C-x
<span class="key">RIGHT</span></kbd> (<code>next-buffer</code>) moves through buffers in the reverse
direction.  Both commands support a numeric prefix argument that
serves as a repeat count.

</p>
<a name="index-C_002dx-4-b"></a>
<a name="index-switch_002dto_002dbuffer_002dother_002dwindow"></a>
<p>To select a buffer in a window other than the current one
(see <a href="#Windows">Windows</a>), type <kbd>C-x 4 b</kbd>
(<code>switch-to-buffer-other-window</code>).  This prompts for a buffer
name using the minibuffer, displays that buffer in another window, and
selects that window.

</p>
<a name="index-C_002dx-5-b"></a>
<a name="index-switch_002dto_002dbuffer_002dother_002dframe"></a>
<p>Similarly, <kbd>C-x 5 b</kbd> (<code>switch-to-buffer-other-frame</code>)
prompts for a buffer name, displays that buffer in another frame
(see <a href="#Frames">Frames</a>), and selects that frame.  If the buffer is already
being shown in a window on another frame, Emacs selects that window
and frame instead of creating a new frame.

</p>
<p>See <a href="#Displaying-Buffers">Displaying Buffers</a>, for how the <kbd>C-x 4 b</kbd> and <kbd>C-x 5
b</kbd> commands get the window and/or frame to display in.

</p>
<p>In addition, <kbd>C-x C-f</kbd>, and any other command for visiting a
file, can also be used to switch to an existing file-visiting buffer.
See <a href="#Visiting">Visiting</a>.

</p>
<a name="index-goto_002dline_002c-with-an-argument"></a>
<p><kbd>C-u M-g M-g</kbd>, that is <code>goto-line</code> with a plain prefix
argument, reads a number <var>n</var> using the minibuffer, selects the
most recently selected buffer other than the current buffer in another
window, and then moves point to the beginning of line number <var>n</var>
in that buffer.  This is mainly useful in a buffer that refers to line
numbers in another buffer: if point is on or just after a number,
<code>goto-line</code> uses that number as the default for <var>n</var>.  Note
that prefix arguments other than just <kbd>C-u</kbd> behave differently.
<kbd>C-u 4 M-g M-g</kbd> goes to line 4 in the <em>current</em> buffer,
without reading a number from the minibuffer.  (Remember that <kbd>M-g
M-g</kbd> without prefix argument reads a number <var>n</var> and then moves to
line number <var>n</var> in the current buffer.  See <a href="#Moving-Point">Moving Point</a>.)

</p>
<p>Emacs uses buffer names that start with a space for internal purposes.
It treats these buffers specially in minor ways—for example, by
default they do not record undo information.  It is best to avoid using
such buffer names yourself.

</p>

<a name="List-Buffers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Misc-Buffer" accesskey="n" rel="next">Misc Buffer</a>, Previous: <a href="#Select-Buffer" accesskey="p" rel="prev">Select Buffer</a>, Up: <a href="#Buffers" accesskey="u" rel="up">Buffers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Listing-Existing-Buffers"></a>
<h3 class="section">19.2 Listing Existing Buffers</h3>

<dl compact="compact">
<dt><kbd>C-x C-b</kbd></dt>
<dd><p>List the existing buffers (<code>list-buffers</code>).

</p></dd>
</dl>

<a name="index-listing-current-buffers"></a>
<a name="index-C_002dx-C_002db"></a>
<a name="index-list_002dbuffers"></a>
<p>To display a list of existing buffers, type <kbd>C-x C-b</kbd>.  This
pops up a buffer menu in a buffer named <samp>*Buffer List*</samp>.  Each
line in the list shows one buffer’s name, size, major mode and visited file.
The buffers are listed in the order that they were current; the
buffers that were current most recently come first.  This section
describes how the list of buffers is displayed and how to interpret
the various indications in the list; see <a href="#Several-Buffers">Several Buffers</a>, for
description of the special mode in the <samp>*Buffer List*</samp> buffer and
the commands available there.

</p>
<p>‘<samp>.</samp>’ in the first field of a line indicates that the buffer is
current.  ‘<samp>%</samp>’ indicates a read-only buffer.  ‘<samp>*</samp>’ indicates
that the buffer is modified.  If several buffers are modified, it
may be time to save some with <kbd>C-x s</kbd> (see <a href="#Save-Commands">Save Commands</a>).
Here is an example of a buffer list:

</p>
<div class="smallexample">
<pre class="smallexample">CRM Buffer                Size  Mode              File
. * .emacs                3294  Emacs-Lisp        ~/.emacs
 %  *Help*                 101  Help
    search.c             86055  C                 ~/cvs/emacs/src/search.c
 %  src                  20959  Dired by name     ~/cvs/emacs/src/
  * *mail*                  42  Mail
 %  HELLO                 1607  Fundamental       ~/cvs/emacs/etc/HELLO
 %  NEWS                481184  Outline           ~/cvs/emacs/etc/NEWS
    *scratch*              191  Lisp Interaction
  * *Messages*            1554  Messages
</pre></div>

<p>The buffer <samp>*Help*</samp> was made by a help request (see <a href="#Help">Help</a>); it
is not visiting any file.  The buffer <code>src</code> was made by Dired on
the directory <samp>~/cvs/emacs/src/</samp>.  You can list only buffers that
are visiting files by giving the command a prefix argument, as in
<kbd>C-u C-x C-b</kbd>.

</p>
<p><code>list-buffers</code> omits buffers whose names begin with a space,
unless they visit files: such buffers are used internally by Emacs.

</p>

<a name="Misc-Buffer"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Kill-Buffer" accesskey="n" rel="next">Kill Buffer</a>, Previous: <a href="#List-Buffers" accesskey="p" rel="prev">List Buffers</a>, Up: <a href="#Buffers" accesskey="u" rel="up">Buffers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Miscellaneous-Buffer-Operations"></a>
<h3 class="section">19.3 Miscellaneous Buffer Operations</h3>

<dl compact="compact">
<dt><kbd>C-x C-q</kbd></dt>
<dd><p>Toggle read-only status of buffer (<code>read-only-mode</code>).

</p></dd>
<dt><kbd>M-x rename-buffer <span class="key">RET</span> <var>buffer</var> <span class="key">RET</span></kbd></dt>
<dd><p>Change the name of the current buffer.

</p></dd>
<dt><kbd>M-x rename-uniquely</kbd></dt>
<dd><p>Rename the current buffer by adding ‘<samp>&lt;<var>number</var>&gt;</samp>’ to the end.

</p></dd>
<dt><kbd>M-x view-buffer <span class="key">RET</span> <var>buffer</var> <span class="key">RET</span></kbd></dt>
<dd><p>Scroll through buffer <var>buffer</var>.  See <a href="#View-Mode">View Mode</a>.

</p></dd>
</dl>

<a name="index-C_002dx-C_002dq"></a>
<a name="index-buffer_002dread_002donly"></a>
<a name="index-read_002donly-buffer"></a>
<p>A buffer can be <em>read-only</em>, which means that commands to insert
or delete its text are not allowed.  (However, other commands, like
<kbd>C-x <span class="key">RET</span> f</kbd>, can still mark it as modified, see <a href="#Text-Coding">Text Coding</a>).  The mode line indicates read-only buffers with ‘<samp>%%</samp>’ or
‘<samp>%*</samp>’ near the left margin.  See <a href="#Mode-Line">Mode Line</a>.  Read-only buffers
are usually made by subsystems such as Dired and Rmail that have
special commands to operate on the text.  Visiting a file whose access
control says you cannot write it also makes the buffer read-only.

</p>
<a name="index-read_002donly_002dmode"></a>
<a name="index-view_002dread_002donly"></a>
<p>The command <kbd>C-x C-q</kbd> (<code>read-only-mode</code>) makes a read-only
buffer writable, and makes a writable buffer read-only.  This works by
setting the variable <code>buffer-read-only</code>, which has a local value
in each buffer and makes the buffer read-only if its value is
non-<code>nil</code>.  If you change the option <code>view-read-only</code> to a
non-<code>nil</code> value, making the buffer read-only with <kbd>C-x C-q</kbd>
also enables View mode in the buffer (see <a href="#View-Mode">View Mode</a>).

</p>
<a name="index-rename_002dbuffer"></a>
<p><kbd>M-x rename-buffer</kbd> changes the name of the current buffer.  You
specify the new name as a minibuffer argument; there is no default.
If you specify a name that is in use for some other buffer, an error
happens and no renaming is done.

</p>
<a name="index-rename_002duniquely"></a>
<p><kbd>M-x rename-uniquely</kbd> renames the current buffer to a similar
name with a numeric suffix added to make it both different and unique.
This command does not need an argument.  It is useful for creating
multiple shell buffers: if you rename the <samp>*shell*</samp> buffer, then
do <kbd>M-x shell</kbd> again, it makes a new shell buffer named
<samp>*shell*</samp>; meanwhile, the old shell buffer continues to exist
under its new name.  This method is also good for mail buffers,
compilation buffers, and most Emacs features that create special
buffers with particular names.  (With some of these features, such as
<kbd>M-x compile</kbd>, <kbd>M-x grep</kbd>, you need to switch to some other
buffer before using the command again, otherwise it will reuse the
current buffer despite the name change.)

</p>
<p>The commands <kbd>M-x append-to-buffer</kbd> and <kbd>M-x insert-buffer</kbd>
can also be used to copy text from one buffer to another.
See <a href="#Accumulating-Text">Accumulating Text</a>.

</p>

<a name="Kill-Buffer"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Several-Buffers" accesskey="n" rel="next">Several Buffers</a>, Previous: <a href="#Misc-Buffer" accesskey="p" rel="prev">Misc Buffer</a>, Up: <a href="#Buffers" accesskey="u" rel="up">Buffers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Killing-Buffers"></a>
<h3 class="section">19.4 Killing Buffers</h3>

<a name="index-killing-buffers"></a>
<a name="index-close-buffer"></a>
<a name="index-close-file"></a>
<p>If you continue an Emacs session for a while, you may accumulate a
large number of buffers.  You may then find it convenient to <em>kill</em>
the buffers you no longer need.  (Some other editors call this
operation <em>close</em>, and talk about “closing the buffer” or
“closing the file” visited in the buffer.)  On most operating
systems, killing a buffer releases the memory Emacs used for the buffer
back to the operating system so that other programs can use it.  Here
are some commands for killing buffers:

</p>
<dl compact="compact">
<dt><kbd>C-x k <var>buffer</var> <span class="key">RET</span></kbd></dt>
<dd><p>Kill buffer <var>buffer</var> (<code>kill-buffer</code>).

</p></dd>
<dt><kbd>M-x kill-some-buffers</kbd></dt>
<dd><p>Offer to kill each buffer, one by one.

</p></dd>
<dt><kbd>M-x kill-matching-buffers</kbd></dt>
<dd><p>Offer to kill all buffers matching a regular expression.

</p></dd>
</dl>

<a name="index-kill_002dbuffer"></a>
<a name="index-C_002dx-k"></a>
<a name="index-killing-unsaved-buffers"></a>
<a name="index-unsaved-buffers_002c-killing"></a>
<p><kbd>C-x k</kbd> (<code>kill-buffer</code>) kills one buffer, whose name you
specify in the minibuffer.  The default, used if you type just
<tt class="key">RET</tt> in the minibuffer, is to kill the current buffer.  If you
kill the current buffer, another buffer becomes current: one that was
current in the recent past but is not displayed in any window now.  If
you ask to kill a file-visiting buffer that is modified, then you must
confirm with <kbd>yes</kbd> before the buffer is killed.

</p>
<a name="index-kill_002dsome_002dbuffers"></a>
<p>The command <kbd>M-x kill-some-buffers</kbd> asks about each buffer, one
by one.  An answer of <kbd>yes</kbd> means to kill the buffer, just like
<code>kill-buffer</code>.  This command ignores buffers whose names begin
with a space, which are used internally by Emacs.

</p>
<a name="index-kill_002dmatching_002dbuffers"></a>
<p>The command <kbd>M-x kill-matching-buffers</kbd> prompts for a regular
expression and kills all buffers whose names match that expression.
See <a href="#Regexps">Regexps</a>.  Like <code>kill-some-buffers</code>, it asks for
confirmation before each kill.  This command normally ignores buffers
whose names begin with a space, which are used internally by Emacs.
To kill internal buffers as well, call <code>kill-matching-buffers</code>
with a prefix argument.

</p>
<p>The Buffer Menu feature is also convenient for killing various
buffers.  See <a href="#Several-Buffers">Several Buffers</a>.

</p>
<a name="index-kill_002dbuffer_002dhook"></a>
<p>If you want to do something special every time a buffer is killed, you
can add hook functions to the hook <code>kill-buffer-hook</code> (see <a href="#Hooks">Hooks</a>).

</p>
<a name="index-clean_002dbuffer_002dlist"></a>
<p>If you run one Emacs session for a period of days, as many people do,
it can fill up with buffers that you used several days ago.  The command
<kbd>M-x clean-buffer-list</kbd> is a convenient way to purge them; it kills
all the unmodified buffers that you have not used for a long time.  An
ordinary buffer is killed if it has not been displayed for three days;
however, you can specify certain buffers that should never be killed
automatically, and others that should be killed if they have been unused
for a mere hour.  These defaults, and other aspects of this command’s
behavior, can be controlled by customizing several options described
in the doc string of <code>clean-buffer-list</code>.

</p>
<a name="index-Midnight-mode"></a>
<a name="index-midnight_002dmode"></a>
<a name="index-midnight_002dhook"></a>
<p>You can also have this buffer purging done for you, once a day,
by enabling Midnight mode.  Midnight mode operates each day
at midnight; at that time, it runs <code>clean-buffer-list</code>, or
whichever functions you have placed in the normal hook
<code>midnight-hook</code> (see <a href="#Hooks">Hooks</a>).  To enable Midnight mode, use
the Customization buffer to set the variable <code>midnight-mode</code> to
<code>t</code>.  See <a href="#Easy-Customization">Easy Customization</a>.

</p>

<a name="Several-Buffers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Indirect-Buffers" accesskey="n" rel="next">Indirect Buffers</a>, Previous: <a href="#Kill-Buffer" accesskey="p" rel="prev">Kill Buffer</a>, Up: <a href="#Buffers" accesskey="u" rel="up">Buffers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Operating-on-Several-Buffers"></a>
<h3 class="section">19.5 Operating on Several Buffers</h3>
<a name="index-Buffer-Menu"></a>

<dl compact="compact">
<dt><kbd>M-x buffer-menu</kbd></dt>
<dd><p>Begin editing a buffer listing all Emacs buffers.

</p></dd>
<dt><kbd>M-x buffer-menu-other-window</kbd></dt>
<dd><p>Similar, but do it in another window.

</p></dd>
</dl>

<p>The <em>Buffer Menu</em> opened by <kbd>C-x C-b</kbd> (see <a href="#List-Buffers">List Buffers</a>)
does not merely list buffers.  It also allows you to perform various
operations on buffers, through an interface similar to Dired
(see <a href="#Dired">Dired</a>).  You can save buffers, kill them (here called
<em>deleting</em> them, for consistency with Dired), or display them.

</p>
<a name="index-buffer_002dmenu"></a>
<a name="index-buffer_002dmenu_002dother_002dwindow"></a>
<p>To use the Buffer Menu, type <kbd>C-x C-b</kbd> and switch to the window
displaying the <samp>*Buffer List*</samp> buffer.  You can also type
<kbd>M-x buffer-menu</kbd> to open the Buffer Menu in the selected window.
Alternatively, the command <kbd>M-x buffer-menu-other-window</kbd> opens
the Buffer Menu in another window, and selects that window.

</p>
<p>The Buffer Menu is a read-only buffer, and can be changed only
through the special commands described in this section.  The usual
cursor motion commands can be used in this buffer.  The following
commands apply to the buffer described on the current line:

</p>
<dl compact="compact">
<dt><kbd>d</kbd></dt>
<dd><a name="index-Buffer_002dmenu_002ddelete"></a>
<a name="index-d-_0028Buffer-Menu_0029"></a>
<p>Flag the buffer for deletion (killing), then move point to the next
line (<code>Buffer-menu-delete</code>).  The deletion flag is indicated by
the character ‘<samp>D</samp>’ on the line, before the buffer name.  The
deletion occurs only when you type the <kbd>x</kbd> command (see below).

</p>
</dd>
<dt><kbd>C-d</kbd></dt>
<dd><a name="index-Buffer_002dmenu_002ddelete_002dbackwards"></a>
<a name="index-C_002dd-_0028Buffer-Menu_0029"></a>
<p>Like <kbd>d</kbd>, but move point up instead of down
(<code>Buffer-menu-delete-backwards</code>).

</p>
</dd>
<dt><kbd>s</kbd></dt>
<dd><a name="index-Buffer_002dmenu_002dsave"></a>
<a name="index-s-_0028Buffer-Menu_0029"></a>
<p>Flag the buffer for saving (<code>Buffer-menu-save</code>).  The save flag
is indicated by the character ‘<samp>S</samp>’ on the line, before the buffer
name.  The saving occurs only when you type <kbd>x</kbd>.  You may request
both saving and deletion for the same buffer.

</p>
</dd>
<dt><kbd>x</kbd></dt>
<dd><a name="index-Buffer_002dmenu_002dexecute"></a>
<a name="index-x-_0028Buffer-Menu_0029"></a>
<p>Perform all flagged deletions and saves (<code>Buffer-menu-execute</code>).

</p>
</dd>
<dt><kbd>u</kbd></dt>
<dd><a name="index-Buffer_002dmenu_002dunmark"></a>
<a name="index-u-_0028Buffer-Menu_0029"></a>
<p>Remove all flags from the current line, and move down
(<code>Buffer-menu-unmark</code>).  With a prefix argument, moves up after
removing the flags.

</p>
</dd>
<dt><kbd><span class="key">DEL</span></kbd></dt>
<dd><a name="index-Buffer_002dmenu_002dbackup_002dunmark"></a>
<a name="index-DEL-_0028Buffer-Menu_0029"></a>
<p>Move to the previous line and remove all flags on that line
(<code>Buffer-menu-backup-unmark</code>).

</p>
</dd>
<dt><kbd>M-<span class="key">DEL</span></kbd></dt>
<dd><a name="index-Buffer_002dmenu_002dunmark_002dall_002dbuffers"></a>
<a name="index-M_002dDEL-_0028Buffer-Menu_0029"></a>
<p>Remove a particular flag from all lines
(<code>Buffer-menu-unmark-all-buffers</code>).  This asks for a single
character, and unmarks buffers marked with that character; typing
<tt class="key">RET</tt> removes all marks.

</p>
</dd>
<dt><kbd>U</kbd></dt>
<dd><a name="index-Buffer_002dmenu_002dunmark_002dall"></a>
<a name="index-U-_0028Buffer-Menu_0029"></a>
<p>Remove all flags from all the lines
(<code>Buffer-menu-unmark-all</code>).

</p></dd>
</dl>

<p>The commands for removing flags, <kbd>d</kbd> and <kbd>C-d</kbd>, accept a
numeric argument as a repeat count.

</p>
<p>The following commands operate immediately on the buffer listed on
the current line.  They also accept a numeric argument as a repeat
count.

</p>
<dl compact="compact">
<dt><kbd>~</kbd></dt>
<dd><a name="index-Buffer_002dmenu_002dnot_002dmodified"></a>
<a name="index-_007e-_0028Buffer-Menu_0029"></a>
<p>Mark the buffer as unmodified (<code>Buffer-menu-not-modified</code>).
See <a href="#Save-Commands">Save Commands</a>.

</p>
</dd>
<dt><kbd>%</kbd></dt>
<dd><a name="index-Buffer_002dmenu_002dtoggle_002dread_002donly"></a>
<a name="index-_0025-_0028Buffer-Menu_0029"></a>
<p>Toggle the buffer’s read-only status
(<code>Buffer-menu-toggle-read-only</code>).  See <a href="#Misc-Buffer">Misc Buffer</a>.

</p>
</dd>
<dt><kbd>t</kbd></dt>
<dd><a name="index-Buffer_002dmenu_002dvisit_002dtags_002dtable"></a>
<a name="index-t-_0028Buffer-Menu_0029"></a>
<p>Visit the buffer as a tags table
(<code>Buffer-menu-visit-tags-table</code>).  See <a href="#Select-Tags-Table">Select Tags Table</a>.

</p></dd>
</dl>

<p>The following commands are used to select another buffer or buffers:

</p>
<dl compact="compact">
<dt><kbd>q</kbd></dt>
<dd><a name="index-quit_002dwindow-1"></a>
<a name="index-q-_0028Buffer-Menu_0029"></a>
<p>Quit the Buffer Menu (<code>quit-window</code>).  The most recent formerly
visible buffer is displayed in its place.

</p>
</dd>
<dt><kbd><span class="key">RET</span></kbd></dt>
<dt><kbd>f</kbd></dt>
<dd><a name="index-Buffer_002dmenu_002dthis_002dwindow"></a>
<a name="index-f-_0028Buffer-Menu_0029"></a>
<a name="index-RET-_0028Buffer-Menu_0029"></a>
<p>Select this line’s buffer, replacing the <samp>*Buffer List*</samp> buffer
in its window (<code>Buffer-menu-this-window</code>).

</p>
</dd>
<dt><kbd>o</kbd></dt>
<dd><a name="index-Buffer_002dmenu_002dother_002dwindow"></a>
<a name="index-o-_0028Buffer-Menu_0029"></a>
<p>Select this line’s buffer in another window, as if by <kbd>C-x 4 b</kbd>,
leaving <samp>*Buffer List*</samp> visible
(<code>Buffer-menu-other-window</code>).

</p>
</dd>
<dt><kbd>C-o</kbd></dt>
<dd><a name="index-Buffer_002dmenu_002dswitch_002dother_002dwindow"></a>
<a name="index-C_002do-_0028Buffer-Menu_0029"></a>
<p>Display this line’s buffer in another window, without selecting it
(<code>Buffer-menu-switch-other-window</code>).

</p>
</dd>
<dt><kbd>1</kbd></dt>
<dd><a name="index-Buffer_002dmenu_002d1_002dwindow"></a>
<a name="index-1-_0028Buffer-Menu_0029"></a>
<p>Select this line’s buffer in a full-frame window
(<code>Buffer-menu-1-window</code>).

</p>
</dd>
<dt><kbd>2</kbd></dt>
<dd><a name="index-Buffer_002dmenu_002d2_002dwindow"></a>
<a name="index-2-_0028Buffer-Menu_0029"></a>
<p>Set up two windows on the current frame, with this line’s buffer
selected in one, and a previously current buffer (aside from
<samp>*Buffer List*</samp>) in the other (<code>Buffer-menu-2-window</code>).

</p>
</dd>
<dt><kbd>b</kbd></dt>
<dd><a name="index-Buffer_002dmenu_002dbury"></a>
<a name="index-b-_0028Buffer-Menu_0029"></a>
<p>Bury this line’s buffer (<code>Buffer-menu-bury</code>) (i.e., move it to
the end of the buffer list).

</p>
</dd>
<dt><kbd>m</kbd></dt>
<dd><a name="index-Buffer_002dmenu_002dmark"></a>
<a name="index-m-_0028Buffer-Menu_0029"></a>
<p>Mark this line’s buffer to be displayed in another window if you exit
with the <kbd>v</kbd> command (<code>Buffer-menu-mark</code>).  The display flag
is indicated by the character ‘<samp>&gt;</samp>’ at the beginning of the line.
(A single buffer may not have both deletion and display flags.)

</p>
</dd>
<dt><kbd>v</kbd></dt>
<dd><a name="index-Buffer_002dmenu_002dselect"></a>
<a name="index-v-_0028Buffer-Menu_0029"></a>
<p>Select this line’s buffer, and also display in other windows any
buffers flagged with the <kbd>m</kbd> command (<code>Buffer-menu-select</code>).
If you have not flagged any buffers, this command is equivalent to
<kbd>1</kbd>.

</p></dd>
</dl>

<p>The following commands affect the entire buffer list:

</p>
<dl compact="compact">
<dt><kbd>S</kbd></dt>
<dd><a name="index-tabulated_002dlist_002dsort"></a>
<a name="index-S-_0028Buffer-Menu_0029"></a>
<p>Sort the Buffer Menu entries according to their values in the column
at point.  With a numeric prefix argument <var>n</var>, sort according to
the <var>n</var>-th column (<code>tabulated-list-sort</code>).

</p>
</dd>
<dt><kbd>}</kbd></dt>
<dd><a name="index-_007d-_0028Buffer-Menu_0029"></a>
<a name="index-tabulated_002dlist_002dwiden_002dcurrent_002dcolumn"></a>
<p>Widen the current column width by <var>n</var> (the prefix numeric
argument) characters.

</p>
</dd>
<dt><kbd>{</kbd></dt>
<dd><a name="index-_007b-_0028Buffer-Menu_0029"></a>
<a name="index-tabulated_002dlist_002dnarrow_002dcurrent_002dcolumn"></a>
<p>Narrow the current column width by <var>n</var> (the prefix numeric
argument) characters.

</p>
</dd>
<dt><kbd>T</kbd></dt>
<dd><a name="index-Buffer_002dmenu_002dtoggle_002dfiles_002donly"></a>
<a name="index-T-_0028Buffer-Menu_0029"></a>
<p>Delete, or reinsert, lines for non-file buffers
(<code>Buffer-menu-toggle-files-only</code>).  This command toggles the
inclusion of such buffers in the buffer list.

</p></dd>
</dl>

<p>Normally, the buffer <samp>*Buffer List*</samp> is not updated
automatically when buffers are created and killed; its contents are
just text.  If you have created, deleted or renamed buffers, the way
to update <samp>*Buffer List*</samp> to show what you have done is to type
<kbd>g</kbd> (<code>revert-buffer</code>).  You can make this happen regularly
every <code>auto-revert-interval</code> seconds if you enable Auto Revert
mode in this buffer, as long as it is not marked modified.  Global
Auto Revert mode applies to the <samp>*Buffer List*</samp> buffer only if
<code>global-auto-revert-non-file-buffers</code> is non-<code>nil</code>.
See <a href="#Auto-Reverting-the-Buffer-Menu">global-auto-revert-non-file-buffers</a>, for details.

</p>

<a name="Indirect-Buffers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Buffer-Convenience" accesskey="n" rel="next">Buffer Convenience</a>, Previous: <a href="#Several-Buffers" accesskey="p" rel="prev">Several Buffers</a>, Up: <a href="#Buffers" accesskey="u" rel="up">Buffers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Indirect-Buffers-1"></a>
<h3 class="section">19.6 Indirect Buffers</h3>
<a name="index-indirect-buffer"></a>
<a name="index-base-buffer"></a>

<p>An <em>indirect buffer</em> shares the text of some other buffer, which
is called the <em>base buffer</em> of the indirect buffer.  In some ways it
is a buffer analogue of a symbolic link between files.

</p>
<dl compact="compact">
<dd><a name="index-make_002dindirect_002dbuffer"></a>
</dd>
<dt><kbd>M-x make-indirect-buffer <span class="key">RET</span> <var>base-buffer</var> <span class="key">RET</span> <var>indirect-name</var> <span class="key">RET</span></kbd></dt>
<dd><p>Create an indirect buffer named <var>indirect-name</var> with base buffer
<var>base-buffer</var>.

<a name="index-clone_002dindirect_002dbuffer"></a>
</p></dd>
<dt><kbd>M-x clone-indirect-buffer <span class="key">RET</span></kbd></dt>
<dd><p>Create an indirect buffer that is a twin copy of the current buffer.

</p></dd>
<dt><kbd>C-x 4 c</kbd></dt>
<dd><a name="index-C_002dx-4-c"></a>
<a name="index-clone_002dindirect_002dbuffer_002dother_002dwindow"></a>
<p>Create an indirect buffer that is a twin copy of the current buffer, and
select it in another window (<code>clone-indirect-buffer-other-window</code>).

</p></dd>
</dl>

<p>The text of the indirect buffer is always identical to the text of its
base buffer; changes made by editing either one are visible immediately
in the other.  But in all other respects, the indirect buffer and its
base buffer are completely separate.  They can have different names,
different values of point, different narrowing, different markers,
different major modes, and different local variables.

</p>
<p>An indirect buffer cannot visit a file, but its base buffer can.  If
you try to save the indirect buffer, that actually works by saving the
base buffer.  Killing the base buffer effectively kills the indirect
buffer, but killing an indirect buffer has no effect on its base buffer.

</p>
<p>One way to use indirect buffers is to display multiple views of an
outline.  See <a href="#Outline-Views">Outline Views</a>.

</p>
<a name="index-clone_002dindirect_002dbuffer_002dhook"></a>
<p>A quick and handy way to make an indirect buffer is with the command
<kbd>M-x clone-indirect-buffer</kbd>.  It creates and selects an indirect
buffer whose base buffer is the current buffer.  With a numeric
argument, it prompts for the name of the indirect buffer; otherwise it
uses the name of the current buffer, with a ‘<samp>&lt;<var>n</var>&gt;</samp>’ suffix
added.  <kbd>C-x 4 c</kbd> (<code>clone-indirect-buffer-other-window</code>)
works like <kbd>M-x clone-indirect-buffer</kbd>, but it selects the new
buffer in another window.  These functions run the hook
<code>clone-indirect-buffer-hook</code> after creating the indirect buffer.

</p>
<p>The more general way to make an indirect buffer is with the command
<kbd>M-x make-indirect-buffer</kbd>.  It creates an indirect buffer
named <var>indirect-name</var> from a buffer <var>base-buffer</var>, prompting for
both using the minibuffer.

</p>

<a name="Buffer-Convenience"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Indirect-Buffers" accesskey="p" rel="prev">Indirect Buffers</a>, Up: <a href="#Buffers" accesskey="u" rel="up">Buffers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Convenience-Features-and-Customization-of-Buffer-Handling"></a>
<h3 class="section">19.7 Convenience Features and Customization of Buffer Handling</h3>

<p>This section describes several modes and features that make it more
convenient to switch between buffers.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Uniquify" accesskey="1">Uniquify</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Making buffer names unique with directory parts.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Icomplete" accesskey="2">Icomplete</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Fast minibuffer selection.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Buffer-Menus" accesskey="3">Buffer Menus</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Configurable buffer menu.

</td></tr>
</tbody></table>


<a name="Uniquify"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Icomplete" accesskey="n" rel="next">Icomplete</a>, Up: <a href="#Buffer-Convenience" accesskey="u" rel="up">Buffer Convenience</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Making-Buffer-Names-Unique"></a>
<h4 class="subsection">19.7.1 Making Buffer Names Unique</h4>

<a name="index-unique-buffer-names"></a>
<a name="index-directories-in-buffer-names"></a>
<p>When several buffers visit identically-named files, Emacs must give
the buffers distinct names.  The default method adds a suffix based on
the names of the directories that contain the files.  For example, if
you visit files <samp>/foo/bar/mumble/name</samp> and
<samp>/baz/quux/mumble/name</samp> at the same time, their buffers will be
named ‘<samp>name&lt;bar/mumble&gt;</samp>’ and ‘<samp>name&lt;quux/mumble&gt;</samp>’, respectively.
Emacs adds as many directory parts as are needed to make a unique name.

</p>
<a name="index-uniquify_002dbuffer_002dname_002dstyle"></a>
<p>You can choose from several different styles for constructing unique
buffer names, by customizing the option <code>uniquify-buffer-name-style</code>.

</p>
<p>The <code>forward</code> naming method includes part of the file’s
directory name at the beginning of the buffer name; using this method,
buffers visiting the files <samp>/u/rms/tmp/Makefile</samp> and
<samp>/usr/projects/zaphod/Makefile</samp> would be named
‘<samp>tmp/Makefile</samp>’ and ‘<samp>zaphod/Makefile</samp>’.

</p>
<p>In contrast, the <code>post-forward</code> naming method would call the
buffers ‘<samp>Makefile|tmp</samp>’ and ‘<samp>Makefile|zaphod</samp>’.  The default
method <code>post-forward-angle-brackets</code> is like <code>post-forward</code>,
except that it encloses the unique path in angle brackets.  The
<code>reverse</code> naming method would call them ‘<samp>Makefile\tmp</samp>’ and
‘<samp>Makefile\zaphod</samp>’.  The nontrivial difference between
<code>post-forward</code> and <code>reverse</code> occurs when just one directory
name is not enough to distinguish two files; then <code>reverse</code> puts
the directory names in reverse order, so that <samp>/top/middle/file</samp>
becomes ‘<samp>file\middle\top</samp>’, while <code>post-forward</code> puts them in
forward order after the file name, as in ‘<samp>file|top/middle</samp>’.  If
<code>uniquify-buffer-name-style</code> is set to <code>nil</code>, the buffer
names simply get ‘<samp>&lt;2&gt;</samp>’, ‘<samp>&lt;3&gt;</samp>’, etc. appended.

</p>
<p>Which rule to follow for putting the directory names in the buffer
name is not very important if you are going to <em>look</em> at the
buffer names before you type one.  But as an experienced user, if you
know the rule, you won’t have to look.  And then you may find that one
rule or another is easier for you to remember and apply quickly.

</p>

<a name="Icomplete"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Buffer-Menus" accesskey="n" rel="next">Buffer Menus</a>, Previous: <a href="#Uniquify" accesskey="p" rel="prev">Uniquify</a>, Up: <a href="#Buffer-Convenience" accesskey="u" rel="up">Buffer Convenience</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Fast-minibuffer-selection"></a>
<h4 class="subsection">19.7.2 Fast minibuffer selection</h4>

<a name="index-icomplete_002dmode"></a>
<a name="index-Icomplete-mode"></a>

<p>Icomplete global minor mode provides a convenient way to quickly select an
element among the possible completions in a minibuffer.  When enabled, typing
in the minibuffer continuously displays a list of possible completions that
match the string you have typed.

</p>
<p>At any time, you can type <kbd>C-j</kbd> to select the first completion in
the list.  So the way to select a particular completion is to make it the
first in the list.  There are two ways to do this.  You can type more
of the completion name and thus narrow down the list, excluding unwanted
completions above the desired one.  Alternatively, you can use <kbd>C-.</kbd>
and <kbd>C-,</kbd> to rotate the list until the desired buffer is first.

</p>
<p><kbd>M-<span class="key">TAB</span></kbd> will select the first completion in the list, like
<kbd>C-j</kbd> but without exiting the minibuffer, so you can edit it
further.  This is typically used when entering a file name, where
<kbd>M-<span class="key">TAB</span></kbd> can be used a few times to descend in the hierarchy
of directories.

</p>
<p>To enable Icomplete mode, type <kbd>M-x icomplete-mode</kbd>, or customize
the variable <code>icomplete-mode</code> to <code>t</code> (see <a href="#Easy-Customization">Easy Customization</a>).

</p>
<a name="index-fido_002dmode"></a>
<a name="index-fido-mode"></a>

<p>An alternative to Icomplete mode is Fido mode.  This is very similar
to Icomplete mode, but retains some functionality from a popular
extension called Ido mode (in fact the name is derived from “Fake
Ido”).  Among other things, in Fido mode, <kbd>C-s</kbd> and <kbd>C-r</kbd> are
also used to rotate the completions list, <kbd>C-k</kbd> can be used to
delete files and kill buffers in-list.  Another noteworthy aspect is
that <code>flex</code> is used as the default completion style
(see <a href="#Completion-Styles">Completion Styles</a>).  To change this, add the following to
your initialization file (see <a href="#Init-File">Init File</a>):

</p>
<div class="example">
<pre class="example">(defun my-icomplete-styles ()
  (setq-local completion-styles '(initials flex)))
(add-hook 'icomplete-minibuffer-setup-hook 'my-icomplete-styles)
</pre></div>

<p>To enable Fido mode, type <kbd>M-x fido-mode</kbd>, or customize
the variable <code>fido-mode</code> to <code>t</code> (see <a href="#Easy-Customization">Easy Customization</a>).

</p>

<a name="Buffer-Menus"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Icomplete" accesskey="p" rel="prev">Icomplete</a>, Up: <a href="#Buffer-Convenience" accesskey="u" rel="up">Buffer Convenience</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Customizing-Buffer-Menus"></a>
<h4 class="subsection">19.7.3 Customizing Buffer Menus</h4>

<a name="index-bs_002dshow"></a>
<a name="index-buffer-list_002c-customizable"></a>
<dl compact="compact">
<dt><kbd>M-x bs-show</kbd></dt>
<dd><p>Make a list of buffers similarly to <kbd>M-x list-buffers</kbd> but
customizable.

</p></dd>
<dt><kbd>M-x ibuffer</kbd></dt>
<dd><p>Make a list of buffers and operate on them in Dired-like fashion.

</p></dd>
</dl>

<a name="index-bs_002dcustomize"></a>
<p><kbd>M-x bs-show</kbd> pops up a buffer list similar to the one normally
displayed by <kbd>C-x C-b</kbd>, but whose display you can customize in a
more flexible fashion.  For example, you can specify the list of
buffer attributes to show, the minimum and maximum width of buffer
name column, a regexp for names of buffers that will never be shown
and those which will always be shown, etc.  If you prefer
this to the usual buffer list, you can bind this command to <kbd>C-x
C-b</kbd>.  To customize this buffer list, use the <code>bs</code> Custom group
(see <a href="#Easy-Customization">Easy Customization</a>), or invoke <kbd>bs-customize</kbd>.

</p>
<a name="index-msb_002dmode"></a>
<a name="index-mode_002c-MSB"></a>
<a name="index-MSB-mode"></a>
<a name="index-mouse_002dbuffer_002dmenu"></a>
<a name="index-C_002dDown_002dmouse_002d1"></a>
<p>MSB global minor mode (“MSB” stands for “mouse select buffer”)
provides a different and customizable mouse buffer menu which you may
prefer.  It replaces the <code>mouse-buffer-menu</code> commands, normally
bound to <kbd>C-Down-mouse-1</kbd> and <kbd>C-<span class="key">F10</span></kbd>, with its own
commands, and also modifies the menu-bar buffer menu.  You can
customize the menu in the <code>msb</code> Custom group.

</p>
<a name="index-ibuffer"></a>
<p>IBuffer is a major mode for viewing a list of buffers and operating
on them in a way analogous to that of Dired (see <a href="#Dired">Dired</a>), including
filtering, marking, sorting in various ways, and acting on buffers.

</p><hr>
<a name="Windows"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Frames" accesskey="n" rel="next">Frames</a>, Previous: <a href="#Buffers" accesskey="p" rel="prev">Buffers</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Multiple-Windows"></a>
<h2 class="chapter">20 Multiple Windows</h2>
<a name="index-windows-in-Emacs"></a>
<a name="index-multiple-windows-in-Emacs"></a>

<p>Emacs can split a frame into two or many windows.  Multiple windows
can display parts of different buffers, or different parts of one
buffer.  Multiple frames always imply multiple windows, because each
frame has its own set of windows.  Each window belongs to one and only
one frame.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Basic-Window" accesskey="1">Basic Window</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Introduction to Emacs windows.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Split-Window" accesskey="2">Split Window</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">New windows are made by splitting existing windows.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Other-Window" accesskey="3">Other Window</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Moving to another window or doing something to it.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Pop-Up-Window" accesskey="4">Pop Up Window</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Finding a file or buffer in another window.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Change-Window" accesskey="5">Change Window</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Deleting windows and changing their sizes.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Displaying-Buffers" accesskey="6">Displaying Buffers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How Emacs picks a window for displaying a buffer.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Window-Convenience" accesskey="7">Window Convenience</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Convenience functions for window handling.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Tab-Line" accesskey="8">Tab Line</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Window tab line.

</td></tr>
</tbody></table>


<a name="Basic-Window"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Split-Window" accesskey="n" rel="next">Split Window</a>, Up: <a href="#Windows" accesskey="u" rel="up">Windows</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Concepts-of-Emacs-Windows"></a>
<h3 class="section">20.1 Concepts of Emacs Windows</h3>

<p>Each Emacs window displays one Emacs buffer at any time.  A single
buffer may appear in more than one window; if it does, any changes in
its text are displayed in all the windows where it appears.  But these
windows can show different parts of the buffer, because each window
has its own value of point.

</p>
<a name="index-selected-window"></a>
<p>At any time, one Emacs window is the <em>selected window</em>; the
buffer this window is displaying is the current buffer.  On graphical
displays, the point is indicated by a solid blinking cursor in the
selected window, and by a hollow box in non-selected windows.  On text
terminals, the cursor is drawn only in the selected window.
See <a href="#Cursor-Display">Cursor Display</a>.

</p>
<p>Commands to move point affect the value of point for the selected
Emacs window only.  They do not change the value of point in other
Emacs windows, even those showing the same buffer.  The same is true
for buffer-switching commands such as <kbd>C-x b</kbd>; they do not affect
other windows at all.  However, there are other commands such as
<kbd>C-x 4 b</kbd> that select a different window and switch buffers in it.
Also, all commands that display information in a window, including
(for example) <kbd>C-h f</kbd> (<code>describe-function</code>) and <kbd>C-x C-b</kbd>
(<code>list-buffers</code>), usually work by displaying buffers in a
nonselected window without affecting the selected window.

</p>
<p>When multiple windows show the same buffer, they can have different
regions, because they can have different values of point.  However,
they all have the same value for the mark, because each buffer has
only one mark position.

</p>
<p>Each window has its own mode line, which displays the buffer name,
modification status and major and minor modes of the buffer that is
displayed in the window.  The selected window’s mode line appears in a
different color.  See <a href="#Mode-Line">Mode Line</a>, for details.

</p>

<a name="Split-Window"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Other-Window" accesskey="n" rel="next">Other Window</a>, Previous: <a href="#Basic-Window" accesskey="p" rel="prev">Basic Window</a>, Up: <a href="#Windows" accesskey="u" rel="up">Windows</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Splitting-Windows"></a>
<h3 class="section">20.2 Splitting Windows</h3>

<dl compact="compact">
<dt><kbd>C-x 2</kbd></dt>
<dd><p>Split the selected window into two windows, one above the other
(<code>split-window-below</code>).

</p></dd>
<dt><kbd>C-x 3</kbd></dt>
<dd><p>Split the selected window into two windows, positioned side by side
(<code>split-window-right</code>).

</p></dd>
<dt><kbd>C-mouse-2</kbd></dt>
<dd><p>In the mode line of a window, split that window.

</p></dd>
</dl>

<a name="index-C_002dx-2"></a>
<a name="index-split_002dwindow_002dbelow"></a>
<p><kbd>C-x 2</kbd> (<code>split-window-below</code>) splits the selected window
into two windows, one above the other.  After splitting, the selected
window is the upper one, and the newly split-off window is below.
Both windows have the same value of point as before, and display the
same portion of the buffer (or as close to it as possible).  If
necessary, the windows are scrolled to keep point on-screen.  By
default, the two windows each get half the height of the original
window.  A positive numeric argument specifies how many lines to give
to the top window; a negative numeric argument specifies how many
lines to give to the bottom window.

</p>
<a name="index-split_002dwindow_002dkeep_002dpoint"></a>
<p>If you change the variable <code>split-window-keep-point</code> to
<code>nil</code>, <kbd>C-x 2</kbd> instead adjusts the portion of the buffer
displayed by the two windows, as well as the value of point in each
window, in order to keep the text on the screen as close as possible
to what it was before; furthermore, if point was in the lower half of
the original window, the bottom window is selected instead of the
upper one.

</p>
<a name="index-C_002dx-3"></a>
<a name="index-split_002dwindow_002dright"></a>
<p><kbd>C-x 3</kbd> (<code>split-window-right</code>) splits the selected window
into two side-by-side windows.  The left window is the selected one;
the right window displays the same portion of the same buffer, and has
the same value of point.  A positive numeric argument specifies how
many columns to give the left window; a negative numeric argument
specifies how many columns to give the right window.

</p>
<a name="index-truncate_002dpartial_002dwidth_002dwindows"></a>
<p>When you split a window with <kbd>C-x 3</kbd>, each resulting window
occupies less than the full width of the frame.  If it becomes too
narrow, the buffer may be difficult to read if continuation lines are
in use (see <a href="#Continuation-Lines">Continuation Lines</a>).  Therefore, Emacs automatically
switches to line truncation if the window width becomes narrower than
50 columns.  This truncation occurs regardless of the value of the
variable <code>truncate-lines</code> (see <a href="#Line-Truncation">Line Truncation</a>); it is
instead controlled by the variable
<code>truncate-partial-width-windows</code>.  If the value of this variable
is a positive integer (the default is 50), that specifies the minimum
total width for a partial-width window before automatic line
truncation occurs; if the value is <code>nil</code>, automatic line
truncation is disabled; and for any other non-<code>nil</code> value, Emacs
truncates lines in every partial-width window regardless of its width.
The total width of a window is in column units as reported by
<code>window-total-width</code> (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Window-Sizes">Window Sizes</a> in <cite>The Emacs
Lisp Reference Manual</cite>), it includes the fringes, the continuation and
truncation glyphs, the margins, and the scroll bar.

</p>
<p>On text terminals, side-by-side windows are separated by a vertical
divider which is drawn using the <code>vertical-border</code> face.

</p>
<a name="index-C_002dmouse_002d2-_0028mode-line_0029"></a>
<a name="index-C_002dmouse_002d2-_0028scroll-bar_0029"></a>
<p>If you click <kbd>C-mouse-2</kbd> in the mode line of a window, that
splits the window, putting a vertical divider where you click.
Depending on how Emacs is compiled, you can also split a window by
clicking <kbd>C-mouse-2</kbd> in the scroll bar, which puts a horizontal
divider where you click (this feature does not work when Emacs uses
GTK+ scroll bars).

</p>
<a name="index-window_002dresize_002dpixelwise"></a>
<p>By default, when you split a window, Emacs gives each of the
resulting windows dimensions that are an integral multiple of the
default font size of the frame.  That might subdivide the screen
estate unevenly between the resulting windows.  If you set the
variable <code>window-resize-pixelwise</code> to a non-<code>nil</code> value,
Emacs will give each window the same number of pixels (give or take
one pixel if the initial dimension was an odd number of pixels).  Note
that when a frame’s pixel size is not a multiple of the frame’s
character size, at least one window may get resized pixelwise even if
this option is <code>nil</code>.

</p>

<a name="Other-Window"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Pop-Up-Window" accesskey="n" rel="next">Pop Up Window</a>, Previous: <a href="#Split-Window" accesskey="p" rel="prev">Split Window</a>, Up: <a href="#Windows" accesskey="u" rel="up">Windows</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Using-Other-Windows"></a>
<h3 class="section">20.3 Using Other Windows</h3>

<dl compact="compact">
<dt><kbd>C-x o</kbd></dt>
<dd><p>Select another window (<code>other-window</code>).

</p></dd>
<dt><kbd>C-M-v</kbd></dt>
<dd><p>Scroll the next window upward (<code>scroll-other-window</code>).

</p></dd>
<dt><kbd>C-M-S-v</kbd></dt>
<dd><p>Scroll the next window downward (<code>scroll-other-window-down</code>).

</p></dd>
<dt><kbd>鼠标左键</kbd></dt>
<dd><p><kbd>mouse-1</kbd>, in the text area of a window, selects the window and
moves point to the position clicked.  Clicking in the mode line
selects the window without moving point in it.

</p></dd>
</dl>

<a name="index-C_002dx-o"></a>
<a name="index-other_002dwindow"></a>
<p>With the keyboard, you can switch windows by typing <kbd>C-x o</kbd>
(<code>other-window</code>).  That is an <kbd>o</kbd>, for “other”, not a zero.
When there are more than two windows, this command moves through all the
windows in a cyclic order, generally top to bottom and left to right.
After the rightmost and bottommost window, it goes back to the one at
the upper left corner.  A numeric argument means to move several steps
in the cyclic order of windows.  A negative argument moves around the
cycle in the opposite order.  When the minibuffer is active, the
minibuffer window is the last window in the cycle; you can switch from
the minibuffer window to one of the other windows, and later switch
back and finish supplying the minibuffer argument that is requested.
See <a href="#Minibuffer-Edit">Minibuffer Edit</a>.

</p>
<a name="index-next_002dwindow_002dany_002dframe"></a>
<p>The <code>other-window</code> command will normally only switch to the next
window in the current frame (unless otherwise configured).  If you
work in a multi-frame environment and you want windows in all frames
to be part of the cycle, you can rebind <kbd>C-x o</kbd> to the
<code>next-window-any-frame</code> command.  (See <a href="#Rebinding">Rebinding</a>, for how to
rebind a command.)

</p>
<a name="index-C_002dM_002dv"></a>
<a name="index-scroll_002dother_002dwindow"></a>
<a name="index-C_002dM_002dS_002dv"></a>
<a name="index-scroll_002dother_002dwindow_002ddown"></a>
<p>The usual scrolling commands (see <a href="#Display">Display</a>) apply to the selected
window only, but there are also commands to scroll the next window.
<kbd>C-M-v</kbd> (<code>scroll-other-window</code>) scrolls the window that
<kbd>C-x o</kbd> would select.  In other respects, the command behaves like
<kbd>C-v</kbd>; both move the buffer text upward relative to the window, and
take positive and negative arguments.  (In the minibuffer, <kbd>C-M-v</kbd>
scrolls the help window associated with the minibuffer, if any, rather
than the next window in the standard cyclic order; see <a href="#Minibuffer-Edit">Minibuffer Edit</a>.)  <kbd>C-M-S-v</kbd> (<code>scroll-other-window-down</code>) scrolls the
next window downward in a similar way.

</p>
<a name="index-mouse_002dautoselect_002dwindow"></a>
<p>If you set <code>mouse-autoselect-window</code> to a non-<code>nil</code> value,
moving the mouse over a different window selects that window.  This
feature is off by default.

</p>

<a name="Pop-Up-Window"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Change-Window" accesskey="n" rel="next">Change Window</a>, Previous: <a href="#Other-Window" accesskey="p" rel="prev">Other Window</a>, Up: <a href="#Windows" accesskey="u" rel="up">Windows</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Displaying-in-Another-Window"></a>
<h3 class="section">20.4 Displaying in Another Window</h3>

<a name="index-selecting-buffers-in-other-windows"></a>
<a name="index-C_002dx-4"></a>
<p><kbd>C-x 4</kbd> is a prefix key for a variety of commands that switch to
a buffer in a different window—either another existing window, or a
new window created by splitting the selected window.  See <a href="#Window-Choice">Window Choice</a>, for how Emacs picks or creates the window to use.

</p>
<dl compact="compact">
<dt><kbd>C-x 4 b <var>bufname</var> <span class="key">RET</span></kbd></dt>
<dd><p>Select buffer <var>bufname</var> in another window
(<code>switch-to-buffer-other-window</code>).  See <a href="#Select-Buffer">Select Buffer</a>.

</p>
<a name="index-display_002dbuffer-_0028command_0029"></a>
</dd>
<dt><kbd>C-x 4 C-o <var>bufname</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-C_002dx-4-C_002do"></a>
<p>Display buffer <var>bufname</var> in some window, without trying to select
it (<code>display-buffer</code>).  See <a href="#Displaying-Buffers">Displaying Buffers</a>, for details
about how the window is chosen.

</p>
</dd>
<dt><kbd>C-x 4 f <var>filename</var> <span class="key">RET</span></kbd></dt>
<dd><p>Visit file <var>filename</var> and select its buffer in another window
(<code>find-file-other-window</code>).  See <a href="#Visiting">Visiting</a>.

</p>
</dd>
<dt><kbd>C-x 4 d <var>directory</var> <span class="key">RET</span></kbd></dt>
<dd><p>Select a Dired buffer for directory <var>directory</var> in another window
(<code>dired-other-window</code>).  See <a href="#Dired">Dired</a>.

</p>
</dd>
<dt><kbd>C-x 4 m</kbd></dt>
<dd><p>Start composing a mail message, similar to <kbd>C-x m</kbd> (see <a href="#Sending-Mail">Sending Mail</a>), but in another window (<code>compose-mail-other-window</code>).

</p>
<a name="index-find_002dtag_002dother_002dwindow"></a>
</dd>
<dt><kbd>C-x 4 .</kbd></dt>
<dd><p>Find the definition of an identifier, similar to <kbd>M-.</kbd>
(see <a href="#Xref">Xref</a>), but in another window
(<code>xref-find-definitions-other-window</code>).

</p></dd>
<dt><kbd>C-x 4 r <var>filename</var> <span class="key">RET</span></kbd></dt>
<dd><p>Visit file <var>filename</var> read-only, and select its buffer in another
window (<code>find-file-read-only-other-window</code>).  See <a href="#Visiting">Visiting</a>.

</p></dd>
</dl>


<a name="Change-Window"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Displaying-Buffers" accesskey="n" rel="next">Displaying Buffers</a>, Previous: <a href="#Pop-Up-Window" accesskey="p" rel="prev">Pop Up Window</a>, Up: <a href="#Windows" accesskey="u" rel="up">Windows</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Deleting-and-Resizing-Windows"></a>
<h3 class="section">20.5 Deleting and Resizing Windows</h3>

<a name="index-delete-window"></a>
<a name="index-deleting-windows"></a>
<dl compact="compact">
<dt><kbd>C-x 0</kbd></dt>
<dd><p>Delete the selected window (<code>delete-window</code>).

</p></dd>
<dt><kbd>C-x 1</kbd></dt>
<dd><p>Delete all windows in the selected frame except the selected window
(<code>delete-other-windows</code>).

</p></dd>
<dt><kbd>C-x 4 0</kbd></dt>
<dd><p>Delete the selected window and kill the buffer that was showing in it
(<code>kill-buffer-and-window</code>).  The last character in this key
sequence is a zero.

</p></dd>
<dt><kbd>M-x delete-windows-on <span class="key">RET</span> <var>buffer</var> <span class="key">RET</span></kbd></dt>
<dd><p>Delete windows showing the specified <var>buffer</var>.

</p></dd>
<dt><kbd>C-x ^</kbd></dt>
<dd><p>Make selected window taller (<code>enlarge-window</code>).

</p></dd>
<dt><kbd>C-x }</kbd></dt>
<dd><p>Make selected window wider (<code>enlarge-window-horizontally</code>).

</p></dd>
<dt><kbd>C-x {</kbd></dt>
<dd><p>Make selected window narrower (<code>shrink-window-horizontally</code>).

</p></dd>
<dt><kbd>C-x -</kbd></dt>
<dd><p>Shrink this window if its buffer doesn’t need so many lines
(<code>shrink-window-if-larger-than-buffer</code>).

</p></dd>
<dt><kbd>C-x +</kbd></dt>
<dd><p>Make all windows the same height (<code>balance-windows</code>).

</p></dd>
</dl>

<a name="index-C_002dx-0"></a>
<a name="index-delete_002dwindow"></a>
<p>To delete the selected window, type <kbd>C-x 0</kbd>
(<code>delete-window</code>).  (That is a zero.)  Once a window is deleted,
the space that it occupied is given to an adjacent window (but not the
minibuffer window, even if that is active at the time).  Deleting the
window has no effect on the buffer it used to display; the buffer
continues to exist, and you can still switch to it with <kbd>C-x b</kbd>.

</p>
<a name="index-kill_002dbuffer_002dand_002dwindow"></a>
<a name="index-C_002dx-4-0"></a>
<p><kbd>C-x 4 0</kbd> (<code>kill-buffer-and-window</code>) is a stronger command
than <kbd>C-x 0</kbd>; it kills the current buffer and then deletes the
selected window.

</p>
<a name="index-C_002dx-1"></a>
<a name="index-delete_002dother_002dwindows"></a>
<p><kbd>C-x 1</kbd> (<code>delete-other-windows</code>) deletes all the windows,
<em>except</em> the selected one; the selected window expands to use the
whole frame.  (This command cannot be used while the minibuffer window
is active; attempting to do so signals an error.)

</p>
<p><kbd>M-x delete-windows-on</kbd> deletes windows that show a specific
buffer.  It prompts for the buffer, defaulting to the current buffer.
With prefix argument of zero, <kbd>C-u 0</kbd>, this command deletes
windows only on the current display’s frames.

</p>
<a name="index-resize-window"></a>
<a name="index-resizing-windows"></a>
<a name="index-C_002dx-_005e"></a>
<a name="index-enlarge_002dwindow"></a>
<a name="index-C_002dx-_007d"></a>
<a name="index-window_002dmin_002dheight"></a>
<p>The command <kbd>C-x ^</kbd> (<code>enlarge-window</code>) makes the selected
window one line taller, taking space from a vertically adjacent window
without changing the height of the frame.  With a positive numeric
argument, this command increases the window height by that many lines;
with a negative argument, it reduces the height by that many lines.
If there are no vertically adjacent windows (i.e., the window is at the
full frame height), that signals an error.  The command also signals
an error if you attempt to reduce the height of any window below a
certain minimum number of lines, specified by the variable
<code>window-min-height</code> (the default is 4).

</p>
<a name="index-enlarge_002dwindow_002dhorizontally"></a>
<a name="index-shrink_002dwindow_002dhorizontally"></a>
<a name="index-window_002dmin_002dwidth"></a>
<p>Similarly, <kbd>C-x }</kbd> (<code>enlarge-window-horizontally</code>) makes
the selected window wider, and <kbd>C-x {</kbd>
(<code>shrink-window-horizontally</code>) makes it narrower.  These commands
signal an error if you attempt to reduce the width of any window below
a certain minimum number of columns, specified by the variable
<code>window-min-width</code> (the default is 10).

</p>
<p>Mouse clicks on the mode line (see <a href="#Mode-Line-Mouse">Mode Line Mouse</a>) or on window
dividers (see <a href="#Window-Dividers">Window Dividers</a>) provide another way to change window
heights and to split or delete windows.

</p>
<a name="index-C_002dx-_002d"></a>
<a name="index-shrink_002dwindow_002dif_002dlarger_002dthan_002dbuffer"></a>
<p><kbd>C-x -</kbd> (<code>shrink-window-if-larger-than-buffer</code>) reduces the
height of the selected window, if it is taller than necessary to show
the whole text of the buffer it is displaying.  It gives the extra
lines to other windows in the frame.

</p>
<a name="index-C_002dx-_002b"></a>
<a name="index-balance_002dwindows"></a>
<p>You can also use <kbd>C-x +</kbd> (<code>balance-windows</code>) to even out the
heights of all the windows in the selected frame.

</p>

<a name="Displaying-Buffers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Window-Convenience" accesskey="n" rel="next">Window Convenience</a>, Previous: <a href="#Change-Window" accesskey="p" rel="prev">Change Window</a>, Up: <a href="#Windows" accesskey="u" rel="up">Windows</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Displaying-a-Buffer-in-a-Window"></a>
<h3 class="section">20.6 Displaying a Buffer in a Window</h3>

<p>It is a common Emacs operation to display or pop up some buffer
in response to a user command.  There are several different ways in
which commands do this.

</p>
<p>Many commands, like <kbd>C-x C-f</kbd> (<code>find-file</code>), by default
display the buffer by “taking over” the selected window, expecting
that the user’s attention will be diverted to that buffer.

</p>
<p>Some commands try to display intelligently, trying not to take
over the selected window, e.g., by splitting off a new window and
displaying the desired buffer there.  Such commands, which include the
various help commands (see <a href="#Help">Help</a>), work by calling
<code>display-buffer</code> internally.  See <a href="#Window-Choice">Window Choice</a>, for details.

</p>
<p>Other commands do the same as <code>display-buffer</code>, and
additionally select the displaying window so that you can begin
editing its buffer.  The command <kbd>M-g M-n</kbd> (<code>next-error</code>) is
one example (see <a href="#Compilation-Mode">Compilation Mode</a>).  Such commands work by calling
the function <code>pop-to-buffer</code> internally.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Switching-Buffers">Switching to a Buffer in a Window</a> in <cite>The Emacs Lisp
Reference Manual</cite>.

</p>
<p>Commands with names ending in <code>-other-window</code> behave like
<code>display-buffer</code>, except that they never display in the selected
window.  Several of these commands are bound in the <kbd>C-x 4</kbd> prefix
key (see <a href="#Pop-Up-Window">Pop Up Window</a>).

</p>
<p>Commands with names ending in <code>-other-frame</code> behave like
<code>display-buffer</code>, except that they (i) never display in the
selected window and (ii) prefer to either create a new frame or use a
window on some other frame to display the desired buffer.  Several of
these commands are bound in the <kbd>C-x 5</kbd> prefix key.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Window-Choice" accesskey="1">Window Choice</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How <code>display-buffer</code> works.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Temporary-Displays" accesskey="2">Temporary Displays</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Displaying non-editable buffers.

</td></tr>
</tbody></table>


<a name="Window-Choice"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Temporary-Displays" accesskey="n" rel="next">Temporary Displays</a>, Up: <a href="#Displaying-Buffers" accesskey="u" rel="up">Displaying Buffers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="How-display_002dbuffer-works"></a>
<h4 class="subsection">20.6.1 How <code>display-buffer</code> works</h4>
<a name="index-display_002dbuffer_002c-detailed-description"></a>

<p>The <code>display-buffer</code> command (as well as commands that call it
internally) chooses a window to display by following the steps given
below.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Choosing-Window">Choosing a Window for Displaying a
Buffer</a> in <cite>The Emacs Lisp Reference Manual</cite>, for details about how
to alter this sequence of steps.

</p>
<ul>
<li>  If the buffer should be displayed in the selected window regardless of
other considerations, reuse the selected window.  By default, this
step is skipped, but you can tell Emacs not to skip it by adding a
regular expression matching the buffer’s name together with a
reference to the <code>display-buffer-same-window</code> action function
(see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Buffer-Display-Action-Functions">Action Functions for Buffer
Display</a> in <cite>The Emacs Lisp Reference Manual</cite>) to the option
<code>display-buffer-alist</code> (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Choosing-Window">Choosing a Window
for Displaying a Buffer</a> in <cite>The Emacs Lisp Reference Manual</cite>).
For example, to display the buffer <samp>*scratch*</samp> preferably in the
selected window write:



<div class="example">
<pre class="example">(customize-set-variable
 'display-buffer-alist
 '("\\*scratch\\*" (display-buffer-same-window)))
</pre></div>

<p>By default, <code>display-buffer-alist</code> is <code>nil</code>.

</p>
</li><li>  Otherwise, if the buffer is already displayed in an existing window,
reuse that window.  Normally, only windows on the selected frame are
considered, but windows on other frames are also reusable if you use
the corresponding <code>reusable-frames</code> action alist entry
(see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Buffer-Display-Action-Alists">Action Alists for Buffer
Display</a> in <cite>The Emacs Lisp Reference Manual</cite>).  See the
next step for an example of how to do that.



</li><li>  Otherwise, optionally create a new frame and display the buffer there.
By default, this step is skipped.  To enable it, change the value of
the option <code>display-buffer-base-action</code> (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Choosing-Window">Choosing a Window for Displaying a Buffer</a> in <cite>The Emacs
Lisp Reference Manual</cite>) as follows:



<div class="example">
<pre class="example">(customize-set-variable
 'display-buffer-base-action
 '((display-buffer-reuse-window display-buffer-pop-up-frame)
   (reusable-frames . 0)))
</pre></div>

<p>This customization will also try to make the preceding step search for
a reusable window on all visible or iconified frames.

</p>
</li><li>  Otherwise, try to create a new window by splitting a window on the
selected frame, and display the buffer in that new window.



<a name="index-split_002dheight_002dthreshold"></a>
<a name="index-split_002dwidth_002dthreshold"></a>
<p>The split can be either vertical or horizontal, depending on the
variables <code>split-height-threshold</code> and
<code>split-width-threshold</code>.  These variables should have integer
values.  If <code>split-height-threshold</code> is smaller than the chosen
window’s height, the split puts the new window below.  Otherwise, if
<code>split-width-threshold</code> is smaller than the window’s width, the
split puts the new window on the right.  If neither condition holds,
Emacs tries to split so that the new window is below—but only if the
window was not split before (to avoid excessive splitting).

</p>
</li><li>  Otherwise, display the buffer in a window previously showing it.
Normally, only windows on the selected frame are considered, but with
a suitable <code>reusable-frames</code> action alist entry (see above) the
window may be also on another frame.



</li><li>  Otherwise, display the buffer in an existing window on the selected
frame.



</li><li>  If all the above methods fail for whatever reason, create a new frame
and display the buffer there.

</li></ul>



<a name="Temporary-Displays"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Window-Choice" accesskey="p" rel="prev">Window Choice</a>, Up: <a href="#Displaying-Buffers" accesskey="u" rel="up">Displaying Buffers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Displaying-non_002deditable-buffers_002e"></a>
<h4 class="subsection">20.6.2 Displaying non-editable buffers.</h4>
<a name="index-temporary-windows"></a>

<p>Some buffers are shown in windows for perusal rather than for editing.
Help commands (see <a href="#Help">Help</a>) typically use a buffer called <samp>*Help*</samp>
for that purpose, minibuffer completion (see <a href="#Completion">Completion</a>) uses a
buffer called <samp>*Completions*</samp>, etc.  Such buffers are usually
displayed only for a short period of time.

</p>
<p>Normally, Emacs chooses the window for such temporary displays via
<code>display-buffer</code>, as described in the previous subsection.  The
<samp>*Completions*</samp> buffer, on the other hand, is normally displayed
in a window at the bottom of the selected frame, regardless of the
number of windows already shown on that frame.

</p>
<p>If you prefer Emacs to display a temporary buffer in a different
fashion, customize the variable <code>display-buffer-alist</code>
(see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Choosing-Window">Choosing a Window for Displaying a Buffer</a> in <cite>The Emacs Lisp Reference Manual</cite>) appropriately.  For example,
to display <samp>*Completions*</samp> always below the selected window, use
the following form in your initialization file (see <a href="#Init-File">Init File</a>):

</p>
<div class="example">
<pre class="example">(customize-set-variable
 'display-buffer-alist
 '(("\\*Completions\\*" display-buffer-below-selected)))
</pre></div>

<a name="index-temp_002dbuffer_002dresize_002dmode"></a>
<p>The <samp>*Completions*</samp> buffer is also special in the sense that
Emacs usually tries to make its window just as large as necessary to
display all of its contents.  To resize windows showing other
temporary displays, like, for example, the <samp>*Help*</samp> buffer, turn
on the minor mode (see <a href="#Minor-Modes">Minor Modes</a>) <code>temp-buffer-resize-mode</code>
(see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Temporary-Displays">Temporary Displays</a> in <cite>The Emacs Lisp
Reference Manual</cite>).

</p>
<a name="index-temp_002dbuffer_002dmax_002dheight"></a>
<a name="index-temp_002dbuffer_002dmax_002dwidth"></a>
<p>The maximum size of windows resized by <code>temp-buffer-resize-mode</code>
can be controlled by customizing the options
<code>temp-buffer-max-height</code> and <code>temp-buffer-max-width</code>
(see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Temporary-Displays">Temporary Displays</a> in <cite>The Emacs Lisp
Reference Manual</cite>), and cannot exceed the size of the containing frame.

</p>


<a name="Window-Convenience"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Tab-Line" accesskey="n" rel="next">Tab Line</a>, Previous: <a href="#Displaying-Buffers" accesskey="p" rel="prev">Displaying Buffers</a>, Up: <a href="#Windows" accesskey="u" rel="up">Windows</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Convenience-Features-for-Window-Handling"></a>
<h3 class="section">20.7 Convenience Features for Window Handling</h3>

<a name="index-winner_002dmode"></a>
<a name="index-winner_002ddont_002dbind_002dmy_002dkeys"></a>
<a name="index-winner_002dring_002dsize"></a>
<a name="index-winner_002dboring_002dbuffers"></a>
<a name="index-winner_002dboring_002dbuffers_002dregexp"></a>
<a name="index-Winner-mode"></a>
<a name="index-mode_002c-Winner"></a>
<a name="index-undoing-window-configuration-changes"></a>
<a name="index-window-configuration-changes_002c-undoing"></a>
<p>Winner mode is a global minor mode that records the changes in the
window configuration (i.e., how the frames are partitioned into
windows), so that you can undo them.  You can toggle Winner mode
with <kbd>M-x winner-mode</kbd>, or by customizing the variable
<code>winner-mode</code>.  When the mode is enabled, <kbd>C-c left</kbd>
(<code>winner-undo</code>) undoes the last window configuration change.  If
you change your mind while undoing, you can redo the changes you had
undone using <kbd>C-c right</kbd> (<code>M-x winner-redo</code>).  To prevent
Winner mode from binding <kbd>C-c left</kbd> and <kbd>C-c right</kbd>, you can
customize the variable <code>winner-dont-bind-my-keys</code> to a
non-<code>nil</code> value.  By default, Winner mode stores a maximum of 200
window configurations per frame, but you can change that by modifying
the variable <code>winner-ring-size</code>.  If there are some buffers whose
windows you wouldn’t want Winner mode to restore, add their names to
the list variable <code>winner-boring-buffers</code> or to the regexp
<code>winner-boring-buffers-regexp</code>.

</p>
<p>Follow mode (<kbd>M-x follow-mode</kbd>) synchronizes several windows on
the same buffer so that they always display adjacent sections of that
buffer.  See <a href="#Follow-Mode">Follow Mode</a>.

</p>
<a name="index-Windmove-package"></a>
<a name="index-directional-window-selection"></a>
<a name="index-windmove_002dright"></a>
<a name="index-windmove_002ddefault_002dkeybindings"></a>
<a name="index-windmove_002ddisplay_002ddefault_002dkeybindings"></a>
<a name="index-windmove_002ddelete_002ddefault_002dkeybindings"></a>
<a name="index-windmove_002dswap_002dstates_002din_002ddirection"></a>
<p>The Windmove package defines commands for moving directionally
between neighboring windows in a frame.  <kbd>M-x windmove-right</kbd>
selects the window immediately to the right of the currently selected
one, and similarly for the left, up, and down counterparts.
<kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">windmove-default-keybindings</span></kbd><!-- /@w -->  binds these commands to
<kbd>S-right</kbd> etc.; doing so disables shift selection for those keys
(see <a href="#Shift-Selection">Shift Selection</a>).  In the same way as keybindings can be
defined for commands that select windows directionally, you can use
<kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">windmove-display-default-keybindings</span></kbd><!-- /@w -->  to define
keybindings for commands that specify in what direction to display the
window for the buffer that the next command is going to display.
Also there is <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">windmove-delete-default-keybindings</span></kbd><!-- /@w -->  to
define keybindings for commands that delete windows directionally, and
<kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">windmove-swap-states-in-direction</span></kbd><!-- /@w -->  that define
keybindings for commands that swap the window contents of the selected
window with the window in the specified direction.

</p>
<p>The command <kbd>M-x compare-windows</kbd> lets you compare the text
shown in different windows.  See <a href="#Comparing-Files">Comparing Files</a>.

</p>
<a name="index-scroll_002dall_002dmode"></a>
<a name="index-scrolling-windows-together"></a>
<a name="index-Scroll_002dall-mode"></a>
<a name="index-mode_002c-Scroll_002dall"></a>
<p>Scroll All mode (<kbd>M-x scroll-all-mode</kbd>) is a global minor mode
that causes scrolling commands and point motion commands to apply to
every single window.

</p>


<a name="Tab-Line"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Window-Convenience" accesskey="p" rel="prev">Window Convenience</a>, Up: <a href="#Windows" accesskey="u" rel="up">Windows</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Window-Tab-Line"></a>
<h3 class="section">20.8 Window Tab Line</h3>

<a name="index-global_002dtab_002dline_002dmode"></a>
<a name="index-tab-line"></a>
<p>The command <code>global-tab-line-mode</code> toggles the display of
a <em>tab line</em> on the top screen line of each window.  The Tab Line
shows special buttons (“tabs”) for each buffer that was displayed in
a window, and allows switching to any of these buffers by clicking the
corresponding button.  Clicking on the <kbd>+</kbd> icon adds a new buffer
to the window-local tab line of buffers, and clicking on the <kbd>x</kbd>
icon of a tab deletes it.  The mouse wheel on the tab line scrolls
the tabs horizontally.

</p>
<p>Selecting the previous window-local tab is the same as typing <kbd>C-x
<span class="key">LEFT</span></kbd> (<code>previous-buffer</code>), selecting the next tab is the
same as <kbd>C-x <span class="key">RIGHT</span></kbd> (<code>next-buffer</code>).  Both commands
support a numeric prefix argument as a repeat count.

</p>
<p>You can customize the variable <code>tab-line-tabs-function</code> to define
the preferred contents of the tab line.  By default, it displays all
buffers previously visited in the window, as described above.  But you
can also set it to display a list of buffers with the same major mode
as the current buffer, or to display buffers grouped by their major
mode, where clicking on the mode name in the first tab displays a list
of all major modes where you can select another group of buffers.

</p>
<p>Note that the Tab Line is different from the Tab Bar (see <a href="#Tab-Bars">Tab Bars</a>).
Whereas tabs on the Tab Bar at the top of each frame are used to
switch between window configurations containing several windows with buffers,
tabs on the Tab Line at the top of each window are used to switch
between buffers in the window.

</p><hr>
<a name="Frames"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#International" accesskey="n" rel="next">International</a>, Previous: <a href="#Windows" accesskey="p" rel="prev">Windows</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Frames-and-Graphical-Displays"></a>
<h2 class="chapter">21 Frames and Graphical Displays</h2>
<a name="index-frames"></a>

<p>When Emacs is started on a graphical display, e.g., on the X Window
System, it occupies a graphical system-level display region.  In this
manual, we call this a <em>frame</em>, reserving the word “window” for
the part of the frame used for displaying a buffer.  A frame initially
contains one window, but it can be subdivided into multiple windows
(see <a href="#Windows">Windows</a>).  A frame normally also contains a menu bar, tool
bar, and echo area.

</p>
<p>You can also create additional frames (see <a href="#Creating-Frames">Creating Frames</a>).
All frames created in the same Emacs session have access to the same
underlying buffers and other data.  For instance, if a buffer is being
shown in more than one frame, any changes made to it in one frame show
up immediately in the other frames too.

</p>
<p>Typing <kbd>C-x C-c</kbd> closes all the frames on the current display,
and ends the Emacs session if it has no frames open on any other
displays (see <a href="#Exiting">Exiting</a>).  To close just the selected frame, type
<kbd>C-x 5 0</kbd> (that is zero, not <kbd>o</kbd>).

</p>
<p>This chapter describes Emacs features specific to graphical displays
(particularly mouse commands), and features for managing multiple
frames.  On text terminals, many of these features are unavailable.
However, it is still possible to create multiple frames on text
terminals; such frames are displayed one at a time, filling the entire
terminal screen (see <a href="#Non_002dWindow-Terminals">Non-Window Terminals</a>).  It is also possible
to use the mouse on some text terminals (see <a href="#Text_002dOnly-Mouse">Text-Only Mouse</a>, for
doing so on GNU and Unix systems; and
see <a href="#MS_002dDOS-Mouse">MS-DOS Mouse</a>,
for doing so on MS-DOS).  Menus are supported on all text terminals.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Mouse-Commands" accesskey="1">Mouse Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Moving, cutting, and pasting, with the mouse.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Word-and-Line-Mouse" accesskey="2">Word and Line Mouse</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Mouse commands for selecting whole words or lines.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Mouse-References" accesskey="3">Mouse References</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Using the mouse to select an item from a list.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Menu-Mouse-Clicks" accesskey="4">Menu Mouse Clicks</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Mouse clicks that bring up menus.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Mode-Line-Mouse" accesskey="5">Mode Line Mouse</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Mouse clicks on the mode line.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Creating-Frames" accesskey="6">Creating Frames</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Creating additional Emacs frames with various contents.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Frame-Commands" accesskey="7">Frame Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Iconifying, deleting, and switching frames.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Fonts" accesskey="8">Fonts</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Changing the frame font.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Speedbar" accesskey="9">Speedbar</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to make and use a speedbar frame.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Multiple-Displays">Multiple Displays</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How one Emacs instance can talk to several displays.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Frame-Parameters">Frame Parameters</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Changing the colors and other modes of frames.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Scroll-Bars">Scroll Bars</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to enable and disable scroll bars; how to use them.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Window-Dividers">Window Dividers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Window separators that can be dragged with the mouse.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Drag-and-Drop">Drag and Drop</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Using drag and drop to open files and insert text.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Menu-Bars">Menu Bars</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Enabling and disabling the menu bar.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Tool-Bars">Tool Bars</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Enabling and disabling the tool bar.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Tab-Bars">Tab Bars</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Enabling and disabling the tab bar.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Dialog-Boxes">Dialog Boxes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Controlling use of dialog boxes.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Tooltips">Tooltips</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Displaying information at the current mouse position.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Mouse-Avoidance">Mouse Avoidance</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Preventing the mouse pointer from obscuring text.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Non_002dWindow-Terminals">Non-Window Terminals</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Multiple frames on terminals that show only one.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Text_002dOnly-Mouse">Text-Only Mouse</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Using the mouse in text terminals.

</td></tr>
</tbody></table>


<a name="Mouse-Commands"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Word-and-Line-Mouse" accesskey="n" rel="next">Word and Line Mouse</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Mouse-Commands-for-Editing"></a>
<h3 class="section">21.1 Mouse Commands for Editing</h3>
<a name="index-mouse-buttons-_0028what-they-do_0029"></a>
<a name="index-mouse_002c-selecting-text-using"></a>

<a name="index-mouse_002d1"></a>
<a name="index-mouse_002d2"></a>
<a name="index-mouse_002d3"></a>
<dl compact="compact">
<dt><kbd>鼠标左键</kbd></dt>
<dd><p>Move point to where you click (<code>mouse-set-point</code>).

</p>
</dd>
<dt><kbd>Drag-mouse-1</kbd></dt>
<dd><p>Activate the region around the text selected by dragging, and put the
text in the primary selection (<code>mouse-set-region</code>).

</p>
</dd>
<dt><kbd>鼠标右键</kbd></dt>
<dd><p>Move point to where you click, and insert the contents of the primary
selection there (<code>mouse-yank-primary</code>).

</p>
</dd>
<dt><kbd>mouse-3</kbd></dt>
<dd><p>If the region is active, move the nearer end of the region to the
click position; otherwise, set mark at the current value of point and
point at the click position.  Save the resulting region in the kill
ring; on a second click, kill it (<code>mouse-save-then-kill</code>).

</p>
</dd>
<dt><kbd>C-M-mouse-1</kbd></dt>
<dd><p>Activate a rectangular region around the text selected by dragging.
See <a href="#Rectangles">Rectangles</a>.

</p></dd>
</dl>

<a name="index-mouse_002dset_002dpoint"></a>
<p>The most basic mouse command is <code>mouse-set-point</code>, which is
invoked by clicking with the left mouse button, <kbd>mouse-1</kbd>, in the
text area of a window.  This moves point to the position where you
clicked.  If that window was not the selected window, it becomes the
selected window.  You can also activate a region by double-clicking
<kbd>mouse-1</kbd> (see <a href="#Word-and-Line-Mouse">Word and Line Mouse</a>).

</p>
<a name="index-x_002dmouse_002dclick_002dfocus_002dignore_002dposition"></a>
<p>Normally, if the frame you clicked in was not the selected frame, it
is made the selected frame, in addition to selecting the window and
setting the cursor.  On the X Window System, you can change this by
setting the variable <code>x-mouse-click-focus-ignore-position</code> to
<code>t</code>.  In that case, the initial click on an unselected frame just
selects the frame, without doing anything else; clicking again selects
the window and sets the cursor position.

</p>
<a name="index-mouse_002c-dragging"></a>
<a name="index-mouse_002dset_002dregion"></a>
<p>Holding down <kbd>mouse-1</kbd> and dragging the mouse over a stretch
of text activates the region around that text
(<code>mouse-set-region</code>), placing the mark where you started holding
down the mouse button, and point where you release it (see <a href="#Mark">Mark</a>).
In addition, the text in the region becomes the primary selection
(see <a href="#Primary-Selection">Primary Selection</a>).

</p>
<a name="index-mouse_002ddrag_002dcopy_002dregion"></a>
<p>If you change the variable <code>mouse-drag-copy-region</code> to a non-<code>nil</code> value, dragging the mouse over a stretch of text also adds the text to the kill ring. 默认值为<code>nil</code>。
</p>
<a name="index-mouse_002dscroll_002dmin_002dlines"></a>
<p>If you move the mouse off the top or bottom of the window while
dragging, the window scrolls at a steady rate until you move the mouse
back into the window.  This way, you can select regions that don’t fit
entirely on the screen.  The number of lines scrolled per step depends
on how far away from the window edge the mouse has gone; the variable
<code>mouse-scroll-min-lines</code> specifies a minimum step size.

</p>
<a name="index-mouse_002dyank_002dprimary"></a>
<a name="index-mouse_002dyank_002dat_002dclick"></a>
<p>Clicking with the middle mouse button, <kbd>mouse-2</kbd>, moves point to
the position where you clicked and inserts the contents of the primary
selection (<code>mouse-yank-primary</code>).  See <a href="#Primary-Selection">Primary Selection</a>.
This behavior is consistent with other X applications.  Alternatively,
you can rebind <kbd>mouse-2</kbd> to <code>mouse-yank-at-click</code>, which
performs a yank at the position you click.

</p>
<a name="index-mouse_002dyank_002dat_002dpoint"></a>
<p>If you change the variable <code>mouse-yank-at-point</code> to a
non-<code>nil</code> value, <kbd>mouse-2</kbd> does not move point; it inserts
the text at point, regardless of where you clicked or even which of
the frame’s windows you clicked on.  This variable affects both
<code>mouse-yank-primary</code> and <code>mouse-yank-at-click</code>.

</p>
<a name="index-mouse_002dsave_002dthen_002dkill"></a>
<p>Clicking with the right mouse button, <kbd>mouse-3</kbd>, runs the
command <code>mouse-save-then-kill</code>.  This performs several actions
depending on where you click and the status of the region:

</p>
<ul>
<li>  If no region is active, clicking <kbd>mouse-3</kbd> activates the region,
placing the mark where point was and point at the clicked position.



</li><li>  If a region is active, clicking <kbd>mouse-3</kbd> adjusts the nearer end
of the region by moving it to the clicked position.  The adjusted
region’s text is copied to the kill ring; if the text in the original
region was already on the kill ring, it replaces it there.



</li><li>  If you originally specified the region using a double or triple
<kbd>mouse-1</kbd>, so that the region is defined to consist of entire
words or lines (see <a href="#Word-and-Line-Mouse">Word and Line Mouse</a>), then adjusting the
region with <kbd>mouse-3</kbd> also proceeds by entire words or lines.



</li><li>  If you use <kbd>mouse-3</kbd> a second time consecutively, at the same
place, that kills the region already selected.  Thus, the simplest way
to kill text with the mouse is to click <kbd>mouse-1</kbd> at one end, then
click <kbd>mouse-3</kbd> twice at the other end.  To copy the text into the
kill ring without deleting it from the buffer, press <kbd>mouse-3</kbd>
just once—or just drag across the text with <kbd>mouse-1</kbd>.  Then you
can copy it elsewhere by yanking it.

</li></ul>

<p>The <code>mouse-save-then-kill</code> command also obeys the variable
<code>mouse-drag-copy-region</code> (described above).  If the value is
non-<code>nil</code>, then whenever the command sets or adjusts the active
region, the text in the region is also added to the kill ring.  If the
latest kill ring entry had been added the same way, that entry is
replaced rather than making a new entry.

</p>
<p>Whenever you set the region using any of the mouse commands
described above, the mark will be deactivated by any subsequent
unshifted cursor motion command, in addition to the usual ways of
deactivating the mark.  See <a href="#Shift-Selection">Shift Selection</a>.

</p>
<a name="index-mouse-wheel"></a>
<a name="index-mouse_002dwheel_002dmode"></a>
<a name="index-Mouse-Wheel-minor-mode"></a>
<a name="index-mode_002c-Mouse-Wheel"></a>
<a name="index-mouse_002dwheel_002dfollow_002dmouse"></a>
<a name="index-mouse_002dwheel_002dscroll_002damount"></a>
<a name="index-mouse_002dwheel_002dprogressive_002dspeed"></a>
<p>Some mice have a “wheel” which can be used for scrolling.  Emacs
supports scrolling windows with the mouse wheel, by default, on most
graphical displays.  To toggle this feature, use <kbd>M-x
mouse-wheel-mode</kbd>.  The variables <code>mouse-wheel-follow-mouse</code> and
<code>mouse-wheel-scroll-amount</code> determine where and by how much
buffers are scrolled.  The variable
<code>mouse-wheel-progressive-speed</code> determines whether the scroll
speed is linked to how fast you move the wheel.  This mode also
supports increasing or decreasing the height of the default face, by
default bound to scrolling with the <tt class="key">Ctrl</tt> modifier.

</p>
<a name="index-mouse_002dwheel_002dtilt_002dscroll"></a>
<a name="index-mouse_002dwheel_002dflip_002ddirection"></a>
<p>Emacs can also support horizontal scrolling if your mouse’s wheel can
be tilted, or if your touchpad supports it.  This feature is off by
default; the variable <code>mouse-wheel-tilt-scroll</code> turns it on, if
you customize it to a non-<code>nil</code> value.  By default, tilting the
mouse wheel scrolls the window’s view horizontally in the direction of
the tilt: e.g., tilting to the right scrolls the window to the right,
so that the text displayed in the window moves horizontally to the
left.  If you’d like to reverse the direction of horizontal scrolling,
customize the variable <code>mouse-wheel-flip-direction</code> to a
non-<code>nil</code> value.

</p>
<p>When the mouse pointer is over an image in Image mode, see <a href="#Image-Mode">Image Mode</a>,
scrolling the mouse wheel with the <tt class="key">Ctrl</tt> modifier scales the image
under the mouse pointer.

</p>


<a name="Word-and-Line-Mouse"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Mouse-References" accesskey="n" rel="next">Mouse References</a>, Previous: <a href="#Mouse-Commands" accesskey="p" rel="prev">Mouse Commands</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Mouse-Commands-for-Words-and-Lines"></a>
<h3 class="section">21.2 Mouse Commands for Words and Lines</h3>

<p>These variants of <kbd>mouse-1</kbd> select entire words or lines at a
time.  Emacs activates the region around the selected text, which is
also copied to the kill ring.

</p>
<dl compact="compact">
<dt><kbd>Double-mouse-1</kbd></dt>
<dd><p>Select the text around the word or character which you click on.

</p>
<p>Double-clicking on a character with symbol syntax (such as
underscore, in C mode) selects the symbol surrounding that character.
Double-clicking on a character with open- or close-parenthesis syntax
selects the parenthetical grouping which that character starts or
ends.  Double-clicking on a character with string-delimiter syntax
(such as a single-quote or double-quote in C) selects the string
constant (Emacs uses heuristics to figure out whether that character
is the beginning or the end of it).

</p>
<p>Double-clicking on the beginning of a parenthetical grouping or
beginning string-delimiter moves point to the end of the region,
scrolling the buffer display forward if necessary to show the new
location of point.  Double-clicking on the end of a parenthetical
grouping or end string-delimiter keeps point at the end of the region
by default, so the beginning of the region will not be visible if it
is above the top of the window; setting the user option
<code>mouse-select-region-move-to-beginning</code> to non-<code>nil</code> changes
this to move point to the beginning of the region, scrolling the
display backward if necessary.

</p>
</dd>
<dt><kbd>Double-Drag-mouse-1</kbd></dt>
<dd><p>Select the text you drag across, in units of whole words.

</p>
</dd>
<dt><kbd>Triple-mouse-1</kbd></dt>
<dd><p>Select the line you click on.

</p>
</dd>
<dt><kbd>Triple-Drag-mouse-1</kbd></dt>
<dd><p>Select the text you drag across, in units of whole lines.

</p></dd>
</dl>


<a name="Mouse-References"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Menu-Mouse-Clicks" accesskey="n" rel="next">Menu Mouse Clicks</a>, Previous: <a href="#Word-and-Line-Mouse" accesskey="p" rel="prev">Word and Line Mouse</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Following-References-with-the-Mouse"></a>
<h3 class="section">21.3 Following References with the Mouse</h3>
<a name="index-mouse_002d1-_0028on-buttons_0029"></a>
<a name="index-mouse_002d2-_0028on-buttons_0029"></a>
<a name="index-hyperlinks"></a>
<a name="index-links"></a>
<a name="index-text-buttons"></a>
<a name="index-buttons"></a>

<a name="index-mouse_002dhighlight"></a>
<p>Some Emacs buffers include <em>buttons</em>, or <em>hyperlinks</em>:
pieces of text that perform some action (e.g., following a reference)
when activated (e.g., by clicking on them).  Usually, a button’s text
is visually highlighted: it is underlined, or a box is drawn around
it.  If you move the mouse over a button, the shape of the mouse
cursor changes and the button lights up.  If you change the variable
<code>mouse-highlight</code> to <code>nil</code>, Emacs disables this
highlighting.

</p>
<p>You can activate a button by moving point to it and typing
<tt class="key">RET</tt>, or by clicking either <kbd>mouse-1</kbd> or <kbd>mouse-2</kbd> on the
button.  For example, in a Dired buffer, each file name is a button;
activating it causes Emacs to visit that file (see <a href="#Dired">Dired</a>).  In a
<samp>*Compilation*</samp> buffer, each error message is a button, and
activating it visits the source code for that error
(see <a href="#Compilation">Compilation</a>).

</p>
<p>Although clicking <kbd>mouse-1</kbd> on a button usually activates the
button, if you hold the mouse button down for a period of time before
releasing it (specifically, for more than 450 milliseconds), then
Emacs moves point where you clicked, without activating the button.
In this way, you can use the mouse to move point over a button without
activating it.  Dragging the mouse over or onto a button has its usual
behavior of setting the region, and does not activate the button.

</p>
<p>You can change how <kbd>mouse-1</kbd> applies to buttons by customizing
the variable <code>mouse-1-click-follows-link</code>.  If the value is a
positive integer, that determines how long you need to hold the mouse
button down for, in milliseconds, to cancel button activation; the
default is 450, as described in the previous paragraph.  If the value
is <code>nil</code>, <kbd>mouse-1</kbd> just sets point where you clicked, and
does not activate buttons.  If the value is <code>double</code>, double
clicks activate buttons but single clicks just set point.

</p>
<a name="index-mouse_002d1_002dclick_002din_002dnon_002dselected_002dwindows"></a>
<p>Normally, <kbd>mouse-1</kbd> on a button activates the button even if it
is in a non-selected window.  If you change the variable
<code>mouse-1-click-in-non-selected-windows</code> to <code>nil</code>,
<kbd>mouse-1</kbd> on a button in an unselected window moves point to the
clicked position and selects that window, without activating the
button.

</p>

<a name="Menu-Mouse-Clicks"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Mode-Line-Mouse" accesskey="n" rel="next">Mode Line Mouse</a>, Previous: <a href="#Mouse-References" accesskey="p" rel="prev">Mouse References</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Mouse-Clicks-for-Menus"></a>
<h3 class="section">21.4 Mouse Clicks for Menus</h3>

<p>Several mouse clicks with the <tt class="key">Ctrl</tt> and <tt class="key">SHIFT</tt> modifiers
bring up menus.

</p>
<dl compact="compact">
<dt><kbd>C-mouse-1</kbd></dt>
<dd><a name="index-C_002dmouse_002d1"></a>
<p>This menu is for selecting a buffer.

</p>
<p>The MSB (“mouse select buffer”) global minor mode makes this
menu smarter and more customizable.  See <a href="#Buffer-Menus">Buffer Menus</a>.

</p>
</dd>
<dt><kbd>C-mouse-2</kbd></dt>
<dd><a name="index-C_002dmouse_002d2"></a>
<p>This menu contains entries for examining faces and other text
properties, and well as for setting them (the latter is mainly useful
when editing enriched text; see <a href="#Enriched-Text">Enriched Text</a>).

</p>
</dd>
<dt><kbd>C-mouse-3</kbd></dt>
<dd><a name="index-C_002dmouse_002d3"></a>
<p>This menu is mode-specific.  For most modes if Menu-bar mode is on,
this menu has the same items as all the mode-specific menu-bar menus
put together.  Some modes may specify a different menu for this
button.  If Menu Bar mode is off, this menu contains all the items
which would be present in the menu bar—not just the mode-specific
ones—so that you can access them without having to display the menu
bar.

</p>
</dd>
<dt><kbd>S-mouse-1</kbd></dt>
<dd><p>This menu is for changing the default face within the window’s buffer.
See <a href="#Text-Scale">Text Scale</a>.

</p></dd>
</dl>

<p>Some graphical applications use <kbd>mouse-3</kbd> for a mode-specific
menu.  If you prefer <kbd>mouse-3</kbd> in Emacs to bring up such a menu
instead of running the <code>mouse-save-then-kill</code> command, rebind
<kbd>mouse-3</kbd> by adding the following line to your init file
(see <a href="#Init-Rebinding">Init Rebinding</a>):

</p>
<div class="smallexample">
<pre class="smallexample">(global-set-key [mouse-3] 'mouse-popup-menubar-stuff)
</pre></div>


<a name="Mode-Line-Mouse"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Creating-Frames" accesskey="n" rel="next">Creating Frames</a>, Previous: <a href="#Menu-Mouse-Clicks" accesskey="p" rel="prev">Menu Mouse Clicks</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Mode-Line-Mouse-Commands"></a>
<h3 class="section">21.5 Mode Line Mouse Commands</h3>
<a name="index-mode-line_002c-mouse"></a>
<a name="index-mouse-on-mode-line"></a>

<p>You can use mouse clicks on window mode lines to select and manipulate
windows.

</p>
<p>Some areas of the mode line, such as the buffer name, and major and minor
mode names, have their own special mouse bindings.  These areas are
highlighted when you hold the mouse over them, and information about
the special bindings will be displayed (see <a href="#Tooltips">Tooltips</a>).  This
section’s commands do not apply in those areas.

</p>
<dl compact="compact">
<dt><kbd>鼠标左键</kbd></dt>
<dd><a name="index-mouse_002d1-_0028mode-line_0029"></a>
<p><kbd>mouse-1</kbd> on a mode line selects the window it belongs to.  By
dragging <kbd>mouse-1</kbd> on the mode line, you can move it, thus
changing the height of the windows above and below.  Changing heights
with the mouse in this way never deletes windows, it just refuses to
make any window smaller than the minimum height.

</p>
</dd>
<dt><kbd>鼠标右键</kbd></dt>
<dd><a name="index-mouse_002d2-_0028mode-line_0029"></a>
<p><kbd>mouse-2</kbd> on a mode line expands that window to fill its frame.

</p>
</dd>
<dt><kbd>mouse-3</kbd></dt>
<dd><a name="index-mouse_002d3-_0028mode-line_0029"></a>
<p><kbd>mouse-3</kbd> on a mode line deletes the window it belongs to.  If the
frame has only one window, it does nothing.

</p>
</dd>
<dt><kbd>C-mouse-2</kbd></dt>
<dd><p><kbd>C-mouse-2</kbd> on a mode line splits that window, producing two
side-by-side windows with the boundary running through the click
position (see <a href="#Split-Window">Split Window</a>).

</p></dd>
</dl>

<a name="index-mouse_002d1-_0028scroll-bar_0029"></a>
<p>Furthermore, by clicking and dragging <kbd>mouse-1</kbd> on the divider
between two side-by-side mode lines, you can move the vertical
boundary to the left or right.

</p>
<p>Note that resizing windows is affected by the value of
<code>window-resize-pixelwise</code>, see <a href="#Split-Window">Split Window</a>.

</p>

<a name="Creating-Frames"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Frame-Commands" accesskey="n" rel="next">Frame Commands</a>, Previous: <a href="#Mode-Line-Mouse" accesskey="p" rel="prev">Mode Line Mouse</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Creating-Frames-1"></a>
<h3 class="section">21.6 Creating Frames</h3>
<a name="index-creating-frames"></a>

<a name="index-C_002dx-5"></a>
<p>The prefix key <kbd>C-x 5</kbd> is analogous to <kbd>C-x 4</kbd>.  Whereas
each <kbd>C-x 4</kbd> command pops up a buffer in a different window in the
selected frame (see <a href="#Pop-Up-Window">Pop Up Window</a>), the <kbd>C-x 5</kbd> commands use a
different frame.  If an existing visible or iconified (a.k.a.
“minimized”, see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Visibility-of-Frames">Visibility of Frames</a> in <cite>The Emacs Lisp
Reference Manual</cite>) frame already displays the requested buffer, that
frame is raised and deiconified (“un-minimized”); otherwise, a new
frame is created on the current display terminal.

</p>
<p>The various <kbd>C-x 5</kbd> commands differ in how they find or create the
buffer to select:

</p>
<dl compact="compact">
<dt><kbd>C-x 5 2</kbd></dt>
<dd><a name="index-C_002dx-5-2"></a>
<a name="index-make_002dframe_002dcommand"></a>
<p>Create a new frame (<code>make-frame-command</code>).

</p></dd>
<dt><kbd>C-x 5 b <var>bufname</var> <span class="key">RET</span></kbd></dt>
<dd><p>Select buffer <var>bufname</var> in another frame.  This runs
<code>switch-to-buffer-other-frame</code>.

</p></dd>
<dt><kbd>C-x 5 f <var>filename</var> <span class="key">RET</span></kbd></dt>
<dd><p>Visit file <var>filename</var> and select its buffer in another frame.  This
runs <code>find-file-other-frame</code>.  See <a href="#Visiting">Visiting</a>.

</p></dd>
<dt><kbd>C-x 5 d <var>directory</var> <span class="key">RET</span></kbd></dt>
<dd><p>Select a Dired buffer for directory <var>directory</var> in another frame.
This runs <code>dired-other-frame</code>.  See <a href="#Dired">Dired</a>.

</p></dd>
<dt><kbd>C-x 5 m</kbd></dt>
<dd><p>Start composing a mail message in another frame.  This runs
<code>compose-mail-other-frame</code>.  It is the other-frame variant of
<kbd>C-x m</kbd>.  See <a href="#Sending-Mail">Sending Mail</a>.

</p></dd>
<dt><kbd>C-x 5 .</kbd></dt>
<dd><p>Find the definition of an identifier in another frame.  This runs
<code>xref-find-definitions-other-frame</code>, the multiple-frame variant
of <kbd>M-.</kbd>.  See <a href="#Xref">Xref</a>.

</p></dd>
<dt><kbd>C-x 5 r <var>filename</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-C_002dx-5-r"></a>
<a name="index-find_002dfile_002dread_002donly_002dother_002dframe"></a>
<p>Visit file <var>filename</var> read-only, and select its buffer in another
frame.  This runs <code>find-file-read-only-other-frame</code>.
See <a href="#Visiting">Visiting</a>.

</p></dd>
</dl>

<p>You can control the appearance and behavior of the newly-created
frames by specifying <em>frame parameters</em>.  See <a href="#Frame-Parameters">Frame Parameters</a>.

</p>

<a name="Frame-Commands"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Fonts" accesskey="n" rel="next">Fonts</a>, Previous: <a href="#Creating-Frames" accesskey="p" rel="prev">Creating Frames</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Frame-Commands-1"></a>
<h3 class="section">21.7 Frame Commands</h3>

<p>The following commands are used to delete and operate on frames:

</p>
<dl compact="compact">
<dt><kbd>C-x 5 0</kbd></dt>
<dd><a name="index-C_002dx-5-0"></a>
<a name="index-delete_002dframe"></a>
<p>Delete the selected frame (<code>delete-frame</code>).  This signals an
error if there is only one frame.

</p>
</dd>
<dt><kbd>C-z</kbd></dt>
<dd><a name="index-C_002dz-_0028X-windows_0029"></a>
<p>Minimize (or iconify) the selected Emacs frame
(<code>suspend-frame</code>).  See <a href="#Exiting">Exiting</a>.

</p>
</dd>
<dt><kbd>C-x 5 o</kbd></dt>
<dd><a name="index-C_002dx-5-o"></a>
<a name="index-other_002dframe"></a>
<p>Select another frame, and raise it.  If you repeat this command, it
cycles through all the frames on your terminal.

</p>
</dd>
<dt><kbd>C-x 5 1</kbd></dt>
<dd><a name="index-C_002dx-5-1"></a>
<a name="index-delete_002dother_002dframes"></a>
<p>Delete all frames on the current terminal, except the selected one.

</p>
</dd>
<dt><kbd>M-<span class="key">F10</span></kbd></dt>
<dd><a name="index-M_002dF10"></a>
<a name="index-toggle_002dframe_002dmaximized"></a>
<p>Toggle the maximization state of the current frame.  When a frame is
maximized, it fills the screen.

</p>
</dd>
<dt><kbd><span class="key">F11</span></kbd></dt>
<dd><a name="index-F11"></a>
<a name="index-toggle_002dframe_002dfullscreen"></a>
<p>Toggle full-screen mode for the current frame.  (The difference
between full-screen and maximized is normally that the former
hides window manager decorations, giving slightly more screen space to
Emacs itself.)

</p></dd>
</dl>

<a name="index-frame_002dresize_002dpixelwise"></a>
<p>Note that with some window managers you may have to customize the
variable <code>frame-resize-pixelwise</code> to a non-<code>nil</code> value in
order to make a frame truly maximized or full-screen.  This
variable, when set to a non-<code>nil</code> value, in general allows
resizing frames at pixel resolution, rather than in integral multiples
of lines and columns.

</p>
<p>The <kbd>C-x 5 0</kbd> (<code>delete-frame</code>) command deletes the selected
frame.  However, it will refuse to delete the last frame in an Emacs
session, to prevent you from losing the ability to interact with the
Emacs session.  Note that when Emacs is run as a daemon (see <a href="#Emacs-Server">Emacs Server</a>), there is always a virtual frame that remains after all
the ordinary, interactive frames are deleted.  In this case, <kbd>C-x
5 0</kbd> can delete the last interactive frame; you can use
<code>emacsclient</code> to reconnect to the Emacs session.

</p>
<p>The <kbd>C-x 5 1</kbd> (<code>delete-other-frames</code>) command deletes all
other frames on the current terminal (this terminal refers to either a
graphical display, or a text terminal; see <a href="#Non_002dWindow-Terminals">Non-Window Terminals</a>).
If the Emacs session has frames open on other graphical displays or
text terminals, those are not deleted.

</p>
<a name="index-focus_002dfollows_002dmouse"></a>
<p>The <kbd>C-x 5 o</kbd> (<code>other-frame</code>) command selects the next
frame on the current terminal.  If you are using Emacs on the X Window
System with a window manager that selects (or <em>gives focus to</em>)
whatever frame the mouse cursor is over, you have to change the
variable <code>focus-follows-mouse</code> to <code>t</code> in order for this
command to work properly.  Then invoking <kbd>C-x 5 o</kbd> will also warp
the mouse cursor to the chosen frame.

</p>

<a name="Fonts"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Speedbar" accesskey="n" rel="next">Speedbar</a>, Previous: <a href="#Frame-Commands" accesskey="p" rel="prev">Frame Commands</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Fonts-1"></a>
<h3 class="section">21.8 Fonts</h3>
<a name="index-fonts"></a>

<p>By default, Emacs displays text on graphical displays using a
10-point monospace font, and the font size can be changed
interactively (see <a href="#Text-Scale">Text Scale</a>).

</p>
<p>There are several different ways to specify a different font:

</p>
<ul>
<li>  Click on ‘<samp>Set Default Font</samp>’ in the ‘<samp>Options</samp>’ menu.  This
makes the selected font the default on all existing graphical frames.
To save this for future sessions, click on ‘<samp>Save Options</samp>’ in the
‘<samp>Options</samp>’ menu.



</li><li>  Add a line to your init file, modifying the variable
<code>default-frame-alist</code> to specify the <code>font</code> parameter
(see <a href="#Frame-Parameters">Frame Parameters</a>), like this:



<div class="example">
<pre class="example">(add-to-list 'default-frame-alist
             '(font . "DejaVu Sans Mono-10"))
</pre></div>

<p>This makes the font the default on all graphical frames created after
restarting Emacs with that init file.

</p>
</li><li> <a name="index-X-defaults-file"></a>
<a name="index-X-resources-file"></a>

Add an ‘<samp>emacs.font</samp>’ X resource setting to your X resource file,
like this:



<div class="example">
<pre class="example">emacs.font: DejaVu Sans Mono-12
</pre></div>

<p>You must restart X, or use the <code>xrdb</code> command, for the X
resources file to take effect.  See <a href="#Resources">Resources</a>.  Do not quote
font names in X resource files.

</p>
</li><li>  If you are running Emacs on the GNOME desktop, you can tell Emacs to
use the default system font by setting the variable
<code>font-use-system-font</code> to <code>t</code> (the default is <code>nil</code>).
For this to work, Emacs must have been compiled with support for
Gsettings (or the older Gconf).



</li><li>  Use the command line option ‘<samp>-fn</samp>’ (or ‘<samp>--font</samp>’).  See <a href="#Font-X">Font X</a>.

</li></ul>

<p>To check what font you’re currently using, the <kbd>C-u C-x =</kbd>
command can be helpful.  It describes the character at point, and
names the font that it’s rendered in.

</p>
<a name="index-fontconfig"></a>
<p>There are four different ways to express a font name.  The first is
to use a <em>Fontconfig pattern</em>.  Fontconfig patterns have the
following form:

</p>
<div class="example">
<pre class="example"><var>fontname</var>[-<var>fontsize</var>][:<var>name1</var>=<var>values1</var>][:<var>name2</var>=<var>values2</var>]...
</pre></div>

<p>Within this format, any of the elements in brackets may be omitted.
Here, <var>fontname</var> is the <em>family name</em> of the font, such as
‘<samp>Monospace</samp>’ or ‘<samp>DejaVu Sans Mono</samp>’; <var>fontsize</var> is the
<em>point size</em> of the font (one <em>printer’s point</em> is about 1/72
of an inch); and the ‘<samp><var>name</var>=<var>values</var></samp>’ entries specify
settings such as the slant and weight of the font.  Each <var>values</var>
may be a single value, or a list of values separated by commas.  In
addition, some property values are valid with only one kind of
property name, in which case the ‘<samp><var>name</var>=</samp>’ part may be
omitted.

</p>
<p>Here is a list of common font properties:

</p>
<dl compact="compact">
<dt>‘<samp>slant</samp>’</dt>
<dd><p>One of ‘<samp>italic</samp>’, ‘<samp>oblique</samp>’, or ‘<samp>roman</samp>’.

</p>
</dd>
<dt>‘<samp>weight</samp>’</dt>
<dd><p>One of ‘<samp>light</samp>’, ‘<samp>medium</samp>’, ‘<samp>demibold</samp>’, ‘<samp>bold</samp>’ or
‘<samp>black</samp>’.

</p>
</dd>
<dt>‘<samp>style</samp>’</dt>
<dd><p>Some fonts define special styles which are a combination of slant and
weight.  For instance, ‘<samp>Dejavu Sans</samp>’ defines the ‘<samp>book</samp>’
style, which overrides the slant and weight properties.

</p>
</dd>
<dt>‘<samp>width</samp>’</dt>
<dd><p>One of ‘<samp>condensed</samp>’, ‘<samp>normal</samp>’, or ‘<samp>expanded</samp>’.

</p>
</dd>
<dt>‘<samp>spacing</samp>’</dt>
<dd><p>One of ‘<samp>monospace</samp>’, ‘<samp>proportional</samp>’, ‘<samp>dual-width</samp>’, or
‘<samp>charcell</samp>’.

</p></dd>
</dl>

<p>Here are some examples of Fontconfig patterns:

</p>
<div class="example">
<pre class="example">Monospace
Monospace-12
Monospace-12:bold
DejaVu Sans Mono:bold:italic
Monospace-12:weight=bold:slant=italic
</pre></div>

<p>For a more detailed description of Fontconfig patterns, see the
Fontconfig manual, which is distributed with Fontconfig and available
online at <a href="https://fontconfig.org/fontconfig-user.html">https://fontconfig.org/fontconfig-user.html</a>.

</p>
<p>On MS-Windows, only the subset of the form
<var>fontname</var>[-<var>fontsize</var>] is supported for all fonts; the full
Fontconfig pattern might not work for all of them.

</p>
<a name="index-GTK-font-pattern"></a>
<p>The second way to specify a font is to use a <em>GTK font pattern</em>.
These have the syntax

</p>
<div class="example">
<pre class="example"><var>fontname</var> [<var>properties</var>] [<var>fontsize</var>]
</pre></div>

<p>where <var>fontname</var> is the family name, <var>properties</var> is a list of
property values separated by spaces, and <var>fontsize</var> is the point
size.  The properties that you may specify for GTK font patterns are
as follows:

</p>
<ul>
<li>  Slant properties: ‘<samp>Italic</samp>’ or ‘<samp>Oblique</samp>’.  If omitted, the
default (roman) slant is implied.

</li><li>  Weight properties: ‘<samp>Bold</samp>’, ‘<samp>Book</samp>’, ‘<samp>Light</samp>’,
‘<samp>Medium</samp>’, ‘<samp>Semi-bold</samp>’, or ‘<samp>Ultra-light</samp>’.  If omitted,
‘<samp>Medium</samp>’ weight is implied.

</li><li>  Width properties: ‘<samp>Semi-Condensed</samp>’ or ‘<samp>Condensed</samp>’.  If
omitted, a default width is used.

</li></ul>

<p>Here are some examples of GTK font patterns:

</p>
<div class="example">
<pre class="example">Monospace 12
Monospace Bold Italic 12
</pre></div>

<p>On MS-Windows, only the subset <var>fontname</var> is supported.

</p>
<a name="index-XLFD"></a>
<a name="index-X-Logical-Font-Description"></a>
<p>The third way to specify a font is to use an <em>XLFD</em> (<em>X
Logical Font Description</em>).  This is the traditional method for
specifying fonts under X, and is also supported on MS-Windows.  Each
XLFD consists of fourteen words or numbers, separated by dashes, like
this:

</p>
<div class="example">
<pre class="example">-misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1
</pre></div>

<p>A wildcard character (‘<samp>*</samp>’) in an XLFD matches any sequence of
characters (including none), and ‘<samp>?</samp>’ matches any single
character.  However, matching is implementation-dependent, and can be
inaccurate when wildcards match dashes in a long name.  For reliable
results, supply all 14 dashes and use wildcards only within a field.
Case is insignificant in an XLFD.  The syntax for an XLFD is as
follows:

</p>
<div class="example">
<pre class="example">-<var>maker</var>-<var>family</var>-<var>weight</var>-<var>slant</var>-<var>widthtype</var>-<var>style</var>…
…-<var>pixels</var>-<var>height</var>-<var>horiz</var>-<var>vert</var>-<var>spacing</var>-<var>width</var>-<var>registry</var>-<var>encoding</var>
</pre></div>

<p>The entries have the following meanings:

</p>
<dl compact="compact">
<dt><var>maker</var></dt>
<dd><p>The name of the font manufacturer.

</p></dd>
<dt><var>family</var></dt>
<dd><p>The name of the font family (e.g., ‘<samp>courier</samp>’).

</p></dd>
<dt><var>weight</var></dt>
<dd><p>The font weight—normally either ‘<samp>bold</samp>’, ‘<samp>medium</samp>’ or
‘<samp>light</samp>’.  Some font names support other values.

</p></dd>
<dt><var>slant</var></dt>
<dd><p>The font slant—normally ‘<samp>r</samp>’ (roman), ‘<samp>i</samp>’ (italic),
‘<samp>o</samp>’ (oblique), ‘<samp>ri</samp>’ (reverse italic), or ‘<samp>ot</samp>’ (other).
Some font names support other values.

</p></dd>
<dt><var>widthtype</var></dt>
<dd><p>The font width—normally ‘<samp>normal</samp>’, ‘<samp>condensed</samp>’,
‘<samp>semicondensed</samp>’, or ‘<samp>extended</samp>’.  Some font names support
other values.

</p></dd>
<dt><var>style</var></dt>
<dd><p>An optional additional style name.  Usually it is empty—most XLFDs
have two hyphens in a row at this point.  The style name can also
specify a two-letter ISO-639 language name, like ‘<samp>ja</samp>’ or
‘<samp>ko</samp>’; some fonts that support CJK scripts have that spelled out
in the style name part.

</p></dd>
<dt><var>pixels</var></dt>
<dd><p>The font height, in pixels.

</p></dd>
<dt><var>height</var></dt>
<dd><p>The font height on the screen, measured in tenths of a printer’s
point.  This is the point size of the font, times ten.  For a given
vertical resolution, <var>height</var> and <var>pixels</var> are proportional;
therefore, it is common to specify just one of them and use ‘<samp>*</samp>’
for the other.

</p></dd>
<dt><var>horiz</var></dt>
<dd><p>The horizontal resolution, in pixels per inch, of the screen for which
the font is intended.

</p></dd>
<dt><var>vert</var></dt>
<dd><p>The vertical resolution, in pixels per inch, of the screen for which
the font is intended.  Normally the resolution of the fonts on your
system is the right value for your screen; therefore, you normally
specify ‘<samp>*</samp>’ for this and <var>horiz</var>.

</p></dd>
<dt><var>spacing</var></dt>
<dd><p>This is ‘<samp>m</samp>’ (monospace), ‘<samp>p</samp>’ (proportional) or ‘<samp>c</samp>’
(character cell).

</p></dd>
<dt><var>width</var></dt>
<dd><p>The average character width, in pixels, multiplied by ten.

</p></dd>
<dt><var>registry</var></dt>
<dt><var>encoding</var></dt>
<dd><p>The X font character set that the font depicts.  (X font character
sets are not the same as Emacs character sets, but they are similar.)
You can use the <code>xfontsel</code> program to check which choices you
have.  Normally you should use ‘<samp>iso8859</samp>’ for <var>registry</var> and
‘<samp>1</samp>’ for <var>encoding</var>.

</p></dd>
</dl>

<p>The fourth and final method of specifying a font is to use a font
nickname.  Certain fonts have shorter nicknames, which you can use
instead of a normal font specification.  For instance, ‘<samp>6x13</samp>’ is
equivalent to

</p>
<div class="example">
<pre class="example">-misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1
</pre></div>

<p>This form is not supported on MS-Windows.

</p>
<a name="index-client_002dside-fonts"></a>
<a name="index-server_002dside-fonts"></a>
<p>On X, Emacs recognizes two types of fonts: <em>client-side</em> fonts,
which are provided by the Xft and Fontconfig libraries, and
<em>server-side</em> fonts, which are provided by the X server itself.
Most client-side fonts support advanced font features such as
antialiasing and subpixel hinting, while server-side fonts do not.
Fontconfig and GTK patterns match only client-side fonts.

</p>
<a name="index-listing-system-fonts"></a>
<p>You will probably want to use a fixed-width default font—that is,
a font in which all characters have the same width.  For Xft and
Fontconfig fonts, you can use the <code>fc-list</code> command to list
the available fixed-width fonts, like this:

</p>
<div class="example">
<pre class="example">fc-list :spacing=mono
fc-list :spacing=charcell
</pre></div>

<p>For server-side X fonts, you can use the <code>xlsfonts</code> program to
list the available fixed-width fonts, like this:

</p>
<div class="example">
<pre class="example">xlsfonts -fn '*x*' | grep -E '^[0-9]+x[0-9]+'
xlsfonts -fn '*-*-*-*-*-*-*-*-*-*-*-m*'
xlsfonts -fn '*-*-*-*-*-*-*-*-*-*-*-c*'
</pre></div>

<p>Any font with ‘<samp>m</samp>’ or ‘<samp>c</samp>’ in the <var>spacing</var> field of the XLFD is a fixed-width font. To see what a particular font looks like, use the <code>xfd</code> command. 例如：
</p>
<div class="example">
<pre class="example">xfd -fn 6x13
</pre></div>

<p>displays the entire font ‘<samp>6x13</samp>’.

</p>
<p>While running Emacs, you can also set the font of a specific kind of
text (see <a href="#Faces">Faces</a>), or a particular frame (see <a href="#Frame-Parameters">Frame Parameters</a>).

</p>

<a name="Speedbar"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Multiple-Displays" accesskey="n" rel="next">Multiple Displays</a>, Previous: <a href="#Fonts" accesskey="p" rel="prev">Fonts</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Speedbar-Frames"></a>
<h3 class="section">21.9 Speedbar Frames</h3>
<a name="index-speedbar"></a>

<a name="index-attached-frame-_0028of-speedbar_0029"></a>
<p>The <em>speedbar</em> is a special frame for conveniently navigating in
or operating on another frame.  The speedbar, when it exists, is
always associated with a specific frame, called its <em>attached
frame</em>; all speedbar operations act on that frame.

</p>
<p>Type <kbd>M-x speedbar</kbd> to create the speedbar and associate it with
the current frame.  To dismiss the speedbar, type <kbd>M-x speedbar</kbd>
again, or select the speedbar and type <kbd>q</kbd>.  (You can also delete
the speedbar frame like any other Emacs frame.)  If you wish to
associate the speedbar with a different frame, dismiss it and call
<kbd>M-x speedbar</kbd> from that frame.

</p>
<p>The speedbar can operate in various modes.  Its default mode is
<em>File Display</em> mode, which shows the files in the current
directory of the selected window of the attached frame, one file per
line.  Clicking on a non-directory visits that file in the selected window
of the attached frame, and clicking on a directory shows that
directory in the speedbar (see <a href="#Mouse-References">Mouse References</a>).  Each line also
has a box, ‘<samp>[+]</samp>’ or ‘<samp>&lt;+&gt;</samp>’, that you can click on to
<em>expand</em> the contents of that item.  Expanding a directory adds
the contents of that directory to the speedbar display, underneath the
directory’s own line.  Expanding an ordinary file adds a list of the
tags in that file to the speedbar display; you can click on a tag name
to jump to that tag in the selected window of the attached frame.
When a file or directory is expanded, the ‘<samp>[+]</samp>’ changes to
‘<samp>[-]</samp>’; you can click on that box to <em>contract</em> the item,
hiding its contents.

</p>
<p>You navigate through the speedbar using the keyboard, too.  Typing
<tt class="key">RET</tt> while point is on a line in the speedbar is equivalent to
clicking the item on the current line, and <tt class="key">SPC</tt> expands or
contracts the item.  <kbd>U</kbd> displays the parent directory of the
current directory.  To copy, delete, or rename the file on the current
line, type <kbd>C</kbd>, <kbd>D</kbd>, and <kbd>R</kbd> respectively.  To create a
new directory, type <kbd>M</kbd>.

</p>
<p>Another general-purpose speedbar mode is <em>Buffer Display</em> mode;
in this mode, the speedbar displays a list of Emacs buffers.  To
switch to this mode, type <kbd>b</kbd> in the speedbar.  To return to File
Display mode, type <kbd>f</kbd>.  You can also change the display mode by
clicking <kbd>mouse-3</kbd> anywhere in the speedbar window (or
<kbd>mouse-1</kbd> on the mode-line) and selecting ‘<samp>Displays</samp>’ in the
pop-up menu.

</p>
<p>Some major modes, including Rmail mode, Info, and GUD, have
specialized ways of putting useful items into the speedbar for you to
select.  For example, in Rmail mode, the speedbar shows a list of Rmail
files, and lets you move the current message to another Rmail file by
clicking on its ‘<samp>&lt;M&gt;</samp>’ box.

</p>
<p>For more details on using and programming the speedbar, See <a href="http://www.gnu.org/software/emacs/manual/html_mono/speedbar.html#Top">Speedbar</a> in <cite>Speedbar Manual</cite>.

</p>

<a name="Multiple-Displays"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Frame-Parameters" accesskey="n" rel="next">Frame Parameters</a>, Previous: <a href="#Speedbar" accesskey="p" rel="prev">Speedbar</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Multiple-Displays-1"></a>
<h3 class="section">21.10 Multiple Displays</h3>
<a name="index-multiple-displays"></a>

<p>A single Emacs can talk to more than one X display.  Initially, Emacs
uses just one display—the one specified with the <code>DISPLAY</code>
environment variable or with the ‘<samp>--display</samp>’ option (see <a href="#Initial-Options">Initial Options</a>).  To connect to another display, use the command
<code>make-frame-on-display</code>:

</p>
<a name="index-make_002dframe_002don_002ddisplay"></a>
<dl compact="compact">
<dt><kbd>M-x make-frame-on-display <span class="key">RET</span> <var>display</var> <span class="key">RET</span></kbd></dt>
<dd><p>Create a new frame on display <var>display</var>.

</p></dd>
</dl>

<p>A single X server can handle more than one screen.  When you open
frames on two screens belonging to one server, Emacs knows they share a
single keyboard, and it treats all the commands arriving from these
screens as a single stream of input.

</p>
<p>When you open frames on different X servers, Emacs makes a separate
input stream for each server.  Each server also has its own selected
frame.  The commands you enter with a particular X server apply to
that server’s selected frame.

</p>
<p>On multi-monitor displays it is possible to use the command
<code>make-frame-on-monitor</code>:

</p>
<a name="index-make_002dframe_002don_002dmonitor"></a>
<dl compact="compact">
<dt><kbd>M-x make-frame-on-monitor <span class="key">RET</span> <var>monitor</var> <span class="key">RET</span></kbd></dt>
<dd><p>Create a new frame on monitor <var>monitor</var> whose screen area is
a part of the current display.

</p></dd>
</dl>


<a name="Frame-Parameters"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Scroll-Bars" accesskey="n" rel="next">Scroll Bars</a>, Previous: <a href="#Multiple-Displays" accesskey="p" rel="prev">Multiple Displays</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Frame-Parameters-1"></a>
<h3 class="section">21.11 Frame Parameters</h3>
<a name="index-default_002dframe_002dalist"></a>

<p>You can control the default appearance and behavior of all frames by
specifying a default list of <em>frame parameters</em> in the variable
<code>default-frame-alist</code>.  Its value should be a list of entries,
each specifying a parameter name and a value for that parameter.
These entries take effect whenever Emacs creates a new frame,
including the initial frame.

</p>
<a name="index-frame-size_002c-specifying-default"></a>
<p>For example, you can add the following lines to your init file
(see <a href="#Init-File">Init File</a>) to set the default frame width to 90 character
columns, the default frame height to 40 character rows, and the
default font to ‘<samp>Monospace-10</samp>’:

</p>
<div class="example">
<pre class="example">(add-to-list 'default-frame-alist '(width  . 90))
(add-to-list 'default-frame-alist '(height . 40))
(add-to-list 'default-frame-alist '(font . "Monospace-10"))
</pre></div>

<p>For a list of frame parameters and their effects, see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Frame-Parameters">Frame
Parameters</a> in <cite>The Emacs Lisp Reference Manual</cite>.

</p>
<a name="index-initial_002dframe_002dalist"></a>
<p>You can also specify a list of frame parameters which apply to just
the initial frame, by customizing the variable
<code>initial-frame-alist</code>.

</p>
<p>If Emacs is compiled to use an X toolkit, frame parameters that
specify colors and fonts don’t affect menus and the menu bar, since
those are drawn by the toolkit and not directly by Emacs.

</p>
<p>Frame appearance and behavior can also be customized through X
resources (see <a href="#X-Resources">X Resources</a>); these override the parameters of the
initial frame specified in your init file.

</p>
<p>Note that if you are using the desktop library to save and restore
your sessions, the frames to be restored are recorded in the desktop
file, together with their parameters.  When these frames are restored,
the recorded parameters take precedence over the frame parameters
specified by <code>default-frame-alist</code> and <code>initial-frame-alist</code>
in your init file.  See <a href="#Saving-Emacs-Sessions">Saving Emacs Sessions</a>, for how to avoid
that.

</p>

<a name="Scroll-Bars"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Window-Dividers" accesskey="n" rel="next">Window Dividers</a>, Previous: <a href="#Frame-Parameters" accesskey="p" rel="prev">Frame Parameters</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Scroll-Bars-1"></a>
<h3 class="section">21.12 Scroll Bars</h3>
<a name="index-Scroll-Bar-mode"></a>
<a name="index-mode_002c-Scroll-Bar"></a>
<a name="index-Vertical-Scroll-Bar"></a>

<p>On graphical displays, there is a <em>vertical scroll bar</em> on the
side of each Emacs window.  Clicking <kbd>mouse-1</kbd> on the scroll bar’s
up and down buttons scrolls the window by one line at a time (but some
toolkits allow you to customize the scroll bars to not have those
buttons).  Clicking <kbd>mouse-1</kbd> above or below the scroll bar’s
inner box scrolls the window by nearly the entire height of the
window, like <kbd>M-v</kbd> and <kbd>C-v</kbd> respectively (see <a href="#Moving-Point">Moving Point</a>).  (This, too, can behave differently with some toolkits.)
Dragging the inner box scrolls continuously.

</p>
<p>If Emacs is compiled on the X Window System without X toolkit
support, the scroll bar behaves differently.  Clicking <kbd>mouse-1</kbd>
anywhere on the scroll bar scrolls forward like <kbd>C-v</kbd>, while
<kbd>mouse-3</kbd> scrolls backward like <kbd>M-v</kbd>.  Clicking <kbd>mouse-2</kbd>
in the scroll bar lets you drag the inner box up and down.

</p>
<a name="index-scroll_002dbar_002dmode"></a>
<a name="index-toggle_002dscroll_002dbar"></a>
<p>To toggle the use of vertical scroll bars, type <kbd>M-x
scroll-bar-mode</kbd>.  This command applies to all frames, including frames
yet to be created.  To toggle vertical scroll bars for just the selected
frame, use the command <kbd>M-x toggle-scroll-bar</kbd>.

</p>
<a name="index-scroll_002dbar_002dmode-1"></a>
<p>To control the use of vertical scroll bars at startup, customize the
variable <code>scroll-bar-mode</code> (see <a href="#Customization">Customization</a>).  Its value
should be either <code>right</code> (put scroll bars on the right side of
windows), <code>left</code> (put them on the left), or <code>nil</code> (disable
vertical scroll bars).  By default, Emacs puts scroll bars on the
right if it was compiled with GTK+ support on the X Window System, and
on MS-Windows or macOS; Emacs puts scroll bars on the left if compiled
on the X Window System without GTK+ support (following the old
convention for X applications).

</p>
<a name="index-scroll_002dbar_002dwidth"></a>
<a name="index-width-of-the-vertical-scroll-bar"></a>
<p>You can also use the X resource ‘<samp>verticalScrollBars</samp>’ to enable
or disable the scroll bars (see <a href="#Resources">Resources</a>).  To control the scroll
bar width, change the <code>scroll-bar-width</code> frame parameter
(see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Frame-Parameters">Frame Parameters</a> in <cite>The Emacs Lisp Reference Manual</cite>).

</p>
<a name="index-scroll_002dbar_002dadjust_002dthumb_002dportion"></a>
<a name="index-overscrolling"></a>
<p>If you’re using Emacs on X (with GTK+ or Motif), you can customize the
variable <code>scroll-bar-adjust-thumb-portion</code> to control
<em>overscrolling</em> of the scroll bar, i.e., dragging the thumb down even
when the end of the buffer is visible.  If its value is
non-<code>nil</code>, the scroll bar can be dragged downwards even if the
end of the buffer is shown; if <code>nil</code>, the thumb will be at the
bottom when the end of the buffer is shown.  You cannot over-scroll
when the entire buffer is visible.

</p>
<a name="index-scroll_002dbar-face"></a>
<p>The visual appearance of the scroll bars is controlled by the
<code>scroll-bar</code> face.  (Some toolkits, such as GTK+ and MS-Windows,
ignore this face; the scroll-bar appearance there can only be
customized system-wide, for GTK+ see <a href="#GTK-resources">GTK resources</a>).

</p>
<a name="index-vertical-border"></a>
<p>On graphical frames, vertical scroll bars implicitly serve to separate
side-by-side windows visually.  When vertical scroll bars are disabled,
Emacs by default separates such windows with the help of a one-pixel
wide <em>vertical border</em>.  That border occupies the first pixel column
of the window on the right and may thus overdraw the leftmost pixels of
any glyph displayed there.  If these pixels convey important
information, you can make them visible by enabling window dividers, see
<a href="#Window-Dividers">Window Dividers</a>.  To replicate the look of vertical borders, set
the <code>right-divider-width</code> parameter of frames to one and have the
<code>window-divider</code> face inherit from that of <code>vertical-border</code>,
<a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Window-Dividers">Window Dividers</a> in <cite>The Emacs Lisp Reference
Manual</cite>.

</p>
<a name="index-Horizontal-Scroll-Bar"></a>
<a name="index-Horizontal-Scroll-Bar-mode"></a>
<p>On graphical displays with toolkit support, Emacs may also supply a
<em>horizontal scroll bar</em> on the bottom of each window.  Clicking
<kbd>mouse-1</kbd> on that scroll bar’s left and right buttons scrolls the
window horizontally by one column at a time.  (Note that some toolkits
allow customizations of the scroll bar that cause these buttons not to
be shown.)  Clicking <kbd>mouse-1</kbd> on the left or right of the scroll
bar’s inner box scrolls the window by four columns.  Dragging the
inner box scrolls the window continuously.

</p>
<p>Note that such horizontal scrolling can make the window’s position of
point disappear on the left or the right.  Typing a character to insert
text or moving point with a keyboard command will usually bring it back
into view.

</p>
<a name="index-horizontal_002dscroll_002dbar_002dmode"></a>
<p>To toggle the use of horizontal scroll bars, type <kbd>M-x
horizontal-scroll-bar-mode</kbd>.  This command applies to all frames,
including frames yet to be created.  To toggle horizontal scroll bars
for just the selected frame, use the command <kbd>M-x
toggle-horizontal-scroll-bar</kbd>.

</p>
<a name="index-horizontal_002dscroll_002dbar_002dmode-1"></a>
<p>To control the use of horizontal scroll bars at startup, customize the
variable <code>horizontal-scroll-bar-mode</code>.

</p>
<a name="index-scroll_002dbar_002dheight"></a>
<a name="index-height-of-the-horizontal-scroll-bar"></a>
<p>You can also use the X resource ‘<samp>horizontalScrollBars</samp>’ to enable
or disable horizontal scroll bars (see <a href="#Resources">Resources</a>).  To control the
scroll bar height, change the <code>scroll-bar-height</code> frame parameter
(see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Frame-Parameters">Frame Parameters</a> in <cite>The Emacs Lisp Reference Manual</cite>).

</p>

<a name="Window-Dividers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Drag-and-Drop" accesskey="n" rel="next">Drag and Drop</a>, Previous: <a href="#Scroll-Bars" accesskey="p" rel="prev">Scroll Bars</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Window-Dividers-1"></a>
<h3 class="section">21.13 Window Dividers</h3>
<a name="index-Window-Divider-mode"></a>
<a name="index-mode_002c-Window-Divider"></a>

<p>On graphical displays, you can use <em>window dividers</em> in order to
separate windows visually.  Window dividers are bars that can be dragged
with the mouse, thus allowing you to easily resize adjacent windows.

</p>
<a name="index-window_002ddivider_002dmode"></a>
<p>To toggle the display of window dividers, use the command <kbd>M-x
window-divider-mode</kbd>.

</p>
<a name="index-window_002ddivider_002ddefault_002dplaces"></a>
<p>To customize where dividers should appear, use the option
<code>window-divider-default-places</code>.  Its value should be either
<code>bottom-only</code> (to show dividers only on the bottom of windows),
<code>right-only</code> (to show dividers only on the right of windows), or
<code>t</code> (to show them on the bottom and on the right).

</p>
<a name="index-window_002ddivider_002ddefault_002dbottom_002dwidth"></a>
<a name="index-window_002ddivider_002ddefault_002dright_002dwidth"></a>
<p>To adjust the width of window dividers displayed by this mode
customize the options <code>window-divider-default-bottom-width</code> and
<code>window-divider-default-right-width</code>.

</p>
<p>When vertical scroll bars are disabled, dividers can be also useful to
make the first pixel column of a window visible, which would be otherwise
covered by the vertical border used to separate side-by-side windows
(see <a href="#Scroll-Bars">Scroll Bars</a>).

</p>
<p>For more details about window dividers see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Window-Dividers">Window Dividers</a> in <cite>The Emacs Lisp Reference Manual</cite>.

</p>

<a name="Drag-and-Drop"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Menu-Bars" accesskey="n" rel="next">Menu Bars</a>, Previous: <a href="#Window-Dividers" accesskey="p" rel="prev">Window Dividers</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Drag-and-Drop-1"></a>
<h3 class="section">21.14 Drag and Drop</h3>
<a name="index-drag-and-drop"></a>

<p>In most graphical desktop environments, Emacs has basic support for
<em>drag and drop</em> operations.  For instance, dropping text onto an
Emacs frame inserts the text where it is dropped.  Dropping a file
onto an Emacs frame visits that file.  As a special case, dropping the
file on a Dired buffer moves or copies the file (according to the
conventions of the application it came from) into the directory
displayed in that buffer.

</p>
<a name="index-dnd_002dopen_002dfile_002dother_002dwindow"></a>
<p>Dropping a file normally visits it in the window you drop it on.  If
you prefer to visit the file in a new window in such cases, customize
the variable <code>dnd-open-file-other-window</code>.

</p>
<p>The XDND and Motif drag and drop protocols, and the old KDE 1.x
protocol, are currently supported.

</p>
<a name="index-mouse_002ddrag_002dand_002ddrop_002dregion"></a>
<p>Emacs can also optionally drag the region with the mouse into
another portion of this or another buffer.  To enable that, customize
the variable <code>mouse-drag-and-drop-region</code> to a non-<code>nil</code>
value.  Normally, the text is moved, i.e. cut and pasted, when the
destination is the same buffer as the origin; dropping the region on
another buffer copies the text instead.  If the value of this variable
names a modifier key, such as ‘<samp>shift</samp>’, ‘<samp>control</samp>’ or
‘<samp>alt</samp>’, then pressing that modifier key when dropping the text
will copy it instead of cutting it, even if you drop on the same
buffer as the one from which the text came.

</p>
<a name="index-mouse_002ddrag_002dand_002ddrop_002dregion_002dcut_002dwhen_002dbuffers_002ddiffer"></a>
<a name="index-mouse_002ddrag_002dand_002ddrop_002dregion_002dshow_002dtooltip"></a>
<a name="index-mouse_002ddrag_002dand_002ddrop_002dregion_002dshow_002dcursor"></a>
<p>In order to cut text even when source and destination buffers differ,
set the option
<code>mouse-drag-and-drop-region-cut-when-buffers-differ</code> to a
non-<code>nil</code> value.  By default, on a graphic display the selected
text is shown in a tooltip and point moves together with the mouse
cursor during dragging.  To suppress such behavior, set the options
<code>mouse-drag-and-drop-region-show-tooltip</code> and/or
<code>mouse-drag-and-drop-region-show-cursor</code> to <code>nil</code>.

</p>


<a name="Menu-Bars"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Tool-Bars" accesskey="n" rel="next">Tool Bars</a>, Previous: <a href="#Drag-and-Drop" accesskey="p" rel="prev">Drag and Drop</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Menu-Bars-1"></a>
<h3 class="section">21.15 Menu Bars</h3>
<a name="index-menu-bar-mode"></a>
<a name="index-mode_002c-Menu-Bar"></a>
<a name="index-menu_002dbar_002dmode"></a>
<a name="index-menu_002dbar_002dmode-1"></a>

<p>You can toggle the use of menu bars with <kbd>M-x menu-bar-mode</kbd>.
With no argument, this command toggles Menu Bar mode, a global minor
mode.  With an argument, the command turns Menu Bar mode on if the
argument is positive, off if the argument is not positive.  To control
the use of menu bars at startup, customize the variable
<code>menu-bar-mode</code>.

</p>
<a name="index-C_002dmouse_002d3-_0028when-menu-bar-is-disabled_0029"></a>
<p>Expert users often turn off the menu bar, especially on text
terminals, where this makes one additional line available for text.
If the menu bar is off, you can still pop up a menu of its contents
with <kbd>C-mouse-3</kbd> on a display which supports pop-up menus.
See <a href="#Menu-Mouse-Clicks">Menu Mouse Clicks</a>.

</p>
<p>See <a href="#Menu-Bar">Menu Bar</a>, for information on how to invoke commands with the
menu bar.  See <a href="#X-Resources">X Resources</a>, for how to customize the menu bar
menus’ visual appearance.

</p>

<a name="Tool-Bars"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Tab-Bars" accesskey="n" rel="next">Tab Bars</a>, Previous: <a href="#Menu-Bars" accesskey="p" rel="prev">Menu Bars</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Tool-Bars-1"></a>
<h3 class="section">21.16 Tool Bars</h3>
<a name="index-tool-bar-mode"></a>
<a name="index-mode_002c-Tool-Bar"></a>
<a name="index-icons_002c-toolbar"></a>

<p>On graphical displays, Emacs puts a <em>tool bar</em> at the top of
each frame, just below the menu bar.  This is a row of icons which you
can click on with the mouse to invoke various commands.

</p>
<p>The global (default) tool bar contains general commands.  Some major
modes define their own tool bars; whenever a buffer with such a major
mode is current, the mode’s tool bar replaces the global tool bar.

</p>
<a name="index-tool_002dbar_002dmode"></a>
<a name="index-tool_002dbar_002dmode-1"></a>
<p>To toggle the use of tool bars, type <kbd>M-x tool-bar-mode</kbd>.  This
command applies to all frames, including frames yet to be created.  To
control the use of tool bars at startup, customize the variable
<code>tool-bar-mode</code>.

</p>
<a name="index-tool_002dbar_002dstyle"></a>
<a name="index-Tool-Bar-style"></a>
<p>When Emacs is compiled with GTK+ support, each tool bar item can
consist of an image, or a text label, or both.  By default, Emacs
follows the Gnome desktop’s tool bar style setting; if none is
defined, it displays tool bar items as just images.  To impose a
specific tool bar style, customize the variable <code>tool-bar-style</code>.

</p>
<a name="index-Tool-Bar-position"></a>
<p>You can also control the placement of the tool bar for the GTK+ tool
bar with the frame parameter <code>tool-bar-position</code>.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Frame-Parameters">Frame
Parameters</a> in <cite>The Emacs Lisp Reference Manual</cite>.

</p>
<p>NS builds consider the tool bar to be a window decoration, and
therefore do not display it when a window is undecorated.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Frame-Parameters">Frame
Parameters</a> in <cite>The Emacs Lisp Reference Manual</cite>.  On macOS the
tool bar is hidden when the frame is put into fullscreen, but can be
displayed by moving the mouse pointer to the top of the screen.

</p>

<a name="Tab-Bars"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Dialog-Boxes" accesskey="n" rel="next">Dialog Boxes</a>, Previous: <a href="#Tool-Bars" accesskey="p" rel="prev">Tool Bars</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Tab-Bars-1"></a>
<h3 class="section">21.17 Tab Bars</h3>
<a name="index-tab-bar-mode"></a>
<a name="index-mode_002c-Tab-Bar"></a>
<a name="index-tabs_002c-tabbar"></a>

<p>On graphical displays and on text terminals, Emacs can optionally
display a <em>Tab Bar</em> at the top of each frame, just below the menu
bar.  The Tab Bar is a row of <em>tabs</em>—buttons that you can click
to switch between window configurations on that frame.

</p>
<p>Each tab on the Tab Bar represents a named persistent window
configuration.  Its name is composed from the list of names of buffers
visible in windows of that window configuration.  Clicking on the tab
switches to the window configuration recorded by the tab; it is a
configuration of windows and buffers which was previously used in the
frame when that tab was the current tab.

</p>
<p>If you are using the desktop library to save and restore your
sessions (see <a href="#Saving-Emacs-Sessions">Saving Emacs Sessions</a>), the tabs from the Tab Bar are
recorded in the desktop file, together with their associated window
configurations, and will be available after restoring the session.

</p>
<p>Note that the Tab Bar is different from the Tab Line (see <a href="#Tab-Line">Tab Line</a>).
Whereas tabs on the Tab Line at the top of each window are used to
switch between buffers, tabs on the Tab Bar at the top of each frame
are used to switch between window configurations containing several
windows with buffers.

</p>
<a name="index-tab_002dbar_002dmode"></a>
<p>To toggle the use of tab bars, type <kbd>M-x tab-bar-mode</kbd>.  This
command applies to all frames, including frames yet to be created.  To
control the use of tab bars at startup, customize the variable
<code>tab-bar-mode</code>.

</p>
<a name="index-tab_002dbar_002dshow"></a>
<p>The variable <code>tab-bar-show</code> controls whether the Tab Bar mode
is turned on automatically.  If the value is <code>t</code>, then
<code>tab-bar-mode</code> is enabled when using the commands that create new
tabs.  The value <code>1</code> hides the tab bar when it has only one tab,
and shows it again when more tabs are created.  The value <code>nil</code>
always keeps the tab bar hidden; in this case it’s still possible to
switch between named window configurations without the tab bar by
using <kbd>M-x tab-next</kbd>, <kbd>M-x tab-switcher</kbd>, and other commands
that provide completion on tab names.  Also it’s possible to create
and close tabs without the tab bar by using commands <kbd>M-x
tab-new</kbd>, <kbd>M-x tab-close</kbd>, etc.

</p>
<a name="index-C_002dx-t"></a>
<p>The prefix key <kbd>C-x t</kbd> is analogous to <kbd>C-x 5</kbd>.
Whereas each <kbd>C-x 5</kbd> command pops up a buffer in a different frame
(see <a href="#Creating-Frames">Creating Frames</a>), the <kbd>C-x t</kbd> commands use a different
tab with a different window configuration in the selected frame.

</p>
<p>The various <kbd>C-x t</kbd> commands differ in how they find or create the
buffer to select.  The following commands can be used to select a buffer
in a new tab:

</p>
<dl compact="compact">
<dt><kbd>C-x t 2</kbd></dt>
<dd><a name="index-C_002dx-t-2"></a>
<a name="index-tab_002dnew"></a>
<p>Add a new tab (<code>tab-new</code>).  You can control the choice of the
buffer displayed in a new tab by customizing the variable
<code>tab-bar-new-tab-choice</code>.

</p>
</dd>
<dt><kbd>C-x t b <var>bufname</var> <span class="key">RET</span></kbd></dt>
<dd><p>Select buffer <var>bufname</var> in another tab.  This runs
<code>switch-to-buffer-other-tab</code>.

</p>
</dd>
<dt><kbd>C-x t f <var>filename</var> <span class="key">RET</span></kbd></dt>
<dd><p>Visit file <var>filename</var> and select its buffer in another tab.  This
runs <code>find-file-other-tab</code>.  See <a href="#Visiting">Visiting</a>.

</p>
</dd>
<dt><kbd>C-x t d <var>directory</var> <span class="key">RET</span></kbd></dt>
<dd><p>Select a Dired buffer for directory <var>directory</var> in another tab.
This runs <code>dired-other-tab</code>.  See <a href="#Dired">Dired</a>.

</p></dd>
</dl>

<a name="index-tab_002dbar_002dnew_002dtab_002dchoice"></a>
<p>By default, a new tab starts with the buffer that was
current before calling the command that adds a new tab.
To start a new tab with other buffers, customize the variable
<code>tab-bar-new-tab-choice</code>.

</p>
<a name="index-tab_002dbar_002dnew_002dtab_002dto"></a>
<p>The variable <code>tab-bar-new-tab-to</code> defines where to place a new tab.
By default, a new tab is added on the right side of the current tab.

</p>
<p>The following commands can be used to delete tabs:

</p>
<dl compact="compact">
<dt><kbd>C-x t 0</kbd></dt>
<dd><a name="index-C_002dx-t-0"></a>
<a name="index-tab_002dclose"></a>
<p>Close the selected tab (<code>tab-close</code>).  It has no effect if there
is only one tab, unless the variable <code>tab-bar-close-last-tab-choice</code>
is customized to a non-default value.

</p>
</dd>
<dt><kbd>C-x t 1</kbd></dt>
<dd><a name="index-C_002dx-t-1"></a>
<a name="index-tab_002dclose_002dother"></a>
<p>Close all tabs on the selected frame, except the selected one.

</p></dd>
</dl>

<a name="index-tab_002dbar_002dclose_002dtab_002dselect"></a>
<p>The variable <code>tab-bar-close-tab-select</code> defines what tab to
select after closing the current tab.  By default, it selects
a recently used tab.

</p>
<a name="index-tab_002dundo"></a>
<p>The command <code>tab-undo</code> restores the last closed tab.

</p>
<p>The following commands can be used to switch between tabs:

</p>
<dl compact="compact">
<dt><kbd>C-x t o</kbd></dt>
<dt><kbd>C-<span class="key">TAB</span></kbd></dt>
<dd><a name="index-C_002dx-t-o"></a>
<a name="index-C_002dTAB-1"></a>
<a name="index-tab_002dnext"></a>
<p>Switch to the next tab.  If you repeat this command, it cycles through
all the tabs on the selected frame.  With a positive numeric argument
<var>n</var>, it switches to the next <var>n</var>th tab; with a negative
argument -<var>n</var>, it switches back to the previous <var>n</var>th
tab.

</p>
</dd>
<dt><kbd>S-C-<span class="key">TAB</span></kbd></dt>
<dd><a name="index-S_002dC_002dTAB"></a>
<a name="index-tab_002dprevious"></a>
<p>Switch to the previous tab.  With a positive numeric argument <var>n</var>,
it switches to the previous <var>n</var>th tab; with a negative argument
-<var>n</var>, it switches back to the next <var>n</var>th tab.

</p>
</dd>
<dt><kbd>C-x t <span class="key">RET</span> <var>tabname</var> <span class="key">RET</span></kbd></dt>
<dd><p>Switch to the tab by its name, with completion on all tab names.
Default values are tab names sorted by recency, so you can use
<kbd>M-n</kbd> (<code>next-history-element</code>) to get the name of the last
visited tab, the second last, and so on.

</p>
</dd>
<dt><kbd><var>modifier</var>-<var>tabnumber</var></kbd></dt>
<dd><a name="index-tab_002dselect"></a>
<p>Switch to the tab by its number.  After customizing the variable
<code>tab-bar-select-tab-modifiers</code> to specify a <var>modifier</var> key, you
can select a tab by its ordinal number using the specified modifier in
combination with the tab number to select.  To display the tab number
alongside the tab name, you can customize another variable
<code>tab-bar-tab-hints</code>.  This will help you to decide what key to press
to select the tab by its number.

</p>
</dd>
<dt><kbd><var>modifier</var>-<kbd>0</kbd></kbd></dt>
<dd><a name="index-tab_002drecent"></a>
<p>Switch to the recent tab.  The key combination is the modifier key
defined by <code>tab-bar-select-tab-modifiers</code> and the key <kbd>0</kbd>.
With a numeric argument <var>n</var>, switch to the <var>n</var>th recent tab.

</p></dd>
</dl>

<p>The following commands can be used to operate on tabs:

</p>
<dl compact="compact">
<dt><kbd>C-x t r <var>tabname</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-tab_002drename"></a>
<p>Rename the current tab to <var>tabname</var>.  You can control the
programmatic name given to a tab by default by customizing the
variable <code>tab-bar-tab-name-function</code>.

</p>
</dd>
<dt><kbd>C-x t m</kbd></dt>
<dd><a name="index-tab_002dmove"></a>
<p>Move the current tab <var>n</var> positions to the right with a positive
numeric argument <var>n</var>.  With a negative argument -<var>n</var>,
move the current tab <var>n</var> positions to the left.

</p></dd>
</dl>

<a name="index-tab_002dbar_002dhistory_002dmode"></a>
<p>You can enable <code>tab-bar-history-mode</code> to remember window
configurations used in every tab, and restore them.

</p>
<dl compact="compact">
<dt><kbd>tab-bar-history-back</kbd></dt>
<dd><p>Restore a previous window configuration used in the current tab.
This navigates back in the history of window configurations.

</p>
</dd>
<dt><kbd>tab-bar-history-forward</kbd></dt>
<dd><p>Cancel restoration of the previous window configuration.
This navigates forward in the history of window configurations.

</p></dd>
</dl>


<a name="Dialog-Boxes"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Tooltips" accesskey="n" rel="next">Tooltips</a>, Previous: <a href="#Tab-Bars" accesskey="p" rel="prev">Tab Bars</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Using-Dialog-Boxes"></a>
<h3 class="section">21.18 Using Dialog Boxes</h3>
<a name="index-dialog-boxes"></a>

<a name="index-use_002ddialog_002dbox"></a>
<p>A dialog box is a special kind of menu for asking you a yes-or-no
question or some other special question.  Many Emacs commands use a
dialog box to ask a yes-or-no question, if you used the mouse to
invoke the command that led to the question.

</p>
<p>To disable the use of dialog boxes, change the variable
<code>use-dialog-box</code> to <code>nil</code>.  In that case, Emacs always
performs yes-or-no prompts using the echo area and keyboard input.
This variable also controls whether to use file selection windows (but
those are not supported on all platforms).

</p>
<a name="index-use_002dfile_002ddialog"></a>
<a name="index-file-selection-dialog_002c-how-to-disable"></a>
<p>A file selection window is a special kind of dialog box for asking
for file names.  You can customize the variable <code>use-file-dialog</code>
to suppress the use of file selection windows, even if you still want
other kinds of dialogs.  This variable has no effect if you have
suppressed all dialog boxes with the variable <code>use-dialog-box</code>.

</p>
<a name="index-x_002dgtk_002dshow_002dhidden_002dfiles"></a>
<a name="index-x_002dgtk_002dfile_002ddialog_002dhelp_002dtext"></a>
<a name="index-hidden-files_002c-in-GTK_002b-file-chooser"></a>
<a name="index-help-text_002c-in-GTK_002b-file-chooser"></a>
<p>When Emacs is compiled with GTK+ support, it uses the GTK+ file
chooser dialog.  Emacs adds an additional toggle button to this
dialog, which you can use to enable or disable the display of hidden
files (files starting with a dot) in that dialog.  If you want this
toggle to be activated by default, change the variable
<code>x-gtk-show-hidden-files</code> to <code>t</code>.  In addition, Emacs adds
help text to the GTK+ file chooser dialog; to disable this help text,
change the variable <code>x-gtk-file-dialog-help-text</code> to <code>nil</code>.

</p>

<a name="Tooltips"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Mouse-Avoidance" accesskey="n" rel="next">Mouse Avoidance</a>, Previous: <a href="#Dialog-Boxes" accesskey="p" rel="prev">Dialog Boxes</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Tooltips-1"></a>
<h3 class="section">21.19 Tooltips</h3>
<a name="index-tooltips"></a>

<p><em>Tooltips</em> are small special frames that display text
information at the current mouse position.  They activate when there
is a pause in mouse movement over some significant piece of text in a
window, or the mode line, or some other part of the Emacs frame such
as a tool bar button or menu item.

</p>
<a name="index-tooltip_002dmode"></a>
<p>You can toggle the use of tooltips with the command <kbd>M-x
tooltip-mode</kbd>.  When Tooltip mode is disabled, the help text is
displayed in the echo area instead.  To control the use of tooltips at
startup, customize the variable <code>tooltip-mode</code>.

</p>
<p>The following variables provide customization options for tooltip
display:

</p>
<dl compact="compact">
<dt><code>tooltip-delay</code>
<a name="index-tooltip_002ddelay"></a>
</dt>
<dd><p>This variable specifies how long Emacs should wait before displaying
the first tooltip.  The value is in seconds.

</p>
</dd>
<dt><code>tooltip-short-delay</code>
<a name="index-tooltip_002dshort_002ddelay"></a>
</dt>
<dd><p>This variable specifies how long Emacs should wait before displaying
subsequent tooltips on different items, having already displayed the
first tooltip.  The value is in seconds.

</p>
</dd>
<dt><code>tooltip-hide-delay</code>
<a name="index-tooltip_002dhide_002ddelay"></a>
</dt>
<dd><p>The number of seconds since displaying a tooltip to hide it, if the
mouse doesn’t move.

</p>
</dd>
<dt><code>tooltip-x-offset</code>
<a name="index-tooltip_002dx_002doffset"></a>
</dt>
<dt><code>tooltip-y-offset</code>
<a name="index-tooltip_002dy_002doffset"></a>
</dt>
<dd><p>The X and Y offsets, in pixels, of the left top corner of the tooltip
from the mouse pointer position.  Note that these are ignored if
<code>tooltip-frame-parameters</code> was customized to include,
respectively, the <code>left</code> and <code>top</code> parameters.  The values
of the offsets should be chosen so that the tooltip doesn’t cover the
mouse pointer’s hot spot, or it might interfere with clicking the
mouse.

</p>
</dd>
<dt><code>tooltip-frame-parameters</code>
<a name="index-tooltip_002dframe_002dparameters"></a>
</dt>
<dd><p>The frame parameters used for displaying tooltips.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Frame-Parameters">Frame
Parameters</a> in <cite>The Emacs Lisp Reference Manual</cite>, and also
<a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Tooltips">Tooltips</a> in <cite>The Emacs Lisp Reference Manual</cite>.

</p></dd>
</dl>

<p>For additional customization options for displaying tooltips, use
<kbd>M-x customize-group <span class="key">RET</span> tooltip <span class="key">RET</span></kbd>.

</p>
<a name="index-x_002dgtk_002duse_002dsystem_002dtooltips"></a>
<p>If Emacs is built with GTK+ support, it displays tooltips via GTK+,
using the default appearance of GTK+ tooltips.  To disable this,
change the variable <code>x-gtk-use-system-tooltips</code> to <code>nil</code>.
If you do this, or if Emacs is built without GTK+ support, most
attributes of the tooltip text are specified by the <code>tooltip</code>
face, and by X resources (see <a href="#X-Resources">X Resources</a>).

</p>
<p><em>GUD tooltips</em> are special tooltips that show the values of
variables when debugging a program with GUD.  See <a href="#Debugger-Operation">Debugger Operation</a>.

</p>

<a name="Mouse-Avoidance"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Non_002dWindow-Terminals" accesskey="n" rel="next">Non-Window Terminals</a>, Previous: <a href="#Tooltips" accesskey="p" rel="prev">Tooltips</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Mouse-Avoidance-1"></a>
<h3 class="section">21.20 Mouse Avoidance</h3>
<a name="index-avoiding-mouse-in-the-way-of-your-typing"></a>
<a name="index-mouse-avoidance"></a>

<p>On graphical terminals, the mouse pointer may obscure the text in
the Emacs frame.  Emacs provides two methods to avoid this problem.

</p>
<p>Firstly, Emacs hides the mouse pointer each time you type a
self-inserting character, if the pointer lies inside an Emacs frame;
moving the mouse pointer makes it visible again.  To disable this
feature, set the variable <code>make-pointer-invisible</code> to <code>nil</code>.
See <a href="#Display-Custom">Display Custom</a>.

</p>
<a name="index-mouse_002davoidance_002dmode-1"></a>
<p>Secondly, you can use Mouse Avoidance mode, a minor mode, to keep
the mouse pointer away from point.  To use Mouse Avoidance mode,
customize the variable <code>mouse-avoidance-mode</code>.  You can set this
to various values to move the mouse in several ways:

</p>
<dl compact="compact">
<dt><code>banish</code></dt>
<dd><p>Move the pointer to a corner of the frame on any key-press.  You can
customize the variable <code>mouse-avoidance-banish-position</code> to
specify where the pointer goes when it is banished.

</p></dd>
<dt><code>exile</code></dt>
<dd><p>Banish the pointer only if the cursor gets too close, and allow it to
return once the cursor is out of the way.

</p></dd>
<dt><code>jump</code></dt>
<dd><p>If the cursor gets too close to the pointer, displace the pointer by a
random distance and direction.

</p></dd>
<dt><code>animate</code></dt>
<dd><p>As <code>jump</code>, but shows steps along the way for illusion of motion.

</p></dd>
<dt><code>cat-and-mouse</code></dt>
<dd><p>The same as <code>animate</code>.

</p></dd>
<dt><code>proteus</code></dt>
<dd><p>As <code>animate</code>, but changes the shape of the mouse pointer too.

</p></dd>
</dl>

<a name="index-mouse_002davoidance_002dmode"></a>
<p>You can also use the command <kbd>M-x mouse-avoidance-mode</kbd> to enable
the mode.  Whenever Mouse Avoidance mode moves the mouse, it also
raises the frame.

</p>

<a name="Non_002dWindow-Terminals"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Text_002dOnly-Mouse" accesskey="n" rel="next">Text-Only Mouse</a>, Previous: <a href="#Mouse-Avoidance" accesskey="p" rel="prev">Mouse Avoidance</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Non_002dWindow-Terminals-1"></a>
<h3 class="section">21.21 Non-Window Terminals</h3>
<a name="index-text-terminal"></a>

<p>On a text terminal, Emacs can display only one Emacs frame at a
time.  However, you can still create multiple Emacs frames, and switch
between them.  Switching frames on these terminals is much like
switching between different window configurations.

</p>
<p>Use <kbd>C-x 5 2</kbd> to create a new frame and switch to it; use <kbd>C-x
5 o</kbd> to cycle through the existing frames; use <kbd>C-x 5 0</kbd> to delete
the current frame.

</p>
<p>Each frame has a number to distinguish it.  If your terminal can
display only one frame at a time, the selected frame’s number <var>n</var>
appears near the beginning of the mode line, in the form
‘<samp>F<var>n</var></samp>’.

</p>
<a name="index-set_002dframe_002dname"></a>
<a name="index-select_002dframe_002dby_002dname"></a>
<p>‘<samp>F<var>n</var></samp>’ is in fact the frame’s initial name.  You can give
frames more meaningful names if you wish, and you can select a frame
by its name.  Use the command <kbd>M-x set-frame-name <span class="key">RET</span>
<var>name</var> <span class="key">RET</span></kbd> to specify a new name for the selected frame,
and use <kbd>M-x select-frame-by-name <span class="key">RET</span> <var>name</var> <span class="key">RET</span></kbd>
to select a frame according to its name.  The name you specify appears
in the mode line when the frame is selected.

</p>

<a name="Text_002dOnly-Mouse"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Non_002dWindow-Terminals" accesskey="p" rel="prev">Non-Window Terminals</a>, Up: <a href="#Frames" accesskey="u" rel="up">Frames</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Using-a-Mouse-in-Text-Terminals"></a>
<h3 class="section">21.22 Using a Mouse in Text Terminals</h3>
<a name="index-mouse-support"></a>
<a name="index-terminal-emulators_002c-mouse-support"></a>

<p>Some text terminals support mouse clicks in the terminal window.

</p>
<a name="index-xterm"></a>
<p>In a terminal emulator which is compatible with <code>xterm</code>, you
can use <kbd>M-x xterm-mouse-mode</kbd> to give Emacs control over simple
uses of the mouse—basically, only non-modified single clicks are
supported.  Newer versions of <code>xterm</code> also support
mouse-tracking.  The normal <code>xterm</code> mouse functionality for
such clicks is still available by holding down the <tt class="key">SHIFT</tt> key
when you press the mouse button.  Xterm Mouse mode is a global minor
mode (see <a href="#Minor-Modes">Minor Modes</a>).  Repeating the command turns the mode off
again.

</p>
<a name="index-gpm_002dmouse_002dmode"></a>
<p>In the console on GNU/Linux, you can use <kbd>M-x gpm-mouse-mode</kbd> to
enable mouse support.  You must have the gpm server installed and
running on your system in order for this to work.  Note that when
this mode is enabled, you cannot use the mouse to transfer text
between Emacs and other programs which use GPM.  This is due to
limitations in GPM and the Linux kernel.

</p>
<p>See <a href="#MS_002dDOS-Mouse">MS-DOS Mouse</a>,
for information about mouse support on MS-DOS.

</p><hr>
<a name="International"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Modes" accesskey="n" rel="next">Modes</a>, Previous: <a href="#Frames" accesskey="p" rel="prev">Frames</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="International-Character-Set-Support"></a>
<h2 class="chapter">22 International Character Set Support</h2>
<a name="index-international-scripts"></a>
<a name="index-multibyte-characters"></a>
<a name="index-encoding-of-characters"></a>

<a name="index-Han"></a>
<a name="index-Hindi"></a>
<a name="index-Hangul"></a>
<p>Emacs supports a wide variety of international character sets,
including European and Vietnamese variants of the Latin alphabet, as
well as Arabic scripts, Brahmic scripts (for languages such as
Bengali, Hindi, and Thai), Cyrillic, Ethiopic, Georgian, Greek, Han
(for Chinese and Japanese), Hangul (for Korean), Hebrew and IPA.
Emacs also supports various encodings of these characters that are used by
other internationalized software, such as word processors and mailers.

</p>
<p>Emacs allows editing text with international characters by supporting
all the related activities:

</p>
<ul>
<li>  You can visit files with non-<acronym>ASCII</acronym> characters, save non-<acronym>ASCII</acronym> text, and
pass non-<acronym>ASCII</acronym> text between Emacs and programs it invokes (such as
compilers, spell-checkers, and mailers).  Setting your language
environment (see <a href="#Language-Environments">Language Environments</a>) takes care of setting up the
coding systems and other options for a specific language or culture.
Alternatively, you can specify how Emacs should encode or decode text
for each command; see <a href="#Text-Coding">Text Coding</a>.



</li><li>  You can display non-<acronym>ASCII</acronym> characters encoded by the various
scripts.  This works by using appropriate fonts on graphics displays
(see <a href="#Defining-Fontsets">Defining Fontsets</a>), and by sending special codes to text
displays (see <a href="#Terminal-Coding">Terminal Coding</a>).  If some characters are displayed
incorrectly, refer to <a href="#Undisplayable-Characters">Undisplayable Characters</a>, which describes
possible problems and explains how to solve them.



</li><li>  Characters from scripts whose natural ordering of text is from right
to left are reordered for display (see <a href="#Bidirectional-Editing">Bidirectional Editing</a>).
These scripts include Arabic, Hebrew, Syriac, Thaana, and a few
others.



</li><li>  You can insert non-<acronym>ASCII</acronym> characters or search for them.  To do that,
you can specify an input method (see <a href="#Select-Input-Method">Select Input Method</a>) suitable
for your language, or use the default input method set up when you choose
your language environment.  If
your keyboard can produce non-<acronym>ASCII</acronym> characters, you can select an
appropriate keyboard coding system (see <a href="#Terminal-Coding">Terminal Coding</a>), and Emacs
will accept those characters.  Latin-1 characters can also be input by
using the <kbd>C-x 8</kbd> prefix, see <a href="#Unibyte-Mode">Unibyte Mode</a>.



<p>With the X Window System, your locale should be set to an appropriate
value to make sure Emacs interprets keyboard input correctly; see
<a href="#Language-Environments">locales</a>.

</p></li></ul>

<p>The rest of this chapter describes these issues in detail.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#International-Chars" accesskey="1">International Chars</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Basic concepts of multibyte characters.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Language-Environments" accesskey="2">Language Environments</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Setting things up for the language you use.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Input-Methods" accesskey="3">Input Methods</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Entering text characters not on your keyboard.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Select-Input-Method" accesskey="4">Select Input Method</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Specifying your choice of input methods.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Coding-Systems" accesskey="5">Coding Systems</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Character set conversion when you read and
                              write files, and so on.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Recognize-Coding" accesskey="6">Recognize Coding</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How Emacs figures out which conversion to use.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Specify-Coding" accesskey="7">Specify Coding</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Specifying a file’s coding system explicitly.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Output-Coding" accesskey="8">Output Coding</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Choosing coding systems for output.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Text-Coding" accesskey="9">Text Coding</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Choosing conversion to use for file text.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Communication-Coding">Communication Coding</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Coding systems for interprocess communication.

</td></tr>
<tr><td align="left" valign="top">• <a href="#File-Name-Coding">File Name Coding</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Coding systems for file <em>names</em>.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Terminal-Coding">Terminal Coding</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Specifying coding systems for converting
                              terminal input and output.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Fontsets">Fontsets</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Fontsets are collections of fonts
                              that cover the whole spectrum of characters.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Defining-Fontsets">Defining Fontsets</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Defining a new fontset.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Modifying-Fontsets">Modifying Fontsets</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Modifying an existing fontset.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Undisplayable-Characters">Undisplayable Characters</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">When characters don’t display.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Unibyte-Mode">Unibyte Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">You can pick one European character set
                              to use without multibyte characters.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Charsets">Charsets</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How Emacs groups its internal character codes.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Bidirectional-Editing">Bidirectional Editing</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Support for right-to-left scripts.

</td></tr>
</tbody></table>


<a name="International-Chars"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Language-Environments" accesskey="n" rel="next">Language Environments</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Introduction-to-International-Character-Sets"></a>
<h3 class="section">22.1 Introduction to International Character Sets</h3>

<p>The users of international character sets and scripts have
established many more-or-less standard coding systems for storing
files.  These coding systems are typically <em>multibyte</em>, meaning
that sequences of two or more bytes are used to represent individual
non-<acronym>ASCII</acronym> characters.

</p>
<a name="index-Unicode"></a>
<p>Internally, Emacs uses its own multibyte character encoding, which
is a superset of the <em>Unicode</em> standard.  This internal encoding
allows characters from almost every known script to be intermixed in a
single buffer or string.  Emacs translates between the multibyte
character encoding and various other coding systems when reading and
writing files, and when exchanging data with subprocesses.

</p>
<a name="index-C_002dh-h"></a>
<a name="index-view_002dhello_002dfile"></a>
<a name="index-undisplayable-characters"></a>
<a name="index-_003f-in-display"></a>
<p>The command <kbd>C-h h</kbd> (<code>view-hello-file</code>) displays the file
<samp>etc/HELLO</samp>, which illustrates various scripts by showing
how to say “hello” in many languages.  If some characters can’t be
displayed on your terminal, they appear as ‘<samp>?</samp>’ or as hollow boxes
(see <a href="#Undisplayable-Characters">Undisplayable Characters</a>).

</p>
<p>Keyboards, even in the countries where these character sets are
used, generally don’t have keys for all the characters in them.  You
can insert characters that your keyboard does not support, using
<kbd>C-x 8 <span class="key">RET</span></kbd> (<code>insert-char</code>).  See <a href="#Inserting-Text">Inserting Text</a>.
Shorthands are available for some common characters; for example, you
can insert a left single quotation mark <tt>‘</tt> by typing <kbd>C-x 8
[</kbd>, or in Electric Quote mode, usually by simply typing <kbd>`</kbd>.
See <a href="#Quotation-Marks">Quotation Marks</a>.  Emacs also supports
various <em>input methods</em>, typically one for each script or
language, which make it easier to type characters in the script.
See <a href="#Input-Methods">Input Methods</a>.

</p>
<a name="index-C_002dx-RET"></a>
<p>The prefix key <kbd>C-x <span class="key">RET</span></kbd> is used for commands that pertain
to multibyte characters, coding systems, and input methods.

</p>
<a name="index-C_002dx-_003d_002c-and-international-characters"></a>
<a name="index-what_002dcursor_002dposition_002c-and-international-characters"></a>
<p>The command <kbd>C-x =</kbd> (<code>what-cursor-position</code>) shows
information about the character at point.  In addition to the
character position, which was described in <a href="#Position-Info">Position Info</a>, this
command displays how the character is encoded.  For instance, it
displays the following line in the echo area for the character
‘<samp>c</samp>’:

</p>
<div class="smallexample">
<pre class="smallexample">Char: c (99, #o143, #x63) point=28062 of 36168 (78%) column=53
</pre></div>

<p>The four values after ‘<samp>Char:</samp>’ describe the character that
follows point, first by showing it and then by giving its character
code in decimal, octal and hex.  For a non-<acronym>ASCII</acronym> multibyte
character, these are followed by ‘<samp>file</samp>’ and the character’s
representation, in hex, in the buffer’s coding system, if that coding
system encodes the character safely and with a single byte
(see <a href="#Coding-Systems">Coding Systems</a>).  If the character’s encoding is longer than
one byte, Emacs shows ‘<samp>file ...</samp>’.

</p>
<a name="index-eight_002dbit-character-set"></a>
<a name="index-raw-bytes"></a>
<p>On rare occasions, Emacs encounters <em>raw bytes</em>: single bytes
whose values are in the range 128 (0200 octal) through 255 (0377
octal), which Emacs cannot interpret as part of a known encoding of
some non-ASCII character.  Such raw bytes are treated as if they
belonged to a special character set <code>eight-bit</code>; Emacs displays
them as escaped octal codes (this can be customized; see <a href="#Display-Custom">Display Custom</a>).  In this case, <kbd>C-x =</kbd> shows ‘<samp>raw-byte</samp>’ instead of
‘<samp>file</samp>’.  In addition, <kbd>C-x =</kbd> shows the character codes of
raw bytes as if they were in the range <code>#x3FFF80..#x3FFFFF</code>,
which is where Emacs maps them to distinguish them from Unicode
characters in the range <code>#x0080..#x00FF</code>.

</p>
<a name="index-character-set-of-character-at-point"></a>
<a name="index-font-of-character-at-point"></a>
<a name="index-text-properties-at-point"></a>
<a name="index-face-at-point"></a>
<p>With a prefix argument (<kbd>C-u C-x =</kbd>), this command displays a
detailed description of the character in a window:

</p>
<ul>
<li>  The character set name, and the codes that identify the character
within that character set; <acronym>ASCII</acronym> characters are identified
as belonging to the <code>ascii</code> character set.



</li><li>  The character’s script, syntax and categories.



</li><li>  What keys to type to input the character in the current input method
(if it supports the character).



</li><li>  The character’s encodings, both internally in the buffer, and externally
if you were to save the buffer to a file.



</li><li>  If you are running Emacs on a graphical display, the font name and
glyph code for the character.  If you are running Emacs on a text
terminal, the code(s) sent to the terminal.



</li><li>  If the character was composed on display with any following characters
to form one or more grapheme clusters, the composition information:
the font glyphs if the frame is on a graphical display, else the
characters that were composed.



</li><li>  The character’s text properties (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Text-Properties">Text Properties</a> in <cite>the Emacs Lisp Reference Manual</cite>), including any non-default
faces used to display the character, and any overlays containing it
(see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Overlays">Overlays</a> in <cite>the same manual</cite>).

</li></ul>

<p>Here’s an example, with some lines folded to fit into this manual:

</p>
<div class="smallexample">
<pre class="smallexample">             position: 1 of 1 (0%), column: 0
            character: ê (displayed as ê) (codepoint 234, #o352, #xea)
    preferred charset: unicode (Unicode (ISO10646))
code point in charset: 0xEA
               script: latin
               syntax: w        which means: word
             category: .:Base, L:Left-to-right (strong), c:Chinese,
                       j:Japanese, l:Latin, v:Viet
             to input: type "C-x 8 RET ea" or
                       "C-x 8 RET LATIN SMALL LETTER E WITH CIRCUMFLEX"
          buffer code: #xC3 #xAA
            file code: #xC3 #xAA (encoded by coding system utf-8-unix)
              display: by this font (glyph code)
    xft:-PfEd-DejaVu Sans Mono-normal-normal-
        normal-*-15-*-*-*-m-0-iso10646-1 (#xAC)

Character code properties: customize what to show
  name: LATIN SMALL LETTER E WITH CIRCUMFLEX
  old-name: LATIN SMALL LETTER E CIRCUMFLEX
  general-category: Ll (Letter, Lowercase)
  decomposition: (101 770) ('e' '^')
</pre></div>


<a name="Language-Environments"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Input-Methods" accesskey="n" rel="next">Input Methods</a>, Previous: <a href="#International-Chars" accesskey="p" rel="prev">International Chars</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Language-Environments-1"></a>
<h3 class="section">22.2 Language Environments</h3>
<a name="index-language-environments"></a>

<p>All supported character sets are supported in Emacs buffers whenever
multibyte characters are enabled; there is no need to select a
particular language in order to display its characters.
However, it is important to select a <em>language
environment</em> in order to set various defaults.  Roughly speaking, the
language environment represents a choice of preferred script rather
than a choice of language.

</p>
<p>The language environment controls which coding systems to recognize
when reading text (see <a href="#Recognize-Coding">Recognize Coding</a>).  This applies to files,
incoming mail, and any other text you read into Emacs.  It may also
specify the default coding system to use when you create a file.  Each
language environment also specifies a default input method.

</p>
<a name="index-set_002dlanguage_002denvironment"></a>
<a name="index-current_002dlanguage_002denvironment"></a>
<p>To select a language environment, customize
<code>current-language-environment</code> or use the command <kbd>M-x
set-language-environment</kbd>.  It makes no difference which buffer is
current when you use this command, because the effects apply globally
to the Emacs session.  See the variable <code>language-info-alist</code> for
the list of supported language environments, and use the command
<kbd>C-h L <var>lang-env</var> <span class="key">RET</span></kbd> (<code>describe-language-environment</code>)
for more information about the language environment <var>lang-env</var>.
Supported language environments include:

</p>
<blockquote>
<a name="index-ASCII-_0028language-environment_0029"></a>
<a name="index-Arabic"></a>
<p>ASCII, Arabic,
<a name="index-Belarusian"></a>
<a name="index-Bengali"></a>
Belarusian, Bengali,
<a name="index-Brazilian-Portuguese"></a>
<a name="index-Bulgarian"></a>
Brazilian Portuguese, Bulgarian,
<a name="index-Burmese"></a>
<a name="index-Cham"></a>
Burmese, Cham,
<a name="index-Chinese"></a>
Chinese-BIG5, Chinese-CNS, Chinese-EUC-TW, Chinese-GB,
Chinese-GB18030, Chinese-GBK,
<a name="index-Croatian"></a>
<a name="index-Cyrillic"></a>
Croatian, Cyrillic-ALT, Cyrillic-ISO, Cyrillic-KOI8,
<a name="index-Czech"></a>
<a name="index-Devanagari"></a>
Czech, Devanagari,
<a name="index-Dutch"></a>
<a name="index-English"></a>
Dutch, English,
<a name="index-Esperanto"></a>
<a name="index-Ethiopic"></a>
Esperanto, Ethiopic,
<a name="index-French"></a>
<a name="index-Georgian"></a>
French, Georgian,
<a name="index-German"></a>
<a name="index-Greek"></a>
<a name="index-Gujarati"></a>
German, Greek, Gujarati,
<a name="index-Hebrew"></a>
<a name="index-IPA"></a>
Hebrew, IPA,
<a name="index-Italian"></a>
Italian,
<a name="index-Japanese"></a>
<a name="index-Kannada"></a>
Japanese, Kannada,
<a name="index-Khmer"></a>
<a name="index-Korean"></a>
<a name="index-Lao"></a>
Khmer, Korean, Lao,
<a name="index-Latin"></a>
Latin-1, Latin-2, Latin-3, Latin-4, Latin-5, Latin-6, Latin-7,
Latin-8, Latin-9,
<a name="index-Latvian"></a>
<a name="index-Lithuanian"></a>
Latvian, Lithuanian,
<a name="index-Malayalam"></a>
<a name="index-Oriya"></a>
Malayalam, Oriya,
<a name="index-Persian"></a>
<a name="index-Polish"></a>
Persian, Polish,
<a name="index-Punjabi"></a>
<a name="index-Romanian"></a>
Punjabi, Romanian,
<a name="index-Russian"></a>
<a name="index-Sinhala"></a>
Russian, Sinhala,
<a name="index-Slovak"></a>
<a name="index-Slovenian"></a>
<a name="index-Spanish"></a>
Slovak, Slovenian, Spanish,
<a name="index-Swedish"></a>
<a name="index-TaiViet"></a>
Swedish, TaiViet,
<a name="index-Tajik"></a>
<a name="index-Tamil"></a>
Tajik, Tamil,
<a name="index-Telugu"></a>
<a name="index-Thai"></a>
Telugu, Thai,
<a name="index-Tibetan"></a>
<a name="index-Turkish"></a>
Tibetan, Turkish,
<a name="index-UTF_002d8"></a>
<a name="index-Ukrainian"></a>
UTF-8, Ukrainian,
<a name="index-Vietnamese"></a>
<a name="index-Welsh"></a>
Vietnamese, Welsh,
<a name="index-Windows_002d1255"></a>
and Windows-1255.

</p></blockquote>

<p>To display the script(s) used by your language environment on a
graphical display, you need to have suitable fonts.
See <a href="#Fontsets">Fontsets</a>, for more details about setting up your fonts.

</p>
<a name="index-set_002dlocale_002denvironment"></a>
<a name="index-locale_002dlanguage_002dnames"></a>
<a name="index-locale_002dcharset_002dlanguage_002dnames"></a>
<a name="index-locales"></a>
<p>Some operating systems let you specify the character-set locale you
are using by setting the locale environment variables <code>LC_ALL</code>,
<code>LC_CTYPE</code>, or <code>LANG</code>.  (If more than one of these is
set, the first one that is nonempty specifies your locale for this
purpose.)  During startup, Emacs looks up your character-set locale’s
name in the system locale alias table, matches its canonical name
against entries in the value of the variables
<code>locale-charset-language-names</code> and <code>locale-language-names</code>
(the former overrides the latter),
and selects the corresponding language environment if a match is found.
It also adjusts the display
table and terminal coding system, the locale coding system, the
preferred coding system as needed for the locale, and—last but not
least—the way Emacs decodes non-<acronym>ASCII</acronym> characters sent by your keyboard.

</p>
<p>If you modify the <code>LC_ALL</code>, <code>LC_CTYPE</code>, or <code>LANG</code>
environment variables while running Emacs (by using <kbd>M-x setenv</kbd>),
you may want to invoke the <code>set-locale-environment</code>
command afterwards to readjust the language environment from the new
locale.

</p>
<a name="index-locale_002dpreferred_002dcoding_002dsystems"></a>
<p>The <code>set-locale-environment</code> function normally uses the preferred
coding system established by the language environment to decode system
messages.  But if your locale matches an entry in the variable
<code>locale-preferred-coding-systems</code>, Emacs uses the corresponding
coding system instead.  For example, if the locale ‘<samp>ja_JP.PCK</samp>’
matches <code>japanese-shift-jis</code> in
<code>locale-preferred-coding-systems</code>, Emacs uses that encoding even
though it might normally use <code>utf-8</code>.

</p>
<p>You can override the language environment chosen at startup with
explicit use of the command <code>set-language-environment</code>, or with
customization of <code>current-language-environment</code> in your init
file.

</p>
<a name="index-C_002dh-L"></a>
<a name="index-describe_002dlanguage_002denvironment"></a>
<p>To display information about the effects of a certain language
environment <var>lang-env</var>, use the command <kbd>C-h L <var>lang-env</var>
<span class="key">RET</span></kbd> (<code>describe-language-environment</code>).  This tells you
which languages this language environment is useful for, and lists the
character sets, coding systems, and input methods that go with it.  It
also shows some sample text to illustrate scripts used in this
language environment.  If you give an empty input for <var>lang-env</var>,
this command describes the chosen language environment.

</p>
<a name="index-set_002dlanguage_002denvironment_002dhook"></a>
<p>You can customize any language environment with the normal hook
<code>set-language-environment-hook</code>.  The command
<code>set-language-environment</code> runs that hook after setting up the new
language environment.  The hook functions can test for a specific
language environment by checking the variable
<code>current-language-environment</code>.  This hook is where you should
put non-default settings for specific language environments, such as
coding systems for keyboard input and terminal output, the default
input method, etc.

</p>
<a name="index-exit_002dlanguage_002denvironment_002dhook"></a>
<p>Before it starts to set up the new language environment,
<code>set-language-environment</code> first runs the hook
<code>exit-language-environment-hook</code>.  This hook is useful for undoing
customizations that were made with <code>set-language-environment-hook</code>.
For instance, if you set up a special key binding in a specific language
environment using <code>set-language-environment-hook</code>, you should set
up <code>exit-language-environment-hook</code> to restore the normal binding
for that key.

</p>

<a name="Input-Methods"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Select-Input-Method" accesskey="n" rel="next">Select Input Method</a>, Previous: <a href="#Language-Environments" accesskey="p" rel="prev">Language Environments</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Input-Methods-1"></a>
<h3 class="section">22.3 Input Methods</h3>

<a name="index-input-methods"></a>
<p>An <em>input method</em> is a kind of character conversion designed
specifically for interactive input.  In Emacs, typically each language
has its own input method; sometimes several languages that use the same
characters can share one input method.  A few languages support several
input methods.

</p>
<p>The simplest kind of input method works by mapping <acronym>ASCII</acronym> letters
into another alphabet; this allows you to use one other alphabet
instead of <acronym>ASCII</acronym>.  The Greek and Russian input methods
work this way.

</p>
<p>A more powerful technique is composition: converting sequences of
characters into one letter.  Many European input methods use composition
to produce a single non-<acronym>ASCII</acronym> letter from a sequence that consists of a
letter followed by accent characters (or vice versa).  For example, some
methods convert the sequence <kbd>o ^</kbd> into a single accented letter.
These input methods have no special commands of their own; all they do
is compose sequences of printing characters.

</p>
<p>The input methods for syllabic scripts typically use mapping followed
by composition.  The input methods for Thai and Korean work this way.
First, letters are mapped into symbols for particular sounds or tone
marks; then, sequences of these that make up a whole syllable are
mapped into one syllable sign.

</p>
<p>Chinese and Japanese require more complex methods.  In Chinese input
methods, first you enter the phonetic spelling of a Chinese word (in
input method <code>chinese-py</code>, among others), or a sequence of
portions of the character (input methods <code>chinese-4corner</code> and
<code>chinese-sw</code>, and others).  One input sequence typically
corresponds to many possible Chinese characters.  You select the one
you mean using keys such as <kbd>C-f</kbd>, <kbd>C-b</kbd>, <kbd>C-n</kbd>,
<kbd>C-p</kbd> (or the arrow keys), and digits, which have special meanings
in this situation.

</p>
<p>The possible characters are conceptually arranged in several rows,
with each row holding up to 10 alternatives.  Normally, Emacs displays
just one row at a time, in the echo area; <code>(<var>i</var>/<var>j</var>)</code>
appears at the beginning, to indicate that this is the <var>i</var>th row
out of a total of <var>j</var> rows.  Type <kbd>C-n</kbd> or <kbd>C-p</kbd> to
display the next row or the previous row.

</p>
<p>Type <kbd>C-f</kbd> and <kbd>C-b</kbd> to move forward and backward among
the alternatives in the current row.  As you do this, Emacs highlights
the current alternative with a special color; type <kbd>C-<span class="key">SPC</span></kbd>
to select the current alternative and use it as input.  The
alternatives in the row are also numbered; the number appears before
the alternative.  Typing a number selects the associated alternative
of the current row and uses it as input.

</p>
<p><tt class="key">TAB</tt> in these Chinese input methods displays a buffer showing
all the possible characters at once; then clicking <kbd>mouse-2</kbd> on
one of them selects that alternative.  The keys <kbd>C-f</kbd>, <kbd>C-b</kbd>,
<kbd>C-n</kbd>, <kbd>C-p</kbd>, and digits continue to work as usual, but they
do the highlighting in the buffer showing the possible characters,
rather than in the echo area.

</p>
<p>To enter characters according to the <em>pīnyīn</em> transliteration
method instead, use the <code>chinese-sisheng</code> input method.  This is
a composition based method, where e.g. <kbd>pi1</kbd> results in ‘<samp>pī</samp>’.

</p>
<p>In Japanese input methods, first you input a whole word using
phonetic spelling; then, after the word is in the buffer, Emacs
converts it into one or more characters using a large dictionary.  One
phonetic spelling corresponds to a number of different Japanese words;
to select one of them, use <kbd>C-n</kbd> and <kbd>C-p</kbd> to cycle through
the alternatives.

</p>
<p>Sometimes it is useful to cut off input method processing so that the
characters you have just entered will not combine with subsequent
characters.  For example, in input method <code>latin-1-postfix</code>, the
sequence <kbd>o ^</kbd> combines to form an ‘<samp>o</samp>’ with an accent.  What if
you want to enter them as separate characters?

</p>
<p>One way is to type the accent twice; this is a special feature for
entering the separate letter and accent.  For example, <kbd>o ^ ^</kbd> gives
you the two characters ‘<samp>o^</samp>’.  Another way is to type another letter
after the <kbd>o</kbd>—something that won’t combine with that—and
immediately delete it.  For example, you could type <kbd>o o <span class="key">DEL</span>
^</kbd> to get separate ‘<samp>o</samp>’ and ‘<samp>^</samp>’.  Another method, more
general but not quite as easy to type, is to use <kbd>C-\ C-\</kbd> between
two characters to stop them from combining.  This is the command
<kbd>C-\</kbd> (<code>toggle-input-method</code>) used twice.
See <a href="#Select-Input-Method">Select Input Method</a>.

</p>
<a name="index-incremental-search_002c-input-method-interference"></a>
<p><kbd>C-\ C-\</kbd> is especially useful inside an incremental search,
because it stops waiting for more characters to combine, and starts
searching for what you have already entered.

</p>
<p>To find out how to input the character after point using the current
input method, type <kbd>C-u C-x =</kbd>.  See <a href="#Position-Info">Position Info</a>.

</p>
<a name="index-input_002dmethod_002dverbose_002dflag"></a>
<a name="index-input_002dmethod_002dhighlight_002dflag"></a>
<p>The variables <code>input-method-highlight-flag</code> and
<code>input-method-verbose-flag</code> control how input methods explain
what is happening.  If <code>input-method-highlight-flag</code> is
non-<code>nil</code>, the partial sequence is highlighted in the buffer (for
most input methods—some disable this feature).  If
<code>input-method-verbose-flag</code> is non-<code>nil</code>, the list of
possible characters to type next is displayed in the echo area (but
not when you are in the minibuffer).

</p>
<a name="index-quail_002dactivate_002dhook"></a>
<a name="index-quail_002dtranslation_002dkeymap"></a>
<p>You can modify how an input method works by making your changes in a
function that you add to the hook variable <code>quail-activate-hook</code>.
See <a href="#Hooks">Hooks</a>.  For example, you can redefine some of the input
method’s keys by defining key bindings in the keymap returned by the
function <code>quail-translation-keymap</code>, using <code>define-key</code>.
See <a href="#Init-Rebinding">Init Rebinding</a>.

</p>
<p>Another facility for typing characters not on your keyboard is by
using <kbd>C-x 8 <span class="key">RET</span></kbd> (<code>insert-char</code>) to insert a single
character based on its Unicode name or code-point; see <a href="#Inserting-Text">Inserting Text</a>.

</p>

<a name="Select-Input-Method"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Coding-Systems" accesskey="n" rel="next">Coding Systems</a>, Previous: <a href="#Input-Methods" accesskey="p" rel="prev">Input Methods</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Selecting-an-Input-Method"></a>
<h3 class="section">22.4 Selecting an Input Method</h3>

<dl compact="compact">
<dt><kbd>C-\</kbd></dt>
<dd><p>Enable or disable use of the selected input method (<code>toggle-input-method</code>).

</p>
</dd>
<dt><kbd>C-x <span class="key">RET</span> C-\ <var>method</var> <span class="key">RET</span></kbd></dt>
<dd><p>Select a new input method for the current buffer (<code>set-input-method</code>).

</p>
</dd>
<dt><kbd>C-h I <var>method</var> <span class="key">RET</span></kbd></dt>
<dt><kbd>C-h C-\ <var>method</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-describe_002dinput_002dmethod"></a>
<a name="index-C_002dh-I"></a>
<a name="index-C_002dh-C_002d_005c"></a>
<p>描述输入法<var>方法</var>(<code>describe-input-method</code>)。By default, it describes the current input method (if any). This description should give you the full details of how to use any particular input method.
</p>
</dd>
<dt><kbd>M-x list-input-methods</kbd></dt>
<dd><p>Display a list of all the supported input methods.

</p></dd>
</dl>

<a name="index-set_002dinput_002dmethod"></a>
<a name="index-current_002dinput_002dmethod"></a>
<a name="index-C_002dx-RET-C_002d_005c"></a>
<p>To choose an input method for the current buffer, use <kbd>C-x
<span class="key">RET</span> C-\</kbd> (<code>set-input-method</code>).  This command reads the
input method name from the minibuffer; the name normally starts with the
language environment that it is meant to be used with.  The variable
<code>current-input-method</code> records which input method is selected.

</p>
<a name="index-toggle_002dinput_002dmethod"></a>
<a name="index-C_002d_005c"></a>
<p>Input methods use various sequences of <acronym>ASCII</acronym> characters to
stand for non-<acronym>ASCII</acronym> characters.  Sometimes it is useful to
turn off the input method temporarily.  To do this, type <kbd>C-\</kbd>
(<code>toggle-input-method</code>).  To reenable the input method, type
<kbd>C-\</kbd> again.

</p>
<p>If you type <kbd>C-\</kbd> and you have not yet selected an input method,
it prompts you to specify one.  This has the same effect as using
<kbd>C-x <span class="key">RET</span> C-\</kbd> to specify an input method.

</p>
<p>When invoked with a numeric argument, as in <kbd>C-u C-\</kbd>,
<code>toggle-input-method</code> always prompts you for an input method,
suggesting the most recently selected one as the default.

</p>
<a name="index-default_002dinput_002dmethod"></a>
<p>Selecting a language environment specifies a default input method for
use in various buffers.  When you have a default input method, you can
select it in the current buffer by typing <kbd>C-\</kbd>.  The variable
<code>default-input-method</code> specifies the default input method
(<code>nil</code> means there is none).

</p>
<p>In some language environments, which support several different input methods, you might want to use an input method different from the default chosen by <code>set-language-environment</code>. You can instruct Emacs to select a different default input method for a certain language environment, if you wish, by using <code>set-language-environment-hook</code> (see <a href="#Language-Environments">set-language-environment-hook</a>). 例如：
</p>
<div class="lisp">
<pre class="lisp">(defun my-chinese-setup ()
  "Set up my private Chinese environment."
  (if (equal current-language-environment "Chinese-GB")
      (setq default-input-method "chinese-tonepy")))
(add-hook 'set-language-environment-hook 'my-chinese-setup)
</pre></div>

<p>This sets the default input method to be <code>chinese-tonepy</code>
whenever you choose a Chinese-GB language environment.

</p>
<p>You can instruct Emacs to activate a certain input method automatically. 例如：
</p>
<div class="lisp">
<pre class="lisp">(add-hook 'text-mode-hook
  (lambda () (set-input-method "german-prefix")))
</pre></div>

<p>This automatically activates the input method <code>german-prefix</code> in
Text mode.

</p>
<a name="index-quail_002dset_002dkeyboard_002dlayout"></a>
<p>Some input methods for alphabetic scripts work by (in effect)
remapping the keyboard to emulate various keyboard layouts commonly used
for those scripts.  How to do this remapping properly depends on your
actual keyboard layout.  To specify which layout your keyboard has, use
the command <kbd>M-x quail-set-keyboard-layout</kbd>.

</p>
<a name="index-quail_002dshow_002dkey"></a>
<p>You can use the command <kbd>M-x quail-show-key</kbd> to show what key (or
key sequence) to type in order to input the character following point,
using the selected keyboard layout.  The command <kbd>C-u C-x =</kbd> also
shows that information, in addition to other information about the
character.

</p>
<a name="index-list_002dinput_002dmethods"></a>
<p><kbd>M-x list-input-methods</kbd> displays a list of all the supported
input methods.  The list gives information about each input method,
including the string that stands for it in the mode line.

</p>

<a name="Coding-Systems"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Recognize-Coding" accesskey="n" rel="next">Recognize Coding</a>, Previous: <a href="#Select-Input-Method" accesskey="p" rel="prev">Select Input Method</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Coding-Systems-1"></a>
<h3 class="section">22.5 Coding Systems</h3>
<a name="index-coding-systems"></a>

<p>Users of various languages have established many more-or-less standard
coding systems for representing them.  Emacs does not use these coding
systems internally; instead, it converts from various coding systems to
its own system when reading data, and converts the internal coding
system to other coding systems when writing data.  Conversion is
possible in reading or writing files, in sending or receiving from the
terminal, and in exchanging data with subprocesses.

</p>
<p>Emacs assigns a name to each coding system.  Most coding systems are
used for one language, and the name of the coding system starts with
the language name.  Some coding systems are used for several
languages; their names usually start with ‘<samp>iso</samp>’.  There are also
special coding systems, such as <code>no-conversion</code>, <code>raw-text</code>,
and <code>emacs-internal</code>.

</p>
<a name="index-international-files-from-DOS_002fWindows-systems"></a>
<p>A special class of coding systems, collectively known as
<em>codepages</em>, is designed to support text encoded by MS-Windows and
MS-DOS software.  The names of these coding systems are
<code>cp<var>nnnn</var></code>, where <var>nnnn</var> is a 3- or 4-digit number of the
codepage.  You can use these encodings just like any other coding
system; for example, to visit a file encoded in codepage 850, type
<kbd>C-x <span class="key">RET</span> c cp850 <span class="key">RET</span> C-x C-f <var>filename</var>
<span class="key">RET</span></kbd>.

</p>
<p>In addition to converting various representations of non-<acronym>ASCII</acronym>
characters, a coding system can perform end-of-line conversion.  Emacs
handles three different conventions for how to separate lines in a file:
newline (Unix), carriage return followed by linefeed (DOS), and just
carriage return (Mac).

</p>
<dl compact="compact">
<dt><kbd>C-h C <var>coding</var> <span class="key">RET</span></kbd></dt>
<dd><p>Describe coding system <var>coding</var> (<code>describe-coding-system</code>).

</p>
</dd>
<dt><kbd>C-h C <span class="key">RET</span></kbd></dt>
<dd><p>Describe the coding systems currently in use (<code>describe-coding-system</code>).

</p>
</dd>
<dt><kbd>M-x list-coding-systems</kbd></dt>
<dd><p>Display a list of all the supported coding systems.

</p></dd>
</dl>

<a name="index-C_002dh-C"></a>
<a name="index-describe_002dcoding_002dsystem"></a>
<p>The command <kbd>C-h C</kbd> (<code>describe-coding-system</code>) displays
information about particular coding systems, including the end-of-line
conversion specified by those coding systems.  You can specify a coding
system name as the argument; alternatively, with an empty argument, it
describes the coding systems currently selected for various purposes,
both in the current buffer and as the defaults, and the priority list
for recognizing coding systems (see <a href="#Recognize-Coding">Recognize Coding</a>).

</p>
<a name="index-list_002dcoding_002dsystems"></a>
<p>To display a list of all the supported coding systems, type <kbd>M-x
list-coding-systems</kbd>.  The list gives information about each coding
system, including the letter that stands for it in the mode line
(see <a href="#Mode-Line">Mode Line</a>).

</p>
<a name="index-end_002dof_002dline-conversion"></a>
<a name="index-line-endings"></a>
<a name="index-MS_002dDOS-end_002dof_002dline-conversion"></a>
<a name="index-Macintosh-end_002dof_002dline-conversion"></a>
<p>Each of the coding systems that appear in this list—except for
<code>no-conversion</code>, which means no conversion of any kind—specifies
how and whether to convert printing characters, but leaves the choice of
end-of-line conversion to be decided based on the contents of each file.
For example, if the file appears to use the sequence carriage return
and linefeed to separate lines, DOS end-of-line conversion will be used.

</p>
<p>Each of the listed coding systems has three variants, which specify
exactly what to do for end-of-line conversion:

</p>
<dl compact="compact">
<dt><code>…-unix</code></dt>
<dd><p>Don’t do any end-of-line conversion; assume the file uses
newline to separate lines.  (This is the convention normally used
on Unix and GNU systems, and macOS.)

</p>
</dd>
<dt><code>…-dos</code></dt>
<dd><p>Assume the file uses carriage return followed by linefeed to separate
lines, and do the appropriate conversion.  (This is the convention
normally used on Microsoft systems.<a name="DOCF8" href="#FOOT8"><sup>8</sup></a>)

</p>
</dd>
<dt><code>…-mac</code></dt>
<dd><p>Assume the file uses carriage return to separate lines, and do the
appropriate conversion.  (This was the convention used in Classic Mac
OS.)

</p></dd>
</dl>

<p>These variant coding systems are omitted from the
<code>list-coding-systems</code> display for brevity, since they are entirely
predictable.  For example, the coding system <code>iso-latin-1</code> has
variants <code>iso-latin-1-unix</code>, <code>iso-latin-1-dos</code> and
<code>iso-latin-1-mac</code>.

</p>
<a name="index-undecided_002c-coding-system"></a>
<p>The coding systems <code>unix</code>, <code>dos</code>, and <code>mac</code> are
aliases for <code>undecided-unix</code>, <code>undecided-dos</code>, and
<code>undecided-mac</code>, respectively.  These coding systems specify only
the end-of-line conversion, and leave the character code conversion to
be deduced from the text itself.

</p>
<a name="index-raw_002dtext_002c-coding-system"></a>
<p>The coding system <code>raw-text</code> is good for a file which is mainly
<acronym>ASCII</acronym> text, but may contain byte values above 127 that are
not meant to encode non-<acronym>ASCII</acronym> characters.  With
<code>raw-text</code>, Emacs copies those byte values unchanged, and sets
<code>enable-multibyte-characters</code> to <code>nil</code> in the current buffer
so that they will be interpreted properly.  <code>raw-text</code> handles
end-of-line conversion in the usual way, based on the data
encountered, and has the usual three variants to specify the kind of
end-of-line conversion to use.

</p>
<a name="index-no_002dconversion_002c-coding-system"></a>
<p>In contrast, the coding system <code>no-conversion</code> specifies no
character code conversion at all—none for non-<acronym>ASCII</acronym> byte values and
none for end of line.  This is useful for reading or writing binary
files, tar files, and other files that must be examined verbatim.  It,
too, sets <code>enable-multibyte-characters</code> to <code>nil</code>.

</p>
<p>The easiest way to edit a file with no conversion of any kind is with
the <kbd>M-x find-file-literally</kbd> command.  This uses
<code>no-conversion</code>, and also suppresses other Emacs features that
might convert the file contents before you see them.  See <a href="#Visiting">Visiting</a>.

</p>
<a name="index-emacs_002dinternal_002c-coding-system"></a>
<p>The coding system <code>emacs-internal</code> (or <code>utf-8-emacs</code>,
which is equivalent) means that the file contains non-<acronym>ASCII</acronym>
characters stored with the internal Emacs encoding.  This coding
system handles end-of-line conversion based on the data encountered,
and has the usual three variants to specify the kind of end-of-line
conversion.

</p>

<a name="Recognize-Coding"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Specify-Coding" accesskey="n" rel="next">Specify Coding</a>, Previous: <a href="#Coding-Systems" accesskey="p" rel="prev">Coding Systems</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Recognizing-Coding-Systems"></a>
<h3 class="section">22.6 Recognizing Coding Systems</h3>

<p>Whenever Emacs reads a given piece of text, it tries to recognize
which coding system to use.  This applies to files being read, output
from subprocesses, text from X selections, etc.  Emacs can select the
right coding system automatically most of the time—once you have
specified your preferences.

</p>
<p>Some coding systems can be recognized or distinguished by which byte
sequences appear in the data.  However, there are coding systems that
cannot be distinguished, not even potentially.  For example, there is no
way to distinguish between Latin-1 and Latin-2; they use the same byte
values with different meanings.

</p>
<p>Emacs handles this situation by means of a priority list of coding
systems.  Whenever Emacs reads a file, if you do not specify the coding
system to use, Emacs checks the data against each coding system,
starting with the first in priority and working down the list, until it
finds a coding system that fits the data.  Then it converts the file
contents assuming that they are represented in this coding system.

</p>
<p>The priority list of coding systems depends on the selected language
environment (see <a href="#Language-Environments">Language Environments</a>).  For example, if you use
French, you probably want Emacs to prefer Latin-1 to Latin-2; if you use
Czech, you probably want Latin-2 to be preferred.  This is one of the
reasons to specify a language environment.

</p>
<a name="index-prefer_002dcoding_002dsystem"></a>
<p>However, you can alter the coding system priority list in detail
with the command <kbd>M-x prefer-coding-system</kbd>.  This command reads
the name of a coding system from the minibuffer, and adds it to the
front of the priority list, so that it is preferred to all others.  If
you use this command several times, each use adds one element to the
front of the priority list.

</p>
<p>If you use a coding system that specifies the end-of-line conversion
type, such as <code>iso-8859-1-dos</code>, what this means is that Emacs
should attempt to recognize <code>iso-8859-1</code> with priority, and should
use DOS end-of-line conversion when it does recognize <code>iso-8859-1</code>.

</p>
<a name="index-file_002dcoding_002dsystem_002dalist"></a>
<p>Sometimes a file name indicates which coding system to use for the
file.  The variable <code>file-coding-system-alist</code> specifies this
correspondence.  There is a special function
<code>modify-coding-system-alist</code> for adding elements to this list.  For
example, to read and write all ‘<samp>.txt</samp>’ files using the coding system
<code>chinese-iso-8bit</code>, you can execute this Lisp expression:

</p>
<div class="smallexample">
<pre class="smallexample">(modify-coding-system-alist 'file "\\.txt\\'" 'chinese-iso-8bit)
</pre></div>

<p>The first argument should be <code>file</code>, the second argument should be
a regular expression that determines which files this applies to, and
the third argument says which coding system to use for these files.

</p>
<a name="index-inhibit_002deol_002dconversion"></a>
<a name="index-DOS_002dstyle-end_002dof_002dline-display"></a>
<p>Emacs recognizes which kind of end-of-line conversion to use based on
the contents of the file: if it sees only carriage returns, or only
carriage return followed by linefeed sequences, then it chooses the
end-of-line conversion accordingly.  You can inhibit the automatic use
of end-of-line conversion by setting the variable
<code>inhibit-eol-conversion</code> to non-<code>nil</code>.  If you do that,
DOS-style files will be displayed with the ‘<samp>^M</samp>’ characters
visible in the buffer; some people prefer this to the more subtle
‘<samp>(DOS)</samp>’ end-of-line type indication near the left edge of the
mode line (see <a href="#Mode-Line">eol-mnemonic</a>).

</p>
<a name="index-inhibit_002diso_002descape_002ddetection"></a>
<a name="index-escape-sequences-in-files"></a>
<p>By default, the automatic detection of the coding system is sensitive to
escape sequences.  If Emacs sees a sequence of characters that begin
with an escape character, and the sequence is valid as an ISO-2022
code, that tells Emacs to use one of the ISO-2022 encodings to decode
the file.

</p>
<p>However, there may be cases that you want to read escape sequences
in a file as is.  In such a case, you can set the variable
<code>inhibit-iso-escape-detection</code> to non-<code>nil</code>.  Then the code
detection ignores any escape sequences, and never uses an ISO-2022
encoding.  The result is that all escape sequences become visible in
the buffer.

</p>
<p>The default value of <code>inhibit-iso-escape-detection</code> is
<code>nil</code>.  We recommend that you not change it permanently, only for
one specific operation.  That’s because some Emacs Lisp source files
in the Emacs distribution contain non-<acronym>ASCII</acronym> characters encoded in the
coding system <code>iso-2022-7bit</code>, and they won’t be
decoded correctly when you visit those files if you suppress the
escape sequence detection.

</p>
<a name="index-auto_002dcoding_002dalist"></a>
<a name="index-auto_002dcoding_002dregexp_002dalist"></a>
<p>The variables <code>auto-coding-alist</code> and
<code>auto-coding-regexp-alist</code> are
the strongest way to specify the coding system for certain patterns of
file names, or for files containing certain patterns, respectively.
These variables even override ‘<samp>-*-coding:-*-</samp>’ tags in the file
itself (see <a href="#Specify-Coding">Specify Coding</a>).  For example, Emacs
uses <code>auto-coding-alist</code> for tar and archive files, to prevent it
from being confused by a ‘<samp>-*-coding:-*-</samp>’ tag in a member of the
archive and thinking it applies to the archive file as a whole.

</p>
<a name="index-auto_002dcoding_002dfunctions"></a>
<p>Another way to specify a coding system is with the variable
<code>auto-coding-functions</code>.  For example, one of the builtin
<code>auto-coding-functions</code> detects the encoding for XML files.
Unlike the previous two, this variable does not override any
‘<samp>-*-coding:-*-</samp>’ tag.

</p>

<a name="Specify-Coding"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Output-Coding" accesskey="n" rel="next">Output Coding</a>, Previous: <a href="#Recognize-Coding" accesskey="p" rel="prev">Recognize Coding</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Specifying-a-File_0027s-Coding-System"></a>
<h3 class="section">22.7 Specifying a File’s Coding System</h3>

<p>If Emacs recognizes the encoding of a file incorrectly, you can
reread the file using the correct coding system with <kbd>C-x
<span class="key">RET</span> r</kbd> (<code>revert-buffer-with-coding-system</code>).  This command
prompts for the coding system to use.  To see what coding system Emacs
actually used to decode the file, look at the coding system mnemonic
letter near the left edge of the mode line (see <a href="#Mode-Line">Mode Line</a>), or
type <kbd>C-h C</kbd> (<code>describe-coding-system</code>).

</p>
<a name="index-coding"></a>
<p>You can specify the coding system for a particular file in the file
itself, using the ‘<samp><span class="nolinebreak">-*-</span>…<span class="nolinebreak">-*-</span></samp>’<!-- /@w -->  construct at the beginning,
or a local variables list at the end (see <a href="#File-Variables">File Variables</a>).  You do
this by defining a value for the “variable” named <code>coding</code>.
Emacs does not really have a variable <code>coding</code>; instead of
setting a variable, this uses the specified coding system for the
file.  For example, ‘<samp><span class="nolinebreak">-*-mode:</span>&nbsp;C;&nbsp;coding:&nbsp;<span class="nolinebreak">latin-1;</span>&nbsp;<span class="nolinebreak">-*-</span></samp>’<!-- /@w -->  specifies
use of the Latin-1 coding system, as well as C mode.  When you specify
the coding explicitly in the file, that overrides
<code>file-coding-system-alist</code>.

</p>

<a name="Output-Coding"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Text-Coding" accesskey="n" rel="next">Text Coding</a>, Previous: <a href="#Specify-Coding" accesskey="p" rel="prev">Specify Coding</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Choosing-Coding-Systems-for-Output"></a>
<h3 class="section">22.8 Choosing Coding Systems for Output</h3>

<a name="index-buffer_002dfile_002dcoding_002dsystem"></a>
<p>Once Emacs has chosen a coding system for a buffer, it stores that
coding system in <code>buffer-file-coding-system</code>.  That makes it the
default for operations that write from this buffer into a file, such
as <code>save-buffer</code> and <code>write-region</code>.  You can specify a
different coding system for further file output from the buffer using
<code>set-buffer-file-coding-system</code> (see <a href="#Text-Coding">Text Coding</a>).

</p>
<p>You can insert any character Emacs supports into any Emacs buffer,
but most coding systems can only handle a subset of these characters.
Therefore, it’s possible that the characters you insert cannot be
encoded with the coding system that will be used to save the buffer.
For example, you could visit a text file in Polish, encoded in
<code>iso-8859-2</code>, and add some Russian words to it.  When you save
that buffer, Emacs cannot use the current value of
<code>buffer-file-coding-system</code>, because the characters you added
cannot be encoded by that coding system.

</p>
<p>When that happens, Emacs tries the most-preferred coding system (set
by <kbd>M-x prefer-coding-system</kbd> or <kbd>M-x
set-language-environment</kbd>).  If that coding system can safely encode
all of the characters in the buffer, Emacs uses it, and stores its
value in <code>buffer-file-coding-system</code>.  Otherwise, Emacs displays
a list of coding systems suitable for encoding the buffer’s contents,
and asks you to choose one of those coding systems.

</p>
<p>If you insert the unsuitable characters in a mail message, Emacs
behaves a bit differently.  It additionally checks whether the
most-preferred coding system is recommended for use in MIME messages;
if not, it informs you of this fact and prompts you for another coding
system.  This is so you won’t inadvertently send a message encoded in
a way that your recipient’s mail software will have difficulty
decoding.  (You can still use an unsuitable coding system if you enter
its name at the prompt.)

</p>
<a name="index-sendmail_002dcoding_002dsystem"></a>
<p>When you send a mail message (see <a href="#Sending-Mail">Sending Mail</a>),
Emacs has four different ways to determine the coding system to use
for encoding the message text.  It first tries the buffer’s own value of
<code>buffer-file-coding-system</code>, if that is non-<code>nil</code>.
Otherwise, it uses the value of <code>sendmail-coding-system</code>, if that
is non-<code>nil</code>.  Thirdly, it uses the value of
<code>default-sendmail-coding-system</code>.
If all of these three values are <code>nil</code>, Emacs encodes outgoing
mail using the default coding system for new files (i.e., the
default value of <code>buffer-file-coding-system</code>), which is
controlled by your choice of language environment.

</p>

<a name="Text-Coding"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Communication-Coding" accesskey="n" rel="next">Communication Coding</a>, Previous: <a href="#Output-Coding" accesskey="p" rel="prev">Output Coding</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Specifying-a-Coding-System-for-File-Text"></a>
<h3 class="section">22.9 Specifying a Coding System for File Text</h3>

<p>In cases where Emacs does not automatically choose the right coding
system for a file’s contents, you can use these commands to specify
one:

</p>
<dl compact="compact">
<dt><kbd>C-x <span class="key">RET</span> f <var>coding</var> <span class="key">RET</span></kbd></dt>
<dd><p>Use coding system <var>coding</var> to save or revisit the file in
the current buffer (<code>set-buffer-file-coding-system</code>).

</p>
</dd>
<dt><kbd>C-x <span class="key">RET</span> c <var>coding</var> <span class="key">RET</span></kbd></dt>
<dd><p>Specify coding system <var>coding</var> for the immediately following
command (<code>universal-coding-system-argument</code>).

</p>
</dd>
<dt><kbd>C-x <span class="key">RET</span> r <var>coding</var> <span class="key">RET</span></kbd></dt>
<dd><p>Revisit the current file using the coding system <var>coding</var>
(<code>revert-buffer-with-coding-system</code>).

</p>
</dd>
<dt><kbd>M-x recode-region <span class="key">RET</span> <var>right</var> <span class="key">RET</span> <var>wrong</var> <span class="key">RET</span></kbd></dt>
<dd><p>Convert a region that was decoded using coding system <var>wrong</var>,
decoding it using coding system <var>right</var> instead.

</p></dd>
</dl>

<a name="index-C_002dx-RET-f"></a>
<a name="index-set_002dbuffer_002dfile_002dcoding_002dsystem"></a>
<p>The command <kbd>C-x <span class="key">RET</span> f</kbd>
(<code>set-buffer-file-coding-system</code>) sets the file coding system for
the current buffer (i.e., the coding system to use when saving or
reverting the file).  You specify which coding system using the
minibuffer.  You can also invoke this command by clicking with
<kbd>mouse-3</kbd> on the coding system indicator in the mode line
(see <a href="#Mode-Line">Mode Line</a>).

</p>
<p>If you specify a coding system that cannot handle all the characters
in the buffer, Emacs will warn you about the troublesome characters,
and ask you to choose another coding system, when you try to save the
buffer (see <a href="#Output-Coding">Output Coding</a>).

</p>
<a name="index-specify-end_002dof_002dline-conversion"></a>
<p>You can also use this command to specify the end-of-line conversion
(see <a href="#Coding-Systems">end-of-line conversion</a>) for encoding the
current buffer.  For example, <kbd>C-x <span class="key">RET</span> f dos <span class="key">RET</span></kbd> will
cause Emacs to save the current buffer’s text with DOS-style
carriage return followed by linefeed line endings.

</p>
<a name="index-C_002dx-RET-c"></a>
<a name="index-universal_002dcoding_002dsystem_002dargument"></a>
<p>Another way to specify the coding system for a file is when you visit
the file.  First use the command <kbd>C-x <span class="key">RET</span> c</kbd>
(<code>universal-coding-system-argument</code>); this command uses the
minibuffer to read a coding system name.  After you exit the minibuffer,
the specified coding system is used for <em>the immediately following
command</em>.

</p>
<p>So if the immediately following command is <kbd>C-x C-f</kbd>, for example,
it reads the file using that coding system (and records the coding
system for when you later save the file).  Or if the immediately following
command is <kbd>C-x C-w</kbd>, it writes the file using that coding system.
When you specify the coding system for saving in this way, instead
of with <kbd>C-x <span class="key">RET</span> f</kbd>, there is no warning if the buffer
contains characters that the coding system cannot handle.

</p>
<p>Other file commands affected by a specified coding system include
<kbd>C-x i</kbd> and <kbd>C-x C-v</kbd>, as well as the other-window variants
of <kbd>C-x C-f</kbd>.  <kbd>C-x <span class="key">RET</span> c</kbd> also affects commands that
start subprocesses, including <kbd>M-x shell</kbd> (see <a href="#Shell">Shell</a>).  If the
immediately following command does not use the coding system, then
<kbd>C-x <span class="key">RET</span> c</kbd> ultimately has no effect.

</p>
<p>An easy way to visit a file with no conversion is with the <kbd>M-x
find-file-literally</kbd> command.  See <a href="#Visiting">Visiting</a>.

</p>
<p>The default value of the variable <code>buffer-file-coding-system</code>
specifies the choice of coding system to use when you create a new file.
It applies when you find a new file, and when you create a buffer and
then save it in a file.  Selecting a language environment typically sets
this variable to a good choice of default coding system for that language
environment.

</p>
<a name="index-C_002dx-RET-r"></a>
<a name="index-revert_002dbuffer_002dwith_002dcoding_002dsystem"></a>
<p>If you visit a file with a wrong coding system, you can correct this
with <kbd>C-x <span class="key">RET</span> r</kbd> (<code>revert-buffer-with-coding-system</code>).
This visits the current file again, using a coding system you specify.

</p>
<a name="index-recode_002dregion"></a>
<p>If a piece of text has already been inserted into a buffer using the
wrong coding system, you can redo the decoding of it using <kbd>M-x
recode-region</kbd>.  This prompts you for the proper coding system, then
for the wrong coding system that was actually used, and does the
conversion.  It first encodes the region using the wrong coding system,
then decodes it again using the proper coding system.

</p>

<a name="Communication-Coding"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#File-Name-Coding" accesskey="n" rel="next">File Name Coding</a>, Previous: <a href="#Text-Coding" accesskey="p" rel="prev">Text Coding</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Coding-Systems-for-Interprocess-Communication"></a>
<h3 class="section">22.10 Coding Systems for Interprocess Communication</h3>

<p>This section explains how to specify coding systems for use
in communication with other processes.

</p>
<dl compact="compact">
<dt><kbd>C-x <span class="key">RET</span> x <var>coding</var> <span class="key">RET</span></kbd></dt>
<dd><p>Use coding system <var>coding</var> for transferring selections to and from
other graphical applications (<code>set-selection-coding-system</code>).

</p>
</dd>
<dt><kbd>C-x <span class="key">RET</span> X <var>coding</var> <span class="key">RET</span></kbd></dt>
<dd><p>Use coding system <var>coding</var> for transferring <em>one</em>
selection—the next one—to or from another graphical application
(<code>set-next-selection-coding-system</code>).

</p>
</dd>
<dt><kbd>C-x <span class="key">RET</span> p <var>input-coding</var> <span class="key">RET</span> <var>output-coding</var> <span class="key">RET</span></kbd></dt>
<dd><p>Use coding systems <var>input-coding</var> and <var>output-coding</var> for
subprocess input and output in the current buffer
(<code>set-buffer-process-coding-system</code>).

</p></dd>
</dl>

<a name="index-C_002dx-RET-x"></a>
<a name="index-C_002dx-RET-X"></a>
<a name="index-set_002dselection_002dcoding_002dsystem"></a>
<a name="index-set_002dnext_002dselection_002dcoding_002dsystem"></a>
<p>The command <kbd>C-x <span class="key">RET</span> x</kbd> (<code>set-selection-coding-system</code>)
specifies the coding system for sending selected text to other windowing
applications, and for receiving the text of selections made in other
applications.  This command applies to all subsequent selections, until
you override it by using the command again.  The command <kbd>C-x
<span class="key">RET</span> X</kbd> (<code>set-next-selection-coding-system</code>) specifies the
coding system for the next selection made in Emacs or read by Emacs.

</p>
<a name="index-x_002dselect_002drequest_002dtype"></a>
<p>The variable <code>x-select-request-type</code> specifies the data type to
request from the X Window System for receiving text selections from
other applications.  If the value is <code>nil</code> (the default), Emacs
tries <code>UTF8_STRING</code> and <code>COMPOUND_TEXT</code>, in this order, and
uses various heuristics to choose the more appropriate of the two
results; if none of these succeed, Emacs falls back on <code>STRING</code>.
If the value of <code>x-select-request-type</code> is one of the symbols
<code>COMPOUND_TEXT</code>, <code>UTF8_STRING</code>, <code>STRING</code>, or
<code>TEXT</code>, Emacs uses only that request type.  If the value is a
list of some of these symbols, Emacs tries only the request types in
the list, in order, until one of them succeeds, or until the list is
exhausted.

</p>
<a name="index-C_002dx-RET-p"></a>
<a name="index-set_002dbuffer_002dprocess_002dcoding_002dsystem"></a>
<p>The command <kbd>C-x <span class="key">RET</span> p</kbd> (<code>set-buffer-process-coding-system</code>)
specifies the coding system for input and output to a subprocess.  This
command applies to the current buffer; normally, each subprocess has its
own buffer, and thus you can use this command to specify translation to
and from a particular subprocess by giving the command in the
corresponding buffer.

</p>
<p>You can also use <kbd>C-x <span class="key">RET</span> c</kbd>
(<code>universal-coding-system-argument</code>) just before the command that
runs or starts a subprocess, to specify the coding system for
communicating with that subprocess.  See <a href="#Text-Coding">Text Coding</a>.

</p>
<p>The default for translation of process input and output depends on the
current language environment.

</p>
<a name="index-locale_002dcoding_002dsystem"></a>
<a name="index-decoding-non_002dASCII-keyboard-input-on-X"></a>
<p>The variable <code>locale-coding-system</code> specifies a coding system
to use when encoding and decoding system strings such as system error
messages and <code>format-time-string</code> formats and time stamps.  That
coding system is also used for decoding non-<acronym>ASCII</acronym> keyboard
input on the X Window System and for encoding text sent to the
standard output and error streams when in batch mode.  You should
choose a coding system that is compatible
with the underlying system’s text representation, which is normally
specified by one of the environment variables <code>LC_ALL</code>,
<code>LC_CTYPE</code>, and <code>LANG</code>.  (The first one, in the order
specified above, whose value is nonempty is the one that determines
the text representation.)

</p>

<a name="File-Name-Coding"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Terminal-Coding" accesskey="n" rel="next">Terminal Coding</a>, Previous: <a href="#Communication-Coding" accesskey="p" rel="prev">Communication Coding</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Coding-Systems-for-File-Names"></a>
<h3 class="section">22.11 Coding Systems for File Names</h3>

<dl compact="compact">
<dt><kbd>C-x <span class="key">RET</span> F <var>coding</var> <span class="key">RET</span></kbd></dt>
<dd><p>Use coding system <var>coding</var> for encoding and decoding file
names (<code>set-file-name-coding-system</code>).

</p></dd>
</dl>

<a name="index-set_002dfile_002dname_002dcoding_002dsystem"></a>
<a name="index-C_002dx-RET-F"></a>
<a name="index-file-names-with-non_002dASCII-characters"></a>
<p>The command <kbd>C-x <span class="key">RET</span> F</kbd> (<code>set-file-name-coding-system</code>)
specifies a coding system to use for encoding file <em>names</em>.  It
has no effect on reading and writing the <em>contents</em> of files.

</p>
<a name="index-file_002dname_002dcoding_002dsystem"></a>
<p>In fact, all this command does is set the value of the variable
<code>file-name-coding-system</code>.  If you set the variable to a coding
system name (as a Lisp symbol or a string), Emacs encodes file names
using that coding system for all file operations.  This makes it
possible to use non-<acronym>ASCII</acronym> characters in file names—or, at
least, those non-<acronym>ASCII</acronym> characters that the specified coding
system can encode.

</p>
<p>If <code>file-name-coding-system</code> is <code>nil</code>, Emacs uses a
default coding system determined by the selected language environment,
and stored in the <code>default-file-name-coding-system</code> variable.
In the default language environment, non-<acronym>ASCII</acronym> characters in
file names are not encoded specially; they appear in the file system
using the internal Emacs representation.

</p>
<a name="index-file_002dname-encoding_002c-MS_002dWindows"></a>
<a name="index-w32_002dunicode_002dfilenames"></a>
<p>When Emacs runs on MS-Windows versions that are descendants of the
NT family (Windows 2000, XP, and all the later versions), the value of
<code>file-name-coding-system</code> is largely ignored, as Emacs by default
uses APIs that allow passing Unicode file names directly.  By
contrast, on Windows 9X, file names are encoded using
<code>file-name-coding-system</code>, which should be set to the codepage
(see <a href="#Coding-Systems">codepage</a>) pertinent for the current system
locale.  The value of the variable <code>w32-unicode-filenames</code>
controls whether Emacs uses the Unicode APIs when it calls OS
functions that accept file names.  This variable is set by the startup
code to <code>nil</code> on Windows 9X, and to <code>t</code> on newer versions of
MS-Windows.

</p>
<p><strong>Warning:</strong> if you change <code>file-name-coding-system</code> (or the
language environment) in the middle of an Emacs session, problems can
result if you have already visited files whose names were encoded using
the earlier coding system and cannot be encoded (or are encoded
differently) under the new coding system.  If you try to save one of
these buffers under the visited file name, saving may use the wrong file
name, or it may encounter an error.  If such a problem happens, use <kbd>C-x
C-w</kbd> to specify a new file name for that buffer.

</p>
<a name="index-recode_002dfile_002dname"></a>
<p>If a mistake occurs when encoding a file name, use the command
<kbd>M-x recode-file-name</kbd> to change the file name’s coding
system.  This prompts for an existing file name, its old coding
system, and the coding system to which you wish to convert.

</p>

<a name="Terminal-Coding"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Fontsets" accesskey="n" rel="next">Fontsets</a>, Previous: <a href="#File-Name-Coding" accesskey="p" rel="prev">File Name Coding</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Coding-Systems-for-Terminal-I_002fO"></a>
<h3 class="section">22.12 Coding Systems for Terminal I/O</h3>

<dl compact="compact">
<dt><kbd>C-x <span class="key">RET</span> t <var>coding</var> <span class="key">RET</span></kbd></dt>
<dd><p>Use coding system <var>coding</var> for terminal output
(<code>set-terminal-coding-system</code>).

</p>
</dd>
<dt><kbd>C-x <span class="key">RET</span> k <var>coding</var> <span class="key">RET</span></kbd></dt>
<dd><p>Use coding system <var>coding</var> for keyboard input
(<code>set-keyboard-coding-system</code>).

</p></dd>
</dl>

<a name="index-C_002dx-RET-t"></a>
<a name="index-set_002dterminal_002dcoding_002dsystem"></a>
<p>The command <kbd>C-x <span class="key">RET</span> t</kbd> (<code>set-terminal-coding-system</code>)
specifies the coding system for terminal output.  If you specify a
character code for terminal output, all characters output to the
terminal are translated into that coding system.

</p>
<p>This feature is useful for certain character-only terminals built to
support specific languages or character sets—for example, European
terminals that support one of the ISO Latin character sets.  You need to
specify the terminal coding system when using multibyte text, so that
Emacs knows which characters the terminal can actually handle.

</p>
<p>By default, output to the terminal is not translated at all, unless
Emacs can deduce the proper coding system from your terminal type or
your locale specification (see <a href="#Language-Environments">Language Environments</a>).

</p>
<a name="index-C_002dx-RET-k"></a>
<a name="index-set_002dkeyboard_002dcoding_002dsystem"></a>
<a name="index-keyboard_002dcoding_002dsystem"></a>
<p>The command <kbd>C-x <span class="key">RET</span> k</kbd> (<code>set-keyboard-coding-system</code>),
or the variable <code>keyboard-coding-system</code>, specifies the coding
system for keyboard input.  Character-code translation of keyboard
input is useful for terminals with keys that send non-<acronym>ASCII</acronym>
graphic characters—for example, some terminals designed for ISO
Latin-1 or subsets of it.

</p>
<p>By default, keyboard input is translated based on your system locale
setting.  If your terminal does not really support the encoding
implied by your locale (for example, if you find it inserts a
non-<acronym>ASCII</acronym> character if you type <kbd>M-i</kbd>), you will need to set
<code>keyboard-coding-system</code> to <code>nil</code> to turn off encoding.
You can do this by putting

</p>
<div class="lisp">
<pre class="lisp">(set-keyboard-coding-system nil)
</pre></div>

<p>in your init file.

</p>
<p>There is a similarity between using a coding system translation for
keyboard input, and using an input method: both define sequences of
keyboard input that translate into single characters.  However, input
methods are designed to be convenient for interactive use by humans, and
the sequences that are translated are typically sequences of <acronym>ASCII</acronym>
printing characters.  Coding systems typically translate sequences of
non-graphic characters.

</p>

<a name="Fontsets"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Defining-Fontsets" accesskey="n" rel="next">Defining Fontsets</a>, Previous: <a href="#Terminal-Coding" accesskey="p" rel="prev">Terminal Coding</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Fontsets-1"></a>
<h3 class="section">22.13 Fontsets</h3>
<a name="index-fontsets"></a>

<p>A font typically defines shapes for a single alphabet or script.
Therefore, displaying the entire range of scripts that Emacs supports
requires a collection of many fonts.  In Emacs, such a collection is
called a <em>fontset</em>.  A fontset is defined by a list of font specifications,
each assigned to handle a range of character codes, and may fall back
on another fontset for characters that are not covered by the fonts
it specifies.

</p>
<a name="index-fonts-for-various-scripts"></a>
<a name="index-Intlfonts-package_002c-installation"></a>
<p>Each fontset has a name, like a font.  However, while fonts are
stored in the system and the available font names are defined by the
system, fontsets are defined within Emacs itself.  Once you have
defined a fontset, you can use it within Emacs by specifying its name,
anywhere that you could use a single font.  Of course, Emacs fontsets
can use only the fonts that your system supports.  If some characters
appear on the screen as empty boxes or hex codes, this means that the
fontset in use for them has no font for those characters.  In this
case, or if the characters are shown, but not as well as you would
like, you may need to install extra fonts or modify the fontset to use
specific fonts already installed on your system (see below).  Your
operating system may have optional fonts that you can install; or you
can install the GNU Intlfonts package, which includes fonts for most
supported scripts.<a name="DOCF9" href="#FOOT9"><sup>9</sup></a>
</p>
<p>Emacs creates three fontsets automatically: the <em>standard fontset</em>, the <em>startup fontset</em> and the <em>default fontset</em>. The default fontset is most likely to have fonts for a wide variety of non-<acronym>ASCII</acronym> characters, and is the default fallback for the other two fontsets, and if you set a default font rather than fontset. However, it does not specify font family names, so results can be somewhat random if you use it directly. You can specify a particular fontset by starting Emacs with the ‘<samp>-fn</samp>’ option. 例如,
</p>
<div class="example">
<pre class="example">emacs -fn fontset-standard
</pre></div>

<p>You can also specify a fontset with the ‘<samp>Font</samp>’ resource (see <a href="#X-Resources">X Resources</a>).

</p>
<p>If no fontset is specified for use, then Emacs uses an
<acronym>ASCII</acronym> font, with ‘<samp>fontset-default</samp>’ as a fallback for
characters the font does not cover.  The standard fontset is only used if
explicitly requested, despite its name.

</p>
<a name="index-describe_002dfontset"></a>
<p>To show the information about a specific fontset, use the
<kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">describe-fontset</span></kbd><!-- /@w -->  command.  It prompts for a fontset
name, defaulting to the one used by the current frame, and then
displays all the subranges of characters and the fonts assigned to
them in that fontset.  To see which fonts Emacs is using in a session
started without a specific fontset (which is what happens normally),
type <kbd>fontset-default <span class="key">RET</span></kbd> at the prompt, or just
<kbd><span class="key">RET</span></kbd> to describe the fontset used by the current frame.

</p>
<p>A fontset does not necessarily specify a font for every character
code.  If a fontset specifies no font for a certain character, or if
it specifies a font that does not exist on your system, then it cannot
display that character properly.  It will display that character as a
hex code or thin space or an empty box instead.  (See <a href="#Text-Display">glyphless characters</a>, for details.)  Or a fontset might specify a
font for some range of characters, but you may not like their visual
appearance.  If this happens, you may wish to modify your fontset; see
<a href="#Modifying-Fontsets">Modifying Fontsets</a>, for how to do that.

</p>

<a name="Defining-Fontsets"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Modifying-Fontsets" accesskey="n" rel="next">Modifying Fontsets</a>, Previous: <a href="#Fontsets" accesskey="p" rel="prev">Fontsets</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Defining-Fontsets-1"></a>
<h3 class="section">22.14 Defining Fontsets</h3>

<a name="index-standard_002dfontset_002dspec"></a>
<a name="index-w32_002dstandard_002dfontset_002dspec"></a>
<a name="index-ns_002dstandard_002dfontset_002dspec"></a>
<a name="index-standard-fontset"></a>
<p>When running on X, Emacs creates a standard fontset automatically according to the value
of <code>standard-fontset-spec</code>.  This fontset’s name is

</p>
<div class="example">
<pre class="example">-*-fixed-medium-r-normal-*-16-*-*-*-*-*-fontset-standard
</pre></div>

<p>or just ‘<samp>fontset-standard</samp>’ for short.

</p>
<p>On GNUstep and macOS, the standard fontset is created using the value of
<code>ns-standard-fontset-spec</code>, and on MS Windows it is
created using the value of <code>w32-standard-fontset-spec</code>.

</p>
<p>Bold, italic, and bold-italic variants of the standard fontset are
created automatically.  Their names have ‘<samp>bold</samp>’ instead of
‘<samp>medium</samp>’, or ‘<samp>i</samp>’ instead of ‘<samp>r</samp>’, or both.

</p>
<a name="index-startup-fontset"></a>
<p>Emacs generates a fontset automatically, based on any default
<acronym>ASCII</acronym> font that you specify with the ‘<samp>Font</samp>’ resource or
the ‘<samp>-fn</samp>’ argument, or the default font that Emacs found when it
started.  This is the <em>startup fontset</em> and its name is
<code>fontset-startup</code>.  Emacs generates this fontset by replacing the
<var>charset_registry</var> field with ‘<samp>fontset</samp>’, and replacing the
<var>charset_encoding</var> field with ‘<samp>startup</samp>’, then using the
resulting string to specify a fontset.

</p>
<p>For instance, if you start Emacs with a font of this form,

</p>
<div class="example">
<pre class="example">emacs -fn "*courier-medium-r-normal--14-140-*-iso8859-1"
</pre></div>

<p>Emacs generates the following fontset and uses it for the initial X
window frame:

</p>
<div class="example">
<pre class="example">-*-courier-medium-r-normal-*-14-140-*-*-*-*-fontset-startup
</pre></div>

<p>The startup fontset will use the font that you specify, or a variant
with a different registry and encoding, for all the characters that
are supported by that font, and fallback on ‘<samp>fontset-default</samp>’ for
other characters.

</p>
<p>With the X resource ‘<samp>Emacs.Font</samp>’, you can specify a fontset name
just like an actual font name.  But be careful not to specify a fontset
name in a wildcard resource like ‘<samp>Emacs*Font</samp>’—that wildcard
specification matches various other resources, such as for menus, and
menus cannot handle fontsets.  See <a href="#X-Resources">X Resources</a>.

</p>
<p>You can specify additional fontsets using X resources named
‘<samp>Fontset-<var>n</var></samp>’, where <var>n</var> is an integer starting from 0.
The resource value should have this form:

</p>
<div class="smallexample">
<pre class="smallexample"><var>fontpattern</var>, <span class="roman">[</span><var>charset</var>:<var>font</var><span class="roman">]…</span>
</pre></div>

<p>where <var>fontpattern</var> should have the form of a standard X font name
(see the previous fontset-startup example), except for the last two
fields.  They should have the form ‘<samp>fontset-<var>alias</var></samp>’.

</p>
<p>Each fontset has two names, one long and one short.  The long name
is  <var>fontpattern</var>.  The short name is ‘<samp>fontset-<var>alias</var></samp>’,
the last 2 fields of the long name (e.g., ‘<samp>fontset-startup</samp>’ for
the  fontset automatically created at startup).  You can refer to the
fontset by either name.

</p>
<p>The construct ‘<samp><var>charset</var>:<var>font</var></samp>’ specifies which font to
use (in this fontset) for one particular character set.  Here,
<var>charset</var> is the name of a character set, and <var>font</var> is the
font to use for that character set.  You can use this construct any
number of times in defining one fontset.

</p>
<p>For the other character sets, Emacs chooses a font based on
<var>fontpattern</var>.  It replaces ‘<samp>fontset-<var>alias</var></samp>’ with values
that describe the character set.  For the <acronym>ASCII</acronym> character font,
‘<samp>fontset-<var>alias</var></samp>’ is replaced with ‘<samp>ISO8859-1</samp>’.

</p>
<p>In addition, when several consecutive fields are wildcards, Emacs
collapses them into a single wildcard.  This is to prevent use of
auto-scaled fonts.  Fonts made by scaling larger fonts are not usable
for editing, and scaling a smaller font is also not useful, because it is
better to use the smaller font in its own size, which is what Emacs
does.

</p>
<p>Thus if <var>fontpattern</var> is this,

</p>
<div class="example">
<pre class="example">-*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24
</pre></div>

<p>the font specification for <acronym>ASCII</acronym> characters would be this:

</p>
<div class="example">
<pre class="example">-*-fixed-medium-r-normal-*-24-*-ISO8859-1
</pre></div>

<p>and the font specification for Chinese GB2312 characters would be this:

</p>
<div class="example">
<pre class="example">-*-fixed-medium-r-normal-*-24-*-gb2312*-*
</pre></div>

<p>You may not have any Chinese font matching the above font
specification.  Most X distributions include only Chinese fonts that
have ‘<samp>song ti</samp>’ or ‘<samp>fangsong ti</samp>’ in the <var>family</var> field.  In
such a case, ‘<samp>Fontset-<var>n</var></samp>’ can be specified as:

</p>
<div class="smallexample">
<pre class="smallexample">Emacs.Fontset-0: -*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24,\
        chinese-gb2312:-*-*-medium-r-normal-*-24-*-gb2312*-*
</pre></div>

<p>Then, the font specifications for all but Chinese GB2312 characters have
‘<samp>fixed</samp>’ in the <var>family</var> field, and the font specification for
Chinese GB2312 characters has a wild card ‘<samp>*</samp>’ in the <var>family</var>
field.

</p>
<a name="index-create_002dfontset_002dfrom_002dfontset_002dspec"></a>
<p>The function that processes the fontset resource value to create the
fontset is called <code>create-fontset-from-fontset-spec</code>.  You can also
call this function explicitly to create a fontset.

</p>
<p>See <a href="#Fonts">Fonts</a>, for more information about font naming.

</p>

<a name="Modifying-Fontsets"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Undisplayable-Characters" accesskey="n" rel="next">Undisplayable Characters</a>, Previous: <a href="#Defining-Fontsets" accesskey="p" rel="prev">Defining Fontsets</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Modifying-Fontsets-1"></a>
<h3 class="section">22.15 Modifying Fontsets</h3>
<a name="index-fontsets_002c-modifying"></a>
<a name="index-set_002dfontset_002dfont"></a>

<p>Fontsets do not always have to be created from scratch.  If only
minor changes are required it may be easier to modify an existing
fontset, usually ‘<samp>fontset-default</samp>’.  Modifying
‘<samp>fontset-default</samp>’ will also affect other fontsets that use it as
a fallback, so can be an effective way of fixing problems with the
fonts that Emacs chooses for a particular script.

</p>
<p>Fontsets can be modified using the function <code>set-fontset-font</code>,
specifying a character, a charset, a script, or a range of characters
to modify the font for, and a font specification for the font to be
used.  Some examples are:

</p>
<div class="example">
<pre class="example">;; Prefer a big5 font for han characters.
(set-fontset-font "fontset-default"
                  'han (font-spec :registry "big5")
                  nil 'prepend)

;; Use MyPrivateFont for the Unicode private use area.
(set-fontset-font "fontset-default"  '(#xe000 . #xf8ff)
                  "MyPrivateFont")

;; Use Liberation Mono for latin-3 charset.
(set-fontset-font "fontset-default" 'iso-8859-3
                  "Liberation Mono")

;; Use DejaVu Sans Mono as a fallback in fontset-startup
;; before resorting to fontset-default.
(set-fontset-font "fontset-startup" nil "DejaVu Sans Mono"
                  nil 'append)
</pre></div>

<p>See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Fontsets">Fontsets</a> in <cite>GNU Emacs Lisp Reference Manual</cite>, for more
details about using the <code>set-fontset-font</code> function.

</p>
<a name="index-script-of-a-character"></a>
<a name="index-codepoint-of-a-character"></a>
<p>If you don’t know the character’s codepoint or the script to which it
belongs, you can ask Emacs.  With point at the character, type
<kbd><span class="nolinebreak">C-u</span>&nbsp;<span class="nolinebreak">C-x</span>&nbsp;=</kbd><!-- /@w -->  (<code>what-cursor-position</code>), and this
information, together with much more, will be displayed in the
<samp>*Help*</samp> buffer that Emacs pops up.  See <a href="#Position-Info">Position Info</a>.  For
example, Japanese characters belong to the ‘<samp>kana</samp>’ script, but
Japanese text also mixes them with Chinese characters so the following
uses the ‘<samp>han</samp>’ script to set up Emacs to use the ‘<samp>Kochi
Gothic</samp>’ font for Japanese text:

</p>
<div class="example">
<pre class="example">(set-fontset-font "fontset-default" 'han "Kochi Gothic")
</pre></div>

<p><a name="index-CKJ-characters"></a>

(For convenience, the ‘<samp>han</samp>’ script in Emacs is set up to support
all of the Chinese, Japanese, and Korean, a.k.a. <acronym>CJK</acronym>,
characters, not just Chinese characters.)

</p>
<a name="index-script_002drepresentative_002dchars"></a>
<p>For the list of known scripts, see the variable
<code>script-representative-chars</code>.

</p>
<p>Fontset settings like those above only affect characters that the
default font doesn’t support, so if the ‘<samp>Kochi Gothic</samp>’ font
covers Latin characters, it will not be used for displaying Latin
scripts, since the default font used by Emacs usually covers Basic
Latin.

</p>
<a name="index-ignore-font"></a>
<a name="index-fonts_002c-how-to-ignore"></a>
<a name="index-face_002dignored_002dfonts"></a>
<p>Some fonts installed on your system might be broken, or produce
unpleasant results for characters for which they are used, and you may
wish to instruct Emacs to completely ignore them while searching for a
suitable font required to display a character.  You can do that by
adding the offending fonts to the value of the variable
<code>face-ignored-fonts</code>, which is a list.  Here’s an example to put
in your <samp>~/.emacs</samp>:

</p>
<div class="example">
<pre class="example">(add-to-list 'face-ignored-fonts "Some Bad Font")
</pre></div>


<a name="Undisplayable-Characters"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Unibyte-Mode" accesskey="n" rel="next">Unibyte Mode</a>, Previous: <a href="#Modifying-Fontsets" accesskey="p" rel="prev">Modifying Fontsets</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Undisplayable-Characters-1"></a>
<h3 class="section">22.16 Undisplayable Characters</h3>

<p>There may be some non-<acronym>ASCII</acronym> characters that your
terminal cannot display.  Most text terminals support just a single
character set (use the variable <code>default-terminal-coding-system</code>
to tell Emacs which one, <a href="#Terminal-Coding">Terminal Coding</a>); characters that
can’t be encoded in that coding system are displayed as ‘<samp>?</samp>’ by
default.

</p>
<p>Graphical displays can display a broader range of characters, but
you may not have fonts installed for all of them; characters that have
no font appear as a hollow box.

</p>
<p>If you use Latin-1 characters but your terminal can’t display
Latin-1, you can arrange to display mnemonic <acronym>ASCII</acronym> sequences
instead, e.g., ‘<samp>"o</samp>’ for o-umlaut.  Load the library
<samp>iso-ascii</samp> to do this.

</p>
<a name="index-latin1_002ddisplay"></a>
<p>If your terminal can display Latin-1, you can display characters
from other European character sets using a mixture of equivalent
Latin-1 characters and <acronym>ASCII</acronym> mnemonics.  Customize the variable
<code>latin1-display</code> to enable this.  The mnemonic <acronym>ASCII</acronym>
sequences mostly correspond to those of the prefix input methods.

</p>

<a name="Unibyte-Mode"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Charsets" accesskey="n" rel="next">Charsets</a>, Previous: <a href="#Undisplayable-Characters" accesskey="p" rel="prev">Undisplayable Characters</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Unibyte-Editing-Mode"></a>
<h3 class="section">22.17 Unibyte Editing Mode</h3>

<a name="index-European-character-sets"></a>
<a name="index-accented-characters"></a>
<a name="index-ISO-Latin-character-sets"></a>
<a name="index-Unibyte-operation"></a>
<p>The ISO 8859 Latin-<var>n</var> character sets define character codes in
the range 0240 to 0377 octal (160 to 255 decimal) to handle the
accented letters and punctuation needed by various European languages
(and some non-European ones).  Note that Emacs considers bytes with
codes in this range as raw bytes, not as characters, even in a unibyte
buffer, i.e., if you disable multibyte characters.  However, Emacs can
still handle these character codes as if they belonged to <em>one</em>
of the single-byte character sets at a time.  To specify <em>which</em>
of these codes to use, invoke <kbd>M-x set-language-environment</kbd> and
specify a suitable language environment such as ‘<samp>Latin-<var>n</var></samp>’.
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Disabling-Multibyte">Disabling Multibyte Characters</a> in <cite>GNU Emacs Lisp Reference Manual</cite>.

</p>
<a name="index-unibyte_002ddisplay_002dvia_002dlanguage_002denvironment"></a>
<p>Emacs can also display bytes in the range 160 to 255 as readable
characters, provided the terminal or font in use supports them.  This
works automatically.  On a graphical display, Emacs can also display
single-byte characters through fontsets, in effect by displaying the
equivalent multibyte characters according to the current language
environment.  To request this, set the variable
<code>unibyte-display-via-language-environment</code> to a non-<code>nil</code>
value.  Note that setting this only affects how these bytes are
displayed, but does not change the fundamental fact that Emacs treats
them as raw bytes, not as characters.

</p>
<a name="index-iso_002dascii-library"></a>
<p>If your terminal does not support display of the Latin-1 character
set, Emacs can display these characters as <acronym>ASCII</acronym> sequences which at
least give you a clear idea of what the characters are.  To do this,
load the library <code>iso-ascii</code>.  Similar libraries for other
Latin-<var>n</var> character sets could be implemented, but have not been
so far.

</p>
<a name="index-standard_002ddisplay_002d8bit"></a>
<a name="index-8_002dbit-display"></a>
<p>Normally non-ISO-8859 characters (decimal codes between 128 and 159
inclusive) are displayed as octal escapes.  You can change this for
non-standard extended versions of ISO-8859 character sets by using the
function <code>standard-display-8bit</code> in the <code>disp-table</code> library.

</p>
<p>There are two ways to input single-byte non-<acronym>ASCII</acronym>
characters:

</p>
<ul>
<li> <a name="index-8_002dbit-input"></a>

You can use an input method for the selected language environment.
See <a href="#Input-Methods">Input Methods</a>.  When you use an input method in a unibyte
buffer, the non-<acronym>ASCII</acronym> character you specify with it is
converted to unibyte.



</li><li>  If your keyboard can generate character codes 128 (decimal) and up,
representing non-<acronym>ASCII</acronym> characters, you can type those
character codes directly.



<p>On a graphical display, you should not need to do anything special to
use these keys; they should simply work.  On a text terminal, you
should use the command <kbd>M-x set-keyboard-coding-system</kbd> or
customize the variable <code>keyboard-coding-system</code> to specify which
coding system your keyboard uses (see <a href="#Terminal-Coding">Terminal Coding</a>).  Enabling
this feature will probably require you to use <tt class="key">ESC</tt> to type Meta
characters; however, on a console terminal or a terminal emulator such
as <code>xterm</code>, you can arrange for Meta to be converted to <tt class="key">ESC</tt>
and still be able to type 8-bit characters present directly on the
keyboard or using <tt class="key">Compose</tt> or <tt class="key">AltGr</tt> keys.  See <a href="#User-Input">User Input</a>.

</p>
</li><li> <a name="index-iso_002dtransl-library"></a>
<a name="index-compose-character"></a>
<a name="index-dead-character"></a>

You can use the key <kbd>C-x 8</kbd> as a compose-character prefix for
entry of non-<acronym>ASCII</acronym> Latin-1 and a few other printing
characters.  <kbd>C-x 8</kbd> is good for insertion (in the minibuffer as
well as other buffers), for searching, and in any other context where
a key sequence is allowed.



<p><kbd>C-x 8</kbd> works by loading the <code>iso-transl</code> library.  Once that
library is loaded, the <tt class="key">Alt</tt> modifier key, if the keyboard has
one, serves the same purpose as <kbd>C-x 8</kbd>: use <tt class="key">Alt</tt> together
with an accent character to modify the following letter.  In addition,
if the keyboard has keys for the Latin-1 dead accent characters,
they too are defined to compose with the following character, once
<code>iso-transl</code> is loaded.

</p>
<p>Use <kbd>C-x 8 C-h</kbd> to list all the available <kbd>C-x 8</kbd> translations.

</p></li></ul>


<a name="Charsets"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Bidirectional-Editing" accesskey="n" rel="next">Bidirectional Editing</a>, Previous: <a href="#Unibyte-Mode" accesskey="p" rel="prev">Unibyte Mode</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Charsets-1"></a>
<h3 class="section">22.18 Charsets</h3>
<a name="index-charsets"></a>

<p>In Emacs, <em>charset</em> is short for “character set”.  Emacs
supports most popular charsets (such as <code>ascii</code>,
<code>iso-8859-1</code>, <code>cp1250</code>, <code>big5</code>, and <code>unicode</code>), in
addition to some charsets of its own (such as <code>emacs</code>,
<code>unicode-bmp</code>, and <code>eight-bit</code>).  All supported characters
belong to one or more charsets.

</p>
<p>Emacs normally does the right thing with respect to charsets, so
that you don’t have to worry about them.  However, it is sometimes
helpful to know some of the underlying details about charsets.

</p>
<p>One example is font selection (see <a href="#Fonts">Fonts</a>).  Each language
environment (see <a href="#Language-Environments">Language Environments</a>) defines a priority
list for the various charsets.  When searching for a font, Emacs
initially attempts to find one that can display the highest-priority
charsets.  For instance, in the Japanese language environment, the
charset <code>japanese-jisx0208</code> has the highest priority, so Emacs
tries to use a font whose <code>registry</code> property is
‘<samp>JISX0208.1983-0</samp>’.

</p>
<a name="index-list_002dcharset_002dchars"></a>
<a name="index-characters-in-a-certain-charset"></a>
<a name="index-describe_002dcharacter_002dset"></a>
<p>There are two commands that can be used to obtain information about
charsets.  The command <kbd>M-x list-charset-chars</kbd> prompts for a
charset name, and displays all the characters in that character set.
The command <kbd>M-x describe-character-set</kbd> prompts for a charset
name, and displays information about that charset, including its
internal representation within Emacs.

</p>
<a name="index-list_002dcharacter_002dsets"></a>
<p><kbd>M-x list-character-sets</kbd> displays a list of all supported
charsets.  The list gives the names of charsets and additional
information to identity each charset; for more details, see the
<a href="https://www.itscj.ipsj.or.jp/itscj_english/iso-ir/ISO-IR.pdf">ISO International Register of Coded Character Sets to be Used with
Escape Sequences (ISO-IR)</a> maintained by
the <a href="https://www.itscj.ipsj.or.jp/itscj_english/">Information Processing Society of Japan/Information Technology
Standards Commission of Japan (IPSJ/ITSCJ)</a>.  In this list,
charsets are divided into two categories: <em>normal charsets</em> are
listed first, followed by <em>supplementary charsets</em>.  A
supplementary charset is one that is used to define another charset
(as a parent or a subset), or to provide backward-compatibility for
older Emacs versions.

</p>
<p>To find out which charset a character in the buffer belongs to, put
point before it and type <kbd>C-u C-x =</kbd> (see <a href="#International-Chars">International Chars</a>).

</p>

<a name="Bidirectional-Editing"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Charsets" accesskey="p" rel="prev">Charsets</a>, Up: <a href="#International" accesskey="u" rel="up">International</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Bidirectional-Editing-1"></a>
<h3 class="section">22.19 Bidirectional Editing</h3>
<a name="index-bidirectional-editing"></a>
<a name="index-right_002dto_002dleft-text"></a>

<p>Emacs supports editing text written in scripts, such as Arabic,
Farsi, and Hebrew, whose natural ordering of horizontal text for
display is from right to left.  However, digits and Latin text
embedded in these scripts are still displayed left to right.  It is
also not uncommon to have small portions of text in Arabic or Hebrew
embedded in an otherwise Latin document; e.g., as comments and strings
in a program source file.  For these reasons, text that uses these
scripts is actually <em>bidirectional</em>: a mixture of runs of
left-to-right and right-to-left characters.

</p>
<p>This section describes the facilities and options provided by Emacs
for editing bidirectional text.

</p>
<a name="index-logical-order"></a>
<a name="index-visual-order"></a>
<p>Emacs stores right-to-left and bidirectional text in the so-called
<em>logical</em> (or <em>reading</em>) order: the buffer or string position
of the first character you read precedes that of the next character.
Reordering of bidirectional text into the <em>visual</em> order happens
at display time.  As a result, character positions no longer increase
monotonically with their positions on display.  Emacs implements the
Unicode Bidirectional Algorithm (UBA) described in the
<a href="https://unicode.org/reports/tr9/">Unicode Standard Annex #9</a>, for
reordering of bidirectional text for display.
It deviates from the UBA only in how continuation lines are displayed
when text direction is opposite to the base paragraph direction,
e.g., when a long line of English text appears in a right-to-left
paragraph.

</p>
<a name="index-bidi_002ddisplay_002dreordering"></a>
<p>The buffer-local variable <code>bidi-display-reordering</code> controls
whether text in the buffer is reordered for display.  If its value is
non-<code>nil</code>, Emacs reorders characters that have right-to-left
directionality when they are displayed.  The default value is
<code>t</code>.

</p>
<a name="index-base-direction-of-paragraphs"></a>
<a name="index-paragraph_002c-base-direction"></a>
<a name="index-bidi_002dparagraph_002dstart_002dre"></a>
<a name="index-bidi_002dparagraph_002dseparate_002dre"></a>
<p>Each paragraph of bidirectional text can have its own <em>base
direction</em>, either right-to-left or left-to-right.  Text in
left-to-right paragraphs begins on the screen at the left margin of
the window and is truncated or continued when it reaches the right
margin.  By contrast, text in right-to-left paragraphs is displayed
starting at the right margin and is continued or truncated at the left
margin.  By default, paragraph boundaries are empty lines, i.e., lines
consisting entirely of whitespace characters.  To change that, you can
customize the two variables <code>bidi-paragraph-start-re</code> and
<code>bidi-paragraph-separate-re</code>, whose values should be regular
expressions (strings); e.g., to have a single newline start a new
paragraph, set both of these variables to <code>"^"</code>.  These two
variables are buffer-local (see <a href="#Locals">Locals</a>).

</p>
<a name="index-bidi_002dparagraph_002ddirection"></a>
<p>Emacs determines the base direction of each paragraph dynamically,
based on the text at the beginning of the paragraph.  However,
sometimes a buffer may need to force a certain base direction for its
paragraphs.  The variable <code>bidi-paragraph-direction</code>, if
non-<code>nil</code>, disables the dynamic determination of the base
direction, and instead forces all paragraphs in the buffer to have the
direction specified by its buffer-local value.  The value can be either
<code>right-to-left</code> or <code>left-to-right</code>.  Any other value is
interpreted as <code>nil</code>.

</p>
<a name="index-LRM"></a>
<a name="index-RLM"></a>
<p>Alternatively, you can control the base direction of a paragraph by
inserting special formatting characters in front of the paragraph.
The special character <code>RIGHT-TO-LEFT MARK</code>, or <small>RLM</small>, forces
the right-to-left direction on the following paragraph, while
<code>LEFT-TO-RIGHT MARK</code>, or <small>LRM</small> forces the left-to-right
direction.  (You can use <kbd>C-x 8 <span class="key">RET</span></kbd> to insert these characters.)
In a GUI session, the <small>LRM</small> and <small>RLM</small> characters display as very
thin blank characters; on text terminals they display as blanks.

</p>
<p>Because characters are reordered for display, Emacs commands that
operate in the logical order or on stretches of buffer positions may
produce unusual effects.  For example, the commands <kbd>C-f</kbd> and
<kbd>C-b</kbd> move point in the logical order, so the cursor will
sometimes jump when point traverses reordered bidirectional text.
Similarly, a highlighted region covering a contiguous range of
character positions may look discontinuous if the region spans
reordered text.  This is normal and similar to the behavior of other
programs that support bidirectional text.

</p>
<a name="index-RIGHT_002c-and-bidirectional-text"></a>
<a name="index-LEFT_002c-and-bidirectional-text"></a>
<a name="index-right_002dchar_002c-and-bidirectional-text"></a>
<a name="index-left_002dchar_002c-and-bidirectional-text"></a>
<p>Cursor motion commands bound to arrow keys, such as <tt class="key">LEFT</tt> and
<kbd>C-<span class="key">RIGHT</span></kbd>, are sensitive to the base direction of the
current paragraph.  In a left-to-right paragraph, commands bound to
<tt class="key">RIGHT</tt> with or without modifiers move <em>forward</em> through
buffer text, but in a right-to-left paragraph they move
<em>backward</em> instead.  This reflects the fact that in a
right-to-left paragraph buffer positions predominantly increase when
moving to the left on display.

</p>
<p>When you move out of a paragraph, the meaning of the arrow keys
might change if the base direction of the preceding or the following
paragraph is different from the paragraph out of which you moved.
When that happens, you need to adjust the arrow key you press to the
new base direction.

</p>
<a name="index-visual_002dorder_002dcursor_002dmovement"></a>
<a name="index-cursor_002c-visual_002dorder-motion"></a>
<p>By default, <tt class="key">LEFT</tt> and <tt class="key">RIGHT</tt> move in the logical order,
but if <code>visual-order-cursor-movement</code> is non-<code>nil</code>, these
commands move to the character that is, correspondingly, to the left
or right of the current screen position, moving to the next or
previous screen line as appropriate.  Note that this might potentially
move point many buffer positions away, depending on the surrounding
bidirectional context.

</p><hr>
<a name="Modes"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Indentation" accesskey="n" rel="next">Indentation</a>, Previous: <a href="#International" accesskey="p" rel="prev">International</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Major-and-Minor-Modes"></a>
<h2 class="chapter">23 Major and Minor Modes</h2>

<p>Emacs contains many <em>editing modes</em> that alter its basic
behavior in useful ways.  These are divided into <em>major modes</em> and
<em>minor modes</em>.

</p>
<p>Major modes provide specialized facilities for working on a
particular file type, such as a C source file (see <a href="#Programs">Programs</a>), or a
particular type of non-file buffer, such as a shell buffer
(see <a href="#Shell">Shell</a>).  Major modes are mutually exclusive; each buffer has
one and only one major mode at any time.

</p>
<p>Minor modes are optional features which you can turn on or off, not
necessarily specific to a type of file or buffer.  For example, Auto
Fill mode is a minor mode in which <tt class="key">SPC</tt> breaks lines between
words as you type (see <a href="#Auto-Fill">Auto Fill</a>).  Minor modes are independent of
one another, and of the selected major mode.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Major-Modes" accesskey="1">Major Modes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Text mode vs. Lisp mode vs. C mode...

</td></tr>
<tr><td align="left" valign="top">• <a href="#Minor-Modes" accesskey="2">Minor Modes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Each minor mode is a feature you can turn on
                          independently of any others.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Choosing-Modes" accesskey="3">Choosing Modes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How modes are chosen when visiting files.

</td></tr>
</tbody></table>


<a name="Major-Modes"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Minor-Modes" accesskey="n" rel="next">Minor Modes</a>, Up: <a href="#Modes" accesskey="u" rel="up">Modes</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Major-Modes-1"></a>
<h3 class="section">23.1 Major Modes</h3>
<a name="index-major-modes"></a>
<a name="index-mode_002c-major"></a>
<a name="index-TAB-_0028and-major-modes_0029"></a>
<a name="index-DEL-_0028and-major-modes_0029"></a>
<a name="index-C_002dj-_0028and-major-modes_0029"></a>

<p>Every buffer possesses a major mode, which determines the editing
behavior of Emacs while that buffer is current.  The mode line
normally shows the name of the current major mode, in parentheses
(see <a href="#Mode-Line">Mode Line</a>).

</p>
<p>The least specialized major mode is called <em>Fundamental mode</em>.
This mode has no mode-specific redefinitions or variable settings, so
that each Emacs command behaves in its most general manner, and each
user option variable is in its default state.

</p>
<p>For editing text of a specific type that Emacs knows about, such as
Lisp code or English text, you typically use a more specialized major
mode, such as Lisp mode or Text mode.  Most major modes fall into
three major groups.  The first group contains modes for normal text,
either plain or with mark-up.  It includes Text mode, HTML mode, SGML
mode, TeX mode and Outline mode.  The second group contains modes
for specific programming languages.  These include Lisp mode (which
has several variants), C mode, Fortran mode, and others.  The third
group consists of major modes that are not associated directly with
files; they are used in buffers created for specific purposes by
Emacs.  Examples include Dired mode for buffers made by Dired
(see <a href="#Dired">Dired</a>), Message mode for buffers made by <kbd>C-x m</kbd>
(see <a href="#Sending-Mail">Sending Mail</a>), and Shell mode for buffers used to communicate
with an inferior shell process (see <a href="#Interactive-Shell">Interactive Shell</a>).

</p>
<p>Usually, the major mode is automatically set by Emacs, when you
first visit a file or create a buffer (see <a href="#Choosing-Modes">Choosing Modes</a>).  You
can explicitly select a new major mode by using an <kbd>M-x</kbd> command.
Take the name of the mode and add <code>-mode</code> to get the name of the
command to select that mode (e.g., <kbd>M-x lisp-mode</kbd> enters Lisp
mode).  Since every buffer has exactly one major mode, there is no way
to “turn off” a major mode; instead you must switch to a different
one.

</p>
<a name="index-major_002dmode"></a>
<p>The value of the buffer-local variable <code>major-mode</code> is a symbol
with the same name as the major mode command (e.g., <code>lisp-mode</code>).
This variable is set automatically; you should not change it yourself.

</p>
<p>The default value of <code>major-mode</code> determines the major mode to
use for files that do not specify a major mode, and for new buffers
created with <kbd>C-x b</kbd>.  Normally, this default value is the symbol
<code>fundamental-mode</code>, which specifies Fundamental mode.  You can
change this default value via the Customization interface (see <a href="#Easy-Customization">Easy Customization</a>), or by adding a line like this to your init file
(see <a href="#Init-File">Init File</a>):

</p>
<div class="example">
<pre class="example">(setq-default major-mode 'text-mode)
</pre></div>

<p>If the default value of <code>major-mode</code> is <code>nil</code>, the major
mode is taken from the previously current buffer.

</p>
<p>Specialized major modes often change the meanings of certain keys to
do something more suitable for the mode.  For instance, programming
language modes bind <tt class="key">TAB</tt> to indent the current line according to
the rules of the language (see <a href="#Indentation">Indentation</a>).  The keys that are
commonly changed are <tt class="key">TAB</tt>, <tt class="key">DEL</tt>, and <kbd>C-j</kbd>.  Many modes
also define special commands of their own, usually bound to key
sequences whose prefix key is <kbd>C-c</kbd> (see <a href="#Keys">Keys</a>).  Major modes
can also alter user options and variables; for instance, programming
language modes typically set a buffer-local value for the variable
<code>comment-start</code>, which determines how source code comments are
delimited (see <a href="#Comments">Comments</a>).

</p>
<p>To view the documentation for the current major mode, including a list of its key bindings, type <kbd>C-h m</kbd> (<code>describe-mode</code>). 请参阅<a href="#Misc-Help">其他帮助</a>。
</p>
<a name="index-mode-hook"></a>
<a name="index-prog_002dmode_002dhook"></a>
<p>Every major mode, apart from Fundamental mode, defines a <em>mode
hook</em>, a customizable list of Lisp functions to run each time the mode
is enabled in a buffer.  See <a href="#Hooks">Hooks</a>, for more information about
hooks.  Each mode hook is named after its major mode, e.g., Fortran
mode has <code>fortran-mode-hook</code>.  Furthermore, all text-based major
modes run <code>text-mode-hook</code>, and many programming language modes
<a name="DOCF10" href="#FOOT10"><sup>10</sup></a> (including all those distributed with Emacs) run
<code>prog-mode-hook</code>, prior to running their own mode hooks.  Hook
functions can look at the value of the variable <code>major-mode</code> to
see which mode is actually being entered.

</p>
<p>Mode hooks are commonly used to enable minor modes (see <a href="#Minor-Modes">Minor Modes</a>).  For example, you can put the following lines in your init
file to enable Flyspell minor mode in all text-based major modes
(see <a href="#Spelling">Spelling</a>), and ElDoc minor mode in Emacs Lisp mode
(see <a href="#Lisp-Doc">Lisp Doc</a>):

</p>
<div class="example">
<pre class="example">(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
</pre></div>


<a name="Minor-Modes"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Choosing-Modes" accesskey="n" rel="next">Choosing Modes</a>, Previous: <a href="#Major-Modes" accesskey="p" rel="prev">Major Modes</a>, Up: <a href="#Modes" accesskey="u" rel="up">Modes</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Minor-Modes-1"></a>
<h3 class="section">23.2 Minor Modes</h3>
<a name="index-minor-modes"></a>
<a name="index-mode_002c-minor"></a>

<p>A minor mode is an optional editing mode that alters the behavior of
Emacs in some well-defined way.  Unlike major modes, any number of
minor modes can be in effect at any time.  Some minor modes are
<em>buffer-local</em>, and can be turned on (enabled) in certain buffers
and off (disabled) in others.  Other minor modes are <em>global</em>:
while enabled, they affect everything you do in the Emacs session, in
all buffers.  Most minor modes are disabled by default, but a few are
enabled by default.

</p>
<p>Most buffer-local minor modes say in the mode line when they are
enabled, just after the major mode indicator.  For example,
‘<samp>Fill</samp>’ in the mode line means that Auto Fill mode is enabled.
See <a href="#Mode-Line">Mode Line</a>.

</p>
<a name="index-mode-commands-for-minor-modes"></a>
<p>Like major modes, each minor mode is associated with a <em>mode
command</em>, whose name consists of the mode name followed by
‘<samp>-mode</samp>’.  For instance, the mode command for Auto Fill mode is
<code>auto-fill-mode</code>.  But unlike a major mode command, which simply
enables the mode, the mode command for a minor mode can either enable
or disable it:

</p>
<ul>
<li>  If you invoke the mode command directly with no prefix argument
(either via <kbd>M-x</kbd>, or by binding it to a key and typing that key;
see <a href="#Key-Bindings">Key Bindings</a>), that <em>toggles</em> the minor mode.  The minor
mode is turned on if it was off, and turned off if it was on.



</li><li>  If you invoke the mode command with a prefix argument, the minor mode
is unconditionally turned off if that argument is zero or negative;
otherwise, it is unconditionally turned on.



</li><li>  If the mode command is called via Lisp, the minor mode is
unconditionally turned on if the argument is omitted or <code>nil</code>.
This makes it easy to turn on a minor mode from a major mode’s mode
hook (see <a href="#Major-Modes">Major Modes</a>).  A non-<code>nil</code> argument is handled like
an interactive prefix argument, as described above.

</li></ul>

<p>Most minor modes also have a <em>mode variable</em>, with the same name
as the mode command.  Its value is non-<code>nil</code> if the mode is
enabled, and <code>nil</code> if it is disabled.  In general, you should not
try to enable or disable the mode by changing the value of the mode
variable directly in Lisp; you should run the mode command instead.
However, setting the mode variable through the Customize interface
(see <a href="#Easy-Customization">Easy Customization</a>) will always properly enable or disable
the mode, since Customize automatically runs the mode command for you.

</p>
<p>The following is a list of some buffer-local minor modes:

</p>
<ul>
<li>  Abbrev mode automatically expands text based on pre-defined
abbreviation definitions.  See <a href="#Abbrevs">Abbrevs</a>.



</li><li> Auto Fill mode inserts newlines as you type to prevent lines from becoming too long. 请参阅<a href="#Filling">填充</a>。

</li><li>  Auto Save mode saves the buffer contents periodically to reduce the
amount of work you can lose in case of a crash.  See <a href="#Auto-Save">Auto Save</a>.



</li><li>  Electric Quote mode automatically converts quotation marks.  For
example, it requotes text typed <kbd>`like this'</kbd> to text <tt>‘like
this’</tt>.  You can control what kind of text it operates in, and you can
disable it entirely in individual buffers.  See <a href="#Quotation-Marks">Quotation Marks</a>.



</li><li>  Enriched mode enables editing and saving of formatted text.
See <a href="#Enriched-Text">Enriched Text</a>.



</li><li>  Flyspell mode automatically highlights misspelled words.
See <a href="#Spelling">Spelling</a>.



</li><li>  Font-Lock mode automatically highlights certain textual units found in
programs.  It is enabled globally by default, but you can disable it
in individual buffers.  See <a href="#Faces">Faces</a>.



</li><li>  Display Line Numbers mode is a convenience wrapper around
<code>display-line-numbers</code>, setting it using the value of
<code>display-line-numbers-type</code>.  See <a href="#Display-Custom">Display Custom</a>.



</li><li>  Outline minor mode provides similar facilities to the major mode
called Outline mode.  See <a href="#Outline-Mode">Outline Mode</a>.



</li><li> <a name="index-Overwrite-mode"></a>
<a name="index-mode_002c-Overwrite"></a>
<a name="index-overwrite_002dmode"></a>
<a name="index-INSERT"></a>

Overwrite mode causes ordinary printing characters to replace existing
text instead of shoving it to the right.  For example, if point is in
front of the ‘<samp>B</samp>’ in ‘<samp>FOOBAR</samp>’, then in Overwrite mode typing
a <kbd>G</kbd> changes it to ‘<samp>FOOGAR</samp>’, instead of producing
‘<samp>FOOGBAR</samp>’ as usual.  In Overwrite mode, the command <kbd>C-q</kbd>
inserts the next character whatever it may be, even if it is a
digit—this gives you a way to insert a character instead of
replacing an existing character.  The mode command,
<code>overwrite-mode</code>, is bound to the <tt class="key">Insert</tt> key.



</li><li> <a name="index-binary_002doverwrite_002dmode"></a>

Binary Overwrite mode is a variant of Overwrite mode for editing
binary files; it treats newlines and tabs like other characters, so
that they overwrite other characters and can be overwritten by them.
In Binary Overwrite mode, digits after <kbd>C-q</kbd> specify an octal
character code, as usual.



</li><li>  Visual Line mode performs word wrapping, causing long lines to be
wrapped at word boundaries.  See <a href="#Visual-Line-Mode">Visual Line Mode</a>.

</li></ul>

<p>And here are some useful global minor modes:

</p>
<ul>
<li>  Column Number mode enables display of the current column number in the
mode line.  See <a href="#Mode-Line">Mode Line</a>.



</li><li>  Delete Selection mode causes text insertion to first delete the text
in the region, if the region is active.  See <a href="#Using-Region">Using Region</a>.



</li><li>  Icomplete mode displays an indication of available completions when
you are in the minibuffer and completion is active.  See <a href="#Icomplete">Icomplete</a>.



</li><li>  Line Number mode enables display of the current line number in the
mode line.  It is enabled by default.  See <a href="#Mode-Line">Mode Line</a>.



</li><li>  Menu Bar mode gives each frame a menu bar.  It is enabled by default.
See <a href="#Menu-Bars">Menu Bars</a>.



</li><li>  Scroll Bar mode gives each window a scroll bar.  It is enabled by
default, but the scroll bar is only displayed on graphical terminals.
See <a href="#Scroll-Bars">Scroll Bars</a>.



</li><li>  Tool Bar mode gives each frame a tool bar.  It is enabled by default,
but the tool bar is only displayed on graphical terminals.  See <a href="#Tool-Bars">Tool Bars</a>.



</li><li>  Tab Bar mode gives each frame a tab bar.  See <a href="#Tab-Bars">Tab Bars</a>.



</li><li>  Tab Line mode gives each window a tab line.  See <a href="#Tab-Line">Tab Line</a>.



</li><li>  Transient Mark mode highlights the region, and makes many Emacs
commands operate on the region when the mark is active.  It is enabled
by default.  See <a href="#Mark">Mark</a>.

</li></ul>


<a name="Choosing-Modes"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Minor-Modes" accesskey="p" rel="prev">Minor Modes</a>, Up: <a href="#Modes" accesskey="u" rel="up">Modes</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Choosing-File-Modes"></a>
<h3 class="section">23.3 Choosing File Modes</h3>

<a name="index-choosing-a-major-mode"></a>
<a name="index-choosing-a-minor-mode"></a>
<a name="index-auto_002dmode_002dalist"></a>
<p>When you visit a file, Emacs chooses a major mode automatically.
Normally, it makes the choice based on the file name—for example,
files whose names end in ‘<samp>.c</samp>’ are normally edited in C mode—but
sometimes it chooses the major mode based on special text in the file.
This special text can also be used to enable buffer-local minor modes.

</p>
<p>Here is the exact procedure:

</p>
<p>First, Emacs checks whether the file contains file-local mode variables. See <a href="#File-Variables">File Variables</a>. If there is a file-local variable that specifies a major mode, then Emacs uses that major mode, ignoring all other criteria. There are several methods to specify a major mode using a file-local variable; the simplest is to put the mode name in the first nonblank line, preceded and followed by ‘<samp>-*-</samp>’. Other text may appear on the line as well. 例如,
</p>
<div class="example">
<pre class="example">; -*-Lisp-*-
</pre></div>

<p>tells Emacs to use Lisp mode.  Note how the semicolon is used to make
Lisp treat this line as a comment.  You could equivalently write

</p>
<div class="example">
<pre class="example">; -*- mode: Lisp;-*-
</pre></div>

<p>You can also use file-local variables to specify buffer-local minor
modes, by using <code>eval</code> specifications.  For example, this first
nonblank line puts the buffer in Lisp mode and enables Auto-Fill mode:

</p>
<div class="example">
<pre class="example">; -*- mode: Lisp; eval: (auto-fill-mode 1); -*-
</pre></div>

<p>Note, however, that it is usually inappropriate to enable minor modes
this way, since most minor modes represent individual user
preferences.  If you personally want to use a minor mode for a
particular file type, it is better to enable the minor mode via a
major mode hook (see <a href="#Major-Modes">Major Modes</a>).

</p>
<a name="index-interpreter_002dmode_002dalist"></a>
<p>Second, if there is no file variable specifying a major mode, Emacs
checks whether the file’s contents begin with ‘<samp>#!</samp>’.  If so, that
indicates that the file can serve as an executable shell command,
which works by running an interpreter named on the file’s first line
(the rest of the file is used as input to the interpreter).
Therefore, Emacs tries to use the interpreter name to choose a mode.
For instance, a file that begins with ‘<samp>#!/usr/bin/perl</samp>’ is opened
in Perl mode.  The variable <code>interpreter-mode-alist</code> specifies
the correspondence between interpreter program names and major modes.

</p>
<p>When the first line starts with ‘<samp>#!</samp>’, you usually cannot use
the ‘<samp>-*-</samp>’ feature on the first line, because the system would get
confused when running the interpreter.  So Emacs looks for ‘<samp>-*-</samp>’
on the second line in such files as well as on the first line.  The
same is true for man pages which start with the magic string
‘<samp>'\"</samp>’ to specify a list of troff preprocessors.

</p>
<a name="index-magic_002dmode_002dalist"></a>
<p>Third, Emacs tries to determine the major mode by looking at the
text at the start of the buffer, based on the variable
<code>magic-mode-alist</code>.  By default, this variable is <code>nil</code> (an
empty list), so Emacs skips this step; however, you can customize it
in your init file (see <a href="#Init-File">Init File</a>).  The value should be a list of
elements of the form

</p>
<div class="example">
<pre class="example">(<var>regexp</var> . <var>mode-function</var>)
</pre></div>

<p>where <var>regexp</var> is a regular expression (see <a href="#Regexps">Regexps</a>), and
<var>mode-function</var> is a major mode command.  If the text at the
beginning of the file matches <var>regexp</var>, Emacs chooses the major
mode specified by <var>mode-function</var>.

</p>
<p>Alternatively, an element of <code>magic-mode-alist</code> may have the form

</p>
<div class="example">
<pre class="example">(<var>match-function</var> . <var>mode-function</var>)
</pre></div>

<p>where <var>match-function</var> is a Lisp function that is called at the
beginning of the buffer; if the function returns non-<code>nil</code>, Emacs
set the major mode with <var>mode-function</var>.

</p>
<p>Fourth—if Emacs still hasn’t found a suitable major mode—it
looks at the file’s name.  The correspondence between file names and
major modes is controlled by the variable <code>auto-mode-alist</code>.  Its
value is a list in which each element has this form,

</p>
<div class="example">
<pre class="example">(<var>regexp</var> . <var>mode-function</var>)
</pre></div>

<p>or this form,

</p>
<div class="example">
<pre class="example">(<var>regexp</var> <var>mode-function</var> <var>flag</var>)
</pre></div>

<p>For example, one element normally found in the list has the form
<code>(<tt>"\\.c\\'"</tt> . c-mode)</code>, and it is responsible for selecting C
mode for files whose names end in <samp>.c</samp>.  (Note that ‘<samp>\\</samp>’ is
needed in Lisp syntax to include a ‘<samp>\</samp>’ in the string, which must
be used to suppress the special meaning of ‘<samp>.</samp>’ in regexps.)  If
the element has the form <code>(<var>regexp</var> <var>mode-function</var>
<var>flag</var>)</code> and <var>flag</var> is non-<code>nil</code>, then after calling
<var>mode-function</var>, Emacs discards the suffix that matched
<var>regexp</var> and searches the list again for another match.

</p>
<a name="index-auto_002dmode_002dcase_002dfold"></a>
<p>On GNU/Linux and other systems with case-sensitive file names, Emacs
performs a case-sensitive search through <code>auto-mode-alist</code>; if
this search fails, it performs a second case-insensitive search
through the alist.  To suppress the second search, change the variable
<code>auto-mode-case-fold</code> to <code>nil</code>.  On systems with
case-insensitive file names, such as Microsoft Windows, Emacs performs
a single case-insensitive search through <code>auto-mode-alist</code>.

</p>
<a name="index-magic_002dfallback_002dmode_002dalist"></a>
<p>Finally, if Emacs <em>still</em> hasn’t found a major mode to use, it
compares the text at the start of the buffer to the variable
<code>magic-fallback-mode-alist</code>.  This variable works like
<code>magic-mode-alist</code>, described above, except that it is consulted
only <em>after</em> <code>auto-mode-alist</code>.  By default,
<code>magic-fallback-mode-alist</code> contains forms that check for image
files, HTML/XML/SGML files, PostScript files, and Unix style Conf
files.

</p>
<a name="index-normal_002dmode"></a>
<p>If you have changed the major mode of a buffer, you can return to
the major mode Emacs would have chosen automatically, by typing
<kbd>M-x normal-mode</kbd>.  This is the same function that
<code>find-file</code> calls to choose the major mode.  It also processes
the file’s ‘<samp>-*-</samp>’ line or local variables list (if any).
See <a href="#File-Variables">File Variables</a>.

</p>
<a name="index-change_002dmajor_002dmode_002dwith_002dfile_002dname"></a>
<p>The commands <kbd>C-x C-w</kbd> and <code>set-visited-file-name</code> change to
a new major mode if the new file name implies a mode (see <a href="#Saving">Saving</a>).
(<kbd>C-x C-s</kbd> does this too, if the buffer wasn’t visiting a file.)
However, this does not happen if the buffer contents specify a major
mode, and certain special major modes do not allow the mode to
change.  You can turn off this mode-changing feature by setting
<code>change-major-mode-with-file-name</code> to <code>nil</code>.

</p><hr>
<a name="Indentation"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Text" accesskey="n" rel="next">Text</a>, Previous: <a href="#Modes" accesskey="p" rel="prev">Modes</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Indentation-1"></a>
<h2 class="chapter">24 Indentation</h2>
<a name="index-indentation"></a>
<a name="index-tabs"></a>
<a name="index-columns-_0028indentation_0029"></a>

<a name="index-whitespace-character"></a>
<p><em>Indentation</em> refers to inserting or adjusting <em>whitespace
characters</em> (space and/or tab characters) at the beginning of a line
of text.  This chapter documents indentation commands and options
which are common to Text mode and related modes, as well as
programming language modes.  See <a href="#Program-Indent">Program Indent</a>, for additional
documentation about indenting in programming modes.

</p>
<a name="index-indent_002dfor_002dtab_002dcommand"></a>
<a name="index-TAB-_0028indentation_0029"></a>
<p>The simplest way to perform indentation is the <tt class="key">TAB</tt> key.  In
most major modes, this runs the command <code>indent-for-tab-command</code>.
(In C and related modes, <tt class="key">TAB</tt> runs the command
<code>c-indent-line-or-region</code>, which behaves similarly, see <a href="#C-Indent">C Indent</a>).

</p>
<dl compact="compact">
<dt><tt class="key">TAB</tt></dt>
<dd><p>Insert whitespace, or indent the current line, in a mode-appropriate
way (<code>indent-for-tab-command</code>).  If the region is active, indent
all the lines within it.

</p></dd>
</dl>

<p>The exact behavior of <tt class="key">TAB</tt> depends on the major mode.  In Text
mode and related major modes, <tt class="key">TAB</tt> normally inserts some
combination of space and tab characters to advance point to the next
tab stop (see <a href="#Tab-Stops">Tab Stops</a>).  For this purpose, the position of the
first non-whitespace character on the preceding line is treated as an
additional tab stop, so you can use <tt class="key">TAB</tt> to align point with
the preceding line.  If the region is active (see <a href="#Using-Region">Using Region</a>),
<tt class="key">TAB</tt> acts specially: it indents each line in the region so that
its first non-whitespace character is aligned with the preceding line.

</p>
<p>In programming modes, <tt class="key">TAB</tt> indents the current line of code in
a way that makes sense given the code in the preceding lines.  If the
region is active, all the lines in the region are indented this way.
If point was initially within the current line’s indentation, it is
repositioned to the first non-whitespace character on the line.

</p>
<p>If you just want to insert a tab character in the buffer, type
<kbd>C-q <span class="key">TAB</span></kbd> (see <a href="#Inserting-Text">Inserting Text</a>).

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Indentation-Commands" accesskey="1">Indentation Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">More commands for performing indentation.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Tab-Stops" accesskey="2">Tab Stops</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Stop points for indentation in Text modes.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Just-Spaces" accesskey="3">Just Spaces</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Using only space characters for indentation.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Indent-Convenience" accesskey="4">Indent Convenience</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Optional indentation features.

</td></tr>
</tbody></table>


<a name="Indentation-Commands"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Tab-Stops" accesskey="n" rel="next">Tab Stops</a>, Up: <a href="#Indentation" accesskey="u" rel="up">Indentation</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Indentation-Commands-1"></a>
<h3 class="section">24.1 Indentation Commands</h3>

<p>Apart from the <kbd><span class="key">TAB</span></kbd> (<code>indent-for-tab-command</code>)
command, Emacs provides a variety of commands to perform indentation
in other ways.

</p>
<dl compact="compact">
<dt><kbd>C-M-o</kbd></dt>
<dd><a name="index-C_002dM_002do"></a>
<a name="index-split_002dline"></a>
<p>Split the current line at point (<code>split-line</code>).  The text on the
line after point becomes a new line, indented to the same column where
point is located.  This command first moves point forward over any
spaces and tabs.  Afterward, point is positioned before the inserted
newline.

</p>
<a name="index-M_002dm"></a>
<a name="index-back_002dto_002dindentation"></a>
</dd>
<dt><kbd>M-m</kbd></dt>
<dd><p>Move (forward or back) to the first non-whitespace character on the
current line (<code>back-to-indentation</code>).  If there are no
non-whitespace characters on the line, move to the end of the line.

</p>
</dd>
<dt><kbd>M-i</kbd></dt>
<dd><a name="index-M_002di"></a>
<a name="index-tab_002dto_002dtab_002dstop"></a>
<p>Indent whitespace at point, up to the next tab stop
(<code>tab-to-tab-stop</code>).  See <a href="#Tab-Stops">Tab Stops</a>.

</p>
<a name="index-indent_002drelative"></a>
</dd>
<dt><kbd>M-x indent-relative</kbd></dt>
<dd><p>Insert whitespace at point, until point is aligned with the first
non-whitespace character on the previous line (actually, the last
non-blank line).  If point is already farther right than that, run
<code>tab-to-tab-stop</code> instead—unless called with a numeric
argument, in which case do nothing.

</p>
</dd>
<dt><kbd>M-^</kbd></dt>
<dd><a name="index-M_002d_005e"></a>
<a name="index-delete_002dindentation"></a>
<p>Merge the previous and the current line (<code>delete-indentation</code>).
This joins the two lines cleanly, by replacing any indentation at
the front of the current line, together with the line boundary, with a
single space.

</p>
<p>As a special case (useful for Lisp code), the single space is omitted
if the characters to be joined are consecutive opening and closing
parentheses, or if the junction follows another newline.

</p>
<p>If there is a fill prefix, <kbd>M-^</kbd> deletes the fill prefix if it
appears after the newline that is deleted.  See <a href="#Fill-Prefix">Fill Prefix</a>.

</p>
<p>With a prefix argument, join the current line to the following line.
If the region is active, and no prefix argument is given, join all
lines in the region instead.

</p>
</dd>
<dt><kbd>C-M-\</kbd></dt>
<dd><a name="index-C_002dM_002d_005c"></a>
<a name="index-indent_002dregion"></a>
<p>Indent all the lines in the region, as though you had typed
<kbd><span class="key">TAB</span></kbd> at the beginning of each line (<code>indent-region</code>).

</p>
<p>If a numeric argument is supplied, indent every line in the region to
that column number.

</p>
</dd>
<dt><kbd>C-x <span class="key">TAB</span></kbd></dt>
<dd><a name="index-C_002dx-TAB"></a>
<a name="index-indent_002drigidly"></a>
<a name="index-remove-indentation"></a>
<p>This command is used to change the indentation of all lines that begin
in the region, moving the affected lines as a rigid unit.

</p>
<p>If called with no argument, the command activates a transient mode for
adjusting the indentation of the affected lines interactively.  While
this transient mode is active, typing <kbd><span class="key">LEFT</span></kbd> or
<kbd><span class="key">RIGHT</span></kbd> indents leftward and rightward, respectively, by one
space.  You can also type <kbd>S-<span class="key">LEFT</span></kbd> or <kbd>S-<span class="key">RIGHT</span></kbd> to
indent leftward or rightward to the next tab stop (see <a href="#Tab-Stops">Tab Stops</a>).
Typing any other key disables the transient mode, and resumes normal
editing.

</p>
<p>If called with a prefix argument <var>n</var>, this command indents the
lines forward by <var>n</var> spaces (without enabling the transient mode).
Negative values of <var>n</var> indent backward, so you can remove all
indentation from the lines in the region using a large negative
argument, like this:

</p>
<div class="smallexample">
<pre class="smallexample">C-u -999 C-x <span class="key">TAB</span>
</pre></div>
</dd>
</dl>


<a name="Tab-Stops"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Just-Spaces" accesskey="n" rel="next">Just Spaces</a>, Previous: <a href="#Indentation-Commands" accesskey="p" rel="prev">Indentation Commands</a>, Up: <a href="#Indentation" accesskey="u" rel="up">Indentation</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Tab-Stops-1"></a>
<h3 class="section">24.2 Tab Stops</h3>
<a name="index-tab-stops"></a>

<a name="index-tab_002dstop_002dlist"></a>
<p>Emacs defines certain column numbers to be <em>tab stops</em>.  These
are used as stopping points by <tt class="key">TAB</tt> when inserting whitespace in
Text mode and related modes (see <a href="#Indentation">Indentation</a>), and by commands
like <kbd>M-i</kbd> (see <a href="#Indentation-Commands">Indentation Commands</a>).  The variable
<code>tab-stop-list</code> controls these positions.  The default value is
<code>nil</code>, which means a tab stop every 8 columns.  The value can
also be a list of zero-based column numbers (in increasing order) at
which to place tab stops.  Emacs extends the list forever by repeating
the difference between the last and next-to-last elements.

</p>
<a name="index-edit_002dtab_002dstops"></a>
<a name="index-C_002dc-C_002dc-_0028Edit-Tab-Stops_0029"></a>
<p>Instead of customizing the variable <code>tab-stop-list</code> directly, a
convenient way to view and set tab stops is via the command <kbd>M-x
edit-tab-stops</kbd>.  This switches to a buffer containing a description
of the tab stop settings, which looks like this:

</p>
<div class="example">
<pre class="example">        :       :       :       :       :       :
0         1         2         3         4
0123456789012345678901234567890123456789012345678
To install changes, type C-c C-c
</pre></div>

<p>The first line contains a colon at each tab stop.  The numbers on the
next two lines are present just to indicate where the colons are.
If the value of <code>tab-stop-list</code> is <code>nil</code>, as it is by default,
no colons are displayed initially.

</p>
<p>You can edit this buffer to specify different tab stops by placing
colons on the desired columns.  The buffer uses Overwrite mode
(see <a href="#Minor-Modes">Minor Modes</a>).  Remember that Emacs will extend the list of
tab stops forever by repeating the difference between the last two
explicit stops that you place.  When you are done, type <kbd>C-c C-c</kbd> to make
the new tab stops take effect.  Normally, the new tab stop settings
apply to all buffers.  However, if you have made the
<code>tab-stop-list</code> variable local to the buffer where you called
<kbd>M-x edit-tab-stops</kbd> (see <a href="#Locals">Locals</a>), then the new tab stop
settings apply only to that buffer.  To save the tab stop settings for
future Emacs sessions, use the Customize interface to save the value
of <code>tab-stop-list</code> (see <a href="#Easy-Customization">Easy Customization</a>).

</p>
<p>Note that the tab stops discussed in this section have nothing to do
with how tab characters are displayed in the buffer.  Tab characters
are always displayed as empty spaces extending to the next
<em>display tab stop</em>.  See <a href="#Text-Display">Text Display</a>.

</p>

<a name="Just-Spaces"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Indent-Convenience" accesskey="n" rel="next">Indent Convenience</a>, Previous: <a href="#Tab-Stops" accesskey="p" rel="prev">Tab Stops</a>, Up: <a href="#Indentation" accesskey="u" rel="up">Indentation</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Tabs-vs_002e-Spaces"></a>
<h3 class="section">24.3 Tabs vs. Spaces</h3>

<p>Normally, indentation commands insert (or remove) the shortest
possible series of tab and space characters so as to align to the
desired column.  Tab characters are displayed as a stretch of empty
space extending to the next <em>display tab stop</em>.  By default, there
is one display tab stop every <code>tab-width</code> columns (the default is
8).  See <a href="#Text-Display">Text Display</a>.

</p>
<a name="index-indent_002dtabs_002dmode"></a>
<p>If you prefer, all indentation can be made from spaces only.  To
request this, set the buffer-local variable <code>indent-tabs-mode</code> to
<code>nil</code>.  See <a href="#Locals">Locals</a>, for information about setting buffer-local
variables.  Note, however, that <kbd>C-q <span class="key">TAB</span></kbd> always inserts a
tab character, regardless of the value of <code>indent-tabs-mode</code>.

</p>
<p>One reason to set <code>indent-tabs-mode</code> to <code>nil</code> is that not
all editors display tab characters in the same way.  Emacs users, too,
may have different customized values of <code>tab-width</code>.  By using
spaces only, you can make sure that your file always looks the same.
If you only care about how it looks within Emacs, another way to
tackle this problem is to set the <code>tab-width</code> variable in a
file-local variable (see <a href="#File-Variables">File Variables</a>).

</p>
<a name="index-tabify"></a>
<a name="index-untabify"></a>
<p>There are also commands to convert tabs to spaces or vice versa, always
preserving the columns of all non-whitespace text.  <kbd>M-x tabify</kbd> scans the
region for sequences of spaces, and converts sequences of at least two
spaces to tabs if that can be done without changing indentation.  <kbd>M-x
untabify</kbd> changes all tabs in the region to appropriate numbers of spaces.

</p>

<a name="Indent-Convenience"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Just-Spaces" accesskey="p" rel="prev">Just Spaces</a>, Up: <a href="#Indentation" accesskey="u" rel="up">Indentation</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Convenience-Features-for-Indentation"></a>
<h3 class="section">24.4 Convenience Features for Indentation</h3>

<a name="index-tab_002dalways_002dindent"></a>
<p>The variable <code>tab-always-indent</code> tweaks the behavior of the
<tt class="key">TAB</tt> (<code>indent-for-tab-command</code>) command.  The default value,
<code>t</code>, gives the behavior described in <a href="#Indentation">Indentation</a>.  If you
change the value to the symbol <code>complete</code>, then <tt class="key">TAB</tt> first
tries to indent the current line, and if the line was already
indented, it tries to complete the text at point (see <a href="#Symbol-Completion">Symbol Completion</a>).  If the value is <code>nil</code>, then <tt class="key">TAB</tt> indents the
current line only if point is at the left margin or in the line’s
indentation; otherwise, it inserts a tab character.

</p>
<a name="index-Electric-Indent-mode"></a>
<a name="index-mode_002c-Electric-Indent"></a>
<a name="index-electric_002dindent_002dmode"></a>
<p>Electric Indent mode is a global minor mode that automatically
indents the line after every <tt class="key">RET</tt> you type.  This mode is enabled
by default.  To toggle this minor mode, type <kbd>M-x
electric-indent-mode</kbd>.  To toggle the mode in a single buffer,
use <kbd>M-x electric-indent-local-mode</kbd>.

</p><hr>
<a name="Text"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Programs" accesskey="n" rel="next">Programs</a>, Previous: <a href="#Indentation" accesskey="p" rel="prev">Indentation</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Commands-for-Human-Languages"></a>
<h2 class="chapter">25 Commands for Human Languages</h2>
<a name="index-text"></a>
<a name="index-manipulating-text"></a>

<p>This chapter describes Emacs commands that act on <em>text</em>, by
which we mean sequences of characters in a human language (as opposed
to, say, a computer programming language).  These commands act in ways
that take into account the syntactic and stylistic conventions of
human languages: conventions involving words, sentences, paragraphs,
and capital letters.  There are also commands for <em>filling</em>, which
means rearranging the lines of a paragraph to be approximately equal
in length.  These commands, while intended primarily for editing text,
are also often useful for editing programs.

</p>
<p>Emacs has several major modes for editing human-language text.  If
the file contains ordinary text, use Text mode, which customizes Emacs
in small ways for the syntactic conventions of text.  Outline mode
provides special commands for operating on text with an outline
structure.  See <a href="#Outline-Mode">Outline Mode</a>.

</p>
<p>Org mode extends Outline mode and turns Emacs into a full-fledged
organizer: you can manage TODO lists, store notes and publish them in
many formats.
See the Org Info manual, which is distributed with Emacs.

</p>
<p>Emacs has other major modes for text which contains embedded
commands, such as TeX and LaTeX (see <a href="#TeX-Mode">TeX Mode</a>); HTML and
SGML (see <a href="#HTML-Mode">HTML Mode</a>); XML
(see the nXML mode Info manual, which is distributed with Emacs);
and Groff and Nroff (see <a href="#Nroff-Mode">Nroff Mode</a>).

</p>
<a name="index-ASCII-art"></a>
<p>If you need to edit ASCII art pictures made out of text characters,
use Picture mode, a special major mode for editing such pictures.
See <a href="#Picture-Mode">Picture Mode</a>.

</p>

<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Words" accesskey="1">Words</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Moving over and killing words.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Sentences" accesskey="2">Sentences</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Moving over and killing sentences.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Paragraphs" accesskey="3">段落</a>：</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Moving over paragraphs.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Pages" accesskey="4">Pages</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Moving over pages.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Quotation-Marks" accesskey="5">Quotation Marks</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Inserting quotation marks.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Filling" accesskey="6">Filling</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Filling or justifying text.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Case" accesskey="7">Case</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Changing the case of text.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Text-Mode" accesskey="8">Text Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The major modes for editing text files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Outline-Mode" accesskey="9">Outline Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Editing outlines.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Org-Mode">Org Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The Emacs organizer.

</td></tr>
<tr><td align="left" valign="top">• <a href="#TeX-Mode">TeX Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Editing TeX and LaTeX files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#HTML-Mode">HTML Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Editing HTML and SGML files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Nroff-Mode">Nroff Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Editing input to the nroff formatter.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Enriched-Text">Enriched Text</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Editing text enriched with fonts, colors, etc.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Text-Based-Tables">Text Based Tables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands for editing text-based tables.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Two_002dColumn">Two-Column</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Splitting text columns into separate windows.

</td></tr>
</tbody></table>


<a name="Words"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Sentences" accesskey="n" rel="next">Sentences</a>, Up: <a href="#Text" accesskey="u" rel="up">Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Words-1"></a>
<h3 class="section">25.1 Words</h3>
<a name="index-words"></a>
<a name="index-Meta-commands-and-words"></a>

<p>Emacs defines several commands for moving over or operating on
words:

</p>
<dl compact="compact">
<dt><kbd>M-f</kbd></dt>
<dd><p>Move forward over a word (<code>forward-word</code>).

</p></dd>
<dt><kbd>M-b</kbd></dt>
<dd><p>Move backward over a word (<code>backward-word</code>).

</p></dd>
<dt><kbd>M-d</kbd></dt>
<dd><p>Kill up to the end of a word (<code>kill-word</code>).

</p></dd>
<dt><kbd>M-<span class="key">DEL</span></kbd></dt>
<dd><p>Kill back to the beginning of a word (<code>backward-kill-word</code>).

</p></dd>
<dt><kbd>M-@</kbd></dt>
<dd><p>Set mark at the end of the next word (<code>mark-word</code>).

</p></dd>
<dt><kbd>M-t</kbd></dt>
<dd><p>Transpose two words or drag a word across others
(<code>transpose-words</code>).

</p></dd>
</dl>

<p>Notice how these keys form a series that parallels the character-based
<kbd>C-f</kbd>, <kbd>C-b</kbd>, <kbd>C-d</kbd>, <tt class="key">DEL</tt> and <kbd>C-t</kbd>.  <kbd>M-@</kbd> is
cognate to <kbd>C-@</kbd>, which is an alias for <kbd>C-<span class="key">SPC</span></kbd>.

</p>
<a name="index-M_002df"></a>
<a name="index-M_002db"></a>
<a name="index-forward_002dword"></a>
<a name="index-backward_002dword"></a>
<p>The commands <kbd>M-f</kbd> (<code>forward-word</code>) and <kbd>M-b</kbd>
(<code>backward-word</code>) move forward and backward over words.  These
<tt class="key">Meta</tt>-based key sequences are analogous to the key sequences
<kbd>C-f</kbd> and <kbd>C-b</kbd>, which move over single characters.  The
analogy extends to numeric arguments, which serve as repeat counts.
<kbd>M-f</kbd> with a negative argument moves backward, and <kbd>M-b</kbd> with
a negative argument moves forward.  Forward motion stops right after
the last letter of the word, while backward motion stops right before
the first letter.

</p>
<a name="index-M_002dd"></a>
<a name="index-kill_002dword"></a>
<p><kbd>M-d</kbd> (<code>kill-word</code>) kills the word after point.  To be
precise, it kills everything from point to the place <kbd>M-f</kbd> would
move to.  Thus, if point is in the middle of a word, <kbd>M-d</kbd> kills
just the part after point.  If some punctuation comes between point
and the next word, it is killed along with the word.  (If you wish to
kill only the next word but not the punctuation before it, simply do
<kbd>M-f</kbd> to get the end, and kill the word backwards with
<kbd>M-<span class="key">DEL</span></kbd>.)  <kbd>M-d</kbd> takes arguments just like <kbd>M-f</kbd>.

</p>
<a name="index-backward_002dkill_002dword"></a>
<a name="index-M_002dDEL"></a>
<p><kbd>M-<span class="key">DEL</span></kbd> (<code>backward-kill-word</code>) kills the word before
point.  It kills everything from point back to where <kbd>M-b</kbd> would
move to.  For instance, if point is after the space in ‘<samp>FOO,&nbsp;BAR</samp>’<!-- /@w -->, it kills ‘<samp>FOO,&nbsp;</samp>’<!-- /@w -->.  If you wish to kill just
‘<samp>FOO</samp>’, and not the comma and the space, use <kbd>M-b M-d</kbd> instead
of <kbd>M-<span class="key">DEL</span></kbd>.

</p>
<p><kbd>M-t</kbd> (<code>transpose-words</code>) exchanges the word before or
containing point with the following word.  The delimiter characters between
the words do not move.  For example, ‘<samp>FOO,&nbsp;BAR</samp>’<!-- /@w -->  transposes into
‘<samp>BAR,&nbsp;FOO</samp>’<!-- /@w -->  rather than ‘<samp>BAR&nbsp;FOO,<!-- /@w --></samp>’.  See <a href="#Transpose">Transpose</a>, for
more on transposition.

</p>
<a name="index-M_002d_0040-1"></a>
<p>To operate on words with an operation which acts on the region, use
the command <kbd>M-@</kbd> (<code>mark-word</code>).  This command sets the mark
where <kbd>M-f</kbd> would move to.  See <a href="#Marking-Objects">Marking Objects</a>, for more
information about this command.

</p>
<p>The word commands’ understanding of word boundaries is controlled by
the syntax table.  Any character can, for example, be declared to be a
word delimiter.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Syntax-Tables">Syntax Tables</a> in <cite>The Emacs
Lisp Reference Manual</cite>.

</p>
<p>In addition, see <a href="#Position-Info">Position Info</a> for the <kbd>M-=</kbd>
(<code>count-words-region</code>) and <kbd>M-x count-words</kbd> commands, which
count and report the number of words in the region or buffer.

</p>

<a name="Sentences"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Paragraphs" accesskey="n" rel="next">Paragraphs</a>, Previous: <a href="#Words" accesskey="p" rel="prev">Words</a>, Up: <a href="#Text" accesskey="u" rel="up">Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Sentences-1"></a>
<h3 class="section">25.2 Sentences</h3>
<a name="index-sentences"></a>
<a name="index-manipulating-sentences"></a>

<p>The Emacs commands for manipulating sentences and paragraphs are
mostly on Meta keys, like the word-handling commands.

</p>
<dl compact="compact">
<dt><kbd>M-a</kbd></dt>
<dd><p>Move back to the beginning of the sentence (<code>backward-sentence</code>).

</p></dd>
<dt><kbd>M-e</kbd></dt>
<dd><p>Move forward to the end of the sentence (<code>forward-sentence</code>).

</p></dd>
<dt><kbd>M-k</kbd></dt>
<dd><p>Kill forward to the end of the sentence (<code>kill-sentence</code>).

</p></dd>
<dt><kbd>C-x <span class="key">DEL</span></kbd></dt>
<dd><p>Kill back to the beginning of the sentence (<code>backward-kill-sentence</code>).

</p></dd>
</dl>

<a name="index-M_002da"></a>
<a name="index-M_002de"></a>
<a name="index-backward_002dsentence"></a>
<a name="index-forward_002dsentence"></a>
<p>The commands <kbd>M-a</kbd> (<code>backward-sentence</code>) and <kbd>M-e</kbd>
(<code>forward-sentence</code>) move to the beginning and end of the current
sentence, respectively.  Their bindings were chosen to resemble
<kbd>C-a</kbd> and <kbd>C-e</kbd>, which move to the beginning and end of a
line.  Unlike them, <kbd>M-a</kbd> and <kbd>M-e</kbd> move over successive
sentences if repeated.

</p>
<p>Moving backward over a sentence places point just before the first
character of the sentence; moving forward places point right after the
punctuation that ends the sentence.  Neither one moves over the
whitespace at the sentence boundary.

</p>
<a name="index-M_002dk"></a>
<a name="index-kill_002dsentence"></a>
<p>Just as <kbd>C-a</kbd> and <kbd>C-e</kbd> have a kill command, <kbd>C-k</kbd>, to
go with them, <kbd>M-a</kbd> and <kbd>M-e</kbd> have a corresponding kill
command: <kbd>M-k</kbd> (<code>kill-sentence</code>) kills from point to the end
of the sentence.  With a positive numeric argument <var>n</var>, it kills
the next <var>n</var> sentences; with a negative argument -<var>n</var>,
it kills back to the beginning of the <var>n</var>th preceding sentence.

</p>
<a name="index-C_002dx-DEL"></a>
<a name="index-backward_002dkill_002dsentence"></a>
<p>The <kbd>C-x <span class="key">DEL</span></kbd> (<code>backward-kill-sentence</code>) kills back
to the beginning of a sentence.

</p>
<p>The sentence commands assume that you follow the American typist’s
convention of putting two spaces at the end of a sentence.  That is, a
sentence ends wherever there is a ‘<samp>.</samp>’, ‘<samp>?</samp>’ or ‘<samp>!</samp>’
followed by the end of a line or two spaces, with any number of
‘<samp>)</samp>’, ‘<samp>]</samp>’, ‘<samp>'</samp>’, or ‘<samp>"</samp>’ characters allowed in
between.  A sentence also begins or ends wherever a paragraph begins
or ends.  It is useful to follow this convention, because it allows
the Emacs sentence commands to distinguish between periods that end a
sentence and periods that indicate abbreviations.

</p>
<a name="index-sentence_002dend_002ddouble_002dspace"></a>
<p>If you want to use just one space between sentences, you can set the
variable <code>sentence-end-double-space</code> to <code>nil</code> to make the
sentence commands stop for single spaces.  However, this has a
drawback: there is no way to distinguish between periods that end
sentences and those that indicate abbreviations.  For convenient and
reliable editing, we therefore recommend you follow the two-space
convention.  The variable <code>sentence-end-double-space</code> also
affects filling (see <a href="#Fill-Commands">Fill Commands</a>).

</p>
<a name="index-sentence_002dend"></a>
<p>The variable <code>sentence-end</code> controls how to recognize the end
of a sentence.  If non-<code>nil</code>, its value should be a regular
expression, which is used to match the last few characters of a
sentence, together with the whitespace following the sentence
(see <a href="#Regexps">Regexps</a>).  If the value is <code>nil</code>, the default, then
Emacs computes sentence ends according to various criteria such as the
value of <code>sentence-end-double-space</code>.

</p>
<a name="index-sentence_002dend_002dwithout_002dperiod"></a>
<p>Some languages, such as Thai, do not use periods to indicate the end
of a sentence.  Set the variable <code>sentence-end-without-period</code> to
<code>t</code> in such cases.

</p>

<a name="Paragraphs"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Pages" accesskey="n" rel="next">Pages</a>, Previous: <a href="#Sentences" accesskey="p" rel="prev">Sentences</a>, Up: <a href="#Text" accesskey="u" rel="up">Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Paragraphs-1"></a>
<h3 class="section">25.3段落</h3>
<a name="index-paragraphs"></a>
<a name="index-manipulating-paragraphs"></a>

<p>The Emacs commands for manipulating paragraphs are also on Meta keys.

</p>
<dl compact="compact">
<dt><kbd>M-{</kbd></dt>
<dd><p>Move back to previous paragraph beginning (<code>backward-paragraph</code>).

</p></dd>
<dt><kbd>M-}</kbd></dt>
<dd><p>Move forward to next paragraph end (<code>forward-paragraph</code>).

</p></dd>
<dt><kbd>M-h</kbd></dt>
<dd><p>Put point and mark around this or next paragraph (<code>mark-paragraph</code>).

</p></dd>
</dl>

<a name="index-M_002d_007b"></a>
<a name="index-M_002d_007d"></a>
<a name="index-backward_002dparagraph"></a>
<a name="index-forward_002dparagraph"></a>
<p><kbd>M-{</kbd> (<code>backward-paragraph</code>) moves to the beginning of the
current or previous paragraph, depending on where point is when the
command is invoked (see below for the definition of a paragraph).
<kbd>M-}</kbd> (<code>forward-paragraph</code>) similarly moves to the end of
the current or next paragraph.  If there is a blank line before the
paragraph, <kbd>M-{</kbd> moves to the blank line.

</p>
<a name="index-M_002dh"></a>
<a name="index-mark_002dparagraph"></a>
<p>When you wish to operate on a paragraph, type <kbd>M-h</kbd>
(<code>mark-paragraph</code>) to set the region around it.  For example,
<kbd>M-h C-w</kbd> kills the paragraph around or after point.  <kbd>M-h</kbd>
puts point at the beginning and mark at the end of the paragraph point
was in.  If point is between paragraphs (in a run of blank lines, or
at a boundary), <kbd>M-h</kbd> sets the region around the paragraph
following point.  If there are blank lines preceding the first line of
the paragraph, one of these blank lines is included in the region.  If
the region is already active, the command sets the mark without
changing point, and each subsequent <kbd>M-h</kbd> further advances the
mark by one paragraph.

</p>
<p>The definition of a paragraph depends on the major mode.  In
Fundamental mode, as well as Text mode and related modes, a paragraph
is separated from neighboring paragraphs by one or more
<em>blank lines</em>—lines that are either empty, or consist solely of
space, tab and/or formfeed characters.  In programming language modes,
paragraphs are usually defined in a similar way, so that you can use
the paragraph commands even though there are no paragraphs as such in
a program.

</p>
<p>Note that an indented line is <em>not</em> itself a paragraph break in
Text mode.  If you want indented lines to separate paragraphs, use
Paragraph-Indent Text mode instead.  See <a href="#Text-Mode">Text Mode</a>.

</p>
<p>If you set a fill prefix, then paragraphs are delimited by all lines which don’t start with the fill prefix. 请参阅<a href="#Filling">填充</a>。
</p>
<a name="index-paragraph_002dstart"></a>
<a name="index-paragraph_002dseparate"></a>
<p>The precise definition of a paragraph boundary is controlled by the
variables <code>paragraph-separate</code> and <code>paragraph-start</code>.  The
value of <code>paragraph-start</code> is a regular expression that should
match lines that either start or separate paragraphs
(see <a href="#Regexps">Regexps</a>).  The value of <code>paragraph-separate</code> is another
regular expression that should match lines that separate paragraphs
without being part of any paragraph (for example, blank lines).  Lines
that start a new paragraph and are contained in it must match only
<code>paragraph-start</code>, not <code>paragraph-separate</code>.  For example,
in Fundamental mode, <code>paragraph-start</code> is <code>"\f\\|[&nbsp;\t]*$"</code><!-- /@w -->, and <code>paragraph-separate</code> is <code>"[&nbsp;\t\f]*$"</code><!-- /@w -->.

</p>
<p>Note that <code>paragraph-start</code> and <code>paragraph-separate</code> are
matched against the text at the left margin, which is not necessarily
the beginning of the line, so these regexps should not use ‘<samp>^</samp>’ as
an anchor, to ensure that the paragraph functions will work equally
within a region of text indented by a margin setting.

</p>

<a name="Pages"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Quotation-Marks" accesskey="n" rel="next">Quotation Marks</a>, Previous: <a href="#Paragraphs" accesskey="p" rel="prev">Paragraphs</a>, Up: <a href="#Text" accesskey="u" rel="up">Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Pages-1"></a>
<h3 class="section">25.4 Pages</h3>

<a name="index-pages"></a>
<a name="index-formfeed-character"></a>
<p>Within some text files, text is divided into <em>pages</em> delimited
by the <em>formfeed character</em> (<acronym>ASCII</acronym> code 12, also denoted
as ‘<samp>control-L</samp>’), which is displayed in Emacs as the escape
sequence ‘<samp>^L</samp>’ (see <a href="#Text-Display">Text Display</a>).  Traditionally, when such
text files are printed to hardcopy, each formfeed character forces a
page break.  Most Emacs commands treat it just like any other
character, so you can insert it with <kbd>C-q C-l</kbd>, delete it with
<tt class="key">DEL</tt>, etc.  In addition, Emacs provides commands to move over
pages and operate on them.

</p>
<dl compact="compact">
<dt><kbd>M-x what-page</kbd></dt>
<dd><p>Display the page number of point, and the line number within that page.

</p></dd>
<dt><kbd>C-x [</kbd></dt>
<dd><p>Move point to previous page boundary (<code>backward-page</code>).

</p></dd>
<dt><kbd>C-x ]</kbd></dt>
<dd><p>Move point to next page boundary (<code>forward-page</code>).

</p></dd>
<dt><kbd>C-x C-p</kbd></dt>
<dd><p>Put point and mark around this page (or another page) (<code>mark-page</code>).

</p></dd>
<dt><kbd>C-x l</kbd></dt>
<dd><p>Count the lines in this page (<code>count-lines-page</code>).

</p></dd>
</dl>

<a name="index-what_002dpage"></a>
<p><kbd>M-x what-page</kbd> counts pages from the beginning of the file, and
counts lines within the page, showing both numbers in the echo area.

</p>
<a name="index-C_002dx-_005b"></a>
<a name="index-C_002dx-_005d"></a>
<a name="index-forward_002dpage"></a>
<a name="index-backward_002dpage"></a>
<p>The <kbd>C-x [</kbd> (<code>backward-page</code>) command moves point to immediately
after the previous page delimiter.  If point is already right after a page
delimiter, it skips that one and stops at the previous one.  A numeric
argument serves as a repeat count.  The <kbd>C-x ]</kbd> (<code>forward-page</code>)
command moves forward past the next page delimiter.

</p>
<a name="index-C_002dx-C_002dp"></a>
<a name="index-mark_002dpage"></a>
<p>The <kbd>C-x C-p</kbd> command (<code>mark-page</code>) puts point at the
beginning of the current page (after that page delimiter at the
front), and the mark at the end of the page (after the page delimiter
at the end).

</p>
<p><kbd>C-x C-p C-w</kbd> is a handy way to kill a page to move it
elsewhere.  If you move to another page delimiter with <kbd>C-x [</kbd> and
<kbd>C-x ]</kbd>, then yank the killed page, all the pages will be properly
delimited once again.  Making sure this works as expected is the
reason <kbd>C-x C-p</kbd> includes only the following page delimiter in the
region.

</p>
<p>A numeric argument to <kbd>C-x C-p</kbd> specifies which page to go to,
relative to the current one.  Zero means the current page, one means
the next page, and -1 means the previous one.

</p>
<a name="index-C_002dx-l"></a>
<a name="index-count_002dlines_002dpage"></a>
<p>The <kbd>C-x l</kbd> command (<code>count-lines-page</code>) is good for deciding
where to break a page in two.  It displays in the echo area the total number
of lines in the current page, and then divides it up into those preceding
the current line and those following, as in

</p>
<div class="example">
<pre class="example">Page has 96 (72+25) lines
</pre></div>

<p>    Notice that the sum is off by one; this is correct if point is not at the
beginning of a line.

</p>
<a name="index-page_002ddelimiter"></a>
<p>The variable <code>page-delimiter</code> controls where pages begin.  Its
value is a regular expression that matches the beginning of a line
that separates pages (see <a href="#Regexps">Regexps</a>).  The normal value of this
variable is <code>"^\f"</code>, which matches a formfeed character at the
beginning of a line.

</p>

<a name="Quotation-Marks"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Filling" accesskey="n" rel="next">Filling</a>, Previous: <a href="#Pages" accesskey="p" rel="prev">Pages</a>, Up: <a href="#Text" accesskey="u" rel="up">Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Quotation-Marks-1"></a>
<h3 class="section">25.5引号</h3>
<a name="index-Quotation-marks"></a>
<a name="index-Electric-Quote-mode"></a>
<a name="index-mode_002c-Electric-Quote"></a>
<a name="index-curly-quotes"></a>
<a name="index-curved-quotes"></a>
<a name="index-guillemets"></a>
<a name="index-electric_002dquote_002dmode"></a>
<p>一种常见的引用方式是打字机约定，它使用直撇号<tt>‘像这样’</tt>或双引号<tt>“像这样”</tt>引用。另一种常见的方法是弯曲引号约定，它使用左右单引号或双引号‘<tt>像这样</tt>’或“<tt>像这样</tt>”<a name="DOCF11" href="#FOOT11"><sup>11</sup></a>。在文本文件中，打字机引号简单且便携；弧形引号不那么模棱两可，通常看起来更美观。
</p>
<a name="index-electric_002dquote_002dchars"></a>
<p>Electric Quote mode makes it easier to type curved quotes.  As you
type characters it optionally converts <kbd>`</kbd> to <tt>‘</tt>, <kbd>'</kbd> to <tt>’</tt>,
<kbd>``</kbd> to <tt>“</tt>, and <kbd>''</kbd> to <tt>”</tt>.  It’s possible to change the
default quotes listed above, by customizing the variable
<code>electric-quote-chars</code>, a list of four characters, where the
items correspond to the left single quote, the right single quote, the
left double quote and the right double quote, respectively, whose
default value is <code>'(?<span class="roman">‘</span> ?<span class="roman">’</span> ?<span class="roman">“</span> ?<span class="roman">”</span>)</code>.

</p>
<a name="index-electric_002dquote_002dparagraph"></a>
<a name="index-electric_002dquote_002dcomment"></a>
<a name="index-electric_002dquote_002dstring"></a>
<p>You can customize the behavior of Electric Quote mode by customizing
variables that control where it is active.  It is active in text
paragraphs if <code>electric-quote-paragraph</code> is non-<code>nil</code>, in
programming-language comments if <code>electric-quote-comment</code> is
non-<code>nil</code>, and in programming-language strings if
<code>electric-quote-string</code> is non-<code>nil</code>.  The default is
<code>nil</code> for <code>electric-quote-string</code> and <code>t</code> for the other
variables.

</p>
<a name="index-electric_002dquote_002dreplace_002ddouble"></a>
<p>You can also set the option <code>electric-quote-replace-double</code> to
a non-<code>nil</code> value.  Then, typing <tt>"</tt> insert an appropriate
curved double quote depending on context: <tt>“</tt> at the beginning of
the buffer or after a line break, whitespace, opening parenthesis, or
quote character, and <tt>”</tt> otherwise.

</p>
<p>Electric Quote mode is disabled by default.  To toggle it in a
single buffer, use <kbd>M-x electric-quote-local-mode</kbd>.
To toggle it globally, type
<kbd>M-x electric-quote-mode</kbd>.  To suppress it for a single use,
type <kbd>C-q `</kbd> or <kbd>C-q '</kbd> instead of <kbd>`</kbd> or <kbd>'</kbd>.  To
insert a curved quote even when Electric Quote is disabled or
inactive, you can type <kbd>C-x 8 [</kbd> for <tt>‘</tt>, <kbd>C-x 8 ]</kbd> for
<tt>’</tt>, <kbd>C-x 8 {</kbd> for “, and <kbd>C-x 8 }</kbd> for ”.
See <a href="#Inserting-Text">Inserting Text</a>.  Note that the value of
<code>electric-quote-chars</code> does not affect these keybindings, they
are not keybindings of <code>electric-quote-mode</code> but bound in
<code>global-map</code>.

</p>

<a name="Filling"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Case" accesskey="n" rel="next">Case</a>, Previous: <a href="#Quotation-Marks" accesskey="p" rel="prev">Quotation Marks</a>, Up: <a href="#Text" accesskey="u" rel="up">Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Filling-Text"></a>
<h3 class="section">25.6 Filling Text</h3>
<a name="index-filling-text"></a>

<p><em>Filling</em> text means breaking it up into lines that fit a
specified width.  Emacs does filling in two ways.  In Auto Fill mode,
inserting text with self-inserting characters also automatically fills
it.  There are also explicit fill commands that you can use when editing
text.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Auto-Fill" accesskey="1">Auto Fill</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Auto Fill mode breaks long lines automatically.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Fill-Commands" accesskey="2">Fill Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands to refill paragraphs and center lines.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Fill-Prefix" accesskey="3">Fill Prefix</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Filling paragraphs that are indented or in a comment, etc.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Adaptive-Fill" accesskey="4">Adaptive Fill</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How Emacs can determine the fill prefix automatically.

</td></tr>
</tbody></table>


<a name="Auto-Fill"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Fill-Commands" accesskey="n" rel="next">Fill Commands</a>, Up: <a href="#Filling" accesskey="u" rel="up">Filling</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Auto-Fill-Mode"></a>
<h4 class="subsection">25.6.1 Auto Fill Mode</h4>
<a name="index-Auto-Fill-mode"></a>
<a name="index-mode_002c-Auto-Fill"></a>

<p><em>Auto Fill</em> mode is a buffer-local minor mode (see <a href="#Minor-Modes">Minor Modes</a>) in which lines are broken automatically at spaces when the
line becomes too wide.

</p>
<dl compact="compact">
<dt><kbd>M-x auto-fill-mode</kbd></dt>
<dd><p>Enable or disable Auto Fill mode.

</p></dd>
<dt><kbd><span class="key">SPC</span></kbd></dt>
<dt><kbd><span class="key">RET</span></kbd></dt>
<dd><p>In Auto Fill mode, break lines when appropriate.

</p></dd>
</dl>

<a name="index-auto_002dfill_002dmode"></a>
<p>The mode command <kbd>M-x auto-fill-mode</kbd> toggles Auto Fill mode in
the current buffer.  Like any other minor mode, with a positive
numeric argument, it enables Auto Fill mode, and with a negative
argument it disables it.  To enable Auto Fill mode automatically in
certain major modes, add <code>auto-fill-mode</code> to the mode hooks
(see <a href="#Major-Modes">Major Modes</a>).  When Auto Fill mode is enabled, the mode
indicator ‘<samp>Fill</samp>’ appears in the mode line (see <a href="#Mode-Line">Mode Line</a>).

</p>
<p>Auto Fill mode breaks lines automatically at spaces whenever they
get longer than the desired width.  This line breaking occurs only
when you type <tt class="key">SPC</tt> or <tt class="key">RET</tt>.  If you wish to insert a space
or newline without permitting line-breaking, type <kbd>C-q <span class="key">SPC</span></kbd>
or <kbd>C-q C-j</kbd> respectively.  Also, <kbd>C-o</kbd> inserts a newline
without line breaking.

</p>
<p>When Auto Fill mode breaks a line, it tries to obey the
<em>adaptive fill prefix</em>: if a fill prefix can be deduced from the
first and/or second line of the current paragraph, it is inserted into
the new line (see <a href="#Adaptive-Fill">Adaptive Fill</a>).  Otherwise the new line is
indented, as though you had typed <tt class="key">TAB</tt> on it
(see <a href="#Indentation">Indentation</a>).  In a programming language mode, if a line is
broken in the middle of a comment, the comment is split by inserting
new comment delimiters as appropriate.

</p>
<p>Auto Fill mode does not refill entire paragraphs; it breaks lines
but does not merge lines.  Therefore, editing in the middle of a
paragraph can result in a paragraph that is not correctly filled.  To
fill it, call the explicit fill commands
(see <a href="#Fill-Commands">Fill Commands</a>).

</p>

<a name="Fill-Commands"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Fill-Prefix" accesskey="n" rel="next">Fill Prefix</a>, Previous: <a href="#Auto-Fill" accesskey="p" rel="prev">Auto Fill</a>, Up: <a href="#Filling" accesskey="u" rel="up">Filling</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Explicit-Fill-Commands"></a>
<h4 class="subsection">25.6.2 Explicit Fill Commands</h4>

<dl compact="compact">
<dt><kbd>M-q</kbd></dt>
<dd><p>Fill current paragraph (<code>fill-paragraph</code>).

</p></dd>
<dt><kbd>C-x f</kbd></dt>
<dd><p>Set the fill column (<code>set-fill-column</code>).

</p></dd>
<dt><kbd>M-x fill-region</kbd></dt>
<dd><p>Fill each paragraph in the region (<code>fill-region</code>).

</p></dd>
<dt><kbd>M-x fill-region-as-paragraph</kbd></dt>
<dd><p>Fill the region, considering it as one paragraph.

</p></dd>
<dt><kbd>M-o M-s</kbd></dt>
<dd><p>Center a line.

</p></dd>
</dl>

<a name="index-M_002dq"></a>
<a name="index-fill_002dparagraph"></a>
<p>The command <kbd>M-q</kbd> (<code>fill-paragraph</code>) <em>fills</em> the
current paragraph.  It redistributes the line breaks within the
paragraph, and deletes any excess space and tab characters occurring
within the paragraph, in such a way that the lines end up fitting
within a certain maximum width.

</p>
<a name="index-fill_002dregion"></a>
<p>Normally, <kbd>M-q</kbd> acts on the paragraph where point is, but if
point is between paragraphs, it acts on the paragraph after point.  If
the region is active, it acts instead on the text in the region.  You
can also call <kbd>M-x fill-region</kbd> to specifically fill the text in
the region.

</p>
<a name="index-fill_002dregion_002das_002dparagraph"></a>
<p><kbd>M-q</kbd> and <code>fill-region</code> use the usual Emacs criteria for
finding paragraph boundaries (see <a href="#Paragraphs">Paragraphs</a>).  For more control,
you can use <kbd>M-x fill-region-as-paragraph</kbd>, which refills
everything between point and mark as a single paragraph.  This command
deletes any blank lines within the region, so separate blocks of text
end up combined into one block.

</p>
<a name="index-justification"></a>
<p>A numeric argument to <kbd>M-q</kbd> tells it to <em>justify</em> the text
as well as filling it.  This means that extra spaces are inserted to
make the right margin line up exactly at the fill column.  To remove
the extra spaces, use <kbd>M-q</kbd> with no argument.  (Likewise for
<code>fill-region</code>.)

</p>
<a name="index-fill_002dcolumn"></a>
<a name="index-C_002dx-f"></a>
<a name="index-set_002dfill_002dcolumn"></a>
<p>The maximum line width for filling is specified by the buffer-local
variable <code>fill-column</code>.  The default value (see <a href="#Locals">Locals</a>) is
70.  The easiest way to set <code>fill-column</code> in the current buffer
is to use the command <kbd>C-x f</kbd> (<code>set-fill-column</code>).  With a
numeric argument, it uses that as the new fill column.  With just
<kbd>C-u</kbd> as argument, it sets <code>fill-column</code> to the current
horizontal position of point.

</p>
<a name="index-M_002do-M_002ds-_0028Text-mode_0029"></a>
<a name="index-centering"></a>
<a name="index-center_002dline"></a>
<p>The command <kbd>M-o M-s</kbd> (<code>center-line</code>) centers the current line
within the current fill column.  With an argument <var>n</var>, it centers
<var>n</var> lines individually and moves past them.  This binding is
made by Text mode and is available only in that and related modes
(see <a href="#Text-Mode">Text Mode</a>).

</p>
<p>By default, Emacs considers a period followed by two spaces or by a
newline as the end of a sentence; a period followed by just one space
indicates an abbreviation, not the end of a sentence.  Accordingly,
the fill commands will not break a line after a period followed by
just one space.  If you set the variable
<code>sentence-end-double-space</code> to <code>nil</code>, the fill commands will
break a line after a period followed by one space, and put just one
space after each period.  See <a href="#Sentences">Sentences</a>, for other effects and
possible drawbacks of this.

</p>
<a name="index-colon_002ddouble_002dspace"></a>
<p>If the variable <code>colon-double-space</code> is non-<code>nil</code>, the
fill commands put two spaces after a colon.

</p>
<a name="index-fill_002dnobreak_002dpredicate"></a>
<p>To specify additional conditions where line-breaking is not allowed,
customize the abnormal hook variable <code>fill-nobreak-predicate</code>
(see <a href="#Hooks">Hooks</a>).  Each function in this hook is called with no
arguments, with point positioned where Emacs is considering breaking a
line.  If a function returns a non-<code>nil</code> value, Emacs will not
break the line there.  Functions you can use there include:
<code>fill-single-word-nobreak-p</code> (don’t break after the first word of
a sentence or before the last); <code>fill-single-char-nobreak-p</code>
(don’t break after a one-letter word preceded by a whitespace
character); <code>fill-french-nobreak-p</code> (don’t break after ‘<samp>(</samp>’
or before ‘<samp>)</samp>’, ‘<samp>:</samp>’ or ‘<samp>?</samp>’); and
<code>fill-polish-nobreak-p</code> (don’t break after a one letter word,
even if preceded by a non-whitespace character).

</p>
<p>Emacs can display an indicator in the <code>fill-column</code> position
using the Display fill column indicator mode 
(see <a href="#Displaying-Boundaries">display-fill-column-indicator</a>).

</p>

<a name="Fill-Prefix"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Adaptive-Fill" accesskey="n" rel="next">Adaptive Fill</a>, Previous: <a href="#Fill-Commands" accesskey="p" rel="prev">Fill Commands</a>, Up: <a href="#Filling" accesskey="u" rel="up">Filling</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="The-Fill-Prefix"></a>
<h4 class="subsection">25.6.3 The Fill Prefix</h4>

<a name="index-fill-prefix"></a>
<p>The <em>fill prefix</em> feature allows paragraphs to be filled so that
each line starts with a special string of characters (such as a
sequence of spaces, giving an indented paragraph).  You can specify a
fill prefix explicitly; otherwise, Emacs tries to deduce one
automatically (see <a href="#Adaptive-Fill">Adaptive Fill</a>).

</p>
<dl compact="compact">
<dt><kbd>C-x .</kbd></dt>
<dd><p>Set the fill prefix (<code>set-fill-prefix</code>).

</p></dd>
<dt><kbd>M-q</kbd></dt>
<dd><p>Fill a paragraph using current fill prefix (<code>fill-paragraph</code>).

</p></dd>
<dt><kbd>M-x fill-individual-paragraphs</kbd></dt>
<dd><p>Fill the region, considering each change of indentation as starting a
new paragraph.

</p></dd>
<dt><kbd>M-x fill-nonuniform-paragraphs</kbd></dt>
<dd><p>Fill the region, considering only paragraph-separator lines as starting
a new paragraph.

</p></dd>
</dl>

<a name="index-C_002dx-_002e"></a>
<a name="index-set_002dfill_002dprefix"></a>
<p>To specify a fill prefix for the current buffer, move to a line that
starts with the desired prefix, put point at the end of the prefix,
and type <kbd><span class="nolinebreak">C-x</span>&nbsp;.</kbd><!-- /@w -->  (<code>set-fill-prefix</code>).  (That’s a period
after the <kbd>C-x</kbd>.)  To turn off the fill prefix, specify an empty
prefix: type <kbd><span class="nolinebreak">C-x</span>&nbsp;.</kbd><!-- /@w -->  with point at the beginning of a line.

</p>
<p>When a fill prefix is in effect, the fill commands remove the fill
prefix from each line of the paragraph before filling, and insert it
on each line after filling.  (The beginning of the first line of the
paragraph is left unchanged, since often that is intentionally
different.)  Auto Fill mode also inserts the fill prefix automatically
when it makes a new line (see <a href="#Auto-Fill">Auto Fill</a>).  The <kbd>C-o</kbd> command
inserts the fill prefix on new lines it creates, when you use it at
the beginning of a line (see <a href="#Blank-Lines">Blank Lines</a>).  Conversely, the
command <kbd>M-^</kbd> deletes the prefix (if it occurs) after the newline
that it deletes (see <a href="#Indentation">Indentation</a>).

</p>
<p>For example, if <code>fill-column</code> is 40 and you set the fill prefix
to ‘<samp>;; </samp>’, then <kbd>M-q</kbd> in the following text

</p>
<div class="example">
<pre class="example">;; This is an
;; example of a paragraph
;; inside a Lisp-style comment.
</pre></div>

<p>produces this:

</p>
<div class="example">
<pre class="example">;; This is an example of a paragraph
;; inside a Lisp-style comment.
</pre></div>

<p>Lines that do not start with the fill prefix are considered to start
paragraphs, both in <kbd>M-q</kbd> and the paragraph commands; this gives
good results for paragraphs with hanging indentation (every line
indented except the first one).  Lines which are blank or indented once
the prefix is removed also separate or start paragraphs; this is what
you want if you are writing multi-paragraph comments with a comment
delimiter on each line.

</p>
<a name="index-fill_002dindividual_002dparagraphs"></a>
<p>You can use <kbd>M-x fill-individual-paragraphs</kbd> to set the fill
prefix for each paragraph automatically.  This command divides the
region into paragraphs, treating every change in the amount of
indentation as the start of a new paragraph, and fills each of these
paragraphs.  Thus, all the lines in one paragraph have the same
amount of indentation.  That indentation serves as the fill prefix for
that paragraph.

</p>
<a name="index-fill_002dnonuniform_002dparagraphs"></a>
<p><kbd>M-x fill-nonuniform-paragraphs</kbd> is a similar command that divides
the region into paragraphs in a different way.  It considers only
paragraph-separating lines (as defined by <code>paragraph-separate</code>) as
starting a new paragraph.  Since this means that the lines of one
paragraph may have different amounts of indentation, the fill prefix
used is the smallest amount of indentation of any of the lines of the
paragraph.  This gives good results with styles that indent a paragraph’s
first line more or less that the rest of the paragraph.

</p>
<a name="index-fill_002dprefix"></a>
<p>The fill prefix is stored in the variable <code>fill-prefix</code>.  Its value
is a string, or <code>nil</code> when there is no fill prefix.  This is a
per-buffer variable; altering the variable affects only the current buffer,
but there is a default value which you can change as well.  See <a href="#Locals">Locals</a>.

</p>
<p>The <code>indentation</code> text property provides another way to control
the amount of indentation paragraphs receive.  See <a href="#Enriched-Indentation">Enriched Indentation</a>.

</p>

<a name="Adaptive-Fill"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Fill-Prefix" accesskey="p" rel="prev">Fill Prefix</a>, Up: <a href="#Filling" accesskey="u" rel="up">Filling</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Adaptive-Filling"></a>
<h4 class="subsection">25.6.4 Adaptive Filling</h4>

<a name="index-adaptive-filling"></a>
<p>The fill commands can deduce the proper fill prefix for a paragraph
automatically in certain cases: either whitespace or certain punctuation
characters at the beginning of a line are propagated to all lines of the
paragraph.

</p>
<p>If the paragraph has two or more lines, the fill prefix is taken from
the paragraph’s second line, but only if it appears on the first line as
well.

</p>
<p>If a paragraph has just one line, fill commands <em>may</em> take a
prefix from that line.  The decision is complicated because there are
three reasonable things to do in such a case:

</p>
<ul>
<li>  Use the first line’s prefix on all the lines of the paragraph.



</li><li>  Indent subsequent lines with whitespace, so that they line up under the
text that follows the prefix on the first line, but don’t actually copy
the prefix from the first line.



</li><li>  Don’t do anything special with the second and following lines.

</li></ul>

<p>All three of these styles of formatting are commonly used.  So the
fill commands try to determine what you would like, based on the prefix
that appears and on the major mode.  Here is how.

</p>
<a name="index-adaptive_002dfill_002dfirst_002dline_002dregexp"></a>
<p>If the prefix found on the first line matches
<code>adaptive-fill-first-line-regexp</code>, or if it appears to be a
comment-starting sequence (this depends on the major mode), then the
prefix found is used for filling the paragraph, provided it would not
act as a paragraph starter on subsequent lines.

</p>
<p>Otherwise, the prefix found is converted to an equivalent number of
spaces, and those spaces are used as the fill prefix for the rest of the
lines, provided they would not act as a paragraph starter on subsequent
lines.

</p>
<p>In Text mode, and other modes where only blank lines and page
delimiters separate paragraphs, the prefix chosen by adaptive filling
never acts as a paragraph starter, so it can always be used for filling.

</p>
<a name="index-adaptive_002dfill_002dmode"></a>
<a name="index-adaptive_002dfill_002dregexp"></a>
<p>The variable <code>adaptive-fill-regexp</code> determines what kinds of line
beginnings can serve as a fill prefix: any characters at the start of
the line that match this regular expression are used.  If you set the
variable <code>adaptive-fill-mode</code> to <code>nil</code>, the fill prefix is
never chosen automatically.

</p>
<a name="index-adaptive_002dfill_002dfunction"></a>
<p>You can specify more complex ways of choosing a fill prefix
automatically by setting the variable <code>adaptive-fill-function</code> to a
function.  This function is called with point after the left margin of a
line, and it should return the appropriate fill prefix based on that
line.  If it returns <code>nil</code>, <code>adaptive-fill-regexp</code> gets
a chance to find a prefix.

</p>

<a name="Case"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Text-Mode" accesskey="n" rel="next">Text Mode</a>, Previous: <a href="#Filling" accesskey="p" rel="prev">Filling</a>, Up: <a href="#Text" accesskey="u" rel="up">Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Case-Conversion-Commands"></a>
<h3 class="section">25.7 Case Conversion Commands</h3>
<a name="index-case-conversion"></a>

<p>Emacs has commands for converting either a single word or any arbitrary
range of text to upper case or to lower case.

</p>
<dl compact="compact">
<dt><kbd>M-l</kbd></dt>
<dd><p>Convert following word to lower case (<code>downcase-word</code>).

</p></dd>
<dt><kbd>M-u</kbd></dt>
<dd><p>Convert following word to upper case (<code>upcase-word</code>).

</p></dd>
<dt><kbd>M-c</kbd></dt>
<dd><p>Capitalize the following word (<code>capitalize-word</code>).

</p></dd>
<dt><kbd>C-x C-l</kbd></dt>
<dd><p>Convert region to lower case (<code>downcase-region</code>).

</p></dd>
<dt><kbd>C-x C-u</kbd></dt>
<dd><p>Convert region to upper case (<code>upcase-region</code>).

</p></dd>
</dl>

<a name="index-M_002dl"></a>
<a name="index-M_002du"></a>
<a name="index-M_002dc"></a>
<a name="index-words_002c-case-conversion"></a>
<a name="index-converting-text-to-upper-or-lower-case"></a>
<a name="index-capitalizing-words"></a>
<a name="index-downcase_002dword"></a>
<a name="index-upcase_002dword"></a>
<a name="index-capitalize_002dword"></a>
<p><kbd>M-l</kbd> (<code>downcase-word</code>) converts the word after point to
lower case, moving past it.  Thus, repeating <kbd>M-l</kbd> converts
successive words.  <kbd>M-u</kbd> (<code>upcase-word</code>) converts to all
capitals instead, while <kbd>M-c</kbd> (<code>capitalize-word</code>) puts the
first letter of the word into upper case and the rest into lower case.
All these commands convert several words at once if given an argument.
They are especially convenient for converting a large amount of text
from all upper case to mixed case, because you can move through the
text using <kbd>M-l</kbd>, <kbd>M-u</kbd> or <kbd>M-c</kbd> on each word as
appropriate, occasionally using <kbd>M-f</kbd> instead to skip a word.

</p>
<p>When given a negative argument, the word case conversion commands apply
to the appropriate number of words before point, but do not move point.
This is convenient when you have just typed a word in the wrong case: you
can give the case conversion command and continue typing.

</p>
<p>If a word case conversion command is given in the middle of a word,
it applies only to the part of the word which follows point.  (This is
comparable to what <kbd>M-d</kbd> (<code>kill-word</code>) does.)  With a
negative argument, case conversion applies only to the part of the
word before point.

</p>
<a name="index-C_002dx-C_002dl"></a>
<a name="index-C_002dx-C_002du"></a>
<a name="index-downcase_002dregion"></a>
<a name="index-upcase_002dregion"></a>
<p>The other case conversion commands are <kbd>C-x C-u</kbd>
(<code>upcase-region</code>) and <kbd>C-x C-l</kbd> (<code>downcase-region</code>), which
convert everything between point and mark to the specified case.  Point and
mark do not move.

</p>
<p>The region case conversion commands <code>upcase-region</code> and
<code>downcase-region</code> are normally disabled.  This means that they ask
for confirmation if you try to use them.  When you confirm, you may
enable the command, which means it will not ask for confirmation again.
See <a href="#Disabling">Disabling</a>.

</p>

<a name="Text-Mode"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Outline-Mode" accesskey="n" rel="next">Outline Mode</a>, Previous: <a href="#Case" accesskey="p" rel="prev">Case</a>, Up: <a href="#Text" accesskey="u" rel="up">Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Text-Mode-1"></a>
<h3 class="section">25.8 Text Mode</h3>
<a name="index-Text-mode"></a>
<a name="index-mode_002c-Text"></a>
<a name="index-text_002dmode"></a>

<p>Text mode is a major mode for editing files of text in a human
language.  Files which have names ending in the extension <samp>.txt</samp>
are usually opened in Text mode (see <a href="#Choosing-Modes">Choosing Modes</a>).  To
explicitly switch to Text mode, type <kbd>M-x text-mode</kbd>.

</p>
<p>In Text mode, only blank lines and page delimiters separate
paragraphs.  As a result, paragraphs can be indented, and adaptive
filling determines what indentation to use when filling a paragraph.
See <a href="#Adaptive-Fill">Adaptive Fill</a>.

</p>
<a name="index-TAB-_0028Text-mode_0029"></a>
<p>In Text mode, the <tt class="key">TAB</tt> (<code>indent-for-tab-command</code>) command
usually inserts whitespace up to the next tab stop, instead of
indenting the current line.  See <a href="#Indentation">Indentation</a>, for details.

</p>
<p>Text mode turns off the features concerned with comments except when
you explicitly invoke them.  It changes the syntax table so that
apostrophes are considered part of words (e.g., ‘<samp>don't</samp>’ is
considered one word).  However, if a word starts with an apostrophe,
it is treated as a prefix for the purposes of capitalization
(e.g., <kbd>M-c</kbd> converts ‘<samp>'hello'</samp>’ into ‘<samp>'Hello'</samp>’, as
expected).

</p>
<a name="index-Paragraph_002dIndent-Text-mode"></a>
<a name="index-mode_002c-Paragraph_002dIndent-Text"></a>
<a name="index-paragraph_002dindent_002dtext_002dmode"></a>
<a name="index-paragraph_002dindent_002dminor_002dmode"></a>
<p>If you indent the first lines of paragraphs, then you should use
Paragraph-Indent Text mode (<kbd>M-x paragraph-indent-text-mode</kbd>)
rather than Text mode.  In that mode, you do not need to have blank
lines between paragraphs, because the first-line indentation is
sufficient to start a paragraph; however paragraphs in which every
line is indented are not supported.  Use <kbd>M-x
paragraph-indent-minor-mode</kbd> to enable an equivalent minor mode for
situations where you shouldn’t change the major mode—in mail
composition, for instance.

</p>
<a name="index-M_002dTAB-_0028Text-mode_0029"></a>
<p>Text mode binds <kbd>M-<span class="key">TAB</span></kbd> to <code>ispell-complete-word</code>.
This command performs completion of the partial word in the buffer
before point, using the spelling dictionary as the space of possible
words.  See <a href="#Spelling">Spelling</a>.  If your window manager defines
<kbd>M-<span class="key">TAB</span></kbd> to switch windows, you can type <kbd><span class="key">ESC</span>
<span class="key">TAB</span></kbd> or <kbd>C-M-i</kbd> instead.

</p>
<a name="index-text_002dmode_002dhook"></a>
<p>Entering Text mode runs the mode hook <code>text-mode-hook</code>
(see <a href="#Major-Modes">Major Modes</a>).

</p>
<p>The following sections describe several major modes that are
<em>derived</em> from Text mode.  These derivatives share most of the
features of Text mode described above.  In particular, derivatives of
Text mode run <code>text-mode-hook</code> prior to running their own mode
hooks.

</p>

<a name="Outline-Mode"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Org-Mode" accesskey="n" rel="next">Org Mode</a>, Previous: <a href="#Text-Mode" accesskey="p" rel="prev">Text Mode</a>, Up: <a href="#Text" accesskey="u" rel="up">Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Outline-Mode-1"></a>
<h3 class="section">25.9 Outline Mode</h3>
<a name="index-Outline-mode"></a>
<a name="index-mode_002c-Outline"></a>
<a name="index-invisible-lines"></a>

<a name="index-outline_002dmode"></a>
<a name="index-outline_002dminor_002dmode"></a>
<a name="index-outline_002dminor_002dmode_002dprefix"></a>
<a name="index-outline_002dmode_002dhook"></a>
<p>Outline mode is a major mode derived from Text mode, which is
specialized for editing outlines.  It provides commands to navigate
between entries in the outline structure, and commands to make parts
of a buffer temporarily invisible, so that the outline structure may
be more easily viewed.  Type <kbd>M-x outline-mode</kbd> to switch to
Outline mode.  Entering Outline mode runs the hook
<code>text-mode-hook</code> followed by the hook <code>outline-mode-hook</code>
(see <a href="#Hooks">Hooks</a>).

</p>
<p>When you use an Outline mode command to make a line invisible
(see <a href="#Outline-Visibility">Outline Visibility</a>), the line disappears from the screen.  An
ellipsis (three periods in a row) is displayed at the end of the
previous visible line, to indicate the hidden text.  Multiple
consecutive invisible lines produce just one ellipsis.

</p>
<p>Editing commands that operate on lines, such as <kbd>C-n</kbd> and
<kbd>C-p</kbd>, treat the text of the invisible line as part of the
previous visible line.  Killing the ellipsis at the end of a visible
line really kills all the following invisible text associated with the
ellipsis.

</p>
<p>Outline minor mode is a buffer-local minor mode which provides the
same commands as the major mode, Outline mode, but can be used in
conjunction with other major modes.  You can type <kbd>M-x
outline-minor-mode</kbd> to toggle Outline minor mode in the current
buffer, or use a file-local variable setting to enable it in a
specific file (see <a href="#File-Variables">File Variables</a>).

</p>
<a name="index-C_002dc-_0040-_0028Outline-minor-mode_0029"></a>
<p>The major mode, Outline mode, provides special key bindings on the
<kbd>C-c</kbd> prefix.  Outline minor mode provides similar bindings with
<kbd>C-c @</kbd> as the prefix; this is to reduce the conflicts with the
major mode’s special commands.  (The variable
<code>outline-minor-mode-prefix</code> controls the prefix used.)

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Outline-Format" accesskey="1">Outline Format</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">What the text of an outline looks like.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Outline-Motion" accesskey="2">Outline Motion</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Special commands for moving through outlines.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Outline-Visibility" accesskey="3">Outline Visibility</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands to control what is visible.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Outline-Views" accesskey="4">Outline Views</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Outlines and multiple views.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Foldout" accesskey="5">Foldout</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Folding means zooming in on outlines.

</td></tr>
</tbody></table>


<a name="Outline-Format"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Outline-Motion" accesskey="n" rel="next">Outline Motion</a>, Up: <a href="#Outline-Mode" accesskey="u" rel="up">Outline Mode</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Format-of-Outlines"></a>
<h4 class="subsection">25.9.1 Format of Outlines</h4>

<a name="index-heading-lines-_0028Outline-mode_0029"></a>
<a name="index-body-lines-_0028Outline-mode_0029"></a>
<p>Outline mode assumes that the lines in the buffer are of two types:
<em>heading lines</em> and <em>body lines</em>.  A heading line represents a
topic in the outline.  Heading lines start with one or more asterisk
(‘<samp>*</samp>’) characters; the number of asterisks determines the depth of
the heading in the outline structure.  Thus, a heading line with one
‘<samp>*</samp>’ is a major topic; all the heading lines with two ‘<samp>*</samp>’s
between it and the next one-‘<samp>*</samp>’ heading are its subtopics; and so
on.  Any line that is not a heading line is a body line.  Body lines
belong with the preceding heading line.  Here is an example:

</p>
<div class="example">
<pre class="example">* Food
This is the body,
which says something about the topic of food.

** Delicious Food
This is the body of the second-level header.

** Distasteful Food
This could have
a body too, with
several lines.

*** Dormitory Food

* Shelter
Another first-level topic with its header line.
</pre></div>

<p>A heading line together with all following body lines is called
collectively an <em>entry</em>.  A heading line together with all following
deeper heading lines and their body lines is called a <em>subtree</em>.

</p>
<a name="index-outline_002dregexp"></a>
<p>You can customize the criterion for distinguishing heading lines by
setting the variable <code>outline-regexp</code>.  (The recommended ways to
do this are in a major mode function or with a file local variable.)
Any line whose beginning has a match for this regexp is considered a
heading line.  Matches that start within a line (not at the left
margin) do not count.

</p>
<p>The length of the matching text determines the level of the heading;
longer matches make a more deeply nested level.  Thus, for example, if
a text formatter has commands ‘<samp>@chapter</samp>’, ‘<samp>@section</samp>’ and
‘<samp>@subsection</samp>’ to divide the document into chapters and sections,
you could make those lines count as heading lines by setting
<code>outline-regexp</code> to ‘<samp>"@chap\\|@\\(sub\\)*section"</samp>’.  Note
the trick: the two words ‘<samp>chapter</samp>’ and ‘<samp>section</samp>’ are equally
long, but by defining the regexp to match only ‘<samp>chap</samp>’ we ensure
that the length of the text matched on a chapter heading is shorter,
so that Outline mode will know that sections are contained in
chapters.  This works as long as no other command starts with
‘<samp>@chap</samp>’.

</p>
<a name="index-outline_002dlevel"></a>
<p>You can explicitly specify a rule for calculating the level of a
heading line by setting the variable <code>outline-level</code>.  The value
of <code>outline-level</code> should be a function that takes no arguments
and returns the level of the current heading.  The recommended ways to
set this variable are in a major mode command or with a file local
variable.

</p>

<a name="Outline-Motion"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Outline-Visibility" accesskey="n" rel="next">Outline Visibility</a>, Previous: <a href="#Outline-Format" accesskey="p" rel="prev">Outline Format</a>, Up: <a href="#Outline-Mode" accesskey="u" rel="up">Outline Mode</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Outline-Motion-Commands"></a>
<h4 class="subsection">25.9.2 Outline Motion Commands</h4>

<p>Outline mode provides special motion commands that move backward and
forward to heading lines.

</p>
<dl compact="compact">
<dt><kbd>C-c C-n</kbd></dt>
<dd><a name="index-outline_002dnext_002dvisible_002dheading"></a>
<a name="index-C_002dc-C_002dn-_0028Outline-mode_0029"></a>
<p>Move point to the next visible heading line
(<code>outline-next-visible-heading</code>).

</p></dd>
<dt><kbd>C-c C-p</kbd></dt>
<dd><a name="index-outline_002dprevious_002dvisible_002dheading"></a>
<a name="index-C_002dc-C_002dp-_0028Outline-mode_0029"></a>
<p>Move point to the previous visible heading line
(<code>outline-previous-visible-heading</code>).

</p></dd>
<dt><kbd>C-c C-f</kbd></dt>
<dd><a name="index-outline_002dforward_002dsame_002dlevel"></a>
<a name="index-C_002dc-C_002df-_0028Outline-mode_0029"></a>
<p>Move point to the next visible heading line at the same level
as the one point is on (<code>outline-forward-same-level</code>).

</p></dd>
<dt><kbd>C-c C-b</kbd></dt>
<dd><a name="index-outline_002dbackward_002dsame_002dlevel"></a>
<a name="index-C_002dc-C_002db-_0028Outline-mode_0029"></a>
<p>Move point to the previous visible heading line at the same level
(<code>outline-backward-same-level</code>).

</p></dd>
<dt><kbd>C-c C-u</kbd></dt>
<dd><a name="index-outline_002dup_002dheading"></a>
<a name="index-C_002dc-C_002du-_0028Outline-mode_0029"></a>
<p>Move point up to a lower-level (more inclusive) visible heading line
(<code>outline-up-heading</code>).

</p></dd>
</dl>

<p>All of the above commands accept numeric arguments as repeat counts.
For example, <kbd>C-c C-f</kbd>, when given an argument, moves forward that
many visible heading lines on the same level, and <kbd>C-c C-u</kbd> with
an argument moves out of that many nested levels.

</p>

<a name="Outline-Visibility"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Outline-Views" accesskey="n" rel="next">Outline Views</a>, Previous: <a href="#Outline-Motion" accesskey="p" rel="prev">Outline Motion</a>, Up: <a href="#Outline-Mode" accesskey="u" rel="up">Outline Mode</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Outline-Visibility-Commands"></a>
<h4 class="subsection">25.9.3 Outline Visibility Commands</h4>

<p>Outline mode provides several commands for temporarily hiding or
revealing parts of the buffer, based on the outline structure.  These
commands are not undoable; their effects are simply not recorded by
the undo mechanism, so you can undo right past them (see <a href="#Undo">Undo</a>).

</p>
<p>Many of these commands act on the current heading line.  If
point is on a heading line, that is the current heading line; if point
is on a body line, the current heading line is the nearest preceding
header line.

</p>
<dl compact="compact">
<dt><kbd>C-c C-c</kbd></dt>
<dd><p>Make the current heading line’s body invisible
(<code>outline-hide-entry</code>).

</p></dd>
<dt><kbd>C-c C-e</kbd></dt>
<dd><p>Make the current heading line’s body visible
(<code>outline-show-entry</code>).

</p></dd>
<dt><kbd>C-c C-d</kbd></dt>
<dd><p>Make everything under the current heading invisible, not including the
heading itself (<code>outline-hide-subtree</code>).

</p></dd>
<dt><kbd>C-c C-s</kbd></dt>
<dd><p>Make everything under the current heading visible, including body,
subheadings, and their bodies (<code>outline-show-subtree</code>).

</p></dd>
<dt><kbd>C-c C-l</kbd></dt>
<dd><p>Make the body of the current heading line, and of all its subheadings,
invisible (<code>outline-hide-leaves</code>).

</p></dd>
<dt><kbd>C-c C-k</kbd></dt>
<dd><p>Make all subheadings of the current heading line, at all levels,
visible (<code>outline-show-branches</code>).

</p></dd>
<dt><kbd>C-c C-i</kbd></dt>
<dd><p>Make immediate subheadings (one level down) of the current heading
line visible (<code>outline-show-children</code>).

</p></dd>
<dt><kbd>C-c C-t</kbd></dt>
<dd><p>Make all body lines in the buffer invisible
(<code>outline-hide-body</code>).

</p></dd>
<dt><kbd>C-c C-a</kbd></dt>
<dd><p>Make all lines in the buffer visible (<code>outline-show-all</code>).

</p></dd>
<dt><kbd>C-c C-q</kbd></dt>
<dd><p>Hide everything except the top <var>n</var> levels of heading lines
(<code>outline-hide-sublevels</code>).

</p></dd>
<dt><kbd>C-c C-o</kbd></dt>
<dd><p>Hide everything except for the heading or body that point is in, plus
the headings leading up from there to the top level of the outline
(<code>outline-hide-other</code>).

</p></dd>
</dl>

<a name="index-outline_002dhide_002dentry"></a>
<a name="index-outline_002dshow_002dentry"></a>
<a name="index-C_002dc-C_002dc-_0028Outline-mode_0029"></a>
<a name="index-C_002dc-C_002de-_0028Outline-mode_0029"></a>
<p>The simplest of these commands are <kbd>C-c C-c</kbd>
(<code>outline-hide-entry</code>), which hides the body lines directly
following the current heading line, and <kbd>C-c C-e</kbd>
(<code>outline-show-entry</code>), which reveals them.  Subheadings and
their bodies are not affected.

</p>
<a name="index-outline_002dhide_002dsubtree"></a>
<a name="index-outline_002dshow_002dsubtree"></a>
<a name="index-C_002dc-C_002ds-_0028Outline-mode_0029"></a>
<a name="index-C_002dc-C_002dd-_0028Outline-mode_0029"></a>
<a name="index-subtree-_0028Outline-mode_0029"></a>
<p>The commands <kbd>C-c C-d</kbd> (<code>outline-hide-subtree</code>) and
<kbd>C-c C-s</kbd> (<code>outline-show-subtree</code>) are more powerful.  They
apply to the current heading line’s <em>subtree</em>: its body, all of
its subheadings, both direct and indirect, and all of their bodies.

</p>
<a name="index-outline_002dhide_002dleaves"></a>
<a name="index-outline_002dshow_002dbranches"></a>
<a name="index-outline_002dshow_002dchildren"></a>
<a name="index-C_002dc-C_002dl-_0028Outline-mode_0029"></a>
<a name="index-C_002dc-C_002dk-_0028Outline-mode_0029"></a>
<a name="index-C_002dc-C_002di-_0028Outline-mode_0029"></a>
<p>The command <kbd>C-c C-l</kbd> (<code>outline-hide-leaves</code>) hides the
body of the current heading line as well as all the bodies in its
subtree; the subheadings themselves are left visible.  The command
<kbd>C-c C-k</kbd> (<code>outline-show-branches</code>) reveals the subheadings,
if they had previously been hidden (e.g., by <kbd>C-c C-d</kbd>).  The
command <kbd>C-c C-i</kbd> (<code>outline-show-children</code>) is a weaker
version of this; it reveals just the direct subheadings, i.e., those
one level down.

</p>
<a name="index-outline_002dhide_002dother"></a>
<a name="index-C_002dc-C_002do-_0028Outline-mode_0029"></a>
<p>The command <kbd>C-c C-o</kbd> (<code>outline-hide-other</code>) hides
everything except the entry that point is in, plus its parents (the
headers leading up from there to top level in the outline) and the top
level headings.  It also reveals body lines preceding the first
heading in the buffer.

</p>
<a name="index-outline_002dhide_002dbody"></a>
<a name="index-outline_002dshow_002dall"></a>
<a name="index-C_002dc-C_002dt-_0028Outline-mode_0029"></a>
<a name="index-C_002dc-C_002da-_0028Outline-mode_0029"></a>
<a name="index-hide_002dsublevels"></a>
<a name="index-C_002dc-C_002dq-_0028Outline-mode_0029"></a>
<p>The remaining commands affect the whole buffer.  <kbd>C-c C-t</kbd>
(<code>outline-hide-body</code>) makes all body lines invisible, so that you
see just the outline structure (as a special exception, it will not
hide lines at the top of the file, preceding the first header line,
even though these are technically body lines).  <kbd>C-c C-a</kbd>
(<code>outline-show-all</code>) makes all lines visible.  <kbd>C-c C-q</kbd>
(<code>outline-hide-sublevels</code>) hides all but the top level headings
at and above the level of the current heading line (defaulting to 1 if
point is not on a heading); with a numeric argument <var>n</var>, it hides
everything except the top <var>n</var> levels of heading lines.  Note that
it completely reveals all the <var>n</var> top levels and the body lines
before the first heading.

</p>
<a name="Outline-Search"></a><a name="index-reveal_002dmode"></a>
<a name="index-search_002dinvisible"></a>
<p>When incremental search finds text that is hidden by Outline mode,
it makes that part of the buffer visible.  If you exit the search at
that position, the text remains visible.  To toggle whether or not
an active incremental search can match hidden text, type <kbd>M-s i</kbd>.
To change the default for future searches, customize the option
<code>search-invisible</code>.  (This option also affects how <code>query-replace</code>
and related functions treat hidden text, see <a href="#Query-Replace">Query Replace</a>.)
You can also automatically make text visible as you navigate in it by
using Reveal mode (<kbd>M-x reveal-mode</kbd>), a buffer-local minor mode.

</p>

<a name="Outline-Views"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Foldout" accesskey="n" rel="next">Foldout</a>, Previous: <a href="#Outline-Visibility" accesskey="p" rel="prev">Outline Visibility</a>, Up: <a href="#Outline-Mode" accesskey="u" rel="up">Outline Mode</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Viewing-One-Outline-in-Multiple-Views"></a>
<h4 class="subsection">25.9.4 Viewing One Outline in Multiple Views</h4>

<a name="index-multiple-views-of-outline"></a>
<a name="index-views-of-an-outline"></a>
<a name="index-outline-with-multiple-views"></a>
<a name="index-indirect-buffers-and-outlines"></a>
<p>You can display two views of a single outline at the same time, in
different windows.  To do this, you must create an indirect buffer using
<kbd>M-x make-indirect-buffer</kbd>.  The first argument of this command is
the existing outline buffer name, and its second argument is the name to
use for the new indirect buffer.  See <a href="#Indirect-Buffers">Indirect Buffers</a>.

</p>
<p>Once the indirect buffer exists, you can display it in a window in the
normal fashion, with <kbd>C-x 4 b</kbd> or other Emacs commands.  The Outline
mode commands to show and hide parts of the text operate on each buffer
independently; as a result, each buffer can have its own view.  If you
want more than two views on the same outline, create additional indirect
buffers.

</p>

<a name="Foldout"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Outline-Views" accesskey="p" rel="prev">Outline Views</a>, Up: <a href="#Outline-Mode" accesskey="u" rel="up">Outline Mode</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Folding-Editing"></a>
<h4 class="subsection">25.9.5 Folding Editing</h4>

<a name="index-folding-editing"></a>
<p>The Foldout package extends Outline mode and Outline minor mode with
folding commands.  The idea of folding is that you zoom in on a
nested portion of the outline, while hiding its relatives at higher
levels.

</p>
<p>Consider an Outline mode buffer with all the text and subheadings under
level-1 headings hidden.  To look at what is hidden under one of these
headings, you could use <kbd>C-c C-e</kbd> (<kbd>M-x outline-show-entry</kbd>)
to expose the body, or <kbd>C-c C-i</kbd> to expose the child (level-2)
headings.

</p>
<a name="index-C_002dc-C_002dz"></a>
<a name="index-foldout_002dzoom_002dsubtree"></a>
<p>With Foldout, you use <kbd>C-c C-z</kbd> (<kbd>M-x foldout-zoom-subtree</kbd>).
This exposes the body and child subheadings, and narrows the buffer so
that only the <span class="nolinebreak">level-1</span><!-- /@w -->  heading, the body and the level-2 headings are
visible.  Now to look under one of the level-2 headings, position the
cursor on it and use <kbd>C-c C-z</kbd> again.  This exposes the level-2 body
and its level-3 child subheadings and narrows the buffer again.  Zooming
in on successive subheadings can be done as much as you like.  A string
in the mode line shows how deep you’ve gone.

</p>
<p>When zooming in on a heading, to see only the child subheadings specify
a numeric argument: <kbd>C-u C-c C-z</kbd>.  The number of levels of children
can be specified too (compare <kbd>M-x outline-show-children</kbd>), e.g.,
<kbd><span class="nolinebreak">M-2</span>&nbsp;<span class="nolinebreak">C-c</span>&nbsp;<span class="nolinebreak">C-z</span></kbd><!-- /@w -->  exposes two levels of child subheadings.
Alternatively, the body can be specified with a negative argument:
<kbd><span class="nolinebreak">M--</span>&nbsp;<span class="nolinebreak">C-c</span>&nbsp;<span class="nolinebreak">C-z</span></kbd><!-- /@w -->.  The whole subtree can be expanded, similarly to
<kbd>C-c C-s</kbd> (<kbd>M-x outline-show-subtree</kbd>), by specifying a zero
argument: <kbd><span class="nolinebreak">M-0</span>&nbsp;<span class="nolinebreak">C-c</span>&nbsp;<span class="nolinebreak">C-z</span></kbd><!-- /@w -->.

</p>
<p>While you’re zoomed in, you can still use Outline mode’s exposure and
hiding functions without disturbing Foldout.  Also, since the buffer is
narrowed, global editing actions will only affect text under the
zoomed-in heading.  This is useful for restricting changes to a
particular chapter or section of your document.

</p>
<a name="index-C_002dc-C_002dx"></a>
<a name="index-foldout_002dexit_002dfold"></a>
<p>To unzoom (exit) a fold, use <kbd>C-c C-x</kbd> (<kbd>M-x foldout-exit-fold</kbd>).
This hides all the text and subheadings under the top-level heading and
returns you to the previous view of the buffer.  Specifying a numeric
argument exits that many levels of folds.  Specifying a zero argument
exits all folds.

</p>
<p>To cancel the narrowing of a fold without hiding the text and
subheadings, specify a negative argument.  For example, <kbd><span class="nolinebreak">M--2</span>&nbsp;<span class="nolinebreak">C-c</span>&nbsp;<span class="nolinebreak">C-x</span></kbd><!-- /@w -->  exits two folds and leaves the text and subheadings exposed.

</p>
<p>Foldout mode also provides mouse commands for entering and exiting
folds, and for showing and hiding text:

</p>
<dl compact="compact">
<dt><kbd>C-M-mouse-1</kbd> zooms in on the heading clicked on</dt>
<dd><ul class="no-bullet">
<li><!-- /@w -->  single click: expose body.

</li><li><!-- /@w -->  double click: expose subheadings.

</li><li><!-- /@w -->  triple click: expose body and subheadings.

</li><li><!-- /@w -->  quad click: expose entire subtree.

</li></ul>
</dd>
<dt><kbd>C-M-mouse-2</kbd> exposes text under the heading clicked on</dt>
<dd><ul class="no-bullet">
<li><!-- /@w -->  single click: expose body.

</li><li><!-- /@w -->  double click: expose subheadings.

</li><li><!-- /@w -->  triple click: expose body and subheadings.

</li><li><!-- /@w -->  quad click: expose entire subtree.

</li></ul>
</dd>
<dt><kbd>C-M-mouse-3</kbd> hides text under the heading clicked on or exits fold</dt>
<dd><ul class="no-bullet">
<li><!-- /@w -->  single click: hide subtree.

</li><li><!-- /@w -->  double click: exit fold and hide text.

</li><li><!-- /@w -->  triple click: exit fold without hiding text.

</li><li><!-- /@w -->  quad click: exit all folds and hide text.

</li></ul>
</dd>
</dl>

<a name="index-foldout_002dmouse_002dmodifiers"></a>
<p>You can specify different modifier keys (instead of
<kbd><span class="key">Ctrl</span>-<span class="key">Meta</span>-</kbd>) by setting <code>foldout-mouse-modifiers</code>; but if
you have already loaded the <samp>foldout.el</samp> library, you must reload
it in order for this to take effect.

</p>
<p>To use the Foldout package, you can type <kbd>M-x load-library
<span class="key">RET</span> foldout <span class="key">RET</span></kbd>; or you can arrange for to do that
automatically by putting the following in your init file:

</p>
<div class="example">
<pre class="example">(with-eval-after-load "outline"
  (require 'foldout))
</pre></div>


<a name="Org-Mode"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#TeX-Mode" accesskey="n" rel="next">TeX Mode</a>, Previous: <a href="#Outline-Mode" accesskey="p" rel="prev">Outline Mode</a>, Up: <a href="#Text" accesskey="u" rel="up">Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Org-Mode-1"></a>
<h3 class="section">25.10 Org Mode</h3>
<a name="index-organizer"></a>
<a name="index-planner"></a>
<a name="index-Org-mode"></a>
<a name="index-mode_002c-Org"></a>

<a name="index-org_002dmode"></a>
<p>Org mode is a variant of Outline mode for using Emacs as an
organizer and/or authoring system.  Files with names ending in the
extension <samp>.org</samp> are opened in Org mode (see <a href="#Choosing-Modes">Choosing Modes</a>).
To explicitly switch to Org mode, type <kbd>M-x org-mode</kbd>.

</p>
<p>In Org mode, as in Outline mode, each entry has a heading line that
starts with one or more ‘<samp>*</samp>’ characters.  See <a href="#Outline-Format">Outline Format</a>.
In addition, any line that begins with the ‘<samp>#</samp>’ character is
treated as a comment.

</p>
<a name="index-TAB-_0028Org-Mode_0029"></a>
<a name="index-org_002dcycle"></a>
<p>Org mode provides commands for easily viewing and manipulating the
outline structure.  The simplest of these commands is <tt class="key">TAB</tt>
(<code>org-cycle</code>).  If invoked on a heading line, it cycles through
the different visibility states of the subtree: (i) showing only that
heading line, (ii) showing only the heading line and the heading lines
of its direct children, if any, and (iii) showing the entire subtree.
If invoked in a body line, the global binding for <tt class="key">TAB</tt> is
executed.

</p>
<a name="index-S_002dTAB-_0028Org-Mode_0029"></a>
<a name="index-org_002dshifttab"></a>
<p>Typing <kbd>S-<span class="key">TAB</span></kbd> (<code>org-shifttab</code>) anywhere in an Org mode
buffer cycles the visibility of the entire outline structure, between
(i) showing only top-level heading lines, (ii) showing all heading
lines but no body lines, and (iii) showing everything.

</p>
<a name="index-M_002dUP-_0028Org-Mode_0029"></a>
<a name="index-M_002dDOWN-_0028Org-Mode_0029"></a>
<a name="index-M_002dLEFT-_0028Org-Mode_0029"></a>
<a name="index-M_002dRIGHT-_0028Org-Mode_0029"></a>
<a name="index-org_002dmetaup"></a>
<a name="index-org_002dmetadown"></a>
<a name="index-org_002dmetaleft"></a>
<a name="index-org_002dmetaright"></a>
<p>You can move an entire entry up or down in the buffer, including its
body lines and subtree (if any), by typing <kbd>M-<span class="key">UP</span></kbd>
(<code>org-metaup</code>) or <kbd>M-<span class="key">DOWN</span></kbd> (<code>org-metadown</code>) on the
heading line.  Similarly, you can promote or demote a heading line
with <kbd>M-<span class="key">LEFT</span></kbd> (<code>org-metaleft</code>) and <kbd>M-<span class="key">RIGHT</span></kbd>
(<code>org-metaright</code>).  These commands execute their global bindings
if invoked on a body line.

</p>
<p>The following subsections give basic instructions for using Org mode
as an organizer and as an authoring system.  For details, see <a href="http://www.gnu.org/software/emacs/manual/html_mono/org.html#Top">Introduction</a> in <cite>The Org Manual</cite>.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Org-Organizer" accesskey="1">Org Organizer</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Managing TODO lists and agendas.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Org-Authoring" accesskey="2">Org Authoring</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Exporting Org buffers to various formats.

</td></tr>
</tbody></table>


<a name="Org-Organizer"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Org-Authoring" accesskey="n" rel="next">Org Authoring</a>, Up: <a href="#Org-Mode" accesskey="u" rel="up">Org Mode</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Org-as-an-organizer"></a>
<h4 class="subsection">25.10.1 Org as an organizer</h4>
<a name="index-TODO-item"></a>
<a name="index-Org-agenda"></a>

<a name="index-C_002dc-C_002dt-_0028Org-Mode_0029"></a>
<a name="index-org_002dtodo"></a>
<a name="index-org_002dtodo_002dkeywords"></a>
<p>You can tag an Org entry as a <em>TODO</em> item by typing <kbd>C-c
C-t</kbd> (<code>org-todo</code>) anywhere in the entry.  This adds the keyword
‘<samp>TODO</samp>’ to the heading line.  Typing <kbd>C-c C-t</kbd> again switches
the keyword to ‘<samp>DONE</samp>’; another <kbd>C-c C-t</kbd> removes the keyword
entirely, and so forth.  You can customize the keywords used by
<kbd>C-c C-t</kbd> via the variable <code>org-todo-keywords</code>.

</p>
<a name="index-C_002dc-C_002ds-_0028Org-Mode_0029"></a>
<a name="index-C_002dc-C_002dd-_0028Org-Mode_0029"></a>
<a name="index-org_002dschedule"></a>
<a name="index-org_002ddeadline"></a>
<p>Apart from marking an entry as TODO, you can attach a date to it, by
typing <kbd>C-c C-s</kbd> (<code>org-schedule</code>) in the entry.  This prompts
for a date by popping up the Emacs Calendar (see <a href="#Calendar_002fDiary">Calendar/Diary</a>),
and then adds the tag ‘<samp>SCHEDULED</samp>’, together with the selected
date, beneath the heading line.  The command <kbd>C-c C-d</kbd>
(<code>org-deadline</code>) has the same effect, except that it uses the tag
<code>DEADLINE</code>.

</p>
<a name="index-C_002dc-_005b-_0028Org-Mode_0029"></a>
<a name="index-org_002dagenda_002dfile_002dto_002dfront"></a>
<a name="index-org_002dagenda_002dfiles"></a>
<p>Once you have some TODO items planned in an Org file, you can add
that file to the list of <em>agenda files</em> by typing <kbd>C-c [</kbd>
(<code>org-agenda-file-to-front</code>).  Org mode is designed to let you
easily maintain multiple agenda files, e.g., for organizing different
aspects of your life.  The list of agenda files is stored in the
variable <code>org-agenda-files</code>.

</p>
<a name="index-org_002dagenda"></a>
<p>To view items coming from your agenda files, type <kbd>M-x
org-agenda</kbd>.  This command prompts for what you want to see: a list of
things to do this week, a list of TODO items with specific keywords,
etc.
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/org.html#Agenda-Views">Agenda Views</a> in <cite>The Org Manual</cite>, for details.

</p>

<a name="Org-Authoring"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Org-Organizer" accesskey="p" rel="prev">Org Organizer</a>, Up: <a href="#Org-Mode" accesskey="u" rel="up">Org Mode</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Org-as-an-authoring-system"></a>
<h4 class="subsection">25.10.2 Org as an authoring system</h4>
<a name="index-Org-exporting"></a>

<a name="index-org_002dexport"></a>
<a name="index-C_002dc-C_002de-_0028Org-mode_0029"></a>
<p>You may want to format your Org notes nicely and to prepare them for
export and publication.  To export the current buffer, type <kbd>C-c
C-e</kbd> (<code>org-export</code>) anywhere in an Org buffer.  This command
prompts for an export format; currently supported formats include
HTML, LaTeX, Texinfo, OpenDocument (<samp>.odt</samp>), iCalendar,
Markdown, man-page, and PDF.  Some formats, such as PDF, require
certain system tools to be installed.

</p>
<a name="index-org_002dpublish_002dproject_002dalist"></a>
<p>To export several files at once to a specific directory, either
locally or over the network, you must define a list of projects
through the variable <code>org-publish-project-alist</code>.  See its
documentation for details.

</p>
<p>Org supports a simple markup scheme for applying text formatting to
exported documents:

</p>
<div class="example">
<pre class="example">- This text is /emphasized/
- This text is *in bold*
- This text is _underlined_
- This text uses =a teletype font=

#+begin_quote
``This is a quote.''
#+end_quote

#+begin_example
This is an example.
#+end_example
</pre></div>

<p>For further details, <a href="http://www.gnu.org/software/emacs/manual/html_mono/org.html#Exporting">Exporting</a> in <cite>The Org Manual</cite>, and
<a href="http://www.gnu.org/software/emacs/manual/html_mono/org.html#Publishing">Publishing</a> in <cite>The Org Manual</cite>.

</p>

<a name="TeX-Mode"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#HTML-Mode" accesskey="n" rel="next">HTML Mode</a>, Previous: <a href="#Org-Mode" accesskey="p" rel="prev">Org Mode</a>, Up: <a href="#Text" accesskey="u" rel="up">Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="TeX-Mode-1"></a>
<h3 class="section">25.11 TeX Mode</h3>
<a name="index-TeX-mode"></a>
<a name="index-LaTeX-mode"></a>
<a name="index-SliTeX-mode"></a>
<a name="index-DocTeX-mode"></a>
<a name="index-mode_002c-TeX"></a>
<a name="index-mode_002c-LaTeX"></a>
<a name="index-mode_002c-SliTeX"></a>
<a name="index-mode_002c-DocTeX"></a>
<a name="index-tex_002dmode"></a>
<a name="index-plain_002dtex_002dmode"></a>
<a name="index-latex_002dmode"></a>
<a name="index-slitex_002dmode"></a>
<a name="index-doctex_002dmode"></a>
<a name="index-bibtex_002dmode"></a>

<p>TeX is a powerful text formatter written by Donald Knuth; like
GNU Emacs, it is free software.  The TeX format has several
variants, including LaTeX, a simplified input format for TeX;
DocTeX, a special file format in which the LaTeX sources are
written, combining sources with documentation; and SliTeX, an
obsolete special form of LaTeX<a name="DOCF12" href="#FOOT12"><sup>12</sup></a>.

</p>
<a name="index-tex_002ddefault_002dmode"></a>
<p>Emacs provides a TeX major mode for each of these variants: Plain
TeX mode, LaTeX mode, DocTeX mode, and SliTeX mode.  Emacs
selects the appropriate mode by looking at the contents of the buffer.
(This is done by invoking the <code>tex-mode</code> command, which is
normally called automatically when you visit a TeX-like file.
See <a href="#Choosing-Modes">Choosing Modes</a>.)  If the contents are insufficient to determine
this, Emacs chooses the mode specified by the variable
<code>tex-default-mode</code>; its default value is <code>latex-mode</code>.  If
Emacs does not guess right, you can select the correct variant of
TeX mode using the commands <code>plain-tex-mode</code>,
<code>latex-mode</code>, <code>slitex-mode</code>, or <code>doctex-mode</code>.

</p>
<p>The following sections document the features of TeX mode and its
variants.  There are several other TeX-related Emacs packages,
which are not documented in this manual:

</p>
<ul>
<li>  BibTeX mode is a major mode for BibTeX files, which are commonly
used for keeping bibliographic references for LaTeX documents.  For
more information, see the documentation string for the command
<code>bibtex-mode</code>.



</li><li>  The RefTeX package provides a minor mode which can be used with
LaTeX mode to manage bibliographic references.
For more information, see the RefTeX Info manual, which is
distributed with Emacs.



</li><li>  The AUCTeX package provides more advanced features for editing
TeX and its related formats, including the ability to preview
TeX equations within Emacs buffers.  Unlike BibTeX mode and the
RefTeX package, AUCTeX is not distributed with Emacs by default.
It can be downloaded via the Package Menu (see <a href="#Packages">Packages</a>); once
installed, see
the AUCTeX manual, which is included with the package.

</li></ul>

<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#TeX-Editing" accesskey="1">TeX Editing</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Special commands for editing in TeX mode.

</td></tr>
<tr><td align="left" valign="top">• <a href="#LaTeX-Editing" accesskey="2">LaTeX Editing</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Additional commands for LaTeX input files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#TeX-Print" accesskey="3">TeX Print</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands for printing part of a file with TeX.

</td></tr>
<tr><td align="left" valign="top">• <a href="#TeX-Misc" accesskey="4">TeX Misc</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Customization of TeX mode, and related features.

</td></tr>
</tbody></table>


<a name="TeX-Editing"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#LaTeX-Editing" accesskey="n" rel="next">LaTeX Editing</a>, Up: <a href="#TeX-Mode" accesskey="u" rel="up">TeX Mode</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="TeX-Editing-Commands"></a>
<h4 class="subsection">25.11.1 TeX Editing Commands</h4>

<dl compact="compact">
<dt><kbd>"</kbd></dt>
<dd><p>Insert, according to context, either ‘<samp>``</samp>’ or ‘<samp>"</samp>’ or
‘<samp>''</samp>’ (<code>tex-insert-quote</code>).

</p></dd>
<dt><kbd>C-j</kbd></dt>
<dd><p>Insert a paragraph break (two newlines) and check the previous
paragraph for unbalanced braces or dollar signs
(<code>tex-terminate-paragraph</code>).

</p></dd>
<dt><kbd>M-x tex-validate-region</kbd></dt>
<dd><p>Check each paragraph in the region for unbalanced braces or dollar signs.

</p></dd>
<dt><kbd>C-c {</kbd></dt>
<dd><p>Insert ‘<samp>{}</samp>’ and position point between them (<code>tex-insert-braces</code>).

</p></dd>
<dt><kbd>C-c }</kbd></dt>
<dd><p>Move forward past the next unmatched close brace (<code>up-list</code>).

</p></dd>
</dl>

<a name="index-tex_002dinsert_002dquote"></a>
<a name="index-_0022-_0028TeX-mode_0029"></a>
<p>In TeX, the character ‘<samp>"</samp>’ is not normally used; instead,
quotations begin with ‘<samp>``</samp>’ and end with ‘<samp>''</samp>’.  TeX mode
therefore binds the <kbd>"</kbd> key to the <code>tex-insert-quote</code>
command.  This inserts ‘<samp>``</samp>’ after whitespace or an open brace,
‘<samp>"</samp>’ after a backslash, and ‘<samp>''</samp>’ after any other character.

</p>
<p>As a special exception, if you type <kbd>"</kbd> when the text before
point is either ‘<samp>``</samp>’ or ‘<samp>''</samp>’, Emacs replaces that preceding
text with a single ‘<samp>"</samp>’ character.  You can therefore type
<kbd>""</kbd> to insert ‘<samp>"</samp>’, should you ever need to do so.  (You can
also use <kbd>C-q "</kbd> to insert this character.)

</p>
<p>In TeX mode, ‘<samp>$</samp>’ has a special syntax code which attempts to
understand the way TeX math mode delimiters match.  When you insert a
‘<samp>$</samp>’ that is meant to exit math mode, the position of the matching
‘<samp>$</samp>’ that entered math mode is displayed for a second.  This is the
same feature that displays the open brace that matches a close brace that
is inserted.  However, there is no way to tell whether a ‘<samp>$</samp>’ enters
math mode or leaves it; so when you insert a ‘<samp>$</samp>’ that enters math
mode, the previous ‘<samp>$</samp>’ position is shown as if it were a match, even
though they are actually unrelated.

</p>
<a name="index-tex_002dinsert_002dbraces"></a>
<a name="index-C_002dc-_007b-_0028TeX-mode_0029"></a>
<a name="index-up_002dlist"></a>
<a name="index-C_002dc-_007d-_0028TeX-mode_0029"></a>
<p>TeX uses braces as delimiters that must match.  Some users prefer
to keep braces balanced at all times, rather than inserting them
singly.  Use <kbd>C-c {</kbd> (<code>tex-insert-braces</code>) to insert a pair of
braces.  It leaves point between the two braces so you can insert the
text that belongs inside.  Afterward, use the command <kbd>C-c }</kbd>
(<code>up-list</code>) to move forward past the close brace.  You can also
invoke <kbd>C-c {</kbd> after marking some text: then the command encloses
the marked text in braces.

</p>
<a name="index-tex_002dvalidate_002dregion"></a>
<a name="index-tex_002dterminate_002dparagraph"></a>
<a name="index-C_002dj-_0028TeX-mode_0029"></a>
<p>There are two commands for checking the matching of braces.
<kbd>C-j</kbd> (<code>tex-terminate-paragraph</code>) checks the paragraph before
point, and inserts two newlines to start a new paragraph.  It outputs
a message in the echo area if any mismatch is found.  <kbd>M-x
tex-validate-region</kbd> checks a region, paragraph by paragraph.  The
errors are listed in an <samp>*Occur*</samp> buffer; you can use the usual
Occur mode commands in that buffer, such as <kbd>C-c C-c</kbd>, to visit a
particular mismatch (see <a href="#Other-Repeating-Search">Other Repeating Search</a>).

</p>
<p>Note that Emacs commands count square brackets and parentheses in
TeX mode, not just braces.  This is not strictly correct for the
purpose of checking TeX syntax.  However, parentheses and square
brackets are likely to be used in text as matching delimiters, and it
is useful for the various motion commands and automatic match display
to work with them.

</p>

<a name="LaTeX-Editing"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#TeX-Print" accesskey="n" rel="next">TeX Print</a>, Previous: <a href="#TeX-Editing" accesskey="p" rel="prev">TeX Editing</a>, Up: <a href="#TeX-Mode" accesskey="u" rel="up">TeX Mode</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="LaTeX-Editing-Commands"></a>
<h4 class="subsection">25.11.2 LaTeX Editing Commands</h4>

<p>LaTeX mode provides a few extra features not applicable to plain
TeX:

</p>
<dl compact="compact">
<dt><kbd>C-c C-o</kbd></dt>
<dd><p>Insert ‘<samp>\begin</samp>’ and ‘<samp>\end</samp>’ for LaTeX block and position
point on a line between them (<code>tex-latex-block</code>).

</p></dd>
<dt><kbd>C-c C-e</kbd></dt>
<dd><p>Close the innermost LaTeX block not yet closed
(<code>tex-close-latex-block</code>).

</p></dd>
</dl>

<a name="index-tex_002dlatex_002dblock"></a>
<a name="index-C_002dc-C_002do-_0028LaTeX-mode_0029"></a>
<p>In LaTeX input, ‘<samp>\begin</samp>’ and ‘<samp>\end</samp>’ tags are used to
group blocks of text.  To insert a block, type <kbd>C-c C-o</kbd>
(<code>tex-latex-block</code>).  This prompts for a block type, and inserts
the appropriate matching ‘<samp>\begin</samp>’ and ‘<samp>\end</samp>’ tags, leaving a
blank line between the two and moving point there.

</p>
<a name="index-latex_002dblock_002dnames"></a>
<p>When entering the block type argument to <kbd>C-c C-o</kbd>, you can use
the usual completion commands (see <a href="#Completion">Completion</a>).  The default
completion list contains the standard LaTeX block types.  If you
want additional block types for completion, customize the list
variable <code>latex-block-names</code>.

</p>
<a name="index-tex_002dclose_002dlatex_002dblock"></a>
<a name="index-C_002dc-C_002de-_0028LaTeX-mode_0029"></a>
<a name="index-latex_002delectric_002denv_002dpair_002dmode"></a>
<p>In LaTeX input, ‘<samp>\begin</samp>’ and ‘<samp>\end</samp>’ tags must balance.
You can use <kbd>C-c C-e</kbd> (<code>tex-close-latex-block</code>) to insert an
‘<samp>\end</samp>’ tag which matches the last unmatched ‘<samp>\begin</samp>’.  It
also indents the ‘<samp>\end</samp>’ to match the corresponding ‘<samp>\begin</samp>’,
and inserts a newline after the ‘<samp>\end</samp>’ tag if point is at the
beginning of a line.  The minor mode <code>latex-electric-env-pair-mode</code>
automatically inserts an ‘<samp>\end</samp>’ or ‘<samp>\begin</samp>’ tag for you
when you type the corresponding one.

</p>

<a name="TeX-Print"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#TeX-Misc" accesskey="n" rel="next">TeX Misc</a>, Previous: <a href="#LaTeX-Editing" accesskey="p" rel="prev">LaTeX Editing</a>, Up: <a href="#TeX-Mode" accesskey="u" rel="up">TeX Mode</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="TeX-Printing-Commands"></a>
<h4 class="subsection">25.11.3 TeX Printing Commands</h4>

<p>You can invoke TeX as a subprocess of Emacs, supplying either
the entire contents of the buffer or just part of it (e.g., one
chapter of a larger document).

</p>
<dl compact="compact">
<dt><kbd>C-c C-b</kbd></dt>
<dd><p>Invoke TeX on the entire current buffer (<code>tex-buffer</code>).

</p>
</dd>
<dt><kbd>C-c C-r</kbd></dt>
<dd><p>Invoke TeX on the current region, together with the buffer’s header
(<code>tex-region</code>).

</p>
</dd>
<dt><kbd>C-c C-f</kbd></dt>
<dd><p>Invoke TeX on the current file (<code>tex-file</code>).

</p>
</dd>
<dt><kbd>C-c C-v</kbd></dt>
<dd><p>Preview the output from the last <kbd>C-c C-b</kbd>, <kbd>C-c C-r</kbd>, or <kbd>C-c
C-f</kbd> command (<code>tex-view</code>).

</p>
</dd>
<dt><kbd>C-c C-p</kbd></dt>
<dd><p>Print the output from the last <kbd>C-c C-b</kbd>, <kbd>C-c C-r</kbd>, or
<kbd>C-c C-f</kbd> command (<code>tex-print</code>).

</p>
</dd>
<dt><kbd>C-c <span class="key">TAB</span></kbd></dt>
<dd><p>Invoke BibTeX on the current file (<code>tex-bibtex-file</code>).

</p></dd>
<dt><kbd>C-c C-l</kbd></dt>
<dd><p>Recenter the window showing output from TeX so that the last line
can be seen (<code>tex-recenter-output-buffer</code>).

</p></dd>
<dt><kbd>C-c C-k</kbd></dt>
<dd><p>Kill the TeX subprocess (<code>tex-kill-job</code>).

</p></dd>
<dt><kbd>C-c C-c</kbd></dt>
<dd><p>Invoke some other compilation command on the entire current buffer
(<code>tex-compile</code>).

</p></dd>
</dl>

<a name="index-tex_002dbuffer"></a>
<a name="index-C_002dc-C_002db-_0028TeX-mode_0029"></a>
<a name="index-tex_002dview"></a>
<a name="index-C_002dc-C_002dv-_0028TeX-mode_0029"></a>
<a name="index-tex_002dprint"></a>
<a name="index-C_002dc-C_002dp-_0028TeX-mode_0029"></a>
<p>To pass the current buffer through TeX, type <kbd>C-c C-b</kbd>
(<code>tex-buffer</code>).  The formatted output goes in a temporary file,
normally a <samp>.dvi</samp> file.  Afterwards, you can type <kbd>C-c C-v</kbd>
(<code>tex-view</code>) to launch an external program, such as
<code>xdvi</code>, to view this output file.  You can also type <kbd>C-c
C-p</kbd> (<code>tex-print</code>) to print a hardcopy of the output file.

</p>
<a name="index-TEXINPUTS-environment-variable"></a>
<a name="index-tex_002ddirectory"></a>
<p>By default, <kbd>C-c C-b</kbd> runs TeX in the current directory.  The
output of TeX is also created in this directory.  To run TeX in a
different directory, change the variable <code>tex-directory</code> to
the desired directory.  If your environment variable <code>TEXINPUTS</code>
contains relative names, or if your files contain
‘<samp>\input</samp>’ commands with relative file names, then
<code>tex-directory</code> <em>must</em> be <code>"."</code> or you will get the
wrong results.  Otherwise, it is safe to specify some other directory,
such as <code>"/tmp"</code>.

</p>
<a name="index-tex_002drun_002dcommand"></a>
<a name="index-latex_002drun_002dcommand"></a>
<a name="index-tex_002ddvi_002dview_002dcommand"></a>
<a name="index-tex_002ddvi_002dprint_002dcommand"></a>
<a name="index-tex_002dprint_002dfile_002dextension"></a>
<p>The buffer’s TeX variant determines what shell command <kbd>C-c
C-b</kbd> actually runs.  In Plain TeX mode, it is specified by the
variable <code>tex-run-command</code>, which defaults to <code>"tex"</code>.  In
LaTeX mode, it is specified by <code>latex-run-command</code>, which
defaults to <code>"latex"</code>.  The shell command that <kbd>C-c C-v</kbd> runs
to view the <samp>.dvi</samp> output is determined by the variable
<code>tex-dvi-view-command</code>, regardless of the TeX variant.  The
shell command that <kbd>C-c C-p</kbd> runs to print the output is
determined by the variable <code>tex-dvi-print-command</code>.  The variable
<code>tex-print-file-extension</code> can be set to the required file
extension for viewing and printing TeX-compiled files.  For
example, you can set it to <samp>.pdf</samp>, and update
<code>tex-dvi-view-command</code> and <code>tex-dvi-print-command</code>
accordingly, as well as <code>latex-run-command</code> or
<code>tex-run-command</code>.

</p>
<p>Normally, Emacs automatically appends the output file name to the shell command strings described in the preceding paragraph. For example, if <code>tex-dvi-view-command</code> is <code>"xdvi"</code>, <kbd>C-c C-v</kbd> runs <code>xdvi <var>output-file-name</var></code>. In some cases, however, the file name needs to be embedded in the command, e.g., if you need to provide the file name as an argument to one command whose output is piped to another. You can specify where to put the file name with ‘<samp>*</samp>’ in the command string. 例如,
</p>
<div class="example">
<pre class="example">(setq tex-dvi-print-command "dvips -f * | lpr")
</pre></div>

<a name="index-tex_002dkill_002djob"></a>
<a name="index-C_002dc-C_002dk-_0028TeX-mode_0029"></a>
<a name="index-tex_002drecenter_002doutput_002dbuffer"></a>
<a name="index-C_002dc-C_002dl-_0028TeX-mode_0029"></a>
<p>The terminal output from TeX, including any error messages,
appears in a buffer called <samp>*tex-shell*</samp>.  If TeX gets an
error, you can switch to this buffer and feed it input (this works as
in Shell mode; see <a href="#Interactive-Shell">Interactive Shell</a>).  Without switching to this
buffer you can scroll it so that its last line is visible by typing
<kbd>C-c C-l</kbd>.

</p>
<p>Type <kbd>C-c C-k</kbd> (<code>tex-kill-job</code>) to kill the TeX process if
you see that its output is no longer useful.  Using <kbd>C-c C-b</kbd> or
<kbd>C-c C-r</kbd> also kills any TeX process still running.

</p>
<a name="index-tex_002dregion"></a>
<a name="index-C_002dc-C_002dr-_0028TeX-mode_0029"></a>
<p>You can also pass an arbitrary region through TeX by typing
<kbd>C-c C-r</kbd> (<code>tex-region</code>).  This is tricky, however, because
most files of TeX input contain commands at the beginning to set
parameters and define macros, without which no later part of the file
will format correctly.  To solve this problem, <kbd>C-c C-r</kbd> allows
you to designate a part of the file as containing essential commands;
it is included before the specified region as part of the input to
TeX.  The designated part of the file is called the <em>header</em>.

</p>
<a name="index-header-_0028TeX-mode_0029"></a>
<p>To indicate the bounds of the header in Plain TeX mode, you insert two
special strings in the file.  Insert ‘<samp>%**start of header</samp>’ before the
header, and ‘<samp>%**end of header</samp>’ after it.  Each string must appear
entirely on one line, but there may be other text on the line before or
after.  The lines containing the two strings are included in the header.
If ‘<samp>%**start of header</samp>’ does not appear within the first 100 lines of
the buffer, <kbd>C-c C-r</kbd> assumes that there is no header.

</p>
<p>In LaTeX mode, the header begins with ‘<samp>\documentclass</samp>’ or
‘<samp>\documentstyle</samp>’ and ends with ‘<samp>\begin{document}</samp>’.  These
are commands that LaTeX requires you to use in any case, so nothing
special needs to be done to identify the header.

</p>
<a name="index-tex_002dfile"></a>
<a name="index-C_002dc-C_002df-_0028TeX-mode_0029"></a>
<p>The commands (<code>tex-buffer</code>) and (<code>tex-region</code>) do all of their
work in a temporary directory, and do not have available any of the auxiliary
files needed by TeX for cross-references; these commands are generally
not suitable for running the final copy in which all of the cross-references
need to be correct.

</p>
<p>When you want the auxiliary files for cross references, use <kbd>C-c
C-f</kbd> (<code>tex-file</code>) which runs TeX on the current buffer’s file,
in that file’s directory.  Before running TeX, it offers to save any
modified buffers.  Generally, you need to use (<code>tex-file</code>) twice to
get the cross-references right.

</p>
<a name="index-tex_002dstart_002doptions"></a>
<p>The value of the variable <code>tex-start-options</code> specifies
options for the TeX run.

</p>
<a name="index-tex_002dstart_002dcommands"></a>
<p>The value of the variable <code>tex-start-commands</code> specifies TeX
commands for starting TeX.  The default value causes TeX to run
in nonstop mode.  To run TeX interactively, set the variable to
<code>""</code>.

</p>
<a name="index-tex_002dmain_002dfile"></a>
<p>Large TeX documents are often split into several files—one main
file, plus subfiles.  Running TeX on a subfile typically does not
work; you have to run it on the main file.  In order to make
<code>tex-file</code> useful when you are editing a subfile, you can set the
variable <code>tex-main-file</code> to the name of the main file.  Then
<code>tex-file</code> runs TeX on that file.

</p>
<p>The most convenient way to use <code>tex-main-file</code> is to specify it
in a local variable list in each of the subfiles.  See <a href="#File-Variables">File Variables</a>.

</p>
<a name="index-tex_002dbibtex_002dfile"></a>
<a name="index-C_002dc-TAB-_0028TeX-mode_0029"></a>
<a name="index-tex_002dbibtex_002dcommand"></a>
<p>For LaTeX files, you can use BibTeX to process the auxiliary
file for the current buffer’s file.  BibTeX looks up bibliographic
citations in a data base and prepares the cited references for the
bibliography section.  The command <kbd>C-c <span class="key">TAB</span></kbd>
(<code>tex-bibtex-file</code>) runs the shell command
(<code>tex-bibtex-command</code>) to produce a ‘<samp>.bbl</samp>’ file for the
current buffer’s file.  Generally, you need to do <kbd>C-c C-f</kbd>
(<code>tex-file</code>) once to generate the ‘<samp>.aux</samp>’ file, then do
<kbd>C-c <span class="key">TAB</span></kbd> (<code>tex-bibtex-file</code>), and then repeat <kbd>C-c C-f</kbd>
(<code>tex-file</code>) twice more to get the cross-references correct.

</p>
<a name="index-tex_002dcompile"></a>
<a name="index-C_002dc-C_002dc-_0028TeX-mode_0029"></a>
<p>To invoke some other compilation program on the current TeX
buffer, type <kbd>C-c C-c</kbd> (<code>tex-compile</code>).  This command knows
how to pass arguments to many common programs, including
<samp>pdflatex</samp>, <samp>yap</samp>, <samp>xdvi</samp>, and <samp>dvips</samp>.  You can
select your desired compilation program using the standard completion
keys (see <a href="#Completion">Completion</a>).

</p>

<a name="TeX-Misc"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#TeX-Print" accesskey="p" rel="prev">TeX Print</a>, Up: <a href="#TeX-Mode" accesskey="u" rel="up">TeX Mode</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="TeX-Mode-Miscellany"></a>
<h4 class="subsection">25.11.4 TeX Mode Miscellany</h4>

<a name="index-tex_002dshell_002dhook"></a>
<a name="index-tex_002dmode_002dhook"></a>
<a name="index-doctex_002dmode_002dhook"></a>
<a name="index-latex_002dmode_002dhook"></a>
<a name="index-slitex_002dmode_002dhook"></a>
<a name="index-plain_002dtex_002dmode_002dhook"></a>
<p>Entering any variant of TeX mode runs the hooks
<code>text-mode-hook</code> and <code>tex-mode-hook</code>.  Then it runs either
<code>plain-tex-mode-hook</code>, <code>doctex-mode-hook</code>,
<code>latex-mode-hook</code>, or <code>slitex-mode-hook</code>, whichever is
appropriate.  Starting the TeX shell runs the hook
<code>tex-shell-hook</code>.  See <a href="#Hooks">Hooks</a>.

</p>
<a name="index-iso_002diso2tex"></a>
<a name="index-iso_002dtex2iso"></a>
<a name="index-iso_002diso2gtex"></a>
<a name="index-iso_002dgtex2iso"></a>
<a name="index-Latin_002d1-TeX-encoding"></a>
<a name="index-TeX-encoding"></a>
<p>The commands <kbd>M-x iso-iso2tex</kbd>, <kbd>M-x iso-tex2iso</kbd>, <kbd>M-x
iso-iso2gtex</kbd> and <kbd>M-x iso-gtex2iso</kbd> can be used to convert
between Latin-1 encoded files and TeX-encoded equivalents.

</p>

<a name="HTML-Mode"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Nroff-Mode" accesskey="n" rel="next">Nroff Mode</a>, Previous: <a href="#TeX-Mode" accesskey="p" rel="prev">TeX Mode</a>, Up: <a href="#Text" accesskey="u" rel="up">Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="SGML-and-HTML-Modes"></a>
<h3 class="section">25.12 SGML and HTML Modes</h3>
<a name="index-SGML-mode"></a>
<a name="index-HTML-mode"></a>
<a name="index-mode_002c-SGML"></a>
<a name="index-mode_002c-HTML"></a>
<a name="index-sgml_002dmode"></a>
<a name="index-html_002dmode"></a>

<p>The major modes for SGML and HTML provide indentation support and
commands for operating on tags.

</p>
<p>HTML consists of two modes—one, a basic mode called
<code>html-mode</code> is a slightly customized variant of SGML mode.  The
other, which is used by default for HTML files, is called
<code>mhtml-mode</code>, and attempts to properly handle Javascript enclosed
in a <code>&lt;script&gt;</code> element and CSS embedded in a <code>&lt;style&gt;</code>
element.

</p>
<dl compact="compact">
<dt><kbd>C-c C-n</kbd></dt>
<dd><a name="index-C_002dc-C_002dn-_0028SGML-mode_0029"></a>
<a name="index-sgml_002dname_002dchar"></a>
<p>Interactively specify a special character and insert the SGML
‘<samp>&amp;</samp>’-command for that character (<code>sgml-name-char</code>).

</p>
</dd>
<dt><kbd>C-c C-t</kbd></dt>
<dd><a name="index-C_002dc-C_002dt-_0028SGML-mode_0029"></a>
<a name="index-sgml_002dtag"></a>
<p>Interactively specify a tag and its attributes (<code>sgml-tag</code>).
This command asks you for a tag name and for the attribute values,
then inserts both the opening tag and the closing tag, leaving point
between them.

</p>
<p>With a prefix argument <var>n</var>, the command puts the tag around the
<var>n</var> words already present in the buffer after point.  Whenever a
region is active, it puts the tag around the region (when Transient
Mark mode is off, it does this when a numeric argument of -1 is
supplied.)

</p>
</dd>
<dt><kbd>C-c C-a</kbd></dt>
<dd><a name="index-C_002dc-C_002da-_0028SGML-mode_0029"></a>
<a name="index-sgml_002dattributes"></a>
<p>Interactively insert attribute values for the current tag
(<code>sgml-attributes</code>).

</p>
</dd>
<dt><kbd>C-c C-f</kbd></dt>
<dd><a name="index-C_002dc-C_002df-_0028SGML-mode_0029"></a>
<a name="index-sgml_002dskip_002dtag_002dforward"></a>
<p>Skip across a balanced tag group (which extends from an opening tag
through its corresponding closing tag) (<code>sgml-skip-tag-forward</code>).
A numeric argument acts as a repeat count.

</p>
</dd>
<dt><kbd>C-c C-b</kbd></dt>
<dd><a name="index-C_002dc-C_002db-_0028SGML-mode_0029"></a>
<a name="index-sgml_002dskip_002dtag_002dbackward"></a>
<p>Skip backward across a balanced tag group (which extends from an
opening tag through its corresponding closing tag)
(<code>sgml-skip-tag-backward</code>).  A numeric argument acts as a repeat
count.

</p>
</dd>
<dt><kbd>C-c C-d</kbd></dt>
<dd><a name="index-C_002dc-C_002dd-_0028SGML-mode_0029"></a>
<a name="index-sgml_002ddelete_002dtag"></a>
<p>Delete the tag at or after point, and delete the matching tag too
(<code>sgml-delete-tag</code>).  If the tag at or after point is an opening
tag, delete the closing tag too; if it is a closing tag, delete the
opening tag too.

</p>
</dd>
<dt><kbd>C-c ? <var>tag</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-C_002dc-_003f-_0028SGML-mode_0029"></a>
<a name="index-sgml_002dtag_002dhelp"></a>
<p>Display a description of the meaning of tag <var>tag</var>
(<code>sgml-tag-help</code>).  If the argument <var>tag</var> is empty, describe
the tag at point.

</p>
</dd>
<dt><kbd>C-c /</kbd></dt>
<dd><a name="index-C_002dc-_002f-_0028SGML-mode_0029"></a>
<a name="index-sgml_002dclose_002dtag"></a>
<p>Insert a close tag for the innermost unterminated tag
(<code>sgml-close-tag</code>).  If called within a tag or a comment,
close it instead of inserting a close tag.

</p>
</dd>
<dt><kbd>C-c 8</kbd></dt>
<dd><a name="index-C_002dc-8-_0028SGML-mode_0029"></a>
<a name="index-sgml_002dname_002d8bit_002dmode"></a>
<p>Toggle a minor mode in which Latin-1 characters insert the
corresponding SGML commands that stand for them, instead of the
characters themselves (<code>sgml-name-8bit-mode</code>).

</p>
</dd>
<dt><kbd>C-c C-v</kbd></dt>
<dd><a name="index-C_002dc-C_002dv-_0028SGML-mode_0029"></a>
<a name="index-sgml_002dvalidate"></a>
<p>Run a shell command (which you must specify) to validate the current
buffer as SGML (<code>sgml-validate</code>).  (In HTML mode this key
sequence runs a different command.)

</p>
</dd>
<dt><kbd>C-c <span class="key">TAB</span></kbd></dt>
<dd><a name="index-C_002dc-TAB-_0028SGML-mode_0029"></a>
<a name="index-sgml_002dtags_002dinvisible"></a>
<p>Toggle the visibility of existing tags in the buffer.  This can be
used as a cheap preview (<code>sgml-tags-invisible</code>).

</p></dd>
</dl>

<a name="index-nXML-mode"></a>
<a name="index-mode_002c-nXML"></a>
<a name="index-mode_002c-XML"></a>
<a name="index-nxml_002dmode"></a>
<a name="index-XML-schema"></a>
<p>The major mode for editing XML documents is called nXML mode.  This
is a powerful major mode that can recognize many existing XML schemas
and use them to provide completion of XML elements via
<kbd>M-<span class="key">TAB</span></kbd>, as well as on-the-fly XML
validation with error highlighting.  To enable nXML mode in an
existing buffer, type <kbd>M-x nxml-mode</kbd>, or, equivalently, <kbd>M-x
xml-mode</kbd>.  Emacs uses nXML mode for files which have the extension
<samp>.xml</samp>.  For XHTML files, which have the extension <samp>.xhtml</samp>,
Emacs uses HTML mode by default; you can make it use nXML mode by
customizing the variable <code>auto-mode-alist</code> (see <a href="#Choosing-Modes">Choosing Modes</a>).
nXML mode is described in an Info manual, which is distributed with
Emacs.

</p>
<a name="index-sgml_002dxml_002dmode"></a>
<p>You may choose to use the less powerful SGML mode for editing XML,
since XML is a strict subset of SGML.  To enable SGML mode in an
existing buffer, type <kbd>M-x sgml-mode</kbd>.  On enabling SGML mode,
Emacs examines the buffer to determine whether it is XML; if so, it
sets the variable <code>sgml-xml-mode</code> to a non-<code>nil</code> value.
This causes SGML mode’s tag insertion commands, described above, to
always insert explicit closing tags as well.

</p>

<a name="Nroff-Mode"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Enriched-Text" accesskey="n" rel="next">Enriched Text</a>, Previous: <a href="#HTML-Mode" accesskey="p" rel="prev">HTML Mode</a>, Up: <a href="#Text" accesskey="u" rel="up">Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Nroff-Mode-1"></a>
<h3 class="section">25.13 Nroff Mode</h3>

<a name="index-nroff"></a>
<a name="index-nroff_002dmode"></a>
<a name="index-nroff_002dmode_002dhook"></a>
<p>Nroff mode, a major mode derived from Text mode, is
specialized for editing nroff files (e.g., Unix man pages).  Type
<kbd>M-x nroff-mode</kbd> to enter this mode.  Entering Nroff mode runs the
hook <code>text-mode-hook</code>, then <code>nroff-mode-hook</code>
(see <a href="#Hooks">Hooks</a>).

</p>
<p>In Nroff mode, nroff command lines are treated as paragraph
separators, pages are separated by ‘<samp>.bp</samp>’ commands, and comments
start with backslash-doublequote.  It also defines these commands:

</p>
<a name="index-nroff_002dforward_002dtext_002dline"></a>
<a name="index-nroff_002dbackward_002dtext_002dline"></a>
<a name="index-nroff_002dcount_002dtext_002dlines"></a>
<a name="index-M_002dn-_0028Nroff-mode_0029"></a>
<a name="index-M_002dp-_0028Nroff-mode_0029"></a>
<a name="index-M_002d_003f-_0028Nroff-mode_0029"></a>
<dl compact="compact">
<dt><kbd>M-n</kbd></dt>
<dd><p>Move to the beginning of the next line that isn’t an nroff command
(<code>nroff-forward-text-line</code>).  An argument is a repeat count.

</p></dd>
<dt><kbd>M-p</kbd></dt>
<dd><p>Like <kbd>M-n</kbd> but move up (<code>nroff-backward-text-line</code>).

</p></dd>
<dt><kbd>M-?</kbd></dt>
<dd><p>Displays in the echo area the number of text lines (lines that are not
nroff commands) in the region (<code>nroff-count-text-lines</code>).

</p></dd>
</dl>

<a name="index-nroff_002delectric_002dmode"></a>
<p>Electric Nroff mode is a buffer-local minor mode that can be used
with Nroff mode.  To toggle this minor mode, type <kbd>M-x
nroff-electric-mode</kbd> (see <a href="#Minor-Modes">Minor Modes</a>).  When the mode is on, each
time you type <tt class="key">RET</tt> to end a line containing an nroff command that
opens a kind of grouping, the nroff command to close that grouping is
automatically inserted on the following line.

</p>
<p>If you use Outline minor mode with Nroff mode (see <a href="#Outline-Mode">Outline Mode</a>), heading lines are lines of the form ‘<samp>.H</samp>’ followed by a
number (the header level).

</p>

<a name="Enriched-Text"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Text-Based-Tables" accesskey="n" rel="next">Text Based Tables</a>, Previous: <a href="#Nroff-Mode" accesskey="p" rel="prev">Nroff Mode</a>, Up: <a href="#Text" accesskey="u" rel="up">Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Enriched-Text-1"></a>
<h3 class="section">25.14 Enriched Text</h3>
<a name="index-Enriched-mode"></a>
<a name="index-mode_002c-Enriched"></a>
<a name="index-enriched-text"></a>
<a name="index-WYSIWYG"></a>
<a name="index-word-processing"></a>
<a name="index-text_002fenriched-MIME-format"></a>

<p>Enriched mode is a minor mode for editing formatted text files in a
WYSIWYG (What You See Is What You Get) fashion.  When Enriched
mode is enabled, you can apply various formatting properties to the
text in the buffer, such as fonts and colors; upon saving the buffer,
those properties are saved together with the text, using the MIME
‘<samp>text/enriched</samp>’ file format.

</p>
<p>Enriched mode is typically used with Text mode (see <a href="#Text-Mode">Text Mode</a>).
It is <em>not</em> compatible with Font Lock mode, which is used by many
major modes, including most programming language modes, for syntax
highlighting (see <a href="#Font-Lock">Font Lock</a>).  Unlike Enriched mode, Font Lock
mode assigns text properties automatically, based on the current
buffer contents; those properties are not saved to disk.

</p>
<p>The file <samp>enriched.txt</samp> in Emacs’s <code>data-directory</code>
serves as an example of the features of Enriched mode.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Enriched-Mode" accesskey="1">Enriched Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Entering and exiting Enriched mode.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Hard-and-Soft-Newlines" accesskey="2">Hard and Soft Newlines</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">There are two different kinds of newlines.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Editing-Format-Info" accesskey="3">Editing Format Info</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to edit text properties.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Enriched-Faces" accesskey="4">Enriched Faces</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Bold, italic, underline, etc.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Enriched-Indentation" accesskey="5">Enriched Indentation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Changing the left and right margins.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Enriched-Justification" accesskey="6">Enriched Justification</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Centering, setting text flush with the
                              left or right margin, etc.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Enriched-Properties" accesskey="7">Enriched Properties</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The “special text properties” submenu.

</td></tr>
</tbody></table>


<a name="Enriched-Mode"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Hard-and-Soft-Newlines" accesskey="n" rel="next">Hard and Soft Newlines</a>, Up: <a href="#Enriched-Text" accesskey="u" rel="up">Enriched Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Enriched-Mode-1"></a>
<h4 class="subsection">25.14.1 Enriched Mode</h4>

<p>Enriched mode is a buffer-local minor mode (see <a href="#Minor-Modes">Minor Modes</a>).
When you visit a file that has been saved in the ‘<samp>text/enriched</samp>’
format, Emacs automatically enables Enriched mode, and applies the
formatting information in the file to the buffer text.  When you save
a buffer with Enriched mode enabled, it is saved using the
‘<samp>text/enriched</samp>’ format, including the formatting information.

</p>
<a name="index-enriched_002dmode"></a>
<p>To create a new file of formatted text, visit the nonexistent file
and type <kbd>M-x enriched-mode</kbd>.  This command actually toggles
Enriched mode.  With a prefix argument, it enables Enriched mode if
the argument is positive, and disables Enriched mode otherwise.  If
you disable Enriched mode, Emacs no longer saves the buffer using the
‘<samp>text/enriched</samp>’ format; any formatting properties that have been
added to the buffer remain in the buffer, but they are not saved to
disk.

</p>
<a name="index-enriched_002dtranslations"></a>
<p>Enriched mode does not save all Emacs text properties, only those
specified in the variable <code>enriched-translations</code>.  These include
properties for fonts, colors, indentation, and justification.

</p>
<a name="index-format_002ddecode_002dbuffer"></a>
<p>If you visit a file and Emacs fails to recognize that it is in the
‘<samp>text/enriched</samp>’ format, type <kbd>M-x format-decode-buffer</kbd>.
This command prompts for a file format, and re-reads the file in that
format.  Specifying the ‘<samp>text/enriched</samp>’ format automatically
enables Enriched mode.

</p>
<p>To view a ‘<samp>text/enriched</samp>’ file in raw form (as plain text with
markup tags rather than formatted text), use <kbd>M-x
find-file-literally</kbd> (see <a href="#Visiting">Visiting</a>).

</p>
<p>See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Format-Conversion">Format Conversion</a> in <cite>the Emacs Lisp
Reference Manual</cite>, for details of how Emacs recognizes and converts
file formats like ‘<samp>text/enriched</samp>’.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Text-Properties">Text Properties</a> in <cite>the Emacs Lisp Reference Manual</cite>, for more information about
text properties.

</p>

<a name="Hard-and-Soft-Newlines"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Editing-Format-Info" accesskey="n" rel="next">Editing Format Info</a>, Previous: <a href="#Enriched-Mode" accesskey="p" rel="prev">Enriched Mode</a>, Up: <a href="#Enriched-Text" accesskey="u" rel="up">Enriched Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Hard-and-Soft-Newlines-1"></a>
<h4 class="subsection">25.14.2 Hard and Soft Newlines</h4>
<a name="index-hard-newline"></a>
<a name="index-soft-newline"></a>
<a name="index-newlines_002c-hard-and-soft"></a>

<a name="index-use_002dhard_002dnewlines"></a>
<p>In Enriched mode, Emacs distinguishes between two different kinds of
newlines, <em>hard</em> newlines and <em>soft</em> newlines.  You can also
enable or disable this feature in other buffers, by typing <kbd>M-x
use-hard-newlines</kbd>.

</p>
<p>Hard newlines are used to separate paragraphs, or anywhere there
needs to be a line break regardless of how the text is filled; soft
newlines are used for filling.  The <tt class="key">RET</tt> (<code>newline</code>) and
<kbd>C-o</kbd> (<code>open-line</code>) commands insert hard newlines.  The fill
commands, including Auto Fill (see <a href="#Auto-Fill">Auto Fill</a>), insert only soft
newlines and delete only soft newlines, leaving hard newlines alone.

</p>
<p>Thus, when editing with Enriched mode, you should not use <tt class="key">RET</tt>
or <kbd>C-o</kbd> to break lines in the middle of filled paragraphs.  Use
Auto Fill mode or explicit fill commands (see <a href="#Fill-Commands">Fill Commands</a>)
instead.  Use <tt class="key">RET</tt> or <kbd>C-o</kbd> where line breaks should always
remain, such as in tables and lists.  For such lines, you may also
want to set the justification style to <code>unfilled</code>
(see <a href="#Enriched-Justification">Enriched Justification</a>).

</p>

<a name="Editing-Format-Info"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Enriched-Faces" accesskey="n" rel="next">Enriched Faces</a>, Previous: <a href="#Hard-and-Soft-Newlines" accesskey="p" rel="prev">Hard and Soft Newlines</a>, Up: <a href="#Enriched-Text" accesskey="u" rel="up">Enriched Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Editing-Format-Information"></a>
<h4 class="subsection">25.14.3 Editing Format Information</h4>

<p>The easiest way to alter properties is with the ‘<samp>Text
Properties</samp>’ menu.  You can get to this menu from the ‘<samp>Edit</samp>’ menu
in the menu bar (see <a href="#Menu-Bar">Menu Bar</a>), or with <kbd>C-mouse-2</kbd>
(see <a href="#Menu-Mouse-Clicks">Menu Mouse Clicks</a>).  Some of the commands in the ‘<samp>Text
Properties</samp>’ menu are listed below (you can also invoke them with
<kbd>M-x</kbd>):

</p>
<dl compact="compact">
<dd><a name="index-facemenu_002dremove_002dface_002dprops"></a>
</dd>
<dt><code>Remove Face Properties</code></dt>
<dd><p>Remove face properties from the region
(<code>facemenu-remove-face-props</code>).

</p>
<a name="index-facemenu_002dremove_002dall"></a>
</dd>
<dt><code>Remove Text Properties</code></dt>
<dd><p>Remove all text properties from the region, including face properties
(<code>facemenu-remove-all</code>).

</p>
<a name="index-describe_002dtext_002dproperties"></a>
<a name="index-text-properties-of-characters"></a>
<a name="index-overlays-at-character-position"></a>
<a name="index-widgets-at-buffer-position"></a>
<a name="index-buttons-at-buffer-position"></a>
</dd>
<dt><code>Describe Properties</code></dt>
<dd><p>List all text properties and other information about the character
following point (<code>describe-text-properties</code>).

</p>
</dd>
<dt><code>Display Faces</code></dt>
<dd><p>Display a list of defined faces (<code>list-faces-display</code>).
See <a href="#Faces">Faces</a>.

</p>
</dd>
<dt><code>Display Colors</code></dt>
<dd><p>Display a list of defined colors (<code>list-colors-display</code>).
See <a href="#Colors">Colors</a>.

</p></dd>
</dl>

<p>The other menu entries are described in the following sections.

</p>

<a name="Enriched-Faces"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Enriched-Indentation" accesskey="n" rel="next">Enriched Indentation</a>, Previous: <a href="#Editing-Format-Info" accesskey="p" rel="prev">Editing Format Info</a>, Up: <a href="#Enriched-Text" accesskey="u" rel="up">Enriched Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Faces-in-Enriched-Text"></a>
<h4 class="subsection">25.14.4 Faces in Enriched Text</h4>

<p>The following commands can be used to add or remove faces
(see <a href="#Faces">Faces</a>).  Each applies to the text in the region if the mark
is active, and to the next self-inserting character if the mark is
inactive.  With a prefix argument, each command applies to the next
self-inserting character even if the region is active.

</p>
<dl compact="compact">
<dd><a name="index-M_002do-d-_0028Enriched-mode_0029"></a>
<a name="index-facemenu_002dset_002ddefault"></a>
</dd>
<dt><kbd>M-o d</kbd></dt>
<dd><p>Remove all <code>face</code> properties (<code>facemenu-set-default</code>).

</p>
<a name="index-M_002do-b-_0028Enriched-mode_0029"></a>
<a name="index-facemenu_002dset_002dbold"></a>
</dd>
<dt><kbd>M-o b</kbd></dt>
<dd><p>Apply the <code>bold</code> face (<code>facemenu-set-bold</code>).

</p>
<a name="index-M_002do-i-_0028Enriched-mode_0029"></a>
<a name="index-facemenu_002dset_002ditalic"></a>
</dd>
<dt><kbd>M-o i</kbd></dt>
<dd><p>Apply the <code>italic</code> face (<code>facemenu-set-italic</code>).

</p>
<a name="index-M_002do-l-_0028Enriched-mode_0029"></a>
<a name="index-facemenu_002dset_002dbold_002ditalic"></a>
</dd>
<dt><kbd>M-o l</kbd></dt>
<dd><p>Apply the <code>bold-italic</code> face (<code>facemenu-set-bold-italic</code>).

</p>
<a name="index-M_002do-u-_0028Enriched-mode_0029"></a>
<a name="index-facemenu_002dset_002dunderline"></a>
</dd>
<dt><kbd>M-o u</kbd></dt>
<dd><p>Apply the <code>underline</code> face (<code>facemenu-set-underline</code>).

</p>
<a name="index-M_002do-o-_0028Enriched-mode_0029"></a>
<a name="index-facemenu_002dset_002dface"></a>
</dd>
<dt><kbd>M-o o <var>face</var> <span class="key">RET</span></kbd></dt>
<dd><p>Apply the face <var>face</var> (<code>facemenu-set-face</code>).

</p>
<a name="index-facemenu_002dset_002dforeground"></a>
</dd>
<dt><kbd>M-x facemenu-set-foreground</kbd></dt>
<dd><p>Prompt for a color (see <a href="#Colors">Colors</a>), and apply it as a foreground
color.

</p>
<a name="index-facemenu_002dset_002dbackground"></a>
</dd>
<dt><kbd>M-x facemenu-set-background</kbd></dt>
<dd><p>Prompt for a color, and apply it as a background color.

</p></dd>
</dl>

<p>These commands are also available via the Text Properties menu.

</p>
<p>A self-inserting character normally inherits the face properties
(and most other text properties) from the preceding character in the
buffer.  If you use one of the above commands to specify the face for
the next self-inserting character, that character will not inherit the
faces properties from the preceding character, but it will still
inherit other text properties.

</p>
<p>Enriched mode defines two additional faces: <code>excerpt</code> and
<code>fixed</code>.  These correspond to codes used in the text/enriched
file format.  The <code>excerpt</code> face is intended for quotations; by
default, it appears the same as <code>italic</code>.  The <code>fixed</code> face
specifies fixed-width text; by default, it appears the same as
<code>bold</code>.

</p>

<a name="Enriched-Indentation"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Enriched-Justification" accesskey="n" rel="next">Enriched Justification</a>, Previous: <a href="#Enriched-Faces" accesskey="p" rel="prev">Enriched Faces</a>, Up: <a href="#Enriched-Text" accesskey="u" rel="up">Enriched Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Indentation-in-Enriched-Text"></a>
<h4 class="subsection">25.14.5 Indentation in Enriched Text</h4>

<p>In Enriched mode, you can specify different amounts of indentation
for the right or left margin of a paragraph or a part of a paragraph.
These margins also affect fill commands such as <kbd>M-q</kbd>
(see <a href="#Filling">Filling</a>).

</p>
<p>The Indentation submenu of Text Properties offers commands
for specifying indentation:

</p>
<dl compact="compact">
<dd><a name="index-C_002dx-TAB-_0028Enriched-mode_0029"></a>
<a name="index-increase_002dleft_002dmargin"></a>
</dd>
<dt><code>Indent More</code></dt>
<dd><p>Indent the region by 4 columns (<code>increase-left-margin</code>).  In
Enriched mode, this command is also available on <kbd>C-x <span class="key">TAB</span></kbd>; if
you supply a numeric argument, that says how many columns to add to the
margin (a negative argument reduces the number of columns).

</p>
</dd>
<dt><code>Indent Less</code></dt>
<dd><p>Remove 4 columns of indentation from the region.

</p>
</dd>
<dt><code>Indent Right More</code></dt>
<dd><p>Make the text narrower by indenting 4 columns at the right margin.

</p>
</dd>
<dt><code>Indent Right Less</code></dt>
<dd><p>Remove 4 columns of indentation from the right margin.

</p></dd>
</dl>

<a name="index-standard_002dindent"></a>
<p>The variable <code>standard-indent</code> specifies how many columns these
commands should add to or subtract from the indentation.  The default
value is 4.  The default right margin for Enriched mode is controlled
by the variable <code>fill-column</code>, as usual.

</p>
<a name="index-C_002dc-_005b-_0028Enriched-mode_0029"></a>
<a name="index-C_002dc-_005d-_0028Enriched-mode_0029"></a>
<a name="index-set_002dleft_002dmargin"></a>
<a name="index-set_002dright_002dmargin"></a>
<p>You can also type <kbd>C-c [</kbd> (<code>set-left-margin</code>) and <kbd>C-c
]</kbd> (<code>set-right-margin</code>) to set the left and right margins.  You
can specify the margin width with a numeric argument; otherwise these
commands prompt for a value via the minibuffer.

</p>
<p>The fill prefix, if any, works in addition to the specified paragraph
indentation: <kbd>C-x .</kbd> does not include the specified indentation’s
whitespace in the new value for the fill prefix, and the fill commands
look for the fill prefix after the indentation on each line.  See <a href="#Fill-Prefix">Fill Prefix</a>.

</p>

<a name="Enriched-Justification"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Enriched-Properties" accesskey="n" rel="next">Enriched Properties</a>, Previous: <a href="#Enriched-Indentation" accesskey="p" rel="prev">Enriched Indentation</a>, Up: <a href="#Enriched-Text" accesskey="u" rel="up">Enriched Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Justification-in-Enriched-Text"></a>
<h4 class="subsection">25.14.6 Justification in Enriched Text</h4>
<a name="index-justification-style"></a>

<p>In Enriched mode, you can use the following commands to specify
various <em>justification styles</em> for filling.  These commands apply
to the paragraph containing point, or, if the region is active, to all
paragraphs overlapping the region.

</p>
<dl compact="compact">
<dd><a name="index-M_002dj-l-_0028Enriched-mode_0029"></a>
<a name="index-set_002djustification_002dleft"></a>
</dd>
<dt><kbd>M-j l</kbd></dt>
<dd><p>Align lines to the left margin (<code>set-justification-left</code>).

</p>
<a name="index-M_002dj-r-_0028Enriched-mode_0029"></a>
<a name="index-set_002djustification_002dright"></a>
</dd>
<dt><kbd>M-j r</kbd></dt>
<dd><p>Align lines to the right margin (<code>set-justification-right</code>).

</p>
<a name="index-M_002dj-b-_0028Enriched-mode_0029"></a>
<a name="index-set_002djustification_002dfull"></a>
</dd>
<dt><kbd>M-j b</kbd></dt>
<dd><p>Align lines to both margins, inserting spaces in the middle of the
line to achieve this (<code>set-justification-full</code>).

</p>
<a name="index-M_002dj-c-_0028Enriched-mode_0029"></a>
<a name="index-M_002dS-_0028Enriched-mode_0029"></a>
<a name="index-set_002djustification_002dcenter"></a>
</dd>
<dt><kbd>M-j c</kbd></dt>
<dt><kbd>M-S</kbd></dt>
<dd><p>Center lines between the margins (<code>set-justification-center</code>).

</p>
<a name="index-M_002dj-u-_0028Enriched-mode_0029"></a>
<a name="index-set_002djustification_002dnone"></a>
</dd>
<dt><kbd>M-j u</kbd></dt>
<dd><p>Turn off filling entirely (<code>set-justification-none</code>).  The fill
commands do nothing on text with this setting.  You can, however,
still indent the left margin.

</p></dd>
</dl>

<a name="index-default_002djustification"></a>
<p>You can also specify justification styles using the Justification
submenu in the Text Properties menu.  The default justification style
is specified by the per-buffer variable <code>default-justification</code>.
Its value should be one of the symbols <code>left</code>, <code>right</code>,
<code>full</code>, <code>center</code>, or <code>none</code>; their meanings correspond
to the commands above.

</p>

<a name="Enriched-Properties"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Enriched-Justification" accesskey="p" rel="prev">Enriched Justification</a>, Up: <a href="#Enriched-Text" accesskey="u" rel="up">Enriched Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Setting-Other-Text-Properties"></a>
<h4 class="subsection">25.14.7 Setting Other Text Properties</h4>

<p>The Special Properties submenu of Text Properties has entries for
adding or removing four other text properties: <code>read-only</code>,
(which disallows alteration of the text), <code>invisible</code> (which
hides text), <code>intangible</code> (which disallows moving point within
the text), and <code>charset</code> (which is important for selecting a
proper font to display a character).  The ‘<samp>Remove Special</samp>’ menu
item removes all of these special properties from the text in the
region.

</p>
<p>The <code>invisible</code> and <code>intangible</code> properties are not saved.

</p>
<a name="index-enriched_002dallow_002deval_002din_002ddisplay_002dprops"></a>
<a name="index-security_002c-when-displaying-enriched-text"></a>
<p>Enriched mode also supports saving and restoring <code>display</code>
properties (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Display-Property">Display Property</a> in <cite>the Emacs Lisp Reference
Manual</cite>), which affect how text is displayed on the screen, and also
allow displaying images and strings that come from sources other than
buffer text.  The <code>display</code> properties also support execution of
arbitrary Lisp forms as part of processing the property for display,
thus providing a means to dynamically tailor the display to some
conditions that can only be known at display time.  Since execution of
arbitrary Lisp opens Emacs to potential attacks, especially when the
source of enriched text is outside of Emacs or even outside of your
system (e.g., if it was received in an email message), such execution
is by default disabled in Enriched mode.  You can enable it by
customizing the variable <code>enriched-allow-eval-in-display-props</code>
to a non-<code>nil</code> value.

</p>

<a name="Text-Based-Tables"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Two_002dColumn" accesskey="n" rel="next">Two-Column</a>, Previous: <a href="#Enriched-Text" accesskey="p" rel="prev">Enriched Text</a>, Up: <a href="#Text" accesskey="u" rel="up">Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Editing-Text_002dbased-Tables"></a>
<h3 class="section">25.15 Editing Text-based Tables</h3>
<a name="index-table-mode"></a>
<a name="index-text_002dbased-tables"></a>

<p>The <code>table</code> package provides commands to easily edit text-based
tables.  Here is an example of what such a table looks like:

</p>
<div class="smallexample">
<pre class="smallexample">+-----------------+--------------------------------+-----------------+
|     Command     |          Description           |   Key Binding   |
+-----------------+--------------------------------+-----------------+
|  forward-char   |Move point right N characters   |       C-f       |
|                 |(left if N is negative).        |                 |
|                 |                                |                 |
+-----------------+--------------------------------+-----------------+
|  backward-char  |Move point left N characters    |       C-b       |
|                 |(right if N is negative).       |                 |
|                 |                                |                 |
+-----------------+--------------------------------+-----------------+
</pre></div>

<p>When Emacs recognizes such a stretch of text as a table
(see <a href="#Table-Recognition">Table Recognition</a>), editing the contents of each table cell
will automatically resize the table, whenever the contents become too
large to fit in the cell.  You can use the commands defined in the
following sections for navigating and editing the table layout.

</p>
<a name="index-table_002dfixed_002dwidth_002dmode"></a>
<p>Type <kbd>M-x table-fixed-width-mode</kbd> to toggle the automatic table
resizing feature.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Table-Definition" accesskey="1">Table Definition</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">What is a text based table.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Table-Creation" accesskey="2">Table Creation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to create a table.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Table-Recognition" accesskey="3">Table Recognition</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to activate and deactivate tables.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Cell-Commands" accesskey="4">Cell Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Cell-oriented commands in a table.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Cell-Justification" accesskey="5">Cell Justification</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Justifying cell contents.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Table-Rows-and-Columns" accesskey="6">Table Rows and Columns</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Inserting and deleting rows and columns.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Table-Conversion" accesskey="7">Table Conversion</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Converting between plain text and tables.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Table-Misc" accesskey="8">Table Misc</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Table miscellany.

</td></tr>
</tbody></table>


<a name="Table-Definition"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Table-Creation" accesskey="n" rel="next">Table Creation</a>, Up: <a href="#Text-Based-Tables" accesskey="u" rel="up">Text Based Tables</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="What-is-a-Text_002dbased-Table_003f"></a>
<h4 class="subsection">25.15.1 What is a Text-based Table?</h4>
<a name="index-cells_002c-for-text_002dbased-tables"></a>

<p>A <em>table</em> consists of a rectangular text area which is divided
into <em>cells</em>.  Each cell must be at least one character wide and
one character high, not counting its border lines.  A cell can be
subdivided into more cells, but they cannot overlap.

</p>
<p>Cell border lines are drawn with three special characters, specified
by the following variables:

</p>
<dl compact="compact">
<dd><a name="index-table_002dcell_002dvertical_002dchar"></a>
</dd>
<dt><code>table-cell-vertical-char</code></dt>
<dd><p>The character used for vertical lines.  The default is ‘<samp>|</samp>’.

</p>
<a name="index-table_002dcell_002dhorizontal_002dchars"></a>
</dd>
<dt><code>table-cell-horizontal-chars</code></dt>
<dd><p>The characters used for horizontal lines.  The default is ‘<samp>"-="</samp>’.

</p>
<a name="index-table_002dcell_002dintersection_002dchar"></a>
</dd>
<dt><code>table-cell-intersection-char</code></dt>
<dd><p>The character used for the intersection of horizontal and vertical
lines.  The default is ‘<samp>+</samp>’.

</p></dd>
</dl>

<p>The following are examples of <em>invalid</em> tables:

</p>
<div class="example">
<pre class="example">   +-----+       +--+    +-++--+
   |     |       |  |    | ||  |
   |     |       |  |    | ||  |
   +--+  |    +--+--+    +-++--+
   |  |  |    |  |  |    +-++--+
   |  |  |    |  |  |    | ||  |
   +--+--+    +--+--+    +-++--+
      a          b          c
</pre></div>

<p>From left to right:

</p>
<ol type="a" start="1">
<li>  Overlapped cells or non-rectangular cells are not allowed.

</li><li>  The border must be rectangular.

</li><li>  Cells must have a minimum width/height of one character.

</li></ol>


<a name="Table-Creation"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Table-Recognition" accesskey="n" rel="next">Table Recognition</a>, Previous: <a href="#Table-Definition" accesskey="p" rel="prev">Table Definition</a>, Up: <a href="#Text-Based-Tables" accesskey="u" rel="up">Text Based Tables</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Creating-a-Table"></a>
<h4 class="subsection">25.15.2 Creating a Table</h4>
<a name="index-create-a-text_002dbased-table"></a>
<a name="index-table-creation"></a>

<a name="index-table_002dinsert"></a>
<p>To create a text-based table from scratch, type <kbd>M-x
table-insert</kbd>.  This command prompts for the number of table columns,
the number of table rows, cell width and cell height.  The cell width
and cell height do not include the cell borders; each can be specified
as a single integer (which means each cell is given the same
width/height), or as a sequence of integers separated by spaces or
commas (which specify the width/height of the individual table
columns/rows, counting from left to right for table columns and from
top to bottom for table rows).  The specified table is then inserted
at point.

</p>
<p>The table inserted by <kbd>M-x table-insert</kbd> contains special text
properties, which tell Emacs to treat it specially as a text-based
table.  If you save the buffer to a file and visit it again later,
those properties are lost, and the table appears to Emacs as an
ordinary piece of text.  See the next section, for how to convert it
back into a table.

</p>

<a name="Table-Recognition"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Cell-Commands" accesskey="n" rel="next">Cell Commands</a>, Previous: <a href="#Table-Creation" accesskey="p" rel="prev">Table Creation</a>, Up: <a href="#Text-Based-Tables" accesskey="u" rel="up">Text Based Tables</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Table-Recognition-1"></a>
<h4 class="subsection">25.15.3 Table Recognition</h4>
<a name="index-table-recognition"></a>

<a name="index-table_002drecognize"></a>
<a name="index-table_002dunrecognize"></a>
<p>Existing text-based tables in a buffer, which lack the special text
properties applied by <kbd>M-x table-insert</kbd>, are not treated
specially as tables.  To apply those text properties, type <kbd>M-x
table-recognize</kbd>.  This command scans the current buffer,
<em>recognizes</em> valid table cells, and applies the relevant text
properties.  Conversely, type <kbd>M-x table-unrecognize</kbd> to
<em>unrecognize</em> all tables in the current buffer, removing the
special text properties and converting tables back to plain text.

</p>
<p>You can also use the following commands to selectively recognize or
unrecognize tables:

</p>
<dl compact="compact">
<dd><a name="index-table_002drecognize_002dregion"></a>
</dd>
<dt><kbd>M-x table-recognize-region</kbd></dt>
<dd><p>Recognize tables within the current region.

</p>
<a name="index-table_002dunrecognize_002dregion"></a>
</dd>
<dt><kbd>M-x table-unrecognize-region</kbd></dt>
<dd><p>Unrecognize tables within the current region.

</p>
<a name="index-table_002drecognize_002dtable"></a>
</dd>
<dt><kbd>M-x table-recognize-table</kbd></dt>
<dd><p>Recognize the table at point and activate it.

</p>
<a name="index-table_002dunrecognize_002dtable"></a>
</dd>
<dt><kbd>M-x table-unrecognize-table</kbd></dt>
<dd><p>Deactivate the table at point.

</p>
<a name="index-table_002drecognize_002dcell"></a>
</dd>
<dt><kbd>M-x table-recognize-cell</kbd></dt>
<dd><p>Recognize the cell at point and activate it.

</p>
<a name="index-table_002dunrecognize_002dcell"></a>
</dd>
<dt><kbd>M-x table-unrecognize-cell</kbd></dt>
<dd><p>Deactivate the cell at point.

</p></dd>
</dl>

<p>See <a href="#Table-Conversion">Table Conversion</a>, for another way to recognize a table.

</p>

<a name="Cell-Commands"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Cell-Justification" accesskey="n" rel="next">Cell Justification</a>, Previous: <a href="#Table-Recognition" accesskey="p" rel="prev">Table Recognition</a>, Up: <a href="#Text-Based-Tables" accesskey="u" rel="up">Text Based Tables</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Commands-for-Table-Cells"></a>
<h4 class="subsection">25.15.4 Commands for Table Cells</h4>

<a name="index-table_002dforward_002dcell"></a>
<a name="index-table_002dbackward_002dcell"></a>
<p>The commands <kbd>M-x table-forward-cell</kbd> and <kbd>M-x
table-backward-cell</kbd> move point from the current cell to an adjacent
cell.  The order is cyclic: when point is in the last cell of a table,
<kbd>M-x table-forward-cell</kbd> moves to the first cell.  Likewise, when
point is on the first cell, <kbd>M-x table-backward-cell</kbd> moves to the
last cell.

</p>
<a name="index-table_002dspan_002dcell"></a>
<p><kbd>M-x table-span-cell</kbd> prompts for a direction—right, left,
above, or below—and merges the current cell with the adjacent cell
in that direction.  This command signals an error if the merge would
result in an illegitimate cell layout.

</p>
<a name="index-table_002dsplit_002dcell"></a>
<a name="index-table_002dsplit_002dcell_002dvertically"></a>
<a name="index-table_002dsplit_002dcell_002dhorizontally"></a>
<a name="index-text_002dbased-tables_002c-splitting-cells"></a>
<a name="index-splitting-table-cells"></a>
<p><kbd>M-x table-split-cell</kbd> splits the current cell vertically or
horizontally, prompting for the direction with the minibuffer.  To
split in a specific direction, use <kbd>M-x
table-split-cell-vertically</kbd> and <kbd>M-x
table-split-cell-horizontally</kbd>.  When splitting vertically, the old
cell contents are automatically split between the two new cells.  When
splitting horizontally, you are prompted for how to divide the cell
contents, if the cell is non-empty; the options are ‘<samp>split</samp>’
(divide the contents at point), ‘<samp>left</samp>’ (put all the contents in
the left cell), and ‘<samp>right</samp>’ (put all the contents in the right
cell).

</p>
<p>The following commands enlarge or shrink a cell.  By default, they
resize by one row or column; if a numeric argument is supplied, that
specifies the number of rows or columns to resize by.

</p>
<dl compact="compact">
<dd><a name="index-table_002dheighten_002dcell"></a>
</dd>
<dt><kbd>M-x table-heighten-cell</kbd></dt>
<dd><p>Enlarge the current cell vertically.

</p>
<a name="index-table_002dshorten_002dcell"></a>
</dd>
<dt><kbd>M-x table-shorten-cell</kbd></dt>
<dd><p>Shrink the current cell vertically.

</p>
<a name="index-table_002dwiden_002dcell"></a>
</dd>
<dt><kbd>M-x table-widen-cell</kbd></dt>
<dd><p>Enlarge the current cell horizontally.

</p>
<a name="index-table_002dnarrow_002dcell"></a>
</dd>
<dt><kbd>M-x table-narrow-cell</kbd></dt>
<dd><p>Shrink the current cell horizontally.

</p></dd>
</dl>


<a name="Cell-Justification"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Table-Rows-and-Columns" accesskey="n" rel="next">Table Rows and Columns</a>, Previous: <a href="#Cell-Commands" accesskey="p" rel="prev">Cell Commands</a>, Up: <a href="#Text-Based-Tables" accesskey="u" rel="up">Text Based Tables</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Cell-Justification-1"></a>
<h4 class="subsection">25.15.5 Cell Justification</h4>
<a name="index-justification-in-text_002dbased-tables"></a>

<p>The command <kbd>M-x table-justify</kbd> imposes <em>justification</em> on
one or more cells in a text-based table.  Justification determines how
the text in the cell is aligned, relative to the edges of the cell.
Each cell in a table can be separately justified.

</p>
<a name="index-table_002djustify"></a>
<p><kbd>M-x table-justify</kbd> first prompts for what to justify; the
options are ‘<samp>cell</samp>’ (just the current cell), ‘<samp>column</samp>’ (all
cells in the current table column) and ‘<samp>row</samp>’ (all cells in the
current table row).  The command then prompts for the justification
style; the options are <code>left</code>, <code>center</code>, <code>right</code>,
<code>top</code>, <code>middle</code>, <code>bottom</code>, or <code>none</code> (meaning no
vertical justification).

</p>
<p>Horizontal and vertical justification styles are specified
independently, and both types can be in effect simultaneously; for
instance, you can call <kbd>M-x table-justify</kbd> twice, once to specify
<code>right</code> justification and once to specify <code>bottom</code>
justification, to align the contents of a cell to the bottom right.

</p>
<a name="index-table_002ddetect_002dcell_002dalignment"></a>
<p>The justification style is stored in the buffer as a text property,
and is lost when you kill the buffer or exit Emacs.  However, the
table recognition commands, such as <kbd>M-x table-recognize</kbd>
(see <a href="#Table-Recognition">Table Recognition</a>), attempt to determine and re-apply each
cell’s justification style, by examining its contents.  To disable
this feature, change the variable <code>table-detect-cell-alignment</code>
to <code>nil</code>.

</p>

<a name="Table-Rows-and-Columns"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Table-Conversion" accesskey="n" rel="next">Table Conversion</a>, Previous: <a href="#Cell-Justification" accesskey="p" rel="prev">Cell Justification</a>, Up: <a href="#Text-Based-Tables" accesskey="u" rel="up">Text Based Tables</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Table-Rows-and-Columns-1"></a>
<h4 class="subsection">25.15.6 Table Rows and Columns</h4>
<a name="index-inserting-rows-and-columns-in-text_002dbased-tables"></a>

<a name="index-table_002dinsert_002drow"></a>
<p><kbd>M-x table-insert-row</kbd> inserts a row of cells before the current
table row.  The current row, together with point, is pushed down past
the new row.  To insert a row after the last row at the bottom of a
table, invoke this command with point below the table, just below the
bottom edge.  You can insert more than one row at a time by using a
numeric prefix argument.

</p>

<a name="index-table_002dinsert_002dcolumn"></a>
<p>Similarly, <kbd>M-x table-insert-column</kbd> inserts a column of cells
to the left of the current table column.  To insert a column to the
right side of the rightmost column, invoke this command with point to
the right of the rightmost column, outside the table.  A numeric
prefix argument specifies the number of columns to insert.

</p>
<a name="index-deleting-rows-and-column-in-text_002dbased-tables"></a>
<p><kbd>M-x table-delete-column</kbd> deletes the column of cells at point.
Similarly, <kbd>M-x table-delete-row</kbd> deletes the row of cells at
point.  A numeric prefix argument to either command specifies the
number of columns or rows to delete.

</p>

<a name="Table-Conversion"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Table-Misc" accesskey="n" rel="next">Table Misc</a>, Previous: <a href="#Table-Rows-and-Columns" accesskey="p" rel="prev">Table Rows and Columns</a>, Up: <a href="#Text-Based-Tables" accesskey="u" rel="up">Text Based Tables</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Converting-Between-Plain-Text-and-Tables"></a>
<h4 class="subsection">25.15.7 Converting Between Plain Text and Tables</h4>
<a name="index-text-to-table"></a>
<a name="index-table-to-text"></a>

<a name="index-table_002dcapture"></a>
<p>The command <kbd>M-x table-capture</kbd> captures plain text in a region
and turns it into a table.  Unlike <kbd>M-x table-recognize</kbd>
(see <a href="#Table-Recognition">Table Recognition</a>), the original text does not need to have a
table appearance; it only needs to have a logical table-like
structure.

</p>
<p>For example, suppose we have the following numbers, which are
divided into three lines and separated horizontally by commas:

</p>
<div class="example">
<pre class="example">1, 2, 3, 4
5, 6, 7, 8
, 9, 10
</pre></div>

<p>Invoking <kbd>M-x table-capture</kbd> on that text produces this table:

</p>
<div class="example">
<pre class="example">+-----+-----+-----+-----+
|1    |2    |3    |4    |
+-----+-----+-----+-----+
|5    |6    |7    |8    |
+-----+-----+-----+-----+
|     |9    |10   |     |
+-----+-----+-----+-----+
</pre></div>

<a name="index-table_002drelease"></a>
<p><kbd>M-x table-release</kbd> does the opposite: it converts a table back
to plain text, removing its cell borders.

</p>
<p>One application of this pair of commands is to edit a text in
layout.  Look at the following three paragraphs:

</p>
<div class="example">
<pre class="example">table-capture is a powerful command.
Here are some things it can do:

Parse Cell Items   Using row and column delimiter regexps,
                   it parses the specified text area and
                   extracts cell items into a table.
</pre></div>

<p>Applying <code>table-capture</code> to a region containing the above text,
with empty strings for the column and row delimiter regexps, creates a
table with a single cell like the following one.

</p>
<div class="smallexample">
<pre class="smallexample">+----------------------------------------------------------+
|table-capture is a powerful command.                      |
|Here are some things it can do:                           |
|                                                          |
|Parse Cell Items   Using row and column delimiter regexps,|
|                   it parses the specified text area and  |
|                   extracts cell items into a table.      |
+----------------------------------------------------------+
</pre></div>

<p>We can then use the cell splitting commands (see <a href="#Cell-Commands">Cell Commands</a>) to
subdivide the table so that each paragraph occupies a cell:

</p>
<div class="smallexample">
<pre class="smallexample">+----------------------------------------------------------+
|table-capture is a powerful command.                      |
|Here are some things it can do:                           |
+-----------------+----------------------------------------+
|Parse Cell Items | Using row and column delimiter regexps,|
|                 | it parses the specified text area and  |
|                 | extracts cell items into a table.      |
+-----------------+----------------------------------------+
</pre></div>

<p>Each cell can now be edited independently without affecting the layout
of other cells.  When finished, we can invoke <kbd>M-x table-release</kbd>
to convert the table back to plain text.

</p>

<a name="Table-Misc"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Table-Conversion" accesskey="p" rel="prev">Table Conversion</a>, Up: <a href="#Text-Based-Tables" accesskey="u" rel="up">Text Based Tables</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Table-Miscellany"></a>
<h4 class="subsection">25.15.8 Table Miscellany</h4>

<a name="index-table-dimensions"></a>
<a name="index-table_002dquery_002ddimension"></a>
<p>The command <code>table-query-dimension</code> reports the layout of the
table and table cell at point.  Here is an example of its output:

</p>
<div class="smallexample">
<pre class="smallexample">Cell: (21w, 6h), Table: (67w, 16h), Dim: (2c, 3r), Total Cells: 5
</pre></div>

<p>This indicates that the current cell is 21 characters wide and 6 lines
high, the table is 67 characters wide and 16 lines high with 2 columns
and 3 rows, and a total of 5 cells.

</p>
<a name="index-table_002dinsert_002dsequence"></a>
<p><kbd>M-x table-insert-sequence</kbd> traverses the cells of a table
inserting a sequence of text strings into each cell as it goes.  It
asks for the base string of the sequence, and then produces the
sequence by “incrementing” the base string, either numerically (if
the base string ends in numerical characters) or in the
<acronym>ASCII</acronym> order.  In addition to the base string, the command
prompts for the number of elements in the sequence, the increment, the
cell interval, and the justification of the text in each cell.

</p>
<a name="index-table-for-HTML-and-LaTeX"></a>
<a name="index-table_002dgenerate_002dsource"></a>
<p><kbd>M-x table-generate-source</kbd> generates a table formatted for a
specific markup language.  It asks for a language (which must be one
of <code>html</code>, <code>latex</code>, <code>cals</code>, <code>wiki</code> or
<code>mediawiki</code>), a destination buffer in which to put the result,
and a table caption, and then inserts the generated table into the
specified buffer.  The default destination buffer is
<code>table.<var>lang</var></code>, where <var>lang</var> is the language you
specified.

</p>

<a name="Two_002dColumn"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Text-Based-Tables" accesskey="p" rel="prev">Text Based Tables</a>, Up: <a href="#Text" accesskey="u" rel="up">Text</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Two_002dColumn-Editing"></a>
<h3 class="section">25.16 Two-Column Editing</h3>
<a name="index-two_002dcolumn-editing"></a>
<a name="index-splitting-columns"></a>
<a name="index-columns_002c-splitting"></a>

<p>Two-column mode lets you conveniently edit two side-by-side columns
of text.  It uses two side-by-side windows, each showing its own
buffer.  There are three ways to enter two-column mode:

</p>
<dl compact="compact">
<dt><kbd><span class="key">F2</span> 2</kbd> or <kbd>C-x 6 2</kbd></dt>
<dd><a name="index-F2-2"></a>
<a name="index-C_002dx-6-2"></a>
<a name="index-2C_002dtwo_002dcolumns"></a>
<p>Enter two-column mode with the current buffer on the left, and on the
right, a buffer whose name is based on the current buffer’s name
(<code>2C-two-columns</code>).  If the right-hand buffer doesn’t already
exist, it starts out empty; the current buffer’s contents are not
changed.

</p>
<p>This command is appropriate when the current buffer is empty or contains
just one column and you want to add another column.

</p>
</dd>
<dt><kbd><span class="key">F2</span> s</kbd> or <kbd>C-x 6 s</kbd></dt>
<dd><a name="index-F2-s"></a>
<a name="index-C_002dx-6-s"></a>
<a name="index-2C_002dsplit"></a>
<p>Split the current buffer, which contains two-column text, into two
buffers, and display them side by side (<code>2C-split</code>).  The current
buffer becomes the left-hand buffer, but the text in the right-hand
column is moved into the right-hand buffer.  The current column
specifies the split point.  Splitting starts with the current line and
continues to the end of the buffer.

</p>
<p>This command is appropriate when you have a buffer that already contains
two-column text, and you wish to separate the columns temporarily.

</p>
</dd>
<dt><kbd><span class="key">F2</span> b <var>buffer</var> <span class="key">RET</span></kbd></dt>
<dt><kbd>C-x 6 b <var>buffer</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-F2-b"></a>
<a name="index-C_002dx-6-b"></a>
<a name="index-2C_002dassociate_002dbuffer"></a>
<p>Enter two-column mode using the current buffer as the left-hand buffer,
and using buffer <var>buffer</var> as the right-hand buffer
(<code>2C-associate-buffer</code>).

</p></dd>
</dl>

<p><kbd><span class="key">F2</span> s</kbd> or <kbd>C-x 6 s</kbd> looks for a column separator, which
is a string that appears on each line between the two columns.  You can
specify the width of the separator with a numeric argument to
<kbd><span class="key">F2</span> s</kbd>; that many characters, before point, constitute the
separator string.  By default, the width is 1, so the column separator
is the character before point.

</p>
<p>When a line has the separator at the proper place, <kbd><span class="key">F2</span> s</kbd>
puts the text after the separator into the right-hand buffer, and
deletes the separator.  Lines that don’t have the column separator at
the proper place remain unsplit; they stay in the left-hand buffer, and
the right-hand buffer gets an empty line to correspond.  (This is the
way to write a line that spans both columns while in two-column
mode: write it in the left-hand buffer, and put an empty line in the
right-hand buffer.)

</p>
<a name="index-F2-RET"></a>
<a name="index-C_002dx-6-RET"></a>
<a name="index-2C_002dnewline"></a>
<p>The command <kbd><span class="key">F2</span> <span class="key">RET</span></kbd> or <kbd>C-x 6 <span class="key">RET</span></kbd>
(<code>2C-newline</code>) inserts a newline in each of the two buffers at
corresponding positions.  This is the easiest way to add a new line to
the two-column text while editing it in split buffers.

</p>
<a name="index-F2-1"></a>
<a name="index-C_002dx-6-1"></a>
<a name="index-2C_002dmerge"></a>
<p>When you have edited both buffers as you wish, merge them with
<kbd><span class="key">F2</span> 1</kbd> or <kbd>C-x 6 1</kbd> (<code>2C-merge</code>).  This copies the
text from the right-hand buffer as a second column in the other buffer.
To go back to two-column editing, use <kbd><span class="key">F2</span> s</kbd>.

</p>
<a name="index-F2-d"></a>
<a name="index-C_002dx-6-d"></a>
<a name="index-2C_002ddissociate"></a>
<p>Use <kbd><span class="key">F2</span> d</kbd> or <kbd>C-x 6 d</kbd> to dissociate the two buffers,
leaving each as it stands (<code>2C-dissociate</code>).  If the other buffer,
the one not current when you type <kbd><span class="key">F2</span> d</kbd>, is empty,
<kbd><span class="key">F2</span> d</kbd> kills it.

</p><hr>
<a name="Programs"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Building" accesskey="n" rel="next">Building</a>, Previous: <a href="#Text" accesskey="p" rel="prev">Text</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Editing-Programs"></a>
<h2 class="chapter">26 Editing Programs</h2>
<a name="index-Lisp-editing"></a>
<a name="index-C-editing"></a>
<a name="index-program-editing"></a>

<p>This chapter describes Emacs features for facilitating editing
programs.  Some of the things these features can do are:

</p>
<ul>
<li>  Find or move over top-level definitions (see <a href="#Defuns">Defuns</a>).

</li><li>  Apply the usual indentation conventions of the language
(see <a href="#Program-Indent">Program Indent</a>).

</li><li>  Balance parentheses (see <a href="#Parentheses">Parentheses</a>).

</li><li>  Insert, kill or align comments (see <a href="#Comments">Comments</a>).

</li><li>  Highlight program syntax (see <a href="#Font-Lock">Font Lock</a>).

</li></ul>

<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Program-Modes" accesskey="1">Program Modes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Major modes for editing programs.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Defuns" accesskey="2">Defuns</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands to operate on major top-level parts
                          of a program.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Program-Indent" accesskey="3">Program Indent</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Adjusting indentation to show the nesting.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Parentheses" accesskey="4">Parentheses</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands that operate on parentheses.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Comments" accesskey="5">Comments</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Inserting, killing, and aligning comments.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Documentation" accesskey="6">Documentation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Getting documentation of functions you plan to call.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Hideshow" accesskey="7">Hideshow</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Displaying blocks selectively.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Symbol-Completion" accesskey="8">Symbol Completion</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Completion on symbol names of your program or language.

</td></tr>
<tr><td align="left" valign="top">• <a href="#MixedCase-Words" accesskey="9">MixedCase Words</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Dealing with identifiersLikeThis.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Semantic">Semantic</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Suite of editing tools based on source code parsing.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Misc-for-Programs">Misc for Programs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Other Emacs features useful for editing programs.

</td></tr>
<tr><td align="left" valign="top">• <a href="#C-Modes">C Modes</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Special commands of C, C++, Objective-C, Java,
                          IDL, Pike and AWK modes.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Asm-Mode">Asm Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Asm mode and its special features.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Fortran">Fortran</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Fortran mode and its special features.

</td></tr>
</tbody></table>


<a name="Program-Modes"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Defuns" accesskey="n" rel="next">Defuns</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Major-Modes-for-Programming-Languages"></a>
<h3 class="section">26.1 Major Modes for Programming Languages</h3>
<a name="index-modes-for-programming-languages"></a>

<p>Emacs has specialized major modes (see <a href="#Major-Modes">Major Modes</a>) for many
programming languages.  A programming language mode typically
specifies the syntax of expressions, the customary rules for
indentation, how to do syntax highlighting for the language, and how
to find the beginning or end of a function definition.  It often has
features for compiling and debugging programs as well.  The major mode
for each language is named after the language; for instance, the major
mode for the C programming language is <code>c-mode</code>.

</p>
<a name="index-Perl-mode"></a>
<a name="index-Icon-mode"></a>
<a name="index-Makefile-mode"></a>
<a name="index-Tcl-mode"></a>
<a name="index-CPerl-mode"></a>
<a name="index-DSSSL-mode"></a>
<a name="index-Octave-mode"></a>
<a name="index-Metafont-mode"></a>
<a name="index-Modula2-mode"></a>
<a name="index-Prolog-mode"></a>
<a name="index-Python-mode"></a>
<a name="index-Ruby-mode"></a>
<a name="index-Simula-mode"></a>
<a name="index-Verilog-mode"></a>
<a name="index-VHDL-mode"></a>
<a name="index-M4-mode"></a>
<a name="index-Shell_002dscript-mode"></a>
<a name="index-OPascal-mode"></a>
<a name="index-PostScript-mode"></a>
<a name="index-Conf-mode"></a>
<a name="index-DNS-mode"></a>
<a name="index-Javascript-mode"></a>
<a name="index-Awk-mode"></a>
<p>Emacs has programming language modes for Lisp, Scheme, the
Scheme-based DSSSL expression language, Ada, ASM, AWK, C, C++,
Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles,
Metafont (TeX’s companion for font creation), Modula2, Object
Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog,
Python, Ruby, Simula, SQL, Tcl, Verilog, and VHDL.  An alternative
mode for Perl is called CPerl mode.  Modes are also available for the
scripting languages of the common GNU and Unix shells, and
MS-DOS/MS-Windows ‘<samp>BAT</samp>’ files, and for makefiles, DNS master
files, and various sorts of configuration files.

</p>
<p>Ideally, Emacs should have a major mode for each programming
language that you might want to edit.  If it doesn’t have a mode for
your favorite language, the mode might be implemented in a package not
distributed with Emacs (see <a href="#Packages">Packages</a>); or you can contribute one.

</p>
<a name="index-DEL-_0028programming-modes_0029"></a>
<a name="index-backward_002ddelete_002dchar_002duntabify"></a>
<p>In most programming languages, indentation should vary from line to
line to illustrate the structure of the program.  Therefore, in most
programming language modes, typing <kbd><span class="key">TAB</span></kbd> updates the
indentation of the current line (see <a href="#Program-Indent">Program Indent</a>).
Furthermore, <kbd><span class="key">DEL</span></kbd> is usually bound to
<code>backward-delete-char-untabify</code>, which deletes backward treating
each tab as if it were the equivalent number of spaces, so that you
can delete one column of indentation without worrying whether the
whitespace consists of spaces or tabs.

</p>
<a name="index-mode-hook_002c-and-major-modes"></a>
<a name="index-c_002dmode_002dhook"></a>
<a name="index-lisp_002dmode_002dhook"></a>
<a name="index-emacs_002dlisp_002dmode_002dhook"></a>
<a name="index-lisp_002dinteraction_002dmode_002dhook"></a>
<a name="index-scheme_002dmode_002dhook"></a>
<p>Entering a programming language mode runs the custom Lisp functions
specified in the hook variable <code>prog-mode-hook</code>, followed by
those specified in the mode’s own mode hook (see <a href="#Major-Modes">Major Modes</a>).
For instance, entering C mode runs the hooks <code>prog-mode-hook</code> and
<code>c-mode-hook</code>.  See <a href="#Hooks">Hooks</a>, for information about hooks.

</p>
<p>Separate manuals are available for the modes for Ada (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/ada-mode.html#Top">Ada Mode</a> in <cite>Ada Mode</cite>), C/C++/Objective C/Java/Corba
IDL/Pike/AWK (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html#Top">CC Mode</a> in <cite>CC Mode</cite>), Octave, VHDL,
and IDLWAVE (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/idlwave.html#Top">IDLWAVE</a> in <cite>IDLWAVE User Manual</cite>).

</p>

<a name="Defuns"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Program-Indent" accesskey="n" rel="next">Program Indent</a>, Previous: <a href="#Program-Modes" accesskey="p" rel="prev">Program Modes</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Top_002dLevel-Definitions_002c-or-Defuns"></a>
<h3 class="section">26.2 Top-Level Definitions, or Defuns</h3>

<p>In Emacs, a major definition at the top level in the buffer, such as
a function, is called a <em>defun</em>.  The name comes from Lisp, but in
Emacs we use it for all languages.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Left-Margin-Paren" accesskey="1">Left Margin Paren</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">An open-paren or similar opening delimiter
                          starts a defun if it is at the left margin.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Moving-by-Defuns" accesskey="2">Moving by Defuns</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands to move over or mark a major definition.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Imenu" accesskey="3">Imenu</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Making buffer indexes as menus.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Which-Function" accesskey="4">Which Function</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Which Function mode shows which function you are in.

</td></tr>
</tbody></table>


<a name="Left-Margin-Paren"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Moving-by-Defuns" accesskey="n" rel="next">Moving by Defuns</a>, Up: <a href="#Defuns" accesskey="u" rel="up">Defuns</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Left-Margin-Convention"></a>
<h4 class="subsection">26.2.1 Left Margin Convention</h4>

<a name="index-open_002dparenthesis-in-leftmost-column"></a>
<a name="index-_0028-in-leftmost-column"></a>
<p>Many programming-language modes have traditionally assumed that any
opening parenthesis or brace found at the left margin is the start of
a top-level definition, or defun.  So, by default, commands which seek
the beginning of a defun accept such a delimiter as signifying that
position.

</p>
<a name="index-open_002dparen_002din_002dcolumn_002d0_002dis_002ddefun_002dstart"></a>
<p>If you want to override this convention, you can do so by setting
the user option <code>open-paren-in-column-0-is-defun-start</code> to
<code>nil</code>.  If this option is set to <code>t</code> (the default), commands
seeking the start of a defun will stop at opening parentheses or
braces at column zero which aren’t in a comment or string.  When it is
<code>nil</code>, defuns are found by searching for parens or braces at the
outermost level.  Since low-level Emacs routines no longer depend on
this convention, you usually won’t need to change
<code>open-paren-in-column-0-is-defun-start</code> from its default.

</p>

<a name="Moving-by-Defuns"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Imenu" accesskey="n" rel="next">Imenu</a>, Previous: <a href="#Left-Margin-Paren" accesskey="p" rel="prev">Left Margin Paren</a>, Up: <a href="#Defuns" accesskey="u" rel="up">Defuns</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Moving-by-Defuns-1"></a>
<h4 class="subsection">26.2.2 Moving by Defuns</h4>
<a name="index-defuns"></a>

<p>These commands move point or set up the region based on top-level
major definitions, also called <em>defuns</em>.

</p>
<dl compact="compact">
<dt><kbd>C-M-a</kbd></dt>
<dd><p>Move to beginning of current or preceding defun
(<code>beginning-of-defun</code>).

</p></dd>
<dt><kbd>C-M-e</kbd></dt>
<dd><p>Move to end of current or following defun (<code>end-of-defun</code>).

</p></dd>
<dt><kbd>C-M-h</kbd></dt>
<dd><p>Put region around whole current or following defun (<code>mark-defun</code>).

</p></dd>
</dl>

<a name="index-move-to-beginning-or-end-of-function"></a>
<a name="index-function_002c-move-to-beginning-or-end"></a>
<a name="index-C_002dM_002da"></a>
<a name="index-C_002dM_002de"></a>
<a name="index-C_002dM_002dh"></a>
<a name="index-beginning_002dof_002ddefun"></a>
<a name="index-end_002dof_002ddefun"></a>
<a name="index-mark_002ddefun"></a>
<p>The commands to move to the beginning and end of the current defun
are <kbd>C-M-a</kbd> (<code>beginning-of-defun</code>) and <kbd>C-M-e</kbd>
(<code>end-of-defun</code>).  If you repeat one of these commands, or use a
positive numeric argument, each repetition moves to the next defun in
the direction of motion.

</p>
<p><kbd>C-M-a</kbd> with a negative argument -<var>n</var> moves forward
<var>n</var> times to the next beginning of a defun.  This is not exactly
the same place that <kbd>C-M-e</kbd> with argument <var>n</var> would move to;
the end of this defun is not usually exactly the same place as the
beginning of the following defun.  (Whitespace, comments, and perhaps
declarations can separate them.)  Likewise, <kbd>C-M-e</kbd> with a
negative argument moves back to an end of a defun, which is not quite
the same as <kbd>C-M-a</kbd> with a positive argument.

</p>
<a name="index-C_002dM_002dh-_0028C-mode_0029"></a>
<a name="index-c_002dmark_002dfunction"></a>
<p>To operate on the current defun, use <kbd>C-M-h</kbd>
(<code>mark-defun</code>), which sets the mark at the end of the current
defun and puts point at its beginning.  See <a href="#Marking-Objects">Marking Objects</a>.  This
is the easiest way to get ready to kill the defun in order to move it
to a different place in the file.  If the defun is directly preceded
by comments (with no intervening blank lines), they are marked, too.
If you use the command while point is between defuns, it uses the
following defun.  If you use the command while the mark is already
active, it extends the end of the region to include one more defun.
With a prefix argument, it marks that many defuns or extends the
region by the appropriate number of defuns.  With negative prefix
argument it marks defuns in the opposite direction and also changes
the direction of selecting for subsequent uses of <code>mark-defun</code>.

</p>
<p>In C mode, <kbd>C-M-h</kbd> runs the function <code>c-mark-function</code>,
which is almost the same as <code>mark-defun</code>; the difference is that
it backs up over the argument declarations, function name and returned
data type so that the entire C function is inside the region.  This is
an example of how major modes adjust the standard key bindings so that
they do their standard jobs in a way better fitting a particular
language.  Other major modes may replace any or all of these key
bindings for that purpose.

</p>

<a name="Imenu"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Which-Function" accesskey="n" rel="next">Which Function</a>, Previous: <a href="#Moving-by-Defuns" accesskey="p" rel="prev">Moving by Defuns</a>, Up: <a href="#Defuns" accesskey="u" rel="up">Defuns</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Imenu-1"></a>
<h4 class="subsection">26.2.3 Imenu</h4>
<a name="index-index-of-buffer-definitions"></a>
<a name="index-buffer-definitions-index"></a>

<p>The Imenu facility offers a way to find the major definitions in
a file by name.  It is also useful in text formatter major modes,
where it treats each chapter, section, etc., as a definition.
(See <a href="#Xref">Xref</a>, for a more powerful feature that handles multiple files
together.)

</p>
<a name="index-imenu"></a>
<p>If you type <kbd>M-x imenu</kbd>, it reads the name of a definition using
the minibuffer, then moves point to that definition.  You can use
completion to specify the name; the command always displays the whole
list of valid names.

</p>
<a name="index-imenu_002dadd_002dmenubar_002dindex"></a>
<p>Alternatively, you can bind the command <code>imenu</code> to a mouse
click.  Then it displays mouse menus for you to select a definition
name.  You can also add the buffer’s index to the menu bar by calling
<code>imenu-add-menubar-index</code>.  If you want to have this menu bar
item available for all buffers in a certain major mode, you can do
this by adding <code>imenu-add-menubar-index</code> to its mode hook.  But
if you have done that, you will have to wait a little while each time
you visit a file in that mode, while Emacs finds all the definitions
in that buffer.

</p>
<a name="index-imenu_002dauto_002drescan"></a>
<p>When you change the contents of a buffer, if you add or delete
definitions, you can update the buffer’s index based on the
new contents by invoking the ‘<samp>*Rescan*</samp>’ item in the menu.
Rescanning happens automatically if you set <code>imenu-auto-rescan</code> to
a non-<code>nil</code> value.  There is no need to rescan because of small
changes in the text.

</p>
<a name="index-imenu_002dauto_002drescan_002dmaxout"></a>
<p><code>imenu-auto-rescan</code> will be disabled in buffers that are larger
than <code>imenu-auto-rescan-maxout</code> in bytes.

</p>
<a name="index-imenu_002dsort_002dfunction"></a>
<p>You can customize the way the menus are sorted by setting the
variable <code>imenu-sort-function</code>.  By default, names are ordered as
they occur in the buffer; if you want alphabetic sorting, use the
symbol <code>imenu--sort-by-name</code> as the value.  You can also
define your own comparison function by writing Lisp code.

</p>
<p>Imenu provides the information to guide Which Function mode
(see <a href="#Which-Function">Which Function</a>).
The Speedbar can also use it (see <a href="#Speedbar">Speedbar</a>).

</p>

<a name="Which-Function"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Imenu" accesskey="p" rel="prev">Imenu</a>, Up: <a href="#Defuns" accesskey="u" rel="up">Defuns</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Which-Function-Mode"></a>
<h4 class="subsection">26.2.4 Which Function Mode</h4>
<a name="index-current-function-name-in-mode-line"></a>

<p>Which Function mode is a global minor mode (see <a href="#Minor-Modes">Minor Modes</a>)
which displays the current function name in the mode line, updating it
as you move around in a buffer.

</p>
<a name="index-which_002dfunction_002dmode"></a>
<a name="index-which_002dfunc_002dmodes"></a>
<p>To either enable or disable Which Function mode, use the command
<kbd>M-x which-function-mode</kbd>.  Which Function mode is a global minor
mode.  By default, it takes effect in all major modes that
know how to support it (i.e., all the major modes that support
Imenu).  You can restrict it to a specific list of major modes by
changing the value of the variable <code>which-func-modes</code> from
<code>t</code> (which means to support all available major modes) to a list
of major mode names.

</p>

<a name="Program-Indent"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Parentheses" accesskey="n" rel="next">Parentheses</a>, Previous: <a href="#Defuns" accesskey="p" rel="prev">Defuns</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Indentation-for-Programs"></a>
<h3 class="section">26.3 Indentation for Programs</h3>
<a name="index-indentation-for-programs"></a>

<p>The best way to keep a program properly indented is to use Emacs to
reindent it as you change it.  Emacs has commands to indent either a
single line, a specified number of lines, or all of the lines inside a
single parenthetical grouping.

</p>
<p>See <a href="#Indentation">Indentation</a>, for general information about indentation.  This
section describes indentation features specific to programming
language modes.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Basic-Indent" accesskey="1">Basic Indent</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Indenting a single line.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Multi_002dline-Indent" accesskey="2">Multi-line Indent</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands to reindent many lines at once.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Lisp-Indent" accesskey="3">Lisp Indent</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Specifying how each Lisp function should be indented.

</td></tr>
<tr><td align="left" valign="top">• <a href="#C-Indent" accesskey="4">C Indent</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Extra features for indenting C and related modes.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Custom-C-Indent" accesskey="5">Custom C Indent</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Controlling indentation style for C and related modes.

</td></tr>
</tbody></table>

<a name="index-pretty_002dprinter"></a>
<p>Emacs also provides a Lisp pretty-printer in the <code>pp</code> package,
which reformats Lisp objects with nice-looking indentation.
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Output-Functions">pp</a> in <cite>The Emacs Lisp Reference Manual</cite>.

</p>

<a name="Basic-Indent"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Multi_002dline-Indent" accesskey="n" rel="next">Multi-line Indent</a>, Up: <a href="#Program-Indent" accesskey="u" rel="up">Program Indent</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Basic-Program-Indentation-Commands"></a>
<h4 class="subsection">26.3.1 Basic Program Indentation Commands</h4>

<dl compact="compact">
<dt><kbd><span class="key">TAB</span></kbd></dt>
<dd><p>Adjust indentation of current line (<code>indent-for-tab-command</code>).

</p></dd>
<dt><kbd><span class="key">RET</span></kbd></dt>
<dd><p>Insert a newline, then adjust indentation of following line
(<code>newline</code>).

</p></dd>
</dl>

<a name="index-TAB-_0028programming-modes_0029"></a>
<a name="index-indent_002dline_002dfunction"></a>
<p>The basic indentation command is <kbd><span class="key">TAB</span></kbd>
(<code>indent-for-tab-command</code>), which was documented in
<a href="#Indentation">Indentation</a>.  In programming language modes, <kbd><span class="key">TAB</span></kbd>
indents the current line, based on the indentation and syntactic
content of the preceding lines; if the region is active,
<kbd><span class="key">TAB</span></kbd> indents each line within the region, not just the
current line.

</p>
<p>The command <kbd><span class="key">RET</span></kbd> (<code>newline</code>), which was documented
in <a href="#Inserting-Text">Inserting Text</a>, does the same as <kbd>C-j</kbd> followed by
<kbd><span class="key">TAB</span></kbd>: it inserts a new line, then adjusts the line’s
indentation.

</p>
<p>When indenting a line that starts within a parenthetical grouping,
Emacs usually places the start of the line under the preceding line
within the group, or under the text after the parenthesis.  If you
manually give one of these lines a nonstandard indentation (e.g., for
aesthetic purposes), the lines below will follow it.

</p>
<p>The indentation commands for most programming language modes assume
that an open-parenthesis, open-brace or other opening delimiter at the
left margin is the start of a function.  If the code you are editing
violates this assumption—even if the delimiters occur in strings or
comments—you must set <code>open-paren-in-column-0-is-defun-start</code>
to <code>nil</code> for indentation to work properly.  See <a href="#Left-Margin-Paren">Left Margin Paren</a>.

</p>

<a name="Multi_002dline-Indent"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Lisp-Indent" accesskey="n" rel="next">Lisp Indent</a>, Previous: <a href="#Basic-Indent" accesskey="p" rel="prev">Basic Indent</a>, Up: <a href="#Program-Indent" accesskey="u" rel="up">Program Indent</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Indenting-Several-Lines"></a>
<h4 class="subsection">26.3.2 Indenting Several Lines</h4>

<p>Sometimes, you may want to reindent several lines of code at a time.
One way to do this is to use the mark; when the mark is active and the
region is non-empty, <kbd><span class="key">TAB</span></kbd> indents every line in the region.
Alternatively, the command <kbd>C-M-\</kbd> (<code>indent-region</code>) indents
every line in the region, whether or not the mark is active
(see <a href="#Indentation-Commands">Indentation Commands</a>).

</p>
<p>In addition, Emacs provides the following commands for indenting
large chunks of code:

</p>
<dl compact="compact">
<dt><kbd>C-M-q</kbd></dt>
<dd><p>Reindent all the lines within one parenthetical grouping.

</p></dd>
<dt><kbd>C-u <span class="key">TAB</span></kbd></dt>
<dd><p>Shift an entire parenthetical grouping rigidly sideways so that its
first line is properly indented.

</p></dd>
<dt><kbd>M-x indent-code-rigidly</kbd></dt>
<dd><p>Shift all the lines in the region rigidly sideways, but do not alter
lines that start inside comments and strings.

</p></dd>
</dl>

<a name="index-C_002dM_002dq"></a>
<a name="index-indent_002dpp_002dsexp"></a>
<p>To reindent the contents of a single parenthetical grouping,
position point before the beginning of the grouping and type
<kbd>C-M-q</kbd>.  This changes the relative indentation within the
grouping, without affecting its overall indentation (i.e., the
indentation of the line where the grouping starts).  The function that
<kbd>C-M-q</kbd> runs depends on the major mode; it is
<code>indent-pp-sexp</code> in Lisp mode, <code>c-indent-exp</code> in C mode,
etc.  To correct the overall indentation as well, type <kbd><span class="key">TAB</span></kbd>
first.

</p>
<a name="index-C_002du-TAB"></a>
<p>If you like the relative indentation within a grouping but not the
indentation of its first line, move point to that first line and type
<kbd>C-u <span class="key">TAB</span></kbd>.  In Lisp, C, and some other major modes,
<kbd><span class="key">TAB</span></kbd> with a numeric argument reindents the current line as
usual, then reindents by the same amount all the lines in the
parenthetical grouping starting on the current line.  It is clever,
though, and does not alter lines that start inside strings.  Neither
does it alter C preprocessor lines when in C mode, but it does
reindent any continuation lines that may be attached to them.

</p>
<a name="index-indent_002dcode_002drigidly"></a>
<p>The command <kbd>M-x indent-code-rigidly</kbd> rigidly shifts all the
lines in the region sideways, like <code>indent-rigidly</code> does
(see <a href="#Indentation-Commands">Indentation Commands</a>).  It doesn’t alter the indentation of
lines that start inside a string, unless the region also starts inside
that string.  The prefix arg specifies the number of columns to
indent.

</p>

<a name="Lisp-Indent"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#C-Indent" accesskey="n" rel="next">C Indent</a>, Previous: <a href="#Multi_002dline-Indent" accesskey="p" rel="prev">Multi-line Indent</a>, Up: <a href="#Program-Indent" accesskey="u" rel="up">Program Indent</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Customizing-Lisp-Indentation"></a>
<h4 class="subsection">26.3.3 Customizing Lisp Indentation</h4>
<a name="index-customizing-Lisp-indentation"></a>

<p>The indentation pattern for a Lisp expression can depend on the function
called by the expression.  For each Lisp function, you can choose among
several predefined patterns of indentation, or define an arbitrary one with
a Lisp program.

</p>
<p>The standard pattern of indentation is as follows: the second line of the
expression is indented under the first argument, if that is on the same
line as the beginning of the expression; otherwise, the second line is
indented underneath the function name.  Each following line is indented
under the previous line whose nesting depth is the same.

</p>
<a name="index-lisp_002dindent_002doffset"></a>
<p>If the variable <code>lisp-indent-offset</code> is non-<code>nil</code>, it overrides
the usual indentation pattern for the second line of an expression, so that
such lines are always indented <code>lisp-indent-offset</code> more columns than
the containing list.

</p>
<a name="index-lisp_002dbody_002dindent"></a>
<p>Certain functions override the standard pattern.  Functions whose
names start with <code>def</code> treat the second lines as the start of
a <em>body</em>, by indenting the second line <code>lisp-body-indent</code>
additional columns beyond the open-parenthesis that starts the
expression.

</p>
<a name="index-lisp_002dindent_002dfunction-property"></a>
<p>You can override the standard pattern in various ways for individual
functions, according to the <code>lisp-indent-function</code> property of
the function name.  This is normally done for macro definitions, using
the <code>declare</code> construct.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Defining-Macros">Defining Macros</a> in <cite>The
Emacs Lisp Reference Manual</cite>.

</p>

<a name="C-Indent"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Custom-C-Indent" accesskey="n" rel="next">Custom C Indent</a>, Previous: <a href="#Lisp-Indent" accesskey="p" rel="prev">Lisp Indent</a>, Up: <a href="#Program-Indent" accesskey="u" rel="up">Program Indent</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Commands-for-C-Indentation"></a>
<h4 class="subsection">26.3.4 Commands for C Indentation</h4>

<p>Here are special features for indentation in C mode and related modes:

</p>
<dl compact="compact">
<dt><kbd>C-c C-q</kbd></dt>
<dd><a name="index-C_002dc-C_002dq-_0028C-mode_0029"></a>
<a name="index-c_002dindent_002ddefun"></a>
<p>Reindent the current top-level function definition or aggregate type
declaration (<code>c-indent-defun</code>).

</p>
</dd>
<dt><kbd>C-M-q</kbd></dt>
<dd><a name="index-C_002dM_002dq-_0028C-mode_0029"></a>
<a name="index-c_002dindent_002dexp"></a>
<p>Reindent each line in the balanced expression that follows point
(<code>c-indent-exp</code>).  A prefix argument inhibits warning messages
about invalid syntax.

</p>
</dd>
<dt><kbd><span class="key">TAB</span></kbd></dt>
<dd><a name="index-c_002dindent_002dcommand"></a>
<p>Reindent the current line, and/or in some cases insert a tab character
(<code>c-indent-command</code>).

</p>
<a name="index-c_002dtab_002dalways_002dindent"></a>
<p>If <code>c-tab-always-indent</code> is <code>t</code>, this command always reindents
the current line and does nothing else.  This is the default.

</p>
<p>If that variable is <code>nil</code>, this command reindents the current line
only if point is at the left margin or in the line’s indentation;
otherwise, it inserts a tab (or the equivalent number of spaces,
if <code>indent-tabs-mode</code> is <code>nil</code>).

</p>
<p>Any other value (not <code>nil</code> or <code>t</code>) means always reindent the
line, and also insert a tab if within a comment or a string.

</p></dd>
</dl>

<p>To reindent the whole current buffer, type <kbd>C-x h C-M-\</kbd>.  This
first selects the whole buffer as the region, then reindents that
region.

</p>
<p>To reindent the current block, use <kbd>C-M-u C-M-q</kbd>.  This moves
to the front of the block and then reindents it all.

</p>

<a name="Custom-C-Indent"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#C-Indent" accesskey="p" rel="prev">C Indent</a>, Up: <a href="#Program-Indent" accesskey="u" rel="up">Program Indent</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Customizing-C-Indentation"></a>
<h4 class="subsection">26.3.5 Customizing C Indentation</h4>
<a name="index-style-_0028for-indentation_0029"></a>

<p>C mode and related modes use a flexible mechanism for customizing
indentation.  C mode indents a source line in two steps: first it
classifies the line syntactically according to its contents and
context; second, it determines the indentation offset associated by
your selected <em>style</em> with the syntactic construct and adds this
onto the indentation of the <em>anchor statement</em>.

</p>
<dl compact="compact">
<dt><kbd>C-c . <var>style</var> <span class="key">RET</span></kbd></dt>
<dd><p>Select a predefined style <var>style</var> (<code>c-set-style</code>).

</p></dd>
</dl>

<p>A <em>style</em> is a named collection of customizations that can be
used in C mode and the related modes.  <a href="http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html#Styles">Styles</a> in <cite>The CC
Mode Manual</cite>, for a complete description.  Emacs comes with several
predefined styles, including <code>gnu</code>, <code>k&amp;r</code>, <code>bsd</code>,
<code>stroustrup</code>, <code>linux</code>, <code>python</code>, <code>java</code>,
<code>whitesmith</code>, <code>ellemtel</code>, and <code>awk</code>.  Some of these
styles are primarily intended for one language, but any of them can be
used with any of the languages supported by these modes.  To find out
what a style looks like, select it and reindent some code, e.g., by
typing <kbd>C-M-q</kbd> at the start of a function definition.

</p>
<a name="index-C_002dc-_002e-_0028C-mode_0029"></a>
<a name="index-c_002dset_002dstyle"></a>
<p>To choose a style for the current buffer, use the command <kbd><span class="nolinebreak">C-c</span>&nbsp;.</kbd><!-- /@w -->.  Specify a style name as an argument (case is not significant).
This command affects the current buffer only, and it affects only
future invocations of the indentation commands; it does not reindent
the code already in the buffer.  To reindent the whole buffer in the
new style, you can type <kbd>C-x h C-M-\</kbd>.

</p>
<a name="index-c_002ddefault_002dstyle"></a>
<p>You can also set the variable <code>c-default-style</code> to specify the default style for various major modes. Its value should be either the style’s name (a string) or an alist, in which each element specifies one major mode and which indentation style to use for it. 例如,
</p>
<div class="example">
<pre class="example">(setq c-default-style
      '((java-mode . "java")
        (awk-mode . "awk")
        (other . "gnu")))
</pre></div>

<p>specifies explicit choices for Java and AWK modes, and the default
‘<samp>gnu</samp>’ style for the other C-like modes.  (These settings are
actually the defaults.)  This variable takes effect when you select
one of the C-like major modes; thus, if you specify a new default
style for Java mode, you can make it take effect in an existing Java
mode buffer by typing <kbd>M-x java-mode</kbd> there.

</p>
<p>The <code>gnu</code> style specifies the formatting recommended by the GNU
Project for C; it is the default, so as to encourage use of our
recommended style.

</p>
<p>See <a href="http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html#Indentation-Engine-Basics">Indentation Engine Basics</a> in <cite>the CC Mode Manual</cite>, and
<a href="http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html#Customizing-Indentation">Customizing Indentation</a> in <cite>the CC Mode Manual</cite>, for more
information on customizing indentation for C and related modes,
including how to override parts of an existing style and how to define
your own styles.

</p>
<a name="index-c_002dguess"></a>
<a name="index-c_002dguess_002dinstall"></a>
<p>As an alternative to specifying a style, you can tell Emacs to guess
a style by typing <kbd>M-x c-guess</kbd> in a sample code buffer.  You can
then apply the guessed style to other buffers with <kbd>M-x
c-guess-install</kbd>.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html#Guessing-the-Style">Guessing the Style</a> in <cite>the CC Mode
Manual</cite>, for details.

</p>

<a name="Parentheses"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Comments" accesskey="n" rel="next">Comments</a>, Previous: <a href="#Program-Indent" accesskey="p" rel="prev">Program Indent</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Commands-for-Editing-with-Parentheses"></a>
<h3 class="section">26.4 Commands for Editing with Parentheses</h3>

<a name="index-check_002dparens"></a>
<a name="index-unbalanced-parentheses-and-quotes"></a>
<p>This section describes the commands and features that take advantage
of the parenthesis structure in a program, or help you keep it
balanced.

</p>
<p>When talking about these facilities, the term “parenthesis” also
includes braces, brackets, or whatever delimiters are defined to match
in pairs.  The major mode controls which delimiters are significant,
through the syntax table (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Syntax-Tables">Syntax Tables</a> in <cite>The Emacs Lisp Reference Manual</cite>).  In Lisp, only parentheses count;
in C, these commands apply to braces and brackets too.

</p>
<p>You can use <kbd>M-x check-parens</kbd> to find any unbalanced
parentheses and unbalanced string quotes in the buffer.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Expressions" accesskey="1">Expressions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Expressions with balanced parentheses.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Moving-by-Parens" accesskey="2">Moving by Parens</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands for moving up, down and across
                          in the structure of parentheses.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Matching" accesskey="3">Matching</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Insertion of a close-delimiter flashes matching open.

</td></tr>
</tbody></table>


<a name="Expressions"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Moving-by-Parens" accesskey="n" rel="next">Moving by Parens</a>, Up: <a href="#Parentheses" accesskey="u" rel="up">Parentheses</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Expressions-with-Balanced-Parentheses"></a>
<h4 class="subsection">26.4.1 Expressions with Balanced Parentheses</h4>

<a name="index-sexp"></a>
<a name="index-expression"></a>
<a name="index-balanced-expression"></a>
<p>Each programming language mode has its own definition of a
<em>balanced expression</em>.  Balanced expressions typically include
individual symbols, numbers, and string constants, as well as pieces
of code enclosed in a matching pair of delimiters.  The following
commands deal with balanced expressions (in Emacs, such expressions
are referred to internally as <em>sexps</em><a name="DOCF13" href="#FOOT13"><sup>13</sup></a>).

</p>
<dl compact="compact">
<dt><kbd>C-M-f</kbd></dt>
<dd><p>Move forward over a balanced expression (<code>forward-sexp</code>).

</p></dd>
<dt><kbd>C-M-b</kbd></dt>
<dd><p>Move backward over a balanced expression (<code>backward-sexp</code>).

</p></dd>
<dt><kbd>C-M-k</kbd></dt>
<dd><p>Kill balanced expression forward (<code>kill-sexp</code>).

</p></dd>
<dt><kbd>C-M-t</kbd></dt>
<dd><p>Transpose expressions (<code>transpose-sexps</code>).

</p></dd>
<dt><kbd>C-M-@</kbd></dt>
<dt><kbd>C-M-<span class="key">SPC</span></kbd></dt>
<dd><p>Put mark after following expression (<code>mark-sexp</code>).

</p></dd>
</dl>

<a name="index-C_002dM_002df"></a>
<a name="index-C_002dM_002db"></a>
<a name="index-forward_002dsexp"></a>
<a name="index-backward_002dsexp"></a>
<p>To move forward over a balanced expression, use <kbd>C-M-f</kbd>
(<code>forward-sexp</code>).  If the first significant character after point
is an opening delimiter (e.g., ‘<samp>(</samp>’, ‘<samp>[</samp>’ or ‘<samp>{</samp>’ in C),
this command moves past the matching closing delimiter.  If the
character begins a symbol, string, or number, the command moves over
that.

</p>
<p>The command <kbd>C-M-b</kbd> (<code>backward-sexp</code>) moves backward over a
balanced expression—like <kbd>C-M-f</kbd>, but in the reverse direction.
If the expression is preceded by any prefix characters (single-quote,
backquote and comma, in Lisp), the command moves back over them as
well.

</p>
<p><kbd>C-M-f</kbd> or <kbd>C-M-b</kbd> with an argument repeats that operation
the specified number of times; with a negative argument means to move
in the opposite direction.  In most modes, these two commands move
across comments as if they were whitespace.  Note that their keys,
<kbd>C-M-f</kbd> and <kbd>C-M-b</kbd>, are analogous to <kbd>C-f</kbd> and <kbd>C-b</kbd>,
which move by characters (see <a href="#Moving-Point">Moving Point</a>), and <kbd>M-f</kbd> and
<kbd>M-b</kbd>, which move by words (see <a href="#Words">Words</a>).

</p>
<a name="index-killing-expressions"></a>
<a name="index-C_002dM_002dk"></a>
<a name="index-kill_002dsexp"></a>
<p>To kill a whole balanced expression, type <kbd>C-M-k</kbd>
(<code>kill-sexp</code>).  This kills the text that <kbd>C-M-f</kbd> would move
over.

</p>
<a name="index-transposition-of-expressions"></a>
<a name="index-C_002dM_002dt"></a>
<a name="index-transpose_002dsexps"></a>
<p><kbd>C-M-t</kbd> (<code>transpose-sexps</code>) switches the positions of the
previous balanced expression and the next one.  It is analogous to the
<kbd>C-t</kbd> command, which transposes characters (see <a href="#Transpose">Transpose</a>).
An argument to <kbd>C-M-t</kbd> serves as a repeat count, moving the
previous expression over that many following ones.  A negative
argument moves the previous balanced expression backwards across those
before it.  An argument of zero, rather than doing nothing, transposes
the balanced expressions ending at or after point and the mark.

</p>
<a name="index-C_002dM_002dSPC"></a>
<p>To operate on balanced expressions with a command which acts on the
region, type <kbd>C-M-<span class="key">SPC</span></kbd> (<code>mark-sexp</code>).  This sets the
mark where <kbd>C-M-f</kbd> would move to.  While the mark is active, each
successive call to this command extends the region by shifting the
mark by one expression.  Positive or negative numeric arguments move
the mark forward or backward by the specified number of expressions.
The alias <kbd>C-M-@</kbd> is equivalent to <kbd>C-M-<span class="key">SPC</span></kbd>.
See <a href="#Marking-Objects">Marking Objects</a>, for more information about this and related
commands.

</p>
<p>In languages that use infix operators, such as C, it is not possible
to recognize all balanced expressions because there can be multiple
possibilities at a given position.  For example, C mode does not treat
‘<samp>foo + bar</samp>’ as a single expression, even though it <em>is</em> one
C expression; instead, it recognizes ‘<samp>foo</samp>’ as one expression and
‘<samp>bar</samp>’ as another, with the ‘<samp>+</samp>’ as punctuation between them.
However, C mode recognizes ‘<samp>(foo + bar)</samp>’ as a single expression,
because of the parentheses.

</p>

<a name="Moving-by-Parens"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Matching" accesskey="n" rel="next">Matching</a>, Previous: <a href="#Expressions" accesskey="p" rel="prev">Expressions</a>, Up: <a href="#Parentheses" accesskey="u" rel="up">Parentheses</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Moving-in-the-Parenthesis-Structure"></a>
<h4 class="subsection">26.4.2 Moving in the Parenthesis Structure</h4>

<a name="index-parenthetical-groupings"></a>
<a name="index-parentheses_002c-moving-across"></a>
<a name="index-matching-parenthesis-and-braces_002c-moving-to"></a>
<a name="index-braces_002c-moving-across"></a>
<a name="index-list-commands"></a>

<p>The following commands move over groupings delimited by parentheses
(or whatever else serves as delimiters in the language you are working
with).  They ignore strings and comments, including any parentheses
within them, and also ignore parentheses that are quoted with an
escape character.  These commands are mainly intended for editing
programs, but can be useful for editing any text containing
parentheses.  They are referred to internally as “list commands”
because in Lisp these groupings are lists.

</p>
<p>These commands assume that the starting point is not inside a string
or a comment.  If you invoke them from inside a string or comment, the
results are unreliable.

</p>
<dl compact="compact">
<dt><kbd>C-M-n</kbd></dt>
<dd><p>Move forward over a parenthetical group (<code>forward-list</code>).

</p></dd>
<dt><kbd>C-M-p</kbd></dt>
<dd><p>Move backward over a parenthetical group (<code>backward-list</code>).

</p></dd>
<dt><kbd>C-M-u</kbd></dt>
<dd><p>Move up in parenthesis structure (<code>backward-up-list</code>).

</p></dd>
<dt><kbd>C-M-d</kbd></dt>
<dd><p>Move down in parenthesis structure (<code>down-list</code>).

</p></dd>
</dl>

<a name="index-C_002dM_002dn"></a>
<a name="index-C_002dM_002dp"></a>
<a name="index-forward_002dlist"></a>
<a name="index-backward_002dlist"></a>
<p>The list commands <kbd>C-M-n</kbd> (<code>forward-list</code>) and
<kbd>C-M-p</kbd> (<code>backward-list</code>) move forward or backward over one
(or <var>n</var>) parenthetical groupings.

</p>
<a name="index-C_002dM_002du"></a>
<a name="index-backward_002dup_002dlist"></a>
<p><kbd>C-M-n</kbd> and <kbd>C-M-p</kbd> try to stay at the same level in the
parenthesis structure.  To move <em>up</em> one (or <var>n</var>) levels, use
<kbd>C-M-u</kbd> (<code>backward-up-list</code>).  <kbd>C-M-u</kbd> moves backward up
past one unmatched opening delimiter.  A positive argument serves as a
repeat count; a negative argument reverses the direction of motion, so
that the command moves forward and up one or more levels.

</p>
<a name="index-C_002dM_002dd"></a>
<a name="index-down_002dlist"></a>
<p>To move <em>down</em> in the parenthesis structure, use <kbd>C-M-d</kbd>
(<code>down-list</code>).  In Lisp mode, where ‘<samp>(</samp>’ is the only opening
delimiter, this is nearly the same as searching for a ‘<samp>(</samp>’.  An
argument specifies the number of levels to go down.

</p>

<a name="Matching"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Moving-by-Parens" accesskey="p" rel="prev">Moving by Parens</a>, Up: <a href="#Parentheses" accesskey="u" rel="up">Parentheses</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Matching-Parentheses"></a>
<h4 class="subsection">26.4.3 Matching Parentheses</h4>
<a name="index-matching-parentheses"></a>
<a name="index-parentheses_002c-displaying-matches"></a>

<p>Emacs has a number of <em>parenthesis matching</em> features, which
make it easy to see how and whether parentheses (or other delimiters)
match up.

</p>
<p>Whenever you type a self-inserting character that is a closing
delimiter, Emacs briefly indicates the location of the matching
opening delimiter, provided that is on the screen.  If it is not on
the screen, Emacs displays some of the text near it in the echo area.
Either way, you can tell which grouping you are closing off.  If the
opening delimiter and closing delimiter are mismatched—such as in
‘<samp>[x)</samp>’—a warning message is displayed in the echo area.

</p>
<a name="index-blink_002dmatching_002dparen"></a>
<a name="index-blink_002dmatching_002dparen_002ddistance"></a>
<a name="index-blink_002dmatching_002ddelay"></a>
<p>Three variables control the display of matching parentheses:

</p>
<ul>
<li> <code>blink-matching-paren</code> turns the feature on or off: <code>nil</code>
disables it, but the default is <code>t</code> to enable it.  Set it to
<code>jump</code> to make indication work by momentarily moving the cursor
to the matching opening delimiter.  Set it to <code>jump-offscreen</code> to
make the cursor jump, even if the opening delimiter is off screen.



</li><li> <code>blink-matching-delay</code> says how many seconds to keep indicating
the matching opening delimiter.  This may be an integer or
floating-point number; the default is 1.



</li><li> <code>blink-matching-paren-distance</code> specifies how many characters
back to search to find the matching opening delimiter.  If the match
is not found in that distance, Emacs stops scanning and nothing is
displayed.  The default is 102400.

</li></ul>

<a name="index-Show-Paren-mode"></a>
<a name="index-highlighting-matching-parentheses"></a>
<a name="index-show_002dparen_002dmode"></a>
<p>Show Paren mode, a global minor mode, provides a more powerful kind
of automatic matching.  Whenever point is before an opening delimiter
or after a closing delimiter, the delimiter, its matching delimiter,
and optionally the text between them are highlighted.  To toggle Show
Paren mode, type <kbd>M-x show-paren-mode</kbd>.  To customize it, type
<kbd>M-x customize-group <span class="key">RET</span> paren-showing</kbd>.  The customizable
options which control the operation of this mode include:

</p>
<ul>
<li> <a name="index-show_002dparen_002dhighlight_002dopenparen"></a>
<code>show-paren-highlight-openparen</code> controls whether to highlight
an open paren when point stands just before it, and hence its position
is marked by the cursor anyway.  The default is non-<code>nil</code> (yes).



</li><li> <a name="index-show_002dparen_002dstyle"></a>
<code>show-paren-style</code> controls whether just the two parens, or also
the space between them get highlighted.  The valid options here are
<code>parenthesis</code> (show the matching paren), <code>expression</code>
(highlight the entire expression enclosed by the parens), and
<code>mixed</code> (highlight the matching paren if it is visible, the
expression otherwise).



</li><li> <a name="index-show_002dparen_002dwhen_002dpoint_002dinside_002dparen"></a>
<code>show-paren-when-point-inside-paren</code>, when non-<code>nil</code>, causes
highlighting also when point is on the inside of a parenthesis.



</li><li> <a name="index-show_002dparen_002dwhen_002dpoint_002din_002dperiphery"></a>
<code>show-paren-when-point-in-periphery</code>, when non-<code>nil</code>, causes
highlighting also when point is in whitespace at the beginning or end
of a line, and there is a paren at, respectively, the first or last,
or the last, non-whitespace position on the line.

</li></ul>

<a name="index-Electric-Pair-mode"></a>
<a name="index-inserting-matching-parentheses"></a>
<a name="index-electric_002dpair_002dmode"></a>
<p>Electric Pair mode, a global minor mode, provides a way to easily
insert matching delimiters: parentheses, braces, brackets, etc.
Whenever you insert an opening delimiter, the matching closing
delimiter is automatically inserted as well, leaving point between the
two.  Conversely, when you insert a closing delimiter over an existing
one, no insertion takes places, and that position is simply skipped
over.  If the region is active (see <a href="#Mark">Mark</a>), insertion of a
delimiter operates on the region: the characters in the region are
enclosed in a pair of matching delimiters, leaving point after the
delimiter you typed.

</p>
<p>These variables control additional features of Electric Pair mode:

</p>
<ul>
<li> <a name="index-electric_002dpair_002dpreserve_002dbalance"></a>
<code>electric-pair-preserve-balance</code>, when non-<code>nil</code>, makes the
default pairing logic balance out the number of opening and closing
delimiters.



</li><li> <a name="index-electric_002dpair_002ddelete_002dadjacent_002dpairs"></a>
<code>electric-pair-delete-adjacent-pairs</code>, when non-<code>nil</code>, makes
backspacing between two adjacent delimiters also automatically delete
the closing delimiter.



</li><li> <a name="index-electric_002dpair_002dopen_002dnewline_002dbetween_002dpairs"></a>
<code>electric-pair-open-newline-between-pairs</code>, when non-<code>nil</code>,
makes inserting a newline between two adjacent pairs also
automatically open an extra newline after point.



</li><li> <a name="index-electric_002dpair_002dskip_002dwhitespace"></a>
<code>electric-pair-skip-whitespace</code>, when non-<code>nil</code>, causes the minor
mode to skip whitespace forward before deciding whether to skip over
the closing delimiter.

</li></ul>

<p>To toggle Electric Pair mode, type <kbd>M-x electric-pair-mode</kbd>.  To
toggle the mode in a single buffer, use <kbd>M-x
electric-pair-local-mode</kbd>.

</p>

<a name="Comments"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Documentation" accesskey="n" rel="next">Documentation</a>, Previous: <a href="#Parentheses" accesskey="p" rel="prev">Parentheses</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Manipulating-Comments"></a>
<h3 class="section">26.5 Manipulating Comments</h3>
<a name="index-comments"></a>

<p>Because comments are such an important part of programming, Emacs
provides special commands for editing and inserting comments.  It can
also do spell checking on comments with Flyspell Prog mode
(see <a href="#Spelling">Spelling</a>).

</p>
<p>Some major modes have special rules for indenting different kinds of
comments.  For example, in Lisp code, comments starting with two
semicolons are indented as if they were lines of code, while those
starting with three semicolons are supposed to be aligned to the left
margin and are often used for sectioning purposes.  Emacs understands
these conventions; for instance, typing <kbd><span class="key">TAB</span></kbd> on a comment
line will indent the comment to the appropriate position.

</p>
<div class="example">
<pre class="example">;; This function is just an example.
;;; Here either two or three semicolons are appropriate.
(defun foo (x)
;;;  And now, the first part of the function:
  ;; The following line adds one.
  (1+ x))           ; This line adds one.
</pre></div>

<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Comment-Commands" accesskey="1">Comment Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Inserting, killing, and aligning comments.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Multi_002dLine-Comments" accesskey="2">Multi-Line Comments</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands for adding and editing multi-line comments.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Options-for-Comments" accesskey="3">Options for Comments</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Customizing the comment features.

</td></tr>
</tbody></table>


<a name="Comment-Commands"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Multi_002dLine-Comments" accesskey="n" rel="next">Multi-Line Comments</a>, Up: <a href="#Comments" accesskey="u" rel="up">Comments</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Comment-Commands-1"></a>
<h4 class="subsection">26.5.1 Comment Commands</h4>
<a name="index-indentation-for-comments"></a>
<a name="index-alignment-for-comments"></a>

<p>The following commands operate on comments:

</p>
<dl compact="compact">
<dt><kbd>M-;</kbd></dt>
<dd><p>Insert or realign comment on current line; if the region is active,
comment or uncomment the region instead (<code>comment-dwim</code>).

</p></dd>
<dt><kbd>C-x C-;</kbd></dt>
<dd><p>Comment or uncomment the current line (<code>comment-line</code>).  If the
region is active, comment or uncomment the lines in the region
instead.

</p></dd>
<dt><kbd>C-u M-;</kbd></dt>
<dd><p>Kill comment on current line (<code>comment-kill</code>).

</p></dd>
<dt><kbd>C-x ;</kbd></dt>
<dd><p>Set comment column (<code>comment-set-column</code>).

</p></dd>
<dt><kbd>C-M-j</kbd></dt>
<dt><kbd>M-j</kbd></dt>
<dd><p>Like <kbd><span class="key">RET</span></kbd> followed by inserting and aligning a comment
(<code>comment-indent-new-line</code>).  See <a href="#Multi_002dLine-Comments">Multi-Line Comments</a>.

</p></dd>
<dt><kbd>M-x comment-region</kbd></dt>
<dt><kbd>C-c C-c</kbd> (in C-like modes)</dt>
<dd><p>Add comment delimiters to all the lines in the region.

</p></dd>
</dl>

<a name="index-M_002d_003b"></a>
<a name="index-comment_002ddwim"></a>
<p>The command to create or align a comment is <kbd>M-;</kbd>
(<code>comment-dwim</code>).  The word “dwim” is an acronym for “Do What
I Mean”; it indicates that this command can be used for many
different jobs relating to comments, depending on the situation where
you use it.

</p>
<p>When a region is active (see <a href="#Mark">Mark</a>), <kbd>M-;</kbd> either adds
comment delimiters to the region, or removes them.  If every line in
the region is already a comment, it uncomments each of those lines
by removing their comment delimiters.  Otherwise, it adds comment
delimiters to enclose the text in the region.

</p>
<p>If you supply a prefix argument to <kbd>M-;</kbd> when a region is
active, that specifies the number of comment delimiters to add or
delete.  A positive argument <var>n</var> adds <var>n</var> delimiters, while a
negative argument -<var>n</var> removes <var>n</var> delimiters.

</p>
<p>If the region is not active, and there is no existing comment on the
current line, <kbd>M-;</kbd> adds a new comment to the current line.  If
the line is blank (i.e., empty or containing only whitespace
characters), the comment is indented to the same position where
<kbd><span class="key">TAB</span></kbd> would indent to (see <a href="#Basic-Indent">Basic Indent</a>).  If the line
is non-blank, the comment is placed after the last non-whitespace
character on the line.  Emacs tries to fit the comment between the
columns specified by the variables <code>comment-column</code> and
<code>comment-fill-column</code> (see <a href="#Options-for-Comments">Options for Comments</a>), if
possible.  Otherwise, it will choose some other suitable position,
usually separated from the non-comment text by at least one space.  In
each case, Emacs places point after the comment’s starting delimiter,
so that you can start typing the comment text right away.

</p>
<p>You can also use <kbd>M-;</kbd> to align an existing comment.  If a line
already contains the comment-start string, <kbd>M-;</kbd> realigns it to
the conventional alignment and moves point after the comment’s
starting delimiter.  As an exception, comments starting in column 0
are not moved.  Even when an existing comment is properly aligned,
<kbd>M-;</kbd> is still useful for moving directly to the start of the
comment text.

</p>
<a name="index-comment_002dline"></a>
<a name="index-C_002dx-C_002d_003b"></a>
<p><kbd>C-x C-;</kbd> (<code>comment-line</code>) comments or uncomments complete
lines.  When a region is active (see <a href="#Mark">Mark</a>), <kbd>C-x C-;</kbd> either
comments or uncomments the lines in the region.  If the region is not
active, this command comments or uncomments the line point is on.
With a positive prefix argument <var>n</var>, it operates on <var>n</var> lines
starting with the current one; with a negative argument
-<var>n</var>, it affects <var>n</var> preceding lines.  After invoking
this command with a negative argument, successive invocations with a
positive argument will operate on preceding lines as if the argument
were negated.

</p>
<a name="index-comment_002dkill"></a>
<a name="index-C_002du-M_002d_003b"></a>
<p><kbd>C-u M-;</kbd> (<code>comment-dwim</code> with a prefix argument) kills any
comment on the current line, along with the whitespace before it.
Since the comment is saved to the kill ring, you can reinsert it on
another line by moving to the end of that line, doing <kbd>C-y</kbd>, and
then <kbd>M-;</kbd> to realign the comment.  You can achieve the same
effect as <kbd>C-u M-;</kbd> by typing <kbd>M-x comment-kill</kbd>
(<code>comment-dwim</code> actually calls <code>comment-kill</code> as a
subroutine when it is given a prefix argument).

</p>
<a name="index-C_002dc-C_002dc-_0028C-mode_0029"></a>
<a name="index-comment_002dregion"></a>
<a name="index-uncomment_002dregion"></a>
<p>The command <kbd>M-x comment-region</kbd> is equivalent to calling
<kbd>M-;</kbd> on an active region, except that it always acts on the
region, even if the mark is inactive.  In C mode and related modes,
this command is bound to <kbd>C-c C-c</kbd>.  The command <kbd>M-x
uncomment-region</kbd> uncomments each line in the region; a numeric prefix
argument specifies the number of comment delimiters to remove
(negative arguments specify the number of comment delimiters to add).

</p>
<p>For C-like modes, you can configure the exact effect of <kbd>M-;</kbd> by
setting the variables <code>c-indent-comment-alist</code> and
<code>c-indent-comments-syntactically-p</code>.  For example, on a line
ending in a closing brace, <kbd>M-;</kbd> puts the comment one space after
the brace rather than at <code>comment-column</code>.  For full details see
<a href="http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html#Comment-Commands">Comment Commands</a> in <cite>The CC Mode Manual</cite>.

</p>

<a name="Multi_002dLine-Comments"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Options-for-Comments" accesskey="n" rel="next">Options for Comments</a>, Previous: <a href="#Comment-Commands" accesskey="p" rel="prev">Comment Commands</a>, Up: <a href="#Comments" accesskey="u" rel="up">Comments</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Multiple-Lines-of-Comments"></a>
<h4 class="subsection">26.5.2 Multiple Lines of Comments</h4>

<a name="index-C_002dM_002dj"></a>
<a name="index-M_002dj"></a>
<a name="index-blank-lines-in-programs"></a>
<a name="index-comment_002dindent_002dnew_002dline"></a>
<a name="index-comment_002dmulti_002dline"></a>
<p>If you are typing a comment and wish to continue it to another line,
type <kbd>M-j</kbd> or <kbd>C-M-j</kbd> (<code>comment-indent-new-line</code>).  This
breaks the current line, and inserts the necessary comment delimiters
and indentation to continue the comment.

</p>
<p>For languages with closing comment delimiters (e.g., ‘<samp>*/</samp>’ in
C), the exact behavior of <kbd>M-j</kbd> depends on the value of the
variable <code>comment-multi-line</code>.  If the value is <code>nil</code>, the
command closes the comment on the old line and starts a new comment on
the new line.  Otherwise, it opens a new line within the current
comment delimiters.

</p>
<p>When Auto Fill mode is on, going past the fill column while typing a
comment also continues the comment, in the same way as an explicit
invocation of <kbd>M-j</kbd>.

</p>
<p>To turn existing lines into comment lines, use <kbd>M-;</kbd> with the
region active, or use <kbd>M-x comment-region</kbd>
as described in the preceding section.

</p>
<p>You can configure C Mode such that when you type a ‘<samp>/</samp>’ at the
start of a line in a multi-line block comment, this closes the
comment.  Enable the <code>comment-close-slash</code> clean-up for this.
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html#Clean_002dups">Clean-ups</a> in <cite>The CC Mode Manual</cite>.

</p>

<a name="Options-for-Comments"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Multi_002dLine-Comments" accesskey="p" rel="prev">Multi-Line Comments</a>, Up: <a href="#Comments" accesskey="u" rel="up">Comments</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Options-Controlling-Comments"></a>
<h4 class="subsection">26.5.3 Options Controlling Comments</h4>

<a name="index-comment_002dcolumn"></a>
<a name="index-comment_002dfill_002dcolumn"></a>
<a name="index-C_002dx-_003b"></a>
<a name="index-comment_002dset_002dcolumn"></a>
<p>As mentioned in <a href="#Comment-Commands">Comment Commands</a>, when the <kbd>M-j</kbd> command
adds a comment to a line, it tries to place the comment between the
columns specified by the buffer-local variables <code>comment-column</code>
and <code>comment-fill-column</code> (or if that is <code>nil</code>, then the
value of <code>fill-column</code>, see <a href="#Fill-Commands">Fill Commands</a>).  You can set
either the local value or the default value of these buffer-local
variables in the usual way (see <a href="#Locals">Locals</a>).  Alternatively, you can
type <kbd>C-x ;</kbd> (<code>comment-set-column</code>) to set the value of
<code>comment-column</code> in the current buffer to the column where point
is currently located.  <kbd>C-u C-x ;</kbd> sets the comment column to
match the last comment before point in the buffer, and then does a
<kbd>M-;</kbd> to align the current line’s comment under the previous one.

</p>
<a name="index-comment_002dstart_002dskip"></a>
<p>The comment commands recognize comments based on the regular
expression that is the value of the variable <code>comment-start-skip</code>.
Make sure this regexp does not match the null string.  It may match more
than the comment starting delimiter in the strictest sense of the word;
for example, in C mode the value of the variable is
<code>"\\(//+\\|/\\*+\\)\\s&nbsp;*"<!-- /@w --></code>, which matches extra stars and
spaces after the ‘<samp>/*</samp>’ itself, and accepts C++ style comments
also.  (Note that ‘<samp>\\</samp>’ is needed in Lisp syntax to include a
‘<samp>\</samp>’ in the string, which is needed to deny the first star its
special meaning in regexp syntax.  See <a href="#Regexp-Backslash">Regexp Backslash</a>.)

</p>
<a name="index-comment_002dstart"></a>
<a name="index-comment_002dend"></a>
<p>When a comment command makes a new comment, it inserts the value of
<code>comment-start</code> as an opening comment delimiter.  It also inserts
the value of <code>comment-end</code> after point, as a closing comment
delimiter.  For example, in Lisp mode, <code>comment-start</code> is
‘<samp>";"</samp>’ and <code>comment-end</code> is <code>""</code> (the empty string).  In
C mode, <code>comment-start</code> is <code>"/* "</code> and <code>comment-end</code> is
<code>" */"</code>.

</p>
<a name="index-comment_002dpadding"></a>
<p>The variable <code>comment-padding</code> specifies a string that the
commenting commands should insert between the comment delimiter(s) and
the comment text.  The default, ‘<samp>" "</samp>’, specifies a single space.
Alternatively, the value can be a number, which specifies that number
of spaces, or <code>nil</code>, which means no spaces at all.

</p>
<p>The variable <code>comment-multi-line</code> controls how <kbd>M-j</kbd> and
Auto Fill mode continue comments over multiple lines.
See <a href="#Multi_002dLine-Comments">Multi-Line Comments</a>.

</p>
<a name="index-comment_002dindent_002dfunction"></a>
<p>The variable <code>comment-indent-function</code> should contain a function
that will be called to compute the alignment for a newly inserted
comment or for aligning an existing comment.  It is set differently by
various major modes.  The function is called with no arguments, but with
point at the beginning of the comment, or at the end of a line if a new
comment is to be inserted.  It should return the column in which the
comment ought to start.  For example, the default function bases its
decision on how many comment characters begin an existing comment.

</p>
<p>Emacs also tries to align comments on adjacent lines.  To override
this, the function may return a cons of two (possibly equal) integers
to indicate an acceptable range of indentation.

</p>

<a name="Documentation"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Hideshow" accesskey="n" rel="next">Hideshow</a>, Previous: <a href="#Comments" accesskey="p" rel="prev">Comments</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Documentation-Lookup"></a>
<h3 class="section">26.6 Documentation Lookup</h3>

<p>Emacs provides several features you can use to look up the
documentation of functions, variables and commands that you plan to
use in your program.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Info-Lookup" accesskey="1">Info Lookup</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Looking up library functions and commands in Info files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Man-Page" accesskey="2">Man Page</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Looking up man pages of library functions and commands.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Lisp-Doc" accesskey="3">Lisp Doc</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Looking up Emacs Lisp functions, etc.

</td></tr>
</tbody></table>


<a name="Info-Lookup"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Man-Page" accesskey="n" rel="next">Man Page</a>, Up: <a href="#Documentation" accesskey="u" rel="up">Documentation</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Info-Documentation-Lookup"></a>
<h4 class="subsection">26.6.1 Info Documentation Lookup</h4>

<a name="index-info_002dlookup_002dfile"></a>
<p>For major modes that apply to languages which have documentation in
Info, you can use <kbd>C-h S</kbd> (<code>info-lookup-symbol</code>) to view the
Info documentation for a symbol used in the program.  You specify the
symbol with the minibuffer; the default is the symbol appearing in the
buffer at point.  For example, in C mode this looks for the symbol in
the C Library Manual.  The command only works if the appropriate
manual’s Info files are installed.

</p>
<p>Emacs determines where to look for documentation for the
symbol—which Info files to look in, and which indices to
search—based on the major mode.  You can also use <kbd>M-x
info-lookup-file</kbd> to look for documentation for a file name.

</p>
<p>If you use <kbd>C-h S</kbd> in a major mode that does not support it,
it asks you to specify the symbol help mode.  You should enter
a command such as <code>c-mode</code> that would select a major
mode which <kbd>C-h S</kbd> does support.

</p>

<a name="Man-Page"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Lisp-Doc" accesskey="n" rel="next">Lisp Doc</a>, Previous: <a href="#Info-Lookup" accesskey="p" rel="prev">Info Lookup</a>, Up: <a href="#Documentation" accesskey="u" rel="up">Documentation</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Man-Page-Lookup"></a>
<h4 class="subsection">26.6.2 Man Page Lookup</h4>

<a name="index-man-page"></a>
<p>On Unix, the main form of on-line documentation was the <em>manual
page</em> or <em>man page</em>.  In the GNU operating system, we aim to
replace man pages with better-organized manuals that you can browse
with Info (see <a href="#Misc-Help">Misc Help</a>).  This process is not finished, so it is
still useful to read manual pages.

</p>
<a name="index-man"></a>
<p>You can read the man page for an operating system command, library
function, or system call, with the <kbd>M-x man</kbd> command.  This
prompts for a topic, with completion (see <a href="#Completion">Completion</a>), and runs
the <code>man</code> program to format the corresponding man page.  If
the system permits, it runs <code>man</code> asynchronously, so that you
can keep on editing while the page is being formatted.  The result
goes in a buffer named <samp>*Man <var>topic</var>*</samp>.  These buffers use a
special major mode, Man mode, that facilitates scrolling and jumping
to other manual pages.  For details, type <kbd>C-h m</kbd> while in a Man
mode buffer.

</p>
<a name="index-sections-of-manual-pages"></a>
<p>Each man page belongs to one of ten or more <em>sections</em>, each
named by a digit or by a digit and a letter.  Sometimes there are man
pages with the same name in different sections.  To read a man page
from a specific section, type ‘<samp><var>topic</var>(<var>section</var>)</samp>’ or
‘<samp><var>section</var> <var>topic</var></samp>’ when <kbd>M-x man</kbd> prompts for the
topic.  For example, the man page for the C library function
<code>chmod</code> is in section 2, but there is a shell command of the same
name, whose man page is in section 1; to view the former, type
<kbd><span class="nolinebreak">M-x</span>&nbsp;man&nbsp;<span class="key">RET</span>&nbsp;chmod(2)&nbsp;<span class="key">RET</span></kbd><!-- /@w -->.

</p>
<a name="index-Man_002dswitches"></a>
<a name="index-M_002dn-_0028Man-mode_0029"></a>
<a name="index-M_002dp-_0028Man-mode_0029"></a>
<p>If you do not specify a section, <kbd>M-x man</kbd> normally displays
only the first man page found.  On some systems, the <code>man</code>
program accepts a ‘<samp>-a</samp>’ command-line option, which tells it to
display all the man pages for the specified topic.  To make use of
this, change the value of the variable <code>Man-switches</code> to
‘<samp>"-a"</samp>’.  Then, in the Man mode buffer, you can type <kbd>M-n</kbd> and
<kbd>M-p</kbd> to switch between man pages in different sections.  The mode
line shows how many manual pages are available.

</p>
<a name="index-woman"></a>
<a name="index-manual-pages_002c-on-MS_002dDOS_002fMS_002dWindows"></a>
<p>An alternative way of reading manual pages is the <kbd>M-x woman</kbd>
command.  Unlike <kbd>M-x man</kbd>, it does not run any external programs
to format and display the man pages; the formatting is done by Emacs,
so it works on systems such as MS-Windows where the <code>man</code>
program may be unavailable.  It prompts for a man page, and displays
it in a buffer named <samp>*WoMan <var>section</var> <var>topic</var></samp>.

</p>
<p><kbd>M-x woman</kbd> computes the completion list for manpages the first
time you invoke the command.  With a numeric argument, it recomputes
this list; this is useful if you add or delete manual pages.

</p>
<p>If you type a name of a manual page and <kbd>M-x woman</kbd> finds that
several manual pages by the same name exist in different sections, it
pops up a window with possible candidates asking you to choose one of
them.

</p>
<p>Note that <kbd>M-x woman</kbd> doesn’t yet support the latest features of
modern man pages, so we recommend using <kbd>M-x man</kbd> if that is
available on your system.

</p>
<p>For more information about setting up and using <kbd>M-x woman</kbd>, see
the WoMan Info manual, which is distributed with Emacs.

</p>

<a name="Lisp-Doc"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Man-Page" accesskey="p" rel="prev">Man Page</a>, Up: <a href="#Documentation" accesskey="u" rel="up">Documentation</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Emacs-Lisp-Documentation-Lookup"></a>
<h4 class="subsection">26.6.3 Emacs Lisp Documentation Lookup</h4>

<p>When editing Emacs Lisp code, you can use the commands <kbd>C-h f</kbd>
(<code>describe-function</code>) and <kbd>C-h v</kbd> (<code>describe-variable</code>)
to view the built-in documentation for the Lisp functions and
variables that you want to use.  See <a href="#Name-Help">Name Help</a>.

</p>
<a name="index-ElDoc-mode"></a>
<a name="index-eldoc_002dmode"></a>
<a name="index-global_002deldoc_002dmode"></a>
<p>ElDoc is a buffer-local minor mode that helps with looking up Lisp
documentation.  When it is enabled, the echo area displays some useful
information whenever there is a Lisp function or variable at point;
for a function, it shows the argument list, and for a variable it
shows the first line of the variable’s documentation string.  To
toggle ElDoc mode, type <kbd>M-x eldoc-mode</kbd>.  There’s also a Global
ElDoc mode, which is turned on by default, and affects buffers, such
as ‘<samp>*scratch*</samp>’, whose major mode is Emacs Lisp or Lisp
Interaction (<kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">global-eldoc-mode</span></kbd><!-- /@w -->  to turn it off globally).

</p>

<a name="Hideshow"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Symbol-Completion" accesskey="n" rel="next">Symbol Completion</a>, Previous: <a href="#Documentation" accesskey="p" rel="prev">Documentation</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Hideshow-minor-mode"></a>
<h3 class="section">26.7 Hideshow minor mode</h3>
<a name="index-Hideshow-mode"></a>
<a name="index-mode_002c-Hideshow"></a>

<a name="index-hs_002dminor_002dmode"></a>
<p>Hideshow mode is a buffer-local minor mode that allows you to
selectively display portions of a program, which are referred to as
<em>blocks</em>.  Type <kbd>M-x hs-minor-mode</kbd> to toggle this minor mode
(see <a href="#Minor-Modes">Minor Modes</a>).

</p>
<p>When you use Hideshow mode to hide a block, the block disappears
from the screen, to be replaced by an ellipsis (three periods in a
row).  Just what constitutes a block depends on the major mode.  In C
mode and related modes, blocks are delimited by braces, while in Lisp
mode they are delimited by parentheses.  Multi-line comments also
count as blocks.

</p>
<p>Hideshow mode provides the following commands:

</p>
<a name="index-hs_002dhide_002dall"></a>
<a name="index-hs_002dhide_002dblock"></a>
<a name="index-hs_002dshow_002dall"></a>
<a name="index-hs_002dshow_002dblock"></a>
<a name="index-hs_002dshow_002dregion"></a>
<a name="index-hs_002dhide_002dlevel"></a>
<a name="index-hs_002dtoggle_002dhiding"></a>
<a name="index-hs_002dmouse_002dtoggle_002dhiding"></a>
<a name="index-C_002dc-_0040-C_002dh"></a>
<a name="index-C_002dc-_0040-C_002ds"></a>
<a name="index-C_002dc-_0040-C_002dc"></a>
<a name="index-C_002dc-_0040-C_002dM_002dh"></a>
<a name="index-C_002dc-_0040-C_002dM_002ds"></a>
<a name="index-C_002dc-_0040-C_002dr"></a>
<a name="index-C_002dc-_0040-C_002dl"></a>
<a name="index-S_002dmouse_002d2"></a>
<dl compact="compact">
<dt><kbd>C-c @ C-h</kbd></dt>
<dt><kbd>C-c @ C-d</kbd></dt>
<dd><p>Hide the current block (<code>hs-hide-block</code>).

</p></dd>
<dt><kbd>C-c @ C-s</kbd></dt>
<dd><p>Show the current block (<code>hs-show-block</code>).

</p></dd>
<dt><kbd>C-c @ C-c</kbd></dt>
<dt><kbd>C-c @ C-e</kbd></dt>
<dd><p>Either hide or show the current block (<code>hs-toggle-hiding</code>).

</p></dd>
<dt><kbd>S-mouse-2</kbd></dt>
<dd><p>Toggle hiding for the block you click on (<code>hs-mouse-toggle-hiding</code>).

</p></dd>
<dt><kbd>C-c @ C-M-h</kbd></dt>
<dt><kbd>C-c @ C-t</kbd></dt>
<dd><p>Hide all top-level blocks (<code>hs-hide-all</code>).

</p></dd>
<dt><kbd>C-c @ C-M-s</kbd></dt>
<dt><kbd>C-c @ C-a</kbd></dt>
<dd><p>Show all blocks in the buffer (<code>hs-show-all</code>).

</p></dd>
<dt><kbd>C-u <var>n</var> C-c @ C-l</kbd></dt>
<dd><p>Hide all blocks <var>n</var> levels below this block
(<code>hs-hide-level</code>).

</p></dd>
</dl>

<a name="index-hs_002dhide_002dcomments_002dwhen_002dhiding_002dall"></a>
<a name="index-hs_002disearch_002dopen"></a>
<a name="index-hs_002dspecial_002dmodes_002dalist"></a>
<p>These variables can be used to customize Hideshow mode:

</p>
<dl compact="compact">
<dt><code>hs-hide-comments-when-hiding-all</code></dt>
<dd><p>If non-<code>nil</code>, <kbd>C-c @ C-M-h</kbd> (<code>hs-hide-all</code>) hides
comments too.

</p>
</dd>
<dt><code>hs-isearch-open</code></dt>
<dd><p>This variable specifies the conditions under which incremental search
should unhide a hidden block when matching text occurs within the
block.  Its value should be either <code>code</code> (unhide only code
blocks), <code>comment</code> (unhide only comments), <code>t</code> (unhide both
code blocks and comments), or <code>nil</code> (unhide neither code blocks
nor comments).  The default value is <code>code</code>.

</p></dd>
</dl>


<a name="Symbol-Completion"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#MixedCase-Words" accesskey="n" rel="next">MixedCase Words</a>, Previous: <a href="#Hideshow" accesskey="p" rel="prev">Hideshow</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Completion-for-Symbol-Names"></a>
<h3 class="section">26.8 Completion for Symbol Names</h3>
<a name="index-completion-_0028symbol-names_0029"></a>

<p>Completion is normally done in the minibuffer (see <a href="#Completion">Completion</a>),
but you can also complete symbol names in ordinary Emacs buffers.

</p>
<a name="index-M_002dTAB"></a>
<a name="index-C_002dM_002di"></a>
<p>In programming language modes, type <kbd>C-M-i</kbd> or <kbd>M-<span class="key">TAB</span></kbd>
to complete the partial symbol before point.  On graphical displays,
the <kbd>M-<span class="key">TAB</span></kbd> key is usually reserved by the window manager
for switching graphical windows, so you should type <kbd>C-M-i</kbd> or
<kbd><span class="key">ESC</span> <span class="key">TAB</span></kbd> instead.

</p>
<a name="index-tags_002dbased-completion"></a>
<a name="index-completion_002dat_002dpoint_002c-in-programming-language-modes"></a>
<a name="index-Lisp-symbol-completion"></a>
<a name="index-completion-_0028Lisp-symbols_0029"></a>
<p>In most programming language modes, <kbd>C-M-i</kbd> (or
<kbd>M-<span class="key">TAB</span></kbd>) invokes the command <code>completion-at-point</code>,
which generates its completion list in a flexible way.  If Semantic
mode is enabled, it tries to use the Semantic parser data for
completion (see <a href="#Semantic">Semantic</a>).  If Semantic mode is not enabled or
fails at performing completion, it tries to complete using the
selected tags table (see <a href="#Tags-Tables">Tags Tables</a>).  If in Emacs Lisp mode, it
performs completion using the function, variable, or property names
defined in the current Emacs session.

</p>
<p>In all other respects, in-buffer symbol completion behaves like
minibuffer completion.  For instance, if Emacs cannot complete to a
unique symbol, it displays a list of completion alternatives in
another window.  See <a href="#Completion">Completion</a>.

</p>
<p>In Text mode and related modes, <kbd>M-<span class="key">TAB</span></kbd> completes words
based on the spell-checker’s dictionary.  See <a href="#Spelling">Spelling</a>.

</p>

<a name="MixedCase-Words"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Semantic" accesskey="n" rel="next">Semantic</a>, Previous: <a href="#Symbol-Completion" accesskey="p" rel="prev">Symbol Completion</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="MixedCase-Words-1"></a>
<h3 class="section">26.9 MixedCase Words</h3>
<a name="index-camel-case"></a>

<p>Some programming styles make use of mixed-case (or “CamelCase”)
symbols like ‘<samp>unReadableSymbol</samp>’.  (In the GNU project, we recommend
using underscores to separate words within an identifier, rather than
using case distinctions.)  Emacs has various features to make it easier
to deal with such symbols.

</p>
<a name="index-Glasses-mode"></a>
<a name="index-mode_002c-Glasses"></a>
<p>Glasses mode is a buffer-local minor mode that makes it easier to read
such symbols, by altering how they are displayed.  By default, it
displays extra underscores between each lower-case letter and the
following capital letter.  This does not alter the buffer text, only how
it is displayed.

</p>
<p>To toggle Glasses mode, type <kbd>M-x glasses-mode</kbd> (see <a href="#Minor-Modes">Minor Modes</a>).  When Glasses mode is enabled, the minor mode indicator
‘<samp>o^o</samp>’ appears in the mode line.  For more information about
Glasses mode, type <kbd>C-h P glasses <span class="key">RET</span></kbd>.

</p>
<a name="index-Subword-mode"></a>
<a name="index-subword_002dmode"></a>
<p>Subword mode is another buffer-local minor mode.  In subword mode,
Emacs’s word commands recognize upper case letters in
‘<samp>StudlyCapsIdentifiers</samp>’ as word boundaries.  When Subword mode is
enabled, the minor mode indicator ‘<samp>,</samp>’ appears in the mode line.
See also the similar <code>superword-mode</code> (see <a href="#Misc-for-Programs">Misc for Programs</a>).

</p>

<a name="Semantic"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Misc-for-Programs" accesskey="n" rel="next">Misc for Programs</a>, Previous: <a href="#MixedCase-Words" accesskey="p" rel="prev">MixedCase Words</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Semantic-1"></a>
<h3 class="section">26.10 Semantic</h3>
<a name="index-Semantic-package"></a>

<p>Semantic is a package that provides language-aware editing commands
based on <code>source code parsers</code>.  This section provides a brief
description of Semantic; for full details,
see <a href="http://www.gnu.org/software/emacs/manual/html_mono/semantic.html#Top">Semantic</a> in <cite>Semantic</cite>.

</p>
<p>Most of the language-aware features in Emacs, such as Font Lock
mode (see <a href="#Font-Lock">Font Lock</a>), rely on rules of thumb<a name="DOCF14" href="#FOOT14"><sup>14</sup></a> that usually give good results but are
never completely exact.  In contrast, the parsers used by Semantic
have an exact understanding of programming language syntax.  This
allows Semantic to provide search, navigation, and completion commands
that are powerful and precise.

</p>
<a name="index-Semantic-mode"></a>
<a name="index-mode_002c-Semantic"></a>
<p>To begin using Semantic, type <kbd>M-x semantic-mode</kbd> or click on
the menu item named ‘<samp>Source Code Parsers (Semantic)</samp>’ in the
‘<samp>Tools</samp>’ menu.  This enables Semantic mode, a global minor mode.

</p>
<p>When Semantic mode is enabled, Emacs automatically attempts to
parse each file you visit.  Currently, Semantic understands C, C++,
HTML, Java, Javascript, Make, Python, Scheme, SRecode, and Texinfo.
Within each parsed buffer, the following commands are available:

</p>
<dl compact="compact">
<dt><kbd>C-c , j</kbd></dt>
<dd><a name="index-C_002dc-_002c-j"></a>
<p>Prompt for the name of a function defined in the current file, and
move point there (<code>semantic-complete-jump-local</code>).

</p>
</dd>
<dt><kbd>C-c , J</kbd></dt>
<dd><a name="index-C_002dc-_002c-J"></a>
<p>Prompt for the name of a function defined in any file Emacs has
parsed, and move point there (<code>semantic-complete-jump</code>).

</p>
</dd>
<dt><kbd>C-c , <span class="key">SPC</span></kbd></dt>
<dd><a name="index-C_002dc-_002c-SPC"></a>
<p>Display a list of possible completions for the symbol at point
(<code>semantic-complete-analyze-inline</code>).  This also activates a set
of special key bindings for choosing a completion: <kbd><span class="key">RET</span></kbd>
accepts the current completion, <kbd>M-n</kbd> and <kbd>M-p</kbd> cycle through
possible completions, <kbd><span class="key">TAB</span></kbd> completes as far as possible and
then cycles, and <kbd>C-g</kbd> or any other key aborts completion.

</p>
</dd>
<dt><kbd>C-c , l</kbd></dt>
<dd><a name="index-C_002dc-_002c-l"></a>
<p>Display a list of the possible completions of the symbol at point, in
another window (<code>semantic-analyze-possible-completions</code>).

</p></dd>
</dl>

<p>In addition to the above commands, the Semantic package provides a
variety of other ways to make use of parser information.  For
instance, you can use it to display a list of completions when Emacs
is idle.
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/semantic.html#Top">Semantic</a> in <cite>Semantic</cite>, for details.

</p>

<a name="Misc-for-Programs"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#C-Modes" accesskey="n" rel="next">C Modes</a>, Previous: <a href="#Semantic" accesskey="p" rel="prev">Semantic</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Other-Features-Useful-for-Editing-Programs"></a>
<h3 class="section">26.11 Other Features Useful for Editing Programs</h3>

<p>Some Emacs commands that aren’t designed specifically for editing
programs are useful for that nonetheless.

</p>
<p>The Emacs commands that operate on words, sentences and paragraphs
are useful for editing code.  Most symbol names contain words
(see <a href="#Words">Words</a>), while sentences can be found in strings and comments
(see <a href="#Sentences">Sentences</a>).  As for paragraphs, they are defined in most
programming language modes to begin and end at blank lines
(see <a href="#Paragraphs">Paragraphs</a>).  Therefore, judicious use of blank lines to make
the program clearer will also provide useful chunks of text for the
paragraph commands to work on.  Auto Fill mode, if enabled in a
programming language major mode, indents the new lines which it
creates.

</p>
<a name="index-superword_002dmode"></a>
<p>Superword mode is a buffer-local minor mode that causes editing and
motion commands to treat symbols (e.g., ‘<samp>this_is_a_symbol</samp>’) as words.
When Superword mode is enabled, the minor mode indicator
‘<samp>²</samp>’
appears in the mode line.  See also the similar <code>subword-mode</code>
(see <a href="#MixedCase-Words">MixedCase Words</a>).

</p>
<a name="index-electric_002dlayout_002dmode"></a>
<p>Electric Layout mode (<kbd>M-x electric-layout-mode</kbd>) is a global
minor mode that automatically inserts newlines when you type certain
characters; for example, ‘<samp>{</samp>’, ‘<samp>}</samp>’ and ‘<samp>;</samp>’ in Javascript
mode.

</p>
<p>Apart from Hideshow mode (see <a href="#Hideshow">Hideshow</a>), another way to
selectively display parts of a program is to use the selective display
feature (see <a href="#Selective-Display">Selective Display</a>).  Programming modes often also
support Outline minor mode (see <a href="#Outline-Mode">Outline Mode</a>), which can be used
with the Foldout package (see <a href="#Foldout">Foldout</a>).

</p>

<a name="index-prettify_002dsymbols_002dmode"></a>
<p>Prettify Symbols mode is a buffer-local minor mode that replaces
certain strings with more attractive versions for display purposes.
For example, in Emacs Lisp mode, it replaces the string ‘<samp>lambda</samp>’
with the Greek lambda character ‘<samp>λ</samp>’.  In a TeX buffer, it will
replace ‘<samp>\alpha</samp>’ … ‘<samp>\omega</samp>’ and other math macros with
their Unicode characters.  You may wish to use this in non-programming
modes as well.  You can customize the mode by adding more entries to
<code>prettify-symbols-alist</code>.  More elaborate customization is
available via customizing <code>prettify-symbols-compose-predicate</code> if
its default value <code>prettify-symbols-default-compose-p</code> is not
appropriate.  There is also a global version,
<code>global-prettify-symbols-mode</code>, which enables the mode in all
buffers that support it.

</p>
<p>The symbol at point can be shown in its original form.  This is
controlled by the variable <code>prettify-symbols-unprettify-at-point</code>:
if non-<code>nil</code>, the original form of symbol at point will be
restored for as long as point is at it.

</p>


<a name="C-Modes"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Asm-Mode" accesskey="n" rel="next">Asm Mode</a>, Previous: <a href="#Misc-for-Programs" accesskey="p" rel="prev">Misc for Programs</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="C-and-Related-Modes"></a>
<h3 class="section">26.12 C and Related Modes</h3>
<a name="index-C-mode"></a>
<a name="index-Java-mode"></a>
<a name="index-Pike-mode"></a>
<a name="index-IDL-mode"></a>
<a name="index-CORBA-IDL-mode"></a>
<a name="index-Objective-C-mode"></a>
<a name="index-C_002b_002b-mode"></a>
<a name="index-AWK-mode"></a>
<a name="index-mode_002c-Java"></a>
<a name="index-mode_002c-C"></a>
<a name="index-mode_002c-C_002b_002b"></a>
<a name="index-mode_002c-Objective-C"></a>
<a name="index-mode_002c-CORBA-IDL"></a>
<a name="index-mode_002c-Pike"></a>
<a name="index-mode_002c-AWK"></a>

<p>This section gives a brief description of the special features
available in C, C++, Objective-C, Java, CORBA IDL, Pike and AWK modes.
(These are called “C mode and related modes”.)
For more details, see the CC mode Info manual, which is distributed
with Emacs.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Motion-in-C" accesskey="1">Motion in C</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands to move by C statements, etc.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Electric-C" accesskey="2">Electric C</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Colon and other chars can automatically reindent.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Hungry-Delete" accesskey="3">Hungry Delete</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A more powerful DEL command.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Other-C-Commands" accesskey="4">Other C Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Filling comments, viewing expansion of macros,
                                and other neat features.

</td></tr>
</tbody></table>


<a name="Motion-in-C"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Electric-C" accesskey="n" rel="next">Electric C</a>, Up: <a href="#C-Modes" accesskey="u" rel="up">C Modes</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="C-Mode-Motion-Commands"></a>
<h4 class="subsection">26.12.1 C Mode Motion Commands</h4>

<p>This section describes commands for moving point, in C mode and
related modes.

</p>
<dl compact="compact">
<dt><code>C-M-a</code></dt>
<dt><code>C-M-e</code></dt>
<dd><a name="index-c_002dbeginning_002dof_002ddefun"></a>
<a name="index-c_002dend_002dof_002ddefun"></a>
<p>Move point to the beginning or end of the current function or
top-level definition.  In languages with enclosing scopes (such as
C++’s classes) the <em>current function</em> is the immediate one,
possibly inside a scope.  Otherwise it is the one defined by the least
enclosing braces.  (By contrast, <code>beginning-of-defun</code> and
<code>end-of-defun</code> search for braces in column zero.)  See <a href="#Moving-by-Defuns">Moving by Defuns</a>.

</p>
</dd>
<dt><code>C-c C-u</code></dt>
<dd><a name="index-C_002dc-C_002du-_0028C-mode_0029"></a>
<a name="index-c_002dup_002dconditional"></a>
<p>Move point back to the containing preprocessor conditional, leaving the
mark behind.  A prefix argument acts as a repeat count.  With a negative
argument, move point forward to the end of the containing
preprocessor conditional.

</p>
<p>‘<samp>#elif</samp>’ is equivalent to ‘<samp>#else</samp>’ followed by ‘<samp>#if</samp>’, so
the function will stop at a ‘<samp>#elif</samp>’ when going backward, but not
when going forward.

</p>
</dd>
<dt><code>C-c C-p</code></dt>
<dd><a name="index-C_002dc-C_002dp-_0028C-mode_0029"></a>
<a name="index-c_002dbackward_002dconditional"></a>
<p>Move point back over a preprocessor conditional, leaving the mark
behind.  A prefix argument acts as a repeat count.  With a negative
argument, move forward.

</p>
</dd>
<dt><code>C-c C-n</code></dt>
<dd><a name="index-C_002dc-C_002dn-_0028C-mode_0029"></a>
<a name="index-c_002dforward_002dconditional"></a>
<p>Move point forward across a preprocessor conditional, leaving the mark
behind.  A prefix argument acts as a repeat count.  With a negative
argument, move backward.

</p>
</dd>
<dt><code>M-a</code></dt>
<dd><a name="index-M_002da-_0028C-mode_0029"></a>
<a name="index-c_002dbeginning_002dof_002dstatement"></a>
<p>Move point to the beginning of the innermost C statement
(<code>c-beginning-of-statement</code>).  If point is already at the beginning
of a statement, move to the beginning of the preceding statement.  With
prefix argument <var>n</var>, move back <var>n</var> - 1 statements.

</p>
<p>In comments or in strings which span more than one line, this command
moves by sentences instead of statements.

</p>
</dd>
<dt><code>M-e</code></dt>
<dd><a name="index-M_002de-_0028C-mode_0029"></a>
<a name="index-c_002dend_002dof_002dstatement"></a>
<p>Move point to the end of the innermost C statement or sentence; like
<kbd>M-a</kbd> except that it moves in the other direction
(<code>c-end-of-statement</code>).

</p></dd>
</dl>


<a name="Electric-C"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Hungry-Delete" accesskey="n" rel="next">Hungry Delete</a>, Previous: <a href="#Motion-in-C" accesskey="p" rel="prev">Motion in C</a>, Up: <a href="#C-Modes" accesskey="u" rel="up">C Modes</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Electric-C-Characters"></a>
<h4 class="subsection">26.12.2 Electric C Characters</h4>

<p>In C mode and related modes, certain printing characters are
<em>electric</em>—in addition to inserting themselves, they also
reindent the current line, and optionally also insert newlines.  The
electric characters are <kbd>{</kbd>, <kbd>}</kbd>, <kbd>:</kbd>, <kbd>#</kbd>,
<kbd>;</kbd>, <kbd>,</kbd>, <kbd>&lt;</kbd>, <kbd>&gt;</kbd>, <kbd>/</kbd>, <kbd>*</kbd>, <kbd>(</kbd>, and
<kbd>)</kbd>.

</p>
<p>You might find electric indentation inconvenient if you are editing
chaotically indented code.  If you are new to CC Mode, you might find
it disconcerting.  You can toggle electric action with the command
<kbd>C-c C-l</kbd>; when it is enabled, ‘<samp>/<var>c</var>l</samp>’ appears in the
mode line after the mode name (where <var>c</var>, if present, is ‘<samp>*</samp>’
or ‘<samp>/</samp>’, depending on whether the comment style is block or line).
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html#Minor-Modes">Minor Modes</a> in <cite>The CC Mode Manual</cite>, for more about
mode-line indicators in CC Mode.

</p>
<dl compact="compact">
<dt><kbd>C-c C-l</kbd></dt>
<dd><a name="index-C_002dc-C_002dl-_0028C-mode_0029"></a>
<a name="index-c_002dtoggle_002delectric_002dstate"></a>
<p>Toggle electric action (<code>c-toggle-electric-state</code>).  With a
positive prefix argument, this command enables electric action, with a
negative one it disables it.

</p></dd>
</dl>

<p>Electric characters insert newlines only when, in addition to the
electric state, the <em>auto-newline</em> feature is enabled (indicated
by ‘<samp>/<var>c</var>la</samp>’ in the mode line after the mode name).  You can
turn this feature on or off with the command <kbd>C-c C-a</kbd>:

</p>
<dl compact="compact">
<dt><kbd>C-c C-a</kbd></dt>
<dd><a name="index-C_002dc-C_002da-_0028C-mode_0029"></a>
<a name="index-c_002dtoggle_002dauto_002dnewline"></a>
<p>Toggle the auto-newline feature (<code>c-toggle-auto-newline</code>).  With a
prefix argument, this command turns the auto-newline feature on if the
argument is positive, and off if it is negative.

</p></dd>
</dl>

<p>Usually the CC Mode style configures the exact circumstances in
which Emacs inserts auto-newlines.  You can also configure this
directly.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html#Custom-Auto_002dnewlines">Custom Auto-newlines</a> in <cite>The CC Mode Manual</cite>.

</p>

<a name="Hungry-Delete"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Other-C-Commands" accesskey="n" rel="next">Other C Commands</a>, Previous: <a href="#Electric-C" accesskey="p" rel="prev">Electric C</a>, Up: <a href="#C-Modes" accesskey="u" rel="up">C Modes</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Hungry-Delete-Feature-in-C"></a>
<h4 class="subsection">26.12.3 Hungry Delete Feature in C</h4>
<a name="index-hungry-deletion-_0028C-Mode_0029"></a>

<p>If you want to delete an entire block of whitespace at point, you
can use <em>hungry deletion</em>.  This deletes all the contiguous
whitespace either before point or after point in a single operation.
<em>Whitespace</em> here includes tabs and newlines, but not comments or
preprocessor commands.

</p>
<dl compact="compact">
<dt><kbd>C-c C-<span class="key">DEL</span></kbd></dt>
<dt><kbd>C-c <span class="key">DEL</span></kbd></dt>
<dd><a name="index-c_002dhungry_002ddelete_002dbackwards"></a>
<a name="index-C_002dc-C_002dDEL-_0028C-Mode_0029"></a>
<a name="index-C_002dc-DEL-_0028C-Mode_0029"></a>
<p>Delete the entire block of whitespace preceding point (<code>c-hungry-delete-backwards</code>).

</p>
</dd>
<dt><kbd>C-c C-d</kbd></dt>
<dt><kbd>C-c C-<span class="key">Delete</span></kbd></dt>
<dt><kbd>C-c <span class="key">Delete</span></kbd></dt>
<dd><a name="index-c_002dhungry_002ddelete_002dforward"></a>
<a name="index-C_002dc-C_002dd-_0028C-Mode_0029"></a>
<a name="index-C_002dc-C_002dDelete-_0028C-Mode_0029"></a>
<a name="index-C_002dc-Delete-_0028C-Mode_0029"></a>
<p>Delete the entire block of whitespace after point (<code>c-hungry-delete-forward</code>).

</p></dd>
</dl>

<p>As an alternative to the above commands, you can enable <em>hungry
delete mode</em>.  When this feature is enabled (indicated by ‘<samp>h</samp>’
after a ‘<samp>/</samp>’ in the mode line after the mode name), a single
<kbd><span class="key">DEL</span></kbd> deletes all preceding whitespace, not just one space,
and a single <kbd>C-d</kbd> (but <em>not</em> plain <kbd><span class="key">Delete</span></kbd>)
deletes all following whitespace.

</p>
<dl compact="compact">
<dt><kbd>M-x c-toggle-hungry-state</kbd></dt>
<dd><a name="index-c_002dtoggle_002dhungry_002dstate"></a>
<p>Toggle the hungry-delete feature
(<code>c-toggle-hungry-state</code>).  With a prefix argument,
this command turns the hungry-delete feature on if the argument is
positive, and off if it is negative.

</p></dd>
</dl>

<a name="index-c_002dhungry_002ddelete_002dkey"></a>
<p>The variable <code>c-hungry-delete-key</code> controls whether the
hungry-delete feature is enabled.

</p>

<a name="Other-C-Commands"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Hungry-Delete" accesskey="p" rel="prev">Hungry Delete</a>, Up: <a href="#C-Modes" accesskey="u" rel="up">C Modes</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Other-Commands-for-C-Mode"></a>
<h4 class="subsection">26.12.4 Other Commands for C Mode</h4>

<dl compact="compact">
<dt><kbd>M-x c-context-line-break</kbd></dt>
<dd><a name="index-c_002dcontext_002dline_002dbreak"></a>
<p>This command inserts a line break and indents the new line in a manner
appropriate to the context.  In normal code, it does the work of
<kbd><span class="key">RET</span></kbd> (<code>newline</code>), in a C preprocessor line it additionally
inserts a ‘<samp>\</samp>’ at the line break, and within comments it’s like
<kbd>M-j</kbd> (<code>c-indent-new-comment-line</code>).

</p>
<p><code>c-context-line-break</code> isn’t bound to a key by default, but it
needs a binding to be useful.  The following code will bind it to
<kbd><span class="key">RET</span></kbd>.  We use <code>c-initialization-hook</code> here to make
sure the keymap is loaded before we try to change it.

</p>
<div class="example">
<pre class="example">(defun my-bind-clb ()
  (define-key c-mode-base-map "\C-m"
              'c-context-line-break))
(add-hook 'c-initialization-hook 'my-bind-clb)
</pre></div>

</dd>
<dt><kbd>C-M-h</kbd></dt>
<dd><p>Put mark at the end of a function definition, and put point at the
beginning (<code>c-mark-function</code>).

</p>
</dd>
<dt><kbd>M-q</kbd></dt>
<dd><a name="index-M_002dq-_0028C-mode_0029"></a>
<a name="index-c_002dfill_002dparagraph"></a>
<p>Fill a paragraph, handling C and C++ comments (<code>c-fill-paragraph</code>).
If any part of the current line is a comment or within a comment, this
command fills the comment or the paragraph of it that point is in,
preserving the comment indentation and comment delimiters.

</p>
</dd>
<dt><kbd>C-c C-e</kbd></dt>
<dd><a name="index-macro-expansion-in-C"></a>
<a name="index-expansion-of-C-macros"></a>
<a name="index-c_002dmacro_002dexpand"></a>
<a name="index-C_002dc-C_002de-_0028C-mode_0029"></a>
<p>Run the C preprocessor on the text in the region, and show the result,
which includes the expansion of all the macro calls
(<code>c-macro-expand</code>).  The buffer text before the region is also
included in preprocessing, for the sake of macros defined there, but the
output from this part isn’t shown.

</p>
<p>When you are debugging C code that uses macros, sometimes it is hard to
figure out precisely how the macros expand.  With this command, you
don’t have to figure it out; you can see the expansions.

</p>
</dd>
<dt><kbd>C-c C-\</kbd></dt>
<dd><a name="index-c_002dbackslash_002dregion"></a>
<a name="index-C_002dc-C_002d_005c-_0028C-mode_0029"></a>
<p>Insert or align ‘<samp>\</samp>’ characters at the ends of the lines of the
region (<code>c-backslash-region</code>).  This is useful after writing or
editing a C macro definition.

</p>
<p>If a line already ends in ‘<samp>\</samp>’, this command adjusts the amount of
whitespace before it.  Otherwise, it inserts a new ‘<samp>\</samp>’.  However,
the last line in the region is treated specially; no ‘<samp>\</samp>’ is
inserted on that line, and any ‘<samp>\</samp>’ there is deleted.

</p>
</dd>
<dt><kbd>M-x cpp-highlight-buffer</kbd></dt>
<dd><a name="index-preprocessor-highlighting"></a>
<a name="index-cpp_002dhighlight_002dbuffer"></a>
<p>Highlight parts of the text according to its preprocessor conditionals.
This command displays another buffer named <samp>*CPP Edit*</samp>, which
serves as a graphic menu for selecting how to display particular kinds
of conditionals and their contents.  After changing various settings,
click on ‘<samp>[A]pply these settings</samp>’ (or go to that buffer and type
<kbd>a</kbd>) to rehighlight the C mode buffer accordingly.

</p>
</dd>
<dt><kbd>C-c C-s</kbd></dt>
<dd><a name="index-c_002dshow_002dsyntactic_002dinformation"></a>
<a name="index-C_002dc-C_002ds-_0028C-mode_0029"></a>
<p>Display the syntactic information about the current source line
(<code>c-show-syntactic-information</code>).  This information directs how
the line is indented.

</p>
</dd>
<dt><kbd>M-x cwarn-mode</kbd></dt>
<dt><kbd>M-x global-cwarn-mode</kbd></dt>
<dd><a name="index-cwarn_002dmode"></a>
<a name="index-global_002dcwarn_002dmode"></a>
<a name="index-global_002dcwarn_002dmode-1"></a>
<a name="index-CWarn-mode"></a>
<a name="index-suspicious-constructions-in-C_002c-C_002b_002b"></a>
<p>CWarn minor mode highlights certain suspicious C and C++ constructions:

</p>
<ul>
<li>  Assignments inside expressions.

</li><li>  Semicolon following immediately after ‘<samp>if</samp>’, ‘<samp>for</samp>’, and ‘<samp>while</samp>’
(except after a ‘<samp>do … while</samp>’ statement);

</li><li>  C++ functions with reference parameters.

</li></ul>

<p>You can enable the mode for one buffer with the command <kbd>M-x
cwarn-mode</kbd>, or for all suitable buffers with the command <kbd>M-x
global-cwarn-mode</kbd> or by customizing the variable
<code>global-cwarn-mode</code>.  You must also enable Font Lock mode to make
it work.

</p>
</dd>
<dt><kbd>M-x hide-ifdef-mode</kbd></dt>
<dd><a name="index-hide_002difdef_002dmode"></a>
<a name="index-Hide_002difdef-mode"></a>
<a name="index-hide_002difdef_002dshadow"></a>
<p>Hide-ifdef minor mode hides selected code within ‘<samp>#if</samp>’ and
‘<samp>#ifdef</samp>’ preprocessor blocks.  If you change the variable
<code>hide-ifdef-shadow</code> to <code>t</code>, Hide-ifdef minor mode
shadows preprocessor blocks by displaying them with a less
prominent face, instead of hiding them entirely.  See the
documentation string of <code>hide-ifdef-mode</code> for more information.

</p>
</dd>
<dt><kbd>M-x ff-find-related-file</kbd></dt>
<dd><a name="index-related-files"></a>
<a name="index-ff_002dfind_002drelated_002dfile"></a>
<a name="index-ff_002drelated_002dfile_002dalist"></a>
<p>Find a file related in a special way to the file visited by the
current buffer.  Typically this will be the header file corresponding
to a C/C++ source file, or vice versa.  The variable
<code>ff-related-file-alist</code> specifies how to compute related file
names.

</p></dd>
</dl>


<a name="Asm-Mode"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Fortran" accesskey="n" rel="next">Fortran</a>, Previous: <a href="#C-Modes" accesskey="p" rel="prev">C Modes</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Asm-Mode-1"></a>
<h3 class="section">26.13 Asm Mode</h3>

<a name="index-Asm-mode"></a>
<a name="index-assembler-mode"></a>
<p>Asm mode is a major mode for editing files of assembler code.  It
defines these commands:

</p>
<dl compact="compact">
<dt><kbd><span class="key">TAB</span></kbd></dt>
<dd><p><code>tab-to-tab-stop</code>.

</p>
</dd>
<dt><kbd>C-j</kbd></dt>
<dd><p>Insert a newline and then indent using <code>tab-to-tab-stop</code>.

</p>
</dd>
<dt><kbd>:</kbd></dt>
<dd><p>Insert a colon and then remove the indentation from before the label
preceding colon.  Then do <code>tab-to-tab-stop</code>.

</p>
</dd>
<dt><kbd>;</kbd></dt>
<dd><p>Insert or align a comment.

</p></dd>
</dl>

<p>The variable <code>asm-comment-char</code> specifies which character
starts comments in assembler syntax.

</p>

<a name="Fortran"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Asm-Mode" accesskey="p" rel="prev">Asm Mode</a>, Up: <a href="#Programs" accesskey="u" rel="up">Programs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Fortran-Mode"></a>
<h3 class="section">26.14 Fortran Mode</h3>
<a name="index-Fortran-mode"></a>
<a name="index-mode_002c-Fortran"></a>

<a name="index-Fortran-fixed-form-and-free-form"></a>
<a name="index-Fortran-77-and-Fortran-90_002c-95_002c-2003_002c-2008"></a>
<a name="index-f90_002dmode"></a>
<a name="index-fortran_002dmode"></a>
<p>Fortran mode is meant for editing fixed form (and also tab
format) source code (normally Fortran 77).  For editing more modern
free-form source code (Fortran 90, 95, 2003, 2008), use F90 mode
(<code>f90-mode</code>).  Emacs normally uses Fortran mode for files with
extension ‘<samp>.f</samp>’, ‘<samp>.F</samp>’ or ‘<samp>.for</samp>’, and F90 mode for the
extensions ‘<samp>.f90</samp>’, ‘<samp>.f95</samp>’, ‘<samp>.f03</samp>’ and ‘<samp>.f08</samp>’.
Customize <code>auto-mode-alist</code> to add more extensions.  GNU Fortran
supports both free and fixed form.  This manual mainly documents Fortran
mode, but the corresponding F90 mode features are mentioned when
relevant.

</p>
<p>Fortran mode provides special motion commands for Fortran statements
and subprograms, and indentation commands that understand Fortran
conventions of nesting, line numbers and continuation statements.
Fortran mode has support for Auto Fill mode that breaks long lines into
proper Fortran continuation lines.  Fortran mode also supports Hideshow
minor mode
(see <a href="#Hideshow">Hideshow</a>),
and Imenu
(see <a href="#Imenu">Imenu</a>).

</p>
<p>Special commands for comments are provided because Fortran comments
are unlike those of other languages.  Built-in abbrevs optionally save
typing when you insert Fortran keywords.

</p>
<p>Use <kbd>M-x fortran-mode</kbd> to switch to this major mode.  This
command runs the hook <code>fortran-mode-hook</code>.
See <a href="#Hooks">Hooks</a>.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Fortran-Motion" accesskey="1">移动</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Moving point by statements or subprograms.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Fortran-Indent" accesskey="2">Indent</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Indentation commands for Fortran.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Fortran-Comments" accesskey="3">Comments</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Inserting and aligning comments.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Fortran-Autofill" accesskey="4">Autofill</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Auto fill support for Fortran.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Fortran-Columns" accesskey="5">Columns</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Measuring columns for valid Fortran.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Fortran-Abbrev" accesskey="6">Abbrev</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Built-in abbrevs for Fortran keywords.

</td></tr>
</tbody></table>


<a name="Fortran-Motion"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Fortran-Indent" accesskey="n" rel="next">Fortran Indent</a>, Up: <a href="#Fortran" accesskey="u" rel="up">Fortran</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Motion-Commands"></a>
<h4 class="subsection">26.14.1 Motion Commands</h4>

<p>In addition to the normal commands for moving by and operating on
defuns (Fortran subprograms—functions and subroutines, as well
as modules for F90 mode, using the commands <code>fortran-end-of-subprogram</code>
and <code>fortran-beginning-of-subprogram</code>), Fortran mode provides
special commands to move by statements and other program units.

</p>
<dl compact="compact">
<dd><a name="index-C_002dc-C_002dn-_0028Fortran-mode_0029"></a>
<a name="index-fortran_002dnext_002dstatement"></a>
<a name="index-f90_002dnext_002dstatement"></a>
</dd>
<dt><kbd>C-c C-n</kbd></dt>
<dd><p>Move to the beginning of the next statement
(<code>fortran-next-statement</code>/<code>f90-next-statement</code>).

</p>
<a name="index-C_002dc-C_002dp-_0028Fortran-mode_0029"></a>
<a name="index-fortran_002dprevious_002dstatement"></a>
<a name="index-f90_002dprevious_002dstatement"></a>
</dd>
<dt><kbd>C-c C-p</kbd></dt>
<dd><p>Move to the beginning of the previous statement
(<code>fortran-previous-statement</code>/<code>f90-previous-statement</code>).
If there is no previous statement (i.e., if called from the first
statement in the buffer), move to the start of the buffer.

</p>
<a name="index-C_002dc-C_002de-_0028F90-mode_0029"></a>
<a name="index-f90_002dnext_002dblock"></a>
</dd>
<dt><kbd>C-c C-e</kbd></dt>
<dd><p>Move point forward to the start of the next code block, or the end of
the current one, whichever comes first (<code>f90-next-block</code>).
A code block is a subroutine, <code>if</code>–<code>endif</code> statement, and
so forth.  This command exists for F90 mode only, not Fortran mode.
With a numeric argument, it moves forward that many blocks.

</p>
<a name="index-C_002dc-C_002da-_0028F90-mode_0029"></a>
<a name="index-f90_002dprevious_002dblock"></a>
</dd>
<dt><kbd>C-c C-a</kbd></dt>
<dd><p>Move point backward to the previous block
(<code>f90-previous-block</code>).  This is like <code>f90-next-block</code>, but
moves backwards.

</p>
<a name="index-C_002dM_002dn-_0028Fortran-mode_0029"></a>
<a name="index-fortran_002dend_002dof_002dblock"></a>
<a name="index-f90_002dend_002dof_002dblock"></a>
</dd>
<dt><kbd>C-M-n</kbd></dt>
<dd><p>Move to the end of the current code block
(<code>fortran-end-of-block</code>/<code>f90-end-of-block</code>).  With a numeric
argument, move forward that number of blocks.  The mark is set before
moving point.  The F90 mode version of this command checks for
consistency of block types and labels (if present), but it does not
check the outermost block since that may be incomplete.

</p>
<a name="index-C_002dM_002dp-_0028Fortran-mode_0029"></a>
<a name="index-fortran_002dbeginning_002dof_002dblock"></a>
<a name="index-f90_002dbeginning_002dof_002dblock"></a>
</dd>
<dt><kbd>C-M-p</kbd></dt>
<dd><p>Move to the start of the current code block
(<code>fortran-beginning-of-block</code>/<code>f90-beginning-of-block</code>). This
is like <code>fortran-end-of-block</code>, but moves backwards.

</p></dd>
</dl>

<p>The commands <code>fortran-beginning-of-subprogram</code> and
<code>fortran-end-of-subprogram</code> move to the start or end of the
current subprogram, respectively.  The commands <code>fortran-mark-do</code>
and <code>fortran-mark-if</code> mark the end of the current <code>do</code> or
<code>if</code> block, and move point to the start.

</p>


<a name="Fortran-Indent"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Fortran-Comments" accesskey="n" rel="next">Fortran Comments</a>, Previous: <a href="#Fortran-Motion" accesskey="p" rel="prev">Fortran Motion</a>, Up: <a href="#Fortran" accesskey="u" rel="up">Fortran</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Fortran-Indentation"></a>
<h4 class="subsection">26.14.2 Fortran Indentation</h4>

<p>Special commands and features are needed for indenting fixed (or tab)
form Fortran code in order to make sure various syntactic entities (line
numbers, comment line indicators and continuation line flags) appear in
the required columns.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#ForIndent-Commands" accesskey="1">Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands for indenting and filling Fortran.

</td></tr>
<tr><td align="left" valign="top">• <a href="#ForIndent-Cont" accesskey="2">Contline</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How continuation lines indent.

</td></tr>
<tr><td align="left" valign="top">• <a href="#ForIndent-Num" accesskey="3">Numbers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How line numbers auto-indent.

</td></tr>
<tr><td align="left" valign="top">• <a href="#ForIndent-Conv" accesskey="4">Conv</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Conventions you must obey to avoid trouble.

</td></tr>
<tr><td align="left" valign="top">• <a href="#ForIndent-Vars" accesskey="5">Vars</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Variables controlling Fortran indent style.

</td></tr>
</tbody></table>


<a name="ForIndent-Commands"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#ForIndent-Cont" accesskey="n" rel="next">ForIndent Cont</a>, Up: <a href="#Fortran-Indent" accesskey="u" rel="up">Fortran Indent</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Fortran-Indentation-and-Filling-Commands"></a>
<h4 class="subsubsection">26.14.2.1 Fortran Indentation and Filling Commands</h4>

<dl compact="compact">
<dt><kbd>C-M-j</kbd></dt>
<dd><p>Break the current line at point and set up a continuation line
(<code>fortran-split-line</code>).

</p>
</dd>
<dt><kbd>M-^</kbd></dt>
<dd><p>Join this line to the previous line (<code>fortran-join-line</code>).

</p>
</dd>
<dt><kbd>C-M-q</kbd></dt>
<dd><p>Indent all the lines of the subprogram that point is in
(<code>fortran-indent-subprogram</code>).

</p>
</dd>
<dt><kbd>M-q</kbd></dt>
<dd><p>Fill a comment block or statement (using <code>fortran-fill-paragraph</code>
or <code>fortran-fill-statement</code>).

</p></dd>
</dl>

<a name="index-C_002dM_002dq-_0028Fortran-mode_0029"></a>
<a name="index-fortran_002dindent_002dsubprogram"></a>
<p>The key <kbd>C-M-q</kbd> runs <code>fortran-indent-subprogram</code>, a command
to reindent all the lines of the Fortran subprogram (function or
subroutine) containing point.

</p>
<a name="index-C_002dM_002dj-_0028Fortran-mode_0029"></a>
<a name="index-fortran_002dsplit_002dline"></a>
<p>The key <kbd>C-M-j</kbd> runs <code>fortran-split-line</code>, which splits
a line in the appropriate fashion for Fortran.  In a non-comment line,
the second half becomes a continuation line and is indented
accordingly.  In a comment line, both halves become separate comment
lines.

</p>
<a name="index-M_002d_005e-_0028Fortran-mode_0029"></a>
<a name="index-C_002dc-C_002dd-_0028Fortran-mode_0029"></a>
<a name="index-fortran_002djoin_002dline"></a>
<p><kbd>M-^</kbd> or <kbd>C-c C-d</kbd> run the command <code>fortran-join-line</code>,
which joins a continuation line back to the previous line, roughly as
the inverse of <code>fortran-split-line</code>.  The point must be on a
continuation line when this command is invoked.

</p>
<a name="index-M_002dq-_0028Fortran-mode_0029"></a>
<p><kbd>M-q</kbd> in Fortran mode fills the comment block or statement that
point is in.  This removes any excess statement continuations.

</p>

<a name="ForIndent-Cont"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#ForIndent-Num" accesskey="n" rel="next">ForIndent Num</a>, Previous: <a href="#ForIndent-Commands" accesskey="p" rel="prev">ForIndent Commands</a>, Up: <a href="#Fortran-Indent" accesskey="u" rel="up">Fortran Indent</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Continuation-Lines-2"></a>
<h4 class="subsubsection">26.14.2.2连续行</h4>
<a name="index-Fortran-continuation-lines"></a>

<a name="index-fortran_002dcontinuation_002dstring"></a>
<p>Most Fortran 77 compilers allow two ways of writing continuation lines.
If the first non-space character on a line is in column 5, then that
line is a continuation of the previous line.  We call this <em>fixed
form</em>.  (In GNU Emacs we always count columns from 0; but note that
the Fortran standard counts from 1.  You can customize the variable
<code>column-number-indicator-zero-based</code> to make the column display
Fortran-like; see <a href="#Optional-Mode-Line">Optional Mode Line</a>.)
The variable
<code>fortran-continuation-string</code> specifies what character to put in
column 5.  A line that starts with a tab character followed by any digit
except ‘<samp>0</samp>’ is also a continuation line.  We call this style of
continuation <em>tab format</em>.  (Fortran 90 introduced free-form
continuation lines.)

</p>
<a name="index-indent_002dtabs_002dmode-_0028Fortran-mode_0029"></a>
<a name="index-fortran_002danalyze_002ddepth"></a>
<a name="index-fortran_002dtab_002dmode_002ddefault"></a>
<p>Fortran mode can use either style of continuation line.  When you
enter Fortran mode, it tries to deduce the proper continuation style
automatically from the buffer contents.  It does this by scanning up to
<code>fortran-analyze-depth</code> (default 100) lines from the start of the
buffer.  The first line that begins with either a tab character or six
spaces determines the choice.  If the scan fails (for example, if the
buffer is new and therefore empty), the value of
<code>fortran-tab-mode-default</code> (<code>nil</code> for fixed form, and
non-<code>nil</code> for tab format) is used.  ‘<samp>/t</samp>’
(<code>fortran-tab-mode-string</code>) in the mode line indicates tab format
is selected.  Fortran mode sets the value of <code>indent-tabs-mode</code>
accordingly.

</p>
<p>If the text on a line starts with the Fortran continuation marker
‘<samp>$</samp>’, or if it begins with any non-whitespace character in column
5, Fortran mode treats it as a continuation line.  When you indent a
continuation line with <kbd><span class="key">TAB</span></kbd>, it converts the line to the
current continuation style.  When you split a Fortran statement with
<kbd>C-M-j</kbd>, the continuation marker on the newline is created
according to the continuation style.

</p>
<p>The setting of continuation style affects several other aspects of
editing in Fortran mode.  In fixed form mode, the minimum column
number for the body of a statement is 6.  Lines inside of Fortran
blocks that are indented to larger column numbers must use only the
space character for whitespace.  In tab format mode, the minimum
column number for the statement body is 8, and the whitespace before
column 8 must consist of one tab character.

</p>

<a name="ForIndent-Num"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#ForIndent-Conv" accesskey="n" rel="next">ForIndent Conv</a>, Previous: <a href="#ForIndent-Cont" accesskey="p" rel="prev">ForIndent Cont</a>, Up: <a href="#Fortran-Indent" accesskey="u" rel="up">Fortran Indent</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Line-Numbers"></a>
<h4 class="subsubsection">26.14.2.3 Line Numbers</h4>

<p>If a number is the first non-whitespace in the line, Fortran
indentation assumes it is a line number and moves it to columns 0
through 4.  (Columns always count from 0 in Emacs, but setting
<code>column-number-indicator-zero-based</code> to <code>nil</code> can change
that,
see <a href="#Optional-Mode-Line">Optional Mode Line</a>.)

</p>
<a name="index-fortran_002dline_002dnumber_002dindent"></a>
<p>Line numbers of four digits or less are normally indented one space.
The variable <code>fortran-line-number-indent</code> controls this; it
specifies the maximum indentation a line number can have.  The default
value of the variable is 1.  Fortran mode tries to prevent line number
digits passing column 4, reducing the indentation below the specified
maximum if necessary.  If <code>fortran-line-number-indent</code> has the
value 5, line numbers are right-justified to end in column 4.

</p>
<a name="index-fortran_002delectric_002dline_002dnumber"></a>
<p>Simply inserting a line number is enough to indent it according to
these rules.  As each digit is inserted, the indentation is recomputed.
To turn off this feature, set the variable
<code>fortran-electric-line-number</code> to <code>nil</code>.

</p>


<a name="ForIndent-Conv"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#ForIndent-Vars" accesskey="n" rel="next">ForIndent Vars</a>, Previous: <a href="#ForIndent-Num" accesskey="p" rel="prev">ForIndent Num</a>, Up: <a href="#Fortran-Indent" accesskey="u" rel="up">Fortran Indent</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Syntactic-Conventions"></a>
<h4 class="subsubsection">26.14.2.4 Syntactic Conventions</h4>

<p>Fortran mode assumes that you follow certain conventions that simplify
the task of understanding a Fortran program well enough to indent it
properly:

</p>
<ul>
<li>  Two nested ‘<samp>do</samp>’ loops never share a ‘<samp>continue</samp>’ statement.



</li><li>  Fortran keywords such as ‘<samp>if</samp>’, ‘<samp>else</samp>’, ‘<samp>then</samp>’, ‘<samp>do</samp>’
and others are written without embedded whitespace or line breaks.



<p>Fortran compilers generally ignore whitespace outside of string
constants, but Fortran mode does not recognize these keywords if they
are not contiguous.  Constructs such as ‘<samp>else if</samp>’ or ‘<samp>end do</samp>’
are acceptable, but the second word should be on the same line as the
first and not on a continuation line.

</p></li></ul>

<p>If you fail to follow these conventions, the indentation commands may
indent some lines unaesthetically.  However, a correct Fortran program
retains its meaning when reindented even if the conventions are not
followed.

</p>

<a name="ForIndent-Vars"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#ForIndent-Conv" accesskey="p" rel="prev">ForIndent Conv</a>, Up: <a href="#Fortran-Indent" accesskey="u" rel="up">Fortran Indent</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Variables-for-Fortran-Indentation"></a>
<h4 class="subsubsection">26.14.2.5 Variables for Fortran Indentation</h4>

<a name="index-fortran_002ddo_002dindent"></a>
<a name="index-fortran_002dif_002dindent"></a>
<a name="index-fortran_002dstructure_002dindent"></a>
<a name="index-fortran_002dcontinuation_002dindent"></a>
<a name="index-fortran_002dcheck_002dall_002dnum_2026"></a>
<a name="index-fortran_002dminimum_002dstatement_002dindent_2026"></a>
<p>Several additional variables control how Fortran indentation works:

</p>
<dl compact="compact">
<dt><code>fortran-do-indent</code></dt>
<dd><p>Extra indentation within each level of ‘<samp>do</samp>’ statement (default 3).

</p>
</dd>
<dt><code>fortran-if-indent</code></dt>
<dd><p>Extra indentation within each level of ‘<samp>if</samp>’, ‘<samp>select case</samp>’, or
‘<samp>where</samp>’ statements (default 3).

</p>
</dd>
<dt><code>fortran-structure-indent</code></dt>
<dd><p>Extra indentation within each level of ‘<samp>structure</samp>’, ‘<samp>union</samp>’,
‘<samp>map</samp>’, or ‘<samp>interface</samp>’ statements (default 3).

</p>
</dd>
<dt><code>fortran-continuation-indent</code></dt>
<dd><p>Extra indentation for bodies of continuation lines (default 5).

</p>
</dd>
<dt><code>fortran-check-all-num-for-matching-do</code></dt>
<dd><p>In Fortran 77, a numbered ‘<samp>do</samp>’ statement is terminated by any statement
with a matching line number.  It is common (but not compulsory) to use a
‘<samp>continue</samp>’ statement for this purpose.  If this variable has a
non-<code>nil</code> value, indenting any numbered statement must check for a
‘<samp>do</samp>’ that ends there.  If you always end ‘<samp>do</samp>’ statements with
a ‘<samp>continue</samp>’ line (or if you use the more modern ‘<samp>enddo</samp>’),
then you can speed up indentation by setting this variable to
<code>nil</code> (the default).

</p>
</dd>
<dt><code>fortran-blink-matching-if</code></dt>
<dd><p>If this is <code>t</code>, indenting an ‘<samp>endif</samp>’ (or ‘<samp>enddo</samp>’)
statement moves the cursor momentarily to the matching ‘<samp>if</samp>’ (or
‘<samp>do</samp>’) statement to show where it is.  The default is <code>nil</code>.

</p>
</dd>
<dt><code>fortran-minimum-statement-indent-fixed</code></dt>
<dd><p>Minimum indentation for Fortran statements when using fixed form
continuation line style.  Statement bodies are never indented by less than
this.  The default is 6.

</p>
</dd>
<dt><code>fortran-minimum-statement-indent-tab</code></dt>
<dd><p>Minimum indentation for Fortran statements for tab format continuation line
style.  Statement bodies are never indented by less than this.  The
default is 8.

</p></dd>
</dl>

<p>The following section describes the variables controlling the
indentation of comments.

</p>

<a name="Fortran-Comments"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Fortran-Autofill" accesskey="n" rel="next">Fortran Autofill</a>, Previous: <a href="#Fortran-Indent" accesskey="p" rel="prev">Fortran Indent</a>, Up: <a href="#Fortran" accesskey="u" rel="up">Fortran</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Fortran-Comments-1"></a>
<h4 class="subsection">26.14.3 Fortran Comments</h4>

<p>The usual Emacs comment commands assume that a comment can follow a
line of code.  In Fortran 77, the standard comment syntax requires an
entire line to be just a comment.  Therefore, Fortran mode replaces the
standard Emacs comment commands and defines some new variables.

</p>
<a name="index-fortran_002dcomment_002dline_002dstart"></a>
<p>Fortran mode can also handle the Fortran 90 comment syntax where
comments start with ‘<samp>!</samp>’ and can follow other text.  Because only
some Fortran 77 compilers accept this syntax, Fortran mode will not
insert such comments unless you have said in advance to do so.  To do
this, set the variable <code>fortran-comment-line-start</code> to ‘<samp>"!"</samp>’.
If you use an unusual value, you may need to change
<code>fortran-comment-line-start-skip</code>.

</p>

<dl compact="compact">
<dt><kbd>M-;</kbd></dt>
<dd><p>Align comment or insert new comment (<code>comment-dwim</code>).

</p>
</dd>
<dt><kbd>C-x ;</kbd></dt>
<dd><p>Applies to nonstandard ‘<samp>!</samp>’ comments only (<code>comment-set-column</code>).

</p>
</dd>
<dt><kbd>C-c ;</kbd></dt>
<dd><p>Turn all lines of the region into comments, or (with argument) turn them back
into real code (<code>fortran-comment-region</code>).

</p></dd>
</dl>

<p><kbd>M-;</kbd> in Fortran mode runs the standard <code>comment-dwim</code>.
This recognizes any kind of existing comment and aligns its text
appropriately; if there is no existing comment, a comment is inserted
and aligned.  Inserting and aligning comments are not the same in
Fortran mode as in other modes.

</p>
<p>When a new comment must be inserted, if the current line is blank, a
full-line comment is inserted.  On a non-blank line, a nonstandard ‘<samp>!</samp>’
comment is inserted if you have said you want to use them.  Otherwise, a
full-line comment is inserted on a new line before the current line.

</p>
<p>Nonstandard ‘<samp>!</samp>’ comments are aligned like comments in other
languages, but full-line comments are different.  In a standard full-line
comment, the comment delimiter itself must always appear in column zero.
What can be aligned is the text within the comment.  You can choose from
three styles of alignment by setting the variable
<code>fortran-comment-indent-style</code> to one of these values:

</p>
<a name="index-fortran_002dcomment_002dindent_002dstyle"></a>
<a name="index-fortran_002dcomment_002dline_002dextra_002dindent"></a>
<dl compact="compact">
<dt><code>fixed</code></dt>
<dd><p>Align the text at a fixed column, which is the sum of
<code>fortran-comment-line-extra-indent</code> and the minimum statement
indentation.  This is the default.

</p>
<p>The minimum indentation is
<code>fortran-minimum-statement-indent-tab</code> for tab format
continuation line style and <code>fortran-minimum-statement-indent-fixed</code>
for fixed form style.

</p>
</dd>
<dt><code>relative</code></dt>
<dd><p>Align the text as if it were a line of code, but with an additional
<code>fortran-comment-line-extra-indent</code> columns of indentation.

</p>
</dd>
<dt><code>nil</code></dt>
<dd><p>Don’t move text in full-line comments automatically.

</p></dd>
</dl>

<a name="index-fortran_002dcomment_002dindent_002dchar"></a>
<p>In addition, you can specify the character to be used to indent within
full-line comments by setting the variable
<code>fortran-comment-indent-char</code> to the single-character string you want
to use.

</p>
<a name="index-fortran_002ddirective_002dre"></a>
<p>Compiler directive lines, or preprocessor lines, have much the same
appearance as comment lines.  It is important, though, that such lines
never be indented at all, no matter what the value of
<code>fortran-comment-indent-style</code>.  The variable
<code>fortran-directive-re</code> is a regular expression that specifies which
lines are directives.  Matching lines are never indented, and receive
distinctive font-locking.

</p>
<p>The normal Emacs comment command <kbd>C-x ;</kbd> (<code>comment-set-column</code>)
has not been redefined.  If you use ‘<samp>!</samp>’ comments, this command
can be used with them.  Otherwise, it is useless in Fortran mode.

</p>
<a name="index-C_002dc-_003b-_0028Fortran-mode_0029"></a>
<a name="index-fortran_002dcomment_002dregion"></a>
<a name="index-fortran_002dcomment_002dregion-1"></a>
<p>The command <kbd>C-c ;</kbd> (<code>fortran-comment-region</code>) turns all the
lines of the region into comments by inserting the string ‘<samp>c$$$</samp>’ at
the front of each one.  With a numeric argument, it turns the region
back into live code by deleting ‘<samp>c$$$</samp>’ from the front of each line
in it.  The string used for these comments can be controlled by setting
the variable <code>fortran-comment-region</code>.  Note that here we have an
example of a command and a variable with the same name; these two uses
of the name never conflict because in Lisp and in Emacs it is always
clear from the context which one is meant.

</p>

<a name="Fortran-Autofill"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Fortran-Columns" accesskey="n" rel="next">Fortran Columns</a>, Previous: <a href="#Fortran-Comments" accesskey="p" rel="prev">Fortran Comments</a>, Up: <a href="#Fortran" accesskey="u" rel="up">Fortran</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Auto-Fill-in-Fortran-Mode"></a>
<h4 class="subsection">26.14.4 Auto Fill in Fortran Mode</h4>

<p>Fortran mode has specialized support for Auto Fill mode, which is a
minor mode that automatically splits statements as you insert them
when they become too wide.  Splitting a statement involves making
continuation lines using <code>fortran-continuation-string</code>
(see <a href="#ForIndent-Cont">ForIndent Cont</a>).  This splitting happens when you type
<kbd><span class="key">SPC</span></kbd>, <kbd><span class="key">RET</span></kbd>, or <kbd><span class="key">TAB</span></kbd>, and also in the
Fortran indentation commands.  You activate Auto Fill in Fortran mode
in the normal way.
See <a href="#Auto-Fill">Auto Fill</a>.

</p>
<a name="index-fortran_002dbreak_002dbefore_002ddelimiters"></a>
<p>Auto Fill breaks lines at spaces or delimiters when the lines get
longer than the desired width (the value of <code>fill-column</code>).  The
delimiters (besides whitespace) that Auto Fill can break at are
‘<samp>+</samp>’, ‘<samp>-</samp>’, ‘<samp>/</samp>’, ‘<samp>*</samp>’, ‘<samp>=</samp>’, ‘<samp>&lt;</samp>’, ‘<samp>&gt;</samp>’,
and ‘<samp>,</samp>’.  The line break comes after the delimiter if the
variable <code>fortran-break-before-delimiters</code> is <code>nil</code>.
Otherwise (and by default), the break comes before the delimiter.

</p>
<p>To enable Auto Fill in all Fortran buffers, add
<code>auto-fill-mode</code> to <code>fortran-mode-hook</code>.
See <a href="#Hooks">Hooks</a>.

</p>

<a name="Fortran-Columns"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Fortran-Abbrev" accesskey="n" rel="next">Fortran Abbrev</a>, Previous: <a href="#Fortran-Autofill" accesskey="p" rel="prev">Fortran Autofill</a>, Up: <a href="#Fortran" accesskey="u" rel="up">Fortran</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Checking-Columns-in-Fortran"></a>
<h4 class="subsection">26.14.5 Checking Columns in Fortran</h4>

<a name="index-fortran_002dline_002dlength"></a>
<p>In standard Fortran 77, anything beyond column 72 is ignored.
Most compilers provide an option to change this (for example,
‘<samp>-ffixed-line-length-N</samp>’ in gfortran).  Customize the variable
<code>fortran-line-length</code> to change the line length in Fortran mode.
Anything beyond this point is font-locked as a comment.  (Unless it is
inside a string: strings that extend beyond <code>fortran-line-length</code>
will confuse font-lock.)

</p>
<dl compact="compact">
<dt><kbd>C-c C-r</kbd></dt>
<dd><p>Display a column ruler momentarily above the current line
(<code>fortran-column-ruler</code>).

</p>
</dd>
<dt><kbd>C-c C-w</kbd></dt>
<dd><p>Split the current window horizontally temporarily so that it is
<code>fortran-line-length</code> columns wide
(<code>fortran-window-create-momentarily</code>).  This may help you avoid
making lines longer than the limit imposed by your Fortran compiler.

</p>
</dd>
<dt><kbd>C-u C-c C-w</kbd></dt>
<dd><p>Split the current window horizontally so that it is
<code>fortran-line-length</code> columns wide (<code>fortran-window-create</code>).
You can then continue editing.

</p>
</dd>
<dt><kbd>M-x fortran-strip-sequence-nos</kbd></dt>
<dd><p>Delete all text in column <code>fortran-line-length</code> and beyond.

</p></dd>
</dl>

<a name="index-C_002dc-C_002dr-_0028Fortran-mode_0029"></a>
<a name="index-fortran_002dcolumn_002druler"></a>
<p>The command <kbd>C-c C-r</kbd> (<code>fortran-column-ruler</code>) shows a column
ruler momentarily above the current line.  The comment ruler is two lines
of text that show you the locations of columns with special significance in
Fortran programs.  Square brackets show the limits of the columns for line
numbers, and curly brackets show the limits of the columns for the
statement body.  Column numbers appear above them.

</p>
<p>Note that the column numbers count from zero, as always in GNU Emacs
(but customizing <code>column-number-indicator-zero-based</code> can change
column display to match that of Fortran;
see <a href="#Optional-Mode-Line">Optional Mode Line</a>.)
As a result, the numbers may be one less than those you are familiar
with; but the positions they indicate in the line are standard for
Fortran.

</p>
<a name="index-fortran_002dcolumn_002druler_002dfixed"></a>
<a name="index-fortran_002dcolumn_002druler_002dtabs"></a>
<p>The text used to display the column ruler depends on the value of the
variable <code>indent-tabs-mode</code>.  If <code>indent-tabs-mode</code> is
<code>nil</code>, then the value of the variable
<code>fortran-column-ruler-fixed</code> is used as the column ruler.
Otherwise, the value of the variable <code>fortran-column-ruler-tab</code> is
displayed.  By changing these variables, you can change the column ruler
display.

</p>
<a name="index-C_002dc-C_002dw-_0028Fortran-mode_0029"></a>
<a name="index-fortran_002dwindow_002dcreate_002dmomentarily"></a>
<p><kbd>C-c C-w</kbd> (<code>fortran-window-create-momentarily</code>) temporarily
splits the current window horizontally, making a window
<code>fortran-line-length</code> columns wide, so you can see any lines that
are too long.  Type a space to restore the normal width.

</p>
<a name="index-C_002du-C_002dc-C_002dw-_0028Fortran-mode_0029"></a>
<a name="index-fortran_002dwindow_002dcreate"></a>
<p>You can also split the window horizontally and continue editing with
the split in place.  To do this, use <kbd>C-u C-c C-w</kbd> (<code>M-x
fortran-window-create</code>).  By editing in this window you can
immediately see when you make a line too wide to be correct Fortran.

</p>
<a name="index-fortran_002dstrip_002dsequence_002dnos"></a>
<p>The command <kbd>M-x fortran-strip-sequence-nos</kbd> deletes all text in
column <code>fortran-line-length</code> and beyond, on all lines in the
current buffer.  This is the easiest way to get rid of old sequence
numbers.

</p>

<a name="Fortran-Abbrev"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Fortran-Columns" accesskey="p" rel="prev">Fortran Columns</a>, Up: <a href="#Fortran" accesskey="u" rel="up">Fortran</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Fortran-Keyword-Abbrevs"></a>
<h4 class="subsection">26.14.6 Fortran Keyword Abbrevs</h4>

<p>Fortran mode provides many built-in abbrevs for common keywords and
declarations.  These are the same sort of abbrev that you can define
yourself.  To use them, you must turn on Abbrev mode.
See <a href="#Abbrevs">Abbrevs</a>.

</p>
<p>The built-in abbrevs are unusual in one way: they all start with a
semicolon.  For example, one built-in Fortran abbrev is ‘<samp>;c</samp>’ for
‘<samp>continue</samp>’.  If you insert ‘<samp>;c</samp>’ and then insert a punctuation
character such as a space or a newline, the ‘<samp>;c</samp>’ expands automatically
to ‘<samp>continue</samp>’, provided Abbrev mode is enabled.

</p>
<p>Type ‘<samp>;?</samp>’ or ‘<samp>;C-h</samp>’ to display a list of all the built-in
Fortran abbrevs and what they stand for.

</p><hr>
<a name="Building"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Maintaining" accesskey="n" rel="next">Maintaining</a>, Previous: <a href="#Programs" accesskey="p" rel="prev">Programs</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Compiling-and-Testing-Programs"></a>
<h2 class="chapter">27 Compiling and Testing Programs</h2>
<a name="index-building-programs"></a>
<a name="index-program-building"></a>
<a name="index-running-Lisp-functions"></a>

<p>The previous chapter discusses the Emacs commands that are useful
for making changes in programs.  This chapter deals with commands that
assist in the process of compiling and testing programs.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Compilation" accesskey="1">Compilation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Compiling programs in languages other
                          than Lisp (C, Pascal, etc.).

</td></tr>
<tr><td align="left" valign="top">• <a href="#Compilation-Mode" accesskey="2">Compilation Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The mode for visiting compiler errors.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Compilation-Shell" accesskey="3">Compilation Shell</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Customizing your shell properly
                          for use in the compilation buffer.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Grep-Searching" accesskey="4">Grep Searching</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Searching with grep.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Flymake" accesskey="5">Flymake</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Finding syntax errors on the fly.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Debuggers" accesskey="6">Debuggers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Running symbolic debuggers for non-Lisp programs.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Executing-Lisp" accesskey="7">Executing Lisp</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Various modes for editing Lisp programs,
                          with different facilities for running
                          the Lisp programs.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Lisp-Libraries" accesskey="8">Libraries</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How Lisp programs are loaded into Emacs.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Lisp-Eval" accesskey="9">Eval</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Executing a single Lisp expression in Emacs.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Lisp-Interaction">交互</a>：</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Executing Lisp in an Emacs buffer.

</td></tr>
<tr><td align="left" valign="top">• <a href="#External-Lisp">External Lisp</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Communicating through Emacs with a separate Lisp.

</td></tr>
</tbody></table>


<a name="Compilation"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Compilation-Mode" accesskey="n" rel="next">Compilation Mode</a>, Up: <a href="#Building" accesskey="u" rel="up">Building</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Running-Compilations-under-Emacs"></a>
<h3 class="section">27.1 Running Compilations under Emacs</h3>
<a name="index-inferior-process"></a>
<a name="index-make"></a>
<a name="index-compilation-errors"></a>
<a name="index-error-log"></a>

<p>Emacs can run compilers for languages such as C and Fortran, feeding
the compilation log into an Emacs buffer.  It can also parse the error
messages and show you where the errors occurred.

</p>
<dl compact="compact">
<dt><kbd>M-x compile</kbd></dt>
<dd><p>Run a compiler asynchronously under Emacs, with error messages going to
the <samp>*compilation*</samp> buffer.

</p>
</dd>
<dt><kbd>M-x recompile</kbd></dt>
<dt><kbd>g<span class="roman"> (Compilation mode)</span></kbd></dt>
<dd><p>Invoke a compiler with the same command as in the last invocation of
<kbd>M-x compile</kbd>.

</p>
</dd>
<dt><kbd>M-x kill-compilation</kbd></dt>
<dd><p>Kill the running compilation subprocess.

</p></dd>
</dl>

<a name="index-compile"></a>
<p>To run <code>make</code> or another compilation command, type <kbd>M-x
compile</kbd>.  This reads a shell command line using the minibuffer, and
then executes the command by running a shell as a subprocess (or
<em>inferior process</em>) of Emacs.  The output is inserted in a buffer
named <samp>*compilation*</samp>.  The current buffer’s default directory is
used as the working directory for the execution of the command, so by
default compilation takes place in that directory.

</p>
<a name="index-compile_002dcommand"></a>
<p>The default compilation command is ‘<samp>make -k</samp>’, which is usually
correct for programs compiled using the <code>make</code> utility (the
‘<samp>-k</samp>’ flag tells <code>make</code> to continue compiling as much as
possible after an error).  See <a href="http://www.gnu.org/software/make/manual/make.html#Top">Make</a> in <cite>GNU Make Manual</cite>.
If you have done <kbd>M-x compile</kbd> before, the command that you
specified is automatically stored in the variable
<code>compile-command</code>; this is used as the default the next time you
type <kbd>M-x compile</kbd>.  A file can also specify a file-local value
for <code>compile-command</code> (see <a href="#File-Variables">File Variables</a>).

</p>
<p>Starting a compilation displays the <samp>*compilation*</samp> buffer in
another window but does not select it.  While the compilation is
running, the word ‘<samp>run</samp>’ is shown in the major mode indicator for
the <samp>*compilation*</samp> buffer, and the word ‘<samp>Compiling</samp>’ appears
in all mode lines.  You do not have to keep the <samp>*compilation*</samp>
buffer visible while compilation is running; it continues in any case.
When the compilation ends, for whatever reason, the mode line of the
<samp>*compilation*</samp> buffer changes to say ‘<samp>exit</samp>’ (followed by
the exit code: ‘<samp>[0]</samp>’ for a normal exit), or ‘<samp>signal</samp>’ (if a
signal terminated the process).

</p>
<p>If you want to watch the compilation transcript as it appears,
switch to the <samp>*compilation*</samp> buffer and move point to the end of
the buffer.  When point is at the end, new compilation output is
inserted above point, which remains at the end.  Otherwise, point
remains fixed while compilation output is added at the end of the
buffer.

</p>
<p>While compilation proceeds, the mode line shows the number of
errors, warnings, and informational messages emitted by the compiler
so far.

</p>
<a name="index-compilation-buffer_002c-keeping-point-at-end"></a>
<a name="index-compilation_002dscroll_002doutput"></a>
<p>If you change the variable <code>compilation-scroll-output</code> to a
non-<code>nil</code> value, the <samp>*compilation*</samp> buffer scrolls
automatically to follow the output.  If the value is
<code>first-error</code>, scrolling stops when the first error appears,
leaving point at that error.  For any other non-<code>nil</code> value,
scrolling continues until there is no more output.

</p>
<a name="index-recompile"></a>
<p>To rerun the last compilation with the same command, type <kbd>M-x
recompile</kbd>.  This reuses the compilation command from the last
invocation of <kbd>M-x compile</kbd>.  It also reuses the
<samp>*compilation*</samp> buffer and starts the compilation in its default
directory, which is the directory in which the previous compilation
was started.  In <samp>*compilation*</samp> buffers this command is bound to
<kbd>g</kbd>.

</p>
<a name="index-kill_002dcompilation"></a>
<a name="index-compilation_002dalways_002dkill"></a>
<p>Starting a new compilation also kills any compilation already
running in <samp>*compilation*</samp>, as the buffer can only handle one
compilation at any time.  However, <kbd>M-x compile</kbd> and <kbd>M-x
recompile</kbd> ask for confirmation before actually killing a compilation
that is running; to always automatically kill the compilation without
asking, change the variable <code>compilation-always-kill</code> to
<code>t</code>.  You can also kill a compilation process with the command
<kbd>M-x kill-compilation</kbd>.

</p>
<p>To run two compilations at once, start the first one, then rename
the <samp>*compilation*</samp> buffer (perhaps using <code>rename-uniquely</code>;
see <a href="#Misc-Buffer">Misc Buffer</a>), then switch buffers and start the other
compilation.  This will create a new <samp>*compilation*</samp> buffer.

</p>
<a name="index-compilation_002denvironment"></a>
<p>You can control the environment passed to the compilation command
with the variable <code>compilation-environment</code>.  Its value is a list
of environment variable settings; each element should be a string of
the form <code>"<var>envvarname</var>=<var>value</var>"</code>.  These environment
variable settings override the usual ones.

</p>

<a name="Compilation-Mode"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Compilation-Shell" accesskey="n" rel="next">Compilation Shell</a>, Previous: <a href="#Compilation" accesskey="p" rel="prev">Compilation</a>, Up: <a href="#Building" accesskey="u" rel="up">Building</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Compilation-Mode-1"></a>
<h3 class="section">27.2 Compilation Mode</h3>

<a name="index-Compilation-mode"></a>
<a name="index-mode_002c-Compilation"></a>
<a name="index-locus"></a>
<p>The <samp>*compilation*</samp> buffer uses a major mode called Compilation
mode.  Compilation mode turns each error message in the buffer into a
hyperlink; you can move point to it and type <tt class="key">RET</tt>, or click on it
with the mouse (see <a href="#Mouse-References">Mouse References</a>), to visit the <em>locus</em> of
the error message in a separate window.  The locus is the specific
position in a file where that error occurred.

</p>
<a name="index-compilation-mode-faces"></a>
<a name="index-compilation_002derror"></a>
<a name="index-compilation_002dwarning"></a>
<p>The appearance of the <samp>*compilation*</samp> buffer can be controlled
by customizing the faces which are used to highlight parts of the
<samp>*compilation*</samp> buffer, e.g., <code>compilation-error</code> or
<code>compilation-warning</code>, for error and warning messages
respectively.  Note that since those faces inherit from the
<code>error</code> and <code>warning</code> faces, it is also possible to
customize the parent face directly instead.

</p>
<p>Use <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">customize-group</span>&nbsp;RET&nbsp;compilation</kbd><!-- /@w -->  to see the entire
list of customization variables and faces.

</p>
<a name="index-compile_002dgoto_002derror"></a>
<a name="index-compilation_002dauto_002djump_002dto_002dfirst_002derror"></a>
<p>If you change the variable
<code>compilation-auto-jump-to-first-error</code> to a non-<code>nil</code> value,
Emacs automatically visits the locus of the first error message that
appears in the <samp>*compilation*</samp> buffer.

</p>
<p>Compilation mode provides the following additional commands.  These
commands can also be used in <samp>*grep*</samp> buffers, where the
hyperlinks are search matches rather than error messages (see <a href="#Grep-Searching">Grep Searching</a>).

</p>
<dl compact="compact">
<dt><kbd>M-g M-n</kbd></dt>
<dt><kbd>M-g n</kbd></dt>
<dt><kbd>C-x `</kbd></dt>
<dd><p>Visit the locus of the next error message or match (<code>next-error</code>).

</p></dd>
<dt><kbd>M-g M-p</kbd></dt>
<dt><kbd>M-g p</kbd></dt>
<dd><p>Visit the locus of the previous error message or match
(<code>previous-error</code>).

</p></dd>
<dt><kbd>M-n</kbd></dt>
<dd><p>Move point to the next error message or match, without visiting its
locus (<code>compilation-next-error</code>).

</p></dd>
<dt><kbd>M-p</kbd></dt>
<dd><p>Move point to the previous error message or match, without visiting
its locus (<code>compilation-previous-error</code>).

</p></dd>
<dt><kbd>M-}</kbd></dt>
<dd><p>Move point to the next error message or match occurring in a different
file (<code>compilation-next-file</code>).

</p></dd>
<dt><kbd>M-{</kbd></dt>
<dd><p>Move point to the previous error message or match occurring in a
different file (<code>compilation-previous-file</code>).

</p></dd>
<dt><kbd>C-c C-f</kbd></dt>
<dd><p>Toggle Next Error Follow minor mode, which makes cursor motion in the
compilation buffer produce automatic source display.

</p></dd>
<dt><kbd>g</kbd></dt>
<dd><p>Re-run the last command whose output is shown in the
<samp>*compilation*</samp> buffer.

</p></dd>
<dt><kbd>M-x next-error-select-buffer</kbd></dt>
<dd><p>Select a buffer to be used by next invocation of <code>next-error</code> and
<code>previous-error</code>.

</p></dd>
</dl>

<a name="index-M_002dg-M_002dn"></a>
<a name="index-M_002dg-n"></a>
<a name="index-C_002dx-_0060"></a>
<a name="index-next_002derror"></a>
<a name="index-next_002derror_002dhighlight"></a>
<a name="index-next_002derror_002dhighlight_002dno_002dselect"></a>
<p>To visit errors sequentially, type <kbd><span class="nolinebreak">C-x</span>&nbsp;`</kbd><!-- /@w -->

(<code>next-error</code>), or equivalently <kbd>M-g M-n</kbd> or <kbd>M-g n</kbd>.
This command can be invoked from any buffer, not just a Compilation
mode buffer.  The first time you invoke it after a compilation, it
visits the locus of the first error message.  Each subsequent
<kbd><span class="nolinebreak">M-g</span>&nbsp;<span class="nolinebreak">M-n</span></kbd><!-- /@w -->  visits the next error, in a similar fashion.  If you
visit a specific error with <tt class="key">RET</tt> or a mouse click in the
<samp>*compilation*</samp> buffer, subsequent <kbd><span class="nolinebreak">M-g</span>&nbsp;<span class="nolinebreak">M-n</span></kbd><!-- /@w -->  commands
advance from there.  When <kbd><span class="nolinebreak">M-g</span>&nbsp;<span class="nolinebreak">M-n</span></kbd><!-- /@w -->  finds no more error messages
to visit, it signals an error.  <kbd><span class="nolinebreak">C-u</span>&nbsp;<span class="nolinebreak">M-g</span>&nbsp;<span class="nolinebreak">M-n</span></kbd><!-- /@w -->  starts again from
the beginning of the compilation buffer, and visits the first locus.

</p>
<p><kbd>M-g M-p</kbd> or <kbd>M-g p</kbd> (<code>previous-error</code>) iterates
through errors in the opposite direction.

</p>
<a name="index-next_002derror_002dfind_002dbuffer_002dfunction"></a>
<a name="index-next_002derror_002dselect_002dbuffer"></a>
<p>The <code>next-error</code> and <code>previous-error</code> commands don’t just
act on the errors or matches listed in <samp>*compilation*</samp> and
<samp>*grep*</samp> buffers; they also know how to iterate through error or
match lists produced by other commands, such as <kbd>M-x occur</kbd>
(see <a href="#Other-Repeating-Search">Other Repeating Search</a>).  If the current buffer contains
error messages or matches, these commands will iterate through them;
otherwise, Emacs looks for a buffer containing error messages or
matches amongst the windows of the selected frame (if the variable
<code>next-error-find-buffer-function</code> is customized to the value
<code>next-error-buffer-on-selected-frame</code>), then for a buffer used
previously by <code>next-error</code> or <code>previous-error</code>, and finally
all other buffers.  Any buffer these commands iterate through that is
not currently displayed in a window will be displayed.  You can use
the <code>next-error-select-buffer</code> command to switch to
a different buffer to be used by the subsequent invocation of
<code>next-error</code>.

</p>
<a name="index-compilation_002dskip_002dthreshold"></a>
<p>By default, the <code>next-error</code> and <code>previous-error</code> commands
skip less important messages.  The variable
<code>compilation-skip-threshold</code> controls this.  The default value,
1, means to skip anything less important than a warning.  A value of 2
means to skip anything less important than an error, while 0 means not
to skip any messages.

</p>
<p>When Emacs visits the locus of an error message, it momentarily
highlights the relevant source line.  The duration of this highlight
is determined by the variable <code>next-error-highlight</code> for the locus
in the selected buffer, and <code>next-error-highlight-no-select</code> for
the locus in non-selected buffers.

</p>
<a name="index-compilation_002dcontext_002dlines"></a>
<p>If the <samp>*compilation*</samp> buffer is shown in a window with a left
fringe (see <a href="#Fringes">Fringes</a>), the locus-visiting commands put an arrow in
the fringe, pointing to the current error message.  If the window has
no left fringe, such as on a text terminal, these commands scroll the
window so that the current message is at the top of the window.  If
you change the variable <code>compilation-context-lines</code> to <code>t</code>,
a visible arrow is inserted before column zero instead.  If you change
the variable to an integer value <var>n</var>, these commands scroll the
window so that the current error message is <var>n</var> lines from the
top, whether or not there is a fringe; the default value, <code>nil</code>,
gives the behavior described above.

</p>
<a name="index-compilation_002derror_002dregexp_002dalist"></a>
<a name="index-grep_002dregexp_002dalist"></a>
<p>To parse messages from the compiler, Compilation mode uses the
variable <code>compilation-error-regexp-alist</code> which lists various
error message formats and tells Emacs how to extract the locus from
each.  A similar variable, <code>grep-regexp-alist</code>, tells Emacs how
to parse output from a <code>grep</code> command (see <a href="#Grep-Searching">Grep Searching</a>).

</p>
<a name="index-compilation_002dnext_002derror"></a>
<a name="index-compilation_002dprevious_002derror"></a>
<a name="index-compilation_002dnext_002dfile"></a>
<a name="index-compilation_002dprevious_002dfile"></a>
<p>Compilation mode also defines the keys <tt class="key">SPC</tt> and <tt class="key">DEL</tt> to
scroll by screenfuls; <kbd>M-n</kbd> (<code>compilation-next-error</code>) and
<kbd>M-p</kbd> (<code>compilation-previous-error</code>) to move to the next or
previous error message; and <kbd>M-{</kbd> (<code>compilation-next-file</code>)
and <kbd>M-}</kbd> (<code>compilation-previous-file</code>) to move to the next
or previous error message for a different source file.

</p>
<a name="index-Next-Error-Follow-mode"></a>
<a name="index-next_002derror_002dfollow_002dminor_002dmode"></a>
<p>You can type <kbd>C-c C-f</kbd> to toggle Next Error Follow mode.  In
this minor mode, ordinary cursor motion in the compilation buffer
automatically updates the source buffer, i.e., moving the cursor over
an error message causes the locus of that error to be displayed.

</p>
<p>The features of Compilation mode are also available in a minor mode
called Compilation Minor mode.  This lets you parse error messages in
any buffer, not just a normal compilation output buffer.  Type
<kbd>M-x compilation-minor-mode</kbd> to enable the minor mode.  For
instance, in an Rlogin buffer (see <a href="#Remote-Host">Remote Host</a>), Compilation minor
mode automatically accesses remote source files by FTP (see <a href="#File-Names">File Names</a>).

</p>

<a name="Compilation-Shell"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Grep-Searching" accesskey="n" rel="next">Grep Searching</a>, Previous: <a href="#Compilation-Mode" accesskey="p" rel="prev">Compilation Mode</a>, Up: <a href="#Building" accesskey="u" rel="up">Building</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Subshells-for-Compilation"></a>
<h3 class="section">27.3 Subshells for Compilation</h3>

<p>This section includes various techniques and advice for using a
shell and its features in compilation buffers.  This material is
specific to local compilations, and will most probably not work in (or
be irrelevant to) compilation buffers whose default directory is on
remote hosts.

</p>
<p>The <kbd>M-x compile</kbd> command uses a shell to run the compilation
command, but specifies the option for a noninteractive shell.  This
means, in particular, that the shell should start with no prompt.  If
you find your usual shell prompt making an unsightly appearance in the
<samp>*compilation*</samp> buffer, it means you have made a mistake in your
shell’s init file by setting the prompt unconditionally.  (This init
file may be named <samp>.bashrc</samp>, <samp>.profile</samp>, <samp>.cshrc</samp>,
<samp>.shrc</samp>, etc., depending on what shell you use.)  The shell init
file should set the prompt only if there already is a prompt.  Here’s
how to do it in bash:

</p>
<div class="example">
<pre class="example">if [ "${PS1+set}" = set ]
then PS1=…
fi
</pre></div>

<p>And here’s how to do it in csh:

</p>
<div class="example">
<pre class="example">if ($?prompt) set prompt = …
</pre></div>

<a name="index-TERM_002c-environment-variable_002c-in-compilation-mode"></a>
<p>If you want to customize the value of the <code>TERM</code> environment
variable passed to the compilation subshell, customize the variable
<code>comint-terminfo-terminal</code> (see <a href="#Shell-Options">Shell Options</a>).

</p>
<p>Emacs does not expect a compiler process to launch asynchronous
subprocesses; if it does, and they keep running after the main
compiler process has terminated, Emacs may kill them or their output
may not arrive in Emacs.  To avoid this problem, make the main
compilation process wait for its subprocesses to finish.  In a shell
script, you can do this using ‘<samp>$!</samp>’ and ‘<samp>wait</samp>’, like this:

</p>
<div class="example">
<pre class="example">(sleep 10; echo 2nd)&amp; pid=$!  # <span class="roman">Record pid of subprocess</span>
echo first message
wait $pid                     # <span class="roman">Wait for subprocess</span>
</pre></div>

<p>If the background process does not output to the compilation buffer,
so you only need to prevent it from being killed when the main
compilation process terminates, this is sufficient:

</p>
<div class="example">
<pre class="example">nohup <var>command</var>; sleep 1
</pre></div>

<p>On MS-DOS, asynchronous subprocesses are
not supported, so <kbd>M-x compile</kbd> runs the compilation command
synchronously (i.e., you must wait until the command finishes before
you can do anything else in Emacs).  See <a href="#MS_002dDOS">MS-DOS</a>.

</p>

<a name="Grep-Searching"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Flymake" accesskey="n" rel="next">Flymake</a>, Previous: <a href="#Compilation-Shell" accesskey="p" rel="prev">Compilation Shell</a>, Up: <a href="#Building" accesskey="u" rel="up">Building</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Searching-with-Grep-under-Emacs"></a>
<h3 class="section">27.4 Searching with Grep under Emacs</h3>

<p>Just as you can run a compiler from Emacs and then visit the lines
with compilation errors, you can also run <code>grep</code> and then
visit the lines on which matches were found.  This works by treating
the matches reported by <code>grep</code> as if they were errors.
The output buffer uses Grep mode, which is a variant of Compilation
mode (see <a href="#Compilation-Mode">Compilation Mode</a>).

</p>
<dl compact="compact">
<dt><kbd>M-x grep</kbd></dt>
<dt><kbd>M-x lgrep</kbd></dt>
<dd><p>Run <code>grep</code> asynchronously under Emacs, listing matching lines in
the buffer named <samp>*grep*</samp>.

</p></dd>
<dt><kbd>M-x grep-find</kbd></dt>
<dt><kbd>M-x find-grep</kbd></dt>
<dt><kbd>M-x rgrep</kbd></dt>
<dd><p>Run <code>grep</code> via <code>find</code>, and collect output in the
<samp>*grep*</samp> buffer.

</p></dd>
<dt><kbd>M-x zrgrep</kbd></dt>
<dd><p>Run <code>zgrep</code> and collect output in the <samp>*grep*</samp> buffer.

</p></dd>
<dt><kbd>M-x kill-grep</kbd></dt>
<dd><p>Kill the running <code>grep</code> subprocess.

</p></dd>
</dl>

<a name="index-grep"></a>
<p>To run <code>grep</code>, type <kbd>M-x grep</kbd>, then enter a command line
that specifies how to run <code>grep</code>.  Use the same arguments you
would give <code>grep</code> when running it normally: a <code>grep</code>-style
regexp (usually in single-quotes to quote the shell’s special
characters) followed by file names, which may use wildcards.  If you
specify a prefix argument for <kbd>M-x grep</kbd>, it finds the identifier
(see <a href="#Xref">Xref</a>) in the buffer around point, and puts that into the
default <code>grep</code> command.

</p>
<p>Your command need not simply run <code>grep</code>; you can use any shell
command that produces output in the same format.  For instance, you
can chain <code>grep</code> commands, like this:

</p>
<div class="example">
<pre class="example">grep -nH -e foo *.el | grep bar | grep toto
</pre></div>

<p>The output from <code>grep</code> goes in the <samp>*grep*</samp> buffer.  You
can find the corresponding lines in the original files using <kbd><span class="nolinebreak">M-g</span>&nbsp;<span class="nolinebreak">M-n</span></kbd><!-- /@w -->, <tt class="key">RET</tt>, and so forth, just like compilation errors.
See <a href="#Compilation-Mode">Compilation Mode</a>, for detailed description of commands and key
bindings available in the <samp>*grep*</samp> buffer.

</p>
<p>Some grep programs accept a ‘<samp>--color</samp>’ option to output special
markers around matches for the purpose of highlighting.  You can make
use of this feature by setting <code>grep-highlight-matches</code> to
<code>t</code>.  When displaying a match in the source buffer, the exact
match will be highlighted, instead of the entire source line.

</p>
<p>As with compilation commands (see <a href="#Compilation">Compilation</a>), while the grep
command runs, the mode line shows the running number of matches found
and highlighted so far.

</p>
<p>The <code>grep</code> commands will offer to save buffers before
running.  This is controlled by the <code>grep-save-buffers</code> variable.
The possible values are either <code>nil</code> (don’t save), <code>ask</code>
(ask before saving), or a function which will be used as a predicate
(and is called with the file name as the parameter and should return
non-<code>nil</code> if the buffer is to be saved).  Any other
non-<code>nil</code> value means that all buffers should be saved without
asking.  The default is <code>ask</code>.

</p>
<a name="index-grep_002dfind"></a>
<a name="index-find_002dgrep"></a>
<p>The command <kbd>M-x grep-find</kbd> (also available as <kbd>M-x
find-grep</kbd>) is similar to <kbd>M-x grep</kbd>, but it supplies a different
initial default for the command—one that runs both <code>find</code> and
<code>grep</code>, so as to search every file in a directory tree.  See also
the <code>find-grep-dired</code> command, in <a href="#Dired-and-Find">Dired and Find</a>.

</p>
<a name="index-lgrep"></a>
<a name="index-rgrep"></a>
<a name="index-zrgrep"></a>
<p>The commands <kbd>M-x lgrep</kbd> (local grep) and <kbd>M-x rgrep</kbd>
(recursive grep) are more user-friendly versions of <code>grep</code> and
<code>grep-find</code>, which prompt separately for the regular expression
to match, the files to search, and the base directory for the search.
Case sensitivity of the search is controlled by the current value of
<code>case-fold-search</code>.  The command <kbd>M-x zrgrep</kbd> is similar to
<kbd>M-x rgrep</kbd>, but it calls <code>zgrep</code> instead of
<code>grep</code> to search the contents of gzipped files.

</p>
<p>These commands build the shell commands based on the variables
<code>grep-template</code> (for <code>lgrep</code>) and <code>grep-find-template</code>
(for <code>rgrep</code>).  The files to search can use aliases defined in
the variable <code>grep-files-aliases</code>.

</p>
<a name="index-grep_002dfind_002dignored_002ddirectories"></a>
<p>Directories listed in the variable
<code>grep-find-ignored-directories</code> are automatically skipped by
<kbd>M-x rgrep</kbd>.  The default value includes the data directories used
by various version control systems.

</p>
<a name="index-grep_002dfind_002dabbreviate"></a>
<a name="index-grep_002dfind_002dtoggle_002dabbreviation"></a>
<p>By default, the shell commands constructed for <code>lgrep</code>,
<code>rgrep</code>, and <code>zgrep</code> are abbreviated for display by
concealing the part that contains a long list of files and directories
to ignore.  You can reveal the concealed part by clicking on the
button with ellipsis, which represents them.  You can also
interactively toggle viewing the concealed part by typing <kbd>M-x
grep-find-toggle-abbreviation</kbd>.  To disable this abbreviation of the
shell commands, customize the option <code>grep-find-abbreviate</code> to a
<code>nil</code> value.

</p>

<a name="Flymake"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Debuggers" accesskey="n" rel="next">Debuggers</a>, Previous: <a href="#Grep-Searching" accesskey="p" rel="prev">Grep Searching</a>, Up: <a href="#Building" accesskey="u" rel="up">Building</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Finding-Syntax-Errors-On-The-Fly"></a>
<h3 class="section">27.5 Finding Syntax Errors On The Fly</h3>
<a name="index-checking-syntax"></a>

<p>Flymake mode is a minor mode that performs on-the-fly syntax
checking for many programming and markup languages, including C, C++,
Perl, HTML, and TeX/LaTeX.  It is somewhat analogous to Flyspell
mode, which performs spell checking for ordinary human languages in a
similar fashion (see <a href="#Spelling">Spelling</a>).  As you edit a file, Flymake mode
runs an appropriate syntax checking tool in the background, using a
temporary copy of the buffer.  It then parses the error and warning
messages, and highlights the erroneous lines in the buffer.  The
syntax checking tool used depends on the language; for example, for
C/C++ files this is usually the C compiler.  Flymake can also use
build tools such as <code>make</code> for checking complicated projects.

</p>
<p>To enable Flymake mode, type <kbd>M-x flymake-mode</kbd>.  You can jump
to the errors that it finds by using <kbd>M-x flymake-goto-next-error</kbd>
and <kbd>M-x flymake-goto-prev-error</kbd>.  To display any error messages
associated with the current line, type <kbd>M-x
flymake-display-err-menu-for-current-line</kbd>.

</p>
<p>For more details about using Flymake,
see <a href="http://www.gnu.org/software/emacs/manual/html_mono/flymake.html#Top">Flymake</a> in <cite>The Flymake Manual</cite>.

</p>

<a name="Debuggers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Executing-Lisp" accesskey="n" rel="next">Executing Lisp</a>, Previous: <a href="#Flymake" accesskey="p" rel="prev">Flymake</a>, Up: <a href="#Building" accesskey="u" rel="up">Building</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Running-Debuggers-Under-Emacs"></a>
<h3 class="section">27.6 Running Debuggers Under Emacs</h3>
<a name="index-debuggers"></a>
<a name="index-GUD-library"></a>
<a name="index-GDB"></a>
<a name="index-DBX"></a>
<a name="index-SDB"></a>
<a name="index-XDB"></a>
<a name="index-Perldb"></a>
<a name="index-JDB"></a>
<a name="index-PDB"></a>

<p>The GUD (Grand Unified Debugger) library provides an Emacs interface
to a wide variety of symbolic debuggers.  It can run the GNU Debugger
(GDB), as well as DBX, SDB, XDB, Guile REPL debug commands, Perl’s
debugging mode, the Python debugger PDB, and the Java Debugger JDB.

</p>
<p>Emacs provides a special interface to GDB, which uses extra Emacs
windows to display the state of the debugged program.  See <a href="#GDB-Graphical-Interface">GDB Graphical Interface</a>.

</p>
<p>Emacs also has a built-in debugger for Emacs Lisp programs.
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Debugging">The Lisp Debugger</a> in <cite>the Emacs Lisp Reference
Manual</cite>.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Starting-GUD" accesskey="1">Starting GUD</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to start a debugger subprocess.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Debugger-Operation" accesskey="2">Debugger Operation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Connection between the debugger and source buffers.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Commands-of-GUD" accesskey="3">Commands of GUD</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Key bindings for common commands.

</td></tr>
<tr><td align="left" valign="top">• <a href="#GUD-Customization" accesskey="4">GUD Customization</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Defining your own commands for GUD.

</td></tr>
<tr><td align="left" valign="top">• <a href="#GDB-Graphical-Interface" accesskey="5">GDB Graphical Interface</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">An enhanced mode that uses GDB features to
                        implement a graphical debugging environment.

</td></tr>
</tbody></table>


<a name="Starting-GUD"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Debugger-Operation" accesskey="n" rel="next">Debugger Operation</a>, Up: <a href="#Debuggers" accesskey="u" rel="up">Debuggers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Starting-GUD-1"></a>
<h4 class="subsection">27.6.1 Starting GUD</h4>

<p>There are several commands for starting a debugger subprocess, each
corresponding to a particular debugger program.

</p>
<dl compact="compact">
<dt><kbd>M-x gdb</kbd></dt>
<dd><a name="index-gdb"></a>
<p>Run GDB as a subprocess, and interact with it via an IDE-like Emacs
interface.  See <a href="#GDB-Graphical-Interface">GDB Graphical Interface</a>, for more information about
this command.

</p>
</dd>
<dt><kbd>M-x gud-gdb</kbd></dt>
<dd><a name="index-gud_002dgdb"></a>
<p>Run GDB, using a GUD interaction buffer for input and output to the
GDB subprocess (see <a href="#Debugger-Operation">Debugger Operation</a>).  If such a buffer already
exists, switch to it; otherwise, create the buffer and switch to it.

</p>
<p>The other commands in this list do the same, for other debugger
programs.

</p>
</dd>
<dt><kbd>M-x perldb</kbd></dt>
<dd><a name="index-perldb"></a>
<p>Run the Perl interpreter in debug mode.

</p>
</dd>
<dt><kbd>M-x jdb</kbd></dt>
<dd><a name="index-jdb"></a>
<p>Run the Java debugger.

</p>
</dd>
<dt><kbd>M-x pdb</kbd></dt>
<dd><a name="index-pdb"></a>
<p>Run the Python debugger.

</p>
</dd>
<dt><kbd>M-x guiler</kbd></dt>
<dd><a name="index-guiler"></a>
<p>Run Guile REPL for debugging Guile Scheme programs.

</p>
</dd>
<dt><kbd>M-x dbx</kbd></dt>
<dd><a name="index-dbx"></a>
<p>Run the DBX debugger.

</p>
</dd>
<dt><kbd>M-x xdb</kbd></dt>
<dd><a name="index-xdb"></a>
<a name="index-gud_002dxdb_002ddirectories"></a>
<p>Run the XDB debugger.

</p>
</dd>
<dt><kbd>M-x sdb</kbd></dt>
<dd><a name="index-sdb"></a>
<p>Run the SDB debugger.

</p></dd>
</dl>

<p>Each of these commands reads a command line to invoke the debugger,
using the minibuffer.  The minibuffer’s initial contents contain the
standard executable name and options for the debugger, and sometimes
also a guess for the name of the executable file you want to debug.
Shell wildcards and variables are not allowed in this command line.
Emacs assumes that the first command argument which does not start
with a ‘<samp>-</samp>’ is the executable file name.

</p>
<a name="index-remote-host_002c-debugging-on"></a>
<p>Tramp provides a facility for remote debugging, whereby both the
debugger and the program being debugged are on the same remote host.
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/tramp.html#Running-a-debugger-on-a-remote-host">Running a debugger on a remote host</a> in <cite>The Tramp Manual</cite>,
for details.  This is separate from GDB’s remote debugging feature,
where the program and the debugger run on different machines
(see <a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Remote-Debugging.html#Remote-Debugging">Debugging Remote Programs</a> in <cite>The GNU
debugger</cite>).

</p>

<a name="Debugger-Operation"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Commands-of-GUD" accesskey="n" rel="next">Commands of GUD</a>, Previous: <a href="#Starting-GUD" accesskey="p" rel="prev">Starting GUD</a>, Up: <a href="#Debuggers" accesskey="u" rel="up">Debuggers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Debugger-Operation-1"></a>
<h4 class="subsection">27.6.2 Debugger Operation</h4>
<a name="index-GUD-interaction-buffer"></a>

<p>The <em>GUD interaction buffer</em> is an Emacs buffer which is used to
send text commands to a debugger subprocess, and record its output.
This is the basic interface for interacting with a debugger, used by
<kbd>M-x gud-gdb</kbd> and other commands listed in
<a href="#Starting-GUD">Starting GUD</a>.
The <kbd>M-x gdb</kbd> command extends this interface with additional
specialized buffers for controlling breakpoints, stack frames, and
other aspects of the debugger state (see <a href="#GDB-Graphical-Interface">GDB Graphical Interface</a>).

</p>
<p>The GUD interaction buffer uses a variant of Shell mode, so the
Emacs commands defined by Shell mode are available (see <a href="#Shell-Mode">Shell Mode</a>).  Completion is available for most debugger commands
(see <a href="#Completion">Completion</a>), and you can use the usual Shell mode history
commands to repeat them.
See <a href="#Commands-of-GUD">Commands of GUD</a>,
for special commands that can be used in the GUD interaction buffer.

</p>
<p>As you debug a program, Emacs displays the relevant source files by
visiting them in Emacs buffers, with an arrow in the left fringe
indicating the current execution line.  (On a text terminal, the arrow
appears as ‘<samp>=&gt;</samp>’, overlaid on the first two text columns.)  Moving
point in such a buffer does not move the arrow.  You are free to edit
these source files, but note that inserting or deleting lines will
throw off the arrow’s positioning, as Emacs has no way to figure out
which edited source line corresponds to the line reported by the
debugger subprocess.  To update this information, you typically have
to recompile and restart the program.

</p>
<a name="index-GUD-Tooltip-mode"></a>
<a name="index-mode_002c-GUD-Tooltip"></a>
<a name="index-gud_002dtooltip_002dmode"></a>
<a name="index-gud_002dtooltip_002decho_002darea"></a>
<p>GUD Tooltip mode is a global minor mode that adds tooltip support to
GUD.  To toggle this mode, type <kbd>M-x gud-tooltip-mode</kbd>.  It is
disabled by default.  If enabled, you can move the mouse pointer over a
variable, a function, or a macro (collectively called
<em>identifiers</em>) to show their values in tooltips
(see <a href="#Tooltips">Tooltips</a>).  If just placing the mouse pointer over an
expression doesn’t show the value of the expression you had in mind,
you can tell Emacs more explicitly what expression to evaluate by
dragging the mouse over the expression, then leaving the mouse inside
the marked area.  The GUD Tooltip mode takes effect in the GUD
interaction buffer, and in all source buffers with major modes listed
in the variable <code>gud-tooltip-modes</code>.  If the variable
<code>gud-tooltip-echo-area</code> is non-<code>nil</code>, or if you turned off
the tooltip mode, values are shown in the echo area instead of a
tooltip.

</p>
<p>When using GUD Tooltip mode with <kbd>M-x gud-gdb</kbd>, displaying an
expression’s value in GDB can sometimes expand a macro, potentially
causing side effects in the debugged program.  For that reason, using
tooltips in <code>gud-gdb</code> is disabled.  If you use the <kbd>M-x gdb</kbd>
interface, this problem does not occur, as there is special code to
avoid side-effects; furthermore, you can display macro definitions
associated with an identifier when the program is not executing.

</p>

<a name="Commands-of-GUD"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#GUD-Customization" accesskey="n" rel="next">GUD Customization</a>, Previous: <a href="#Debugger-Operation" accesskey="p" rel="prev">Debugger Operation</a>, Up: <a href="#Debuggers" accesskey="u" rel="up">Debuggers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Commands-of-GUD-1"></a>
<h4 class="subsection">27.6.3 Commands of GUD</h4>

<p>GUD provides commands for setting and clearing breakpoints,
selecting stack frames, and stepping through the program.

</p>
<dl compact="compact">
<dt><kbd>C-x C-a C-b</kbd></dt>
<dd><a name="index-C_002dx-C_002da-C_002db"></a>
<p>Set a breakpoint on the source line that point is on.

</p></dd>
</dl>

<p><kbd>C-x C-a C-b</kbd> (<code>gud-break</code>), when called in a source
buffer, sets a debugger breakpoint on the current source line.  This
command is available only after starting GUD.  If you call it in a
buffer that is not associated with any debugger subprocess, it signals
an error.

</p>
<a name="index-C_002dx-C_002da-_0028GUD_0029"></a>
<p>The following commands are available both in the GUD interaction
buffer and globally, but with different key bindings.  The keys
starting with <kbd>C-c</kbd> are available only in the GUD interaction
buffer, while those starting with <kbd>C-x C-a</kbd> are available
globally.  Some of these commands are also available via the tool bar;
some are not supported by certain debuggers.

</p>
<dl compact="compact">
<dt><kbd>C-c C-l</kbd></dt>
<dd><a name="index-C_002dc-C_002dl-_0028GUD_0029"></a>
</dd>
<dt><kbd>C-x C-a C-l</kbd></dt>
<dd><a name="index-gud_002drefresh"></a>
<p>Display, in another window, the last source line referred to in the
GUD interaction buffer (<code>gud-refresh</code>).

</p>
</dd>
<dt><kbd>C-c C-s</kbd></dt>
<dd><a name="index-C_002dc-C_002ds-_0028GUD_0029"></a>
</dd>
<dt><kbd>C-x C-a C-s</kbd></dt>
<dd><a name="index-gud_002dstep"></a>
<p>Execute the next single line of code (<code>gud-step</code>).  If the line
contains a function call, execution stops after entering the called
function.

</p>
</dd>
<dt><kbd>C-c C-n</kbd></dt>
<dd><a name="index-C_002dc-C_002dn-_0028GUD_0029"></a>
</dd>
<dt><kbd>C-x C-a C-n</kbd></dt>
<dd><a name="index-gud_002dnext"></a>
<p>Execute the next single line of code, stepping across function calls
without stopping inside the functions (<code>gud-next</code>).

</p>
</dd>
<dt><kbd>C-c C-i</kbd></dt>
<dd><a name="index-C_002dc-C_002di-_0028GUD_0029"></a>
</dd>
<dt><kbd>C-x C-a C-i</kbd></dt>
<dd><a name="index-gud_002dstepi"></a>
<p>Execute a single machine instruction (<code>gud-stepi</code>).

</p>
</dd>
<dt><kbd>C-c C-p</kbd></dt>
<dd><a name="index-C_002dc-C_002dp-_0028GUD_0029"></a>
</dd>
<dt><kbd>C-x C-a C-p</kbd></dt>
<dd><a name="index-gud_002dprint"></a>
<p>Evaluate the expression at point (<code>gud-print</code>).  If Emacs
does not print the exact expression that you want, mark it as a region
first.

</p>
</dd>
<dt><kbd>C-c C-r</kbd></dt>
<dd><a name="index-C_002dc-C_002dr-_0028GUD_0029"></a>
</dd>
<dt><kbd>C-x C-a C-r</kbd></dt>
<dd><a name="index-gud_002dcont"></a>
<p>Continue execution without specifying any stopping point.  The program
will run until it hits a breakpoint, terminates, or gets a signal that
the debugger is checking for (<code>gud-cont</code>).

</p>
</dd>
<dt><kbd>C-c C-d</kbd></dt>
<dd><a name="index-C_002dc-C_002dd-_0028GUD_0029"></a>
</dd>
<dt><kbd>C-x C-a C-d</kbd></dt>
<dd><a name="index-gud_002dremove"></a>
<p>Delete the breakpoint(s) on the current source line, if any
(<code>gud-remove</code>).  If you use this command in the GUD interaction
buffer, it applies to the line where the program last stopped.

</p>
</dd>
<dt><kbd>C-c C-t</kbd></dt>
<dd><a name="index-C_002dc-C_002dt-_0028GUD_0029"></a>
</dd>
<dt><kbd>C-x C-a C-t</kbd></dt>
<dd><a name="index-gud_002dtbreak"></a>
<p>Set a temporary breakpoint on the current source line, if any
(<code>gud-tbreak</code>).  If you use this command in the GUD interaction
buffer, it applies to the line where the program last stopped.

</p>
</dd>
<dt><kbd>C-c &lt;</kbd></dt>
<dd><a name="index-C_002dc-_003c-_0028GUD_0029"></a>
</dd>
<dt><kbd>C-x C-a &lt;</kbd></dt>
<dd><a name="index-gud_002dup"></a>
<p>Select the next enclosing stack frame (<code>gud-up</code>).  This is
equivalent to the GDB command ‘<samp>up</samp>’.

</p>
</dd>
<dt><kbd>C-c &gt;</kbd></dt>
<dd><a name="index-C_002dc-_003e-_0028GUD_0029"></a>
</dd>
<dt><kbd>C-x C-a &gt;</kbd></dt>
<dd><a name="index-gud_002ddown"></a>
<p>Select the next inner stack frame (<code>gud-down</code>).  This is
equivalent to the GDB command ‘<samp>down</samp>’.

</p>
</dd>
<dt><kbd>C-c C-u</kbd></dt>
<dd><a name="index-C_002dc-C_002du-_0028GUD_0029"></a>
</dd>
<dt><kbd>C-x C-a C-u</kbd></dt>
<dd><a name="index-gud_002duntil"></a>
<p>Continue execution to the current line (<code>gud-until</code>).  The
program will run until it hits a breakpoint, terminates, gets a signal
that the debugger is checking for, or reaches the line on which the
cursor currently sits.

</p>
</dd>
<dt><kbd>C-c C-f</kbd></dt>
<dd><a name="index-C_002dc-C_002df-_0028GUD_0029"></a>
</dd>
<dt><kbd>C-x C-a C-f</kbd></dt>
<dd><a name="index-gud_002dfinish"></a>
<p>Run the program until the selected stack frame returns or
stops for some other reason (<code>gud-finish</code>).

</p></dd>
</dl>

<p>If you are using GDB, these additional key bindings are available:

</p>
<dl compact="compact">
<dt><kbd>C-x C-a C-j</kbd></dt>
<dd><a name="index-C_002dx-C_002da-C_002dj-_0028GUD_0029"></a>
<a name="index-gud_002djump"></a>
<p>Only useful in a source buffer, <code>gud-jump</code> transfers the
program’s execution point to the current line.  In other words, the
next line that the program executes will be the one where you gave the
command.  If the new execution line is in a different function from
the previously one, GDB prompts for confirmation since the results may
be bizarre.  See the GDB manual entry regarding <code>jump</code> for
details.

</p>
</dd>
<dt><kbd><span class="key">TAB</span></kbd></dt>
<dd><a name="index-TAB-_0028GUD_0029"></a>
<a name="index-gud_002dgdb_002dcomplete_002dcommand"></a>
<p>With GDB, complete a symbol name (<code>gud-gdb-complete-command</code>).
This key is available only in the GUD interaction buffer.

</p></dd>
</dl>

<p>These commands interpret a numeric argument as a repeat count, when
that makes sense.

</p>
<p>Because <tt class="key">TAB</tt> serves as a completion command, you can’t use it to
enter a tab as input to the program you are debugging with GDB.
Instead, type <kbd>C-q <span class="key">TAB</span></kbd> to enter a tab.

</p>

<a name="GUD-Customization"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#GDB-Graphical-Interface" accesskey="n" rel="next">GDB Graphical Interface</a>, Previous: <a href="#Commands-of-GUD" accesskey="p" rel="prev">Commands of GUD</a>, Up: <a href="#Debuggers" accesskey="u" rel="up">Debuggers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="GUD-Customization-1"></a>
<h4 class="subsection">27.6.4 GUD Customization</h4>

<a name="index-gdb_002dmode_002dhook"></a>
<a name="index-dbx_002dmode_002dhook"></a>
<a name="index-sdb_002dmode_002dhook"></a>
<a name="index-xdb_002dmode_002dhook"></a>
<a name="index-perldb_002dmode_002dhook"></a>
<a name="index-pdb_002dmode_002dhook"></a>
<a name="index-jdb_002dmode_002dhook"></a>
<a name="index-guiler_002dmode_002dhook"></a>
<p>On startup, GUD runs one of the following hooks:
<code>gdb-mode-hook</code>, if you are using GDB; <code>dbx-mode-hook</code>, if
you are using DBX; <code>sdb-mode-hook</code>, if you are using SDB;
<code>xdb-mode-hook</code>, if you are using XDB; <code>guiler-mode-hook</code>
for Guile REPL debugging; <code>perldb-mode-hook</code>, for Perl debugging
mode; <code>pdb-mode-hook</code>, for PDB; <code>jdb-mode-hook</code>, for JDB.
See <a href="#Hooks">Hooks</a>.

</p>
<p>The <code>gud-def</code> Lisp macro (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Defining-Macros">Defining Macros</a> in <cite>the
Emacs Lisp Reference Manual</cite>) provides a convenient way to define an
Emacs command that sends a particular command string to the debugger,
and set up a key binding for in the GUD interaction buffer:

</p>
<a name="index-gud_002ddef"></a>
<div class="example">
<pre class="example">(gud-def <var>function</var> <var>cmdstring</var> <var>binding</var> <var>docstring</var>)
</pre></div>

<p>This defines a command named <var>function</var> which sends
<var>cmdstring</var> to the debugger process, and gives it the documentation
string <var>docstring</var>.  You can then use the command <var>function</var> in any
buffer.  If <var>binding</var> is non-<code>nil</code>, <code>gud-def</code> also binds
the command to <kbd>C-c <var>binding</var></kbd> in the GUD buffer’s mode and to
<kbd>C-x C-a <var>binding</var></kbd> generally.

</p>
<p>The command string <var>cmdstring</var> may contain certain
‘<samp>%</samp>’-sequences that stand for data to be filled in at the time
<var>function</var> is called:

</p>
<dl compact="compact">
<dt>‘<samp>%f</samp>’</dt>
<dd><p>The name of the current source file.  If the current buffer is the GUD
buffer, then the current source file is the file that the program
stopped in.

</p>
</dd>
<dt>‘<samp>%l</samp>’</dt>
<dd><p>The number of the current source line.  If the current buffer is the GUD
buffer, then the current source line is the line that the program
stopped in.

</p>
</dd>
<dt>‘<samp>%e</samp>’</dt>
<dd><p>In transient-mark-mode the text in the region, if it is active.
Otherwise the text of the C lvalue or function-call expression at or
adjacent to point.

</p>
</dd>
<dt>‘<samp>%a</samp>’</dt>
<dd><p>The text of the hexadecimal address at or adjacent to point.

</p>
</dd>
<dt>‘<samp>%p</samp>’</dt>
<dd><p>The numeric argument of the called function, as a decimal number.  If
the command is used without a numeric argument, ‘<samp>%p</samp>’ stands for the
empty string.

</p>
<p>If you don’t use ‘<samp>%p</samp>’ in the command string, the command you define
ignores any numeric argument.

</p>
</dd>
<dt>‘<samp>%d</samp>’</dt>
<dd><p>The name of the directory of the current source file.

</p>
</dd>
<dt>‘<samp>%c</samp>’</dt>
<dd><p>Fully qualified class name derived from the expression surrounding point
(jdb only).

</p></dd>
</dl>


<a name="GDB-Graphical-Interface"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#GUD-Customization" accesskey="p" rel="prev">GUD Customization</a>, Up: <a href="#Debuggers" accesskey="u" rel="up">Debuggers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="GDB-Graphical-Interface-1"></a>
<h4 class="subsection">27.6.5 GDB Graphical Interface</h4>

<p>The command <kbd>M-x gdb</kbd> starts GDB in an IDE-like interface, with
specialized buffers for controlling breakpoints, stack frames, and
other aspects of the debugger state.  It also provides additional ways
to control the debugging session with the mouse, such as clicking in
the fringe of a source buffer to set a breakpoint there.

</p>
<a name="index-gud_002dgdb_002dcommand_002dname"></a>
<p>To run GDB using just the GUD interaction buffer interface, without
these additional features, use <kbd>M-x gud-gdb</kbd> (see <a href="#Starting-GUD">Starting GUD</a>).  You must use this if you want to debug multiple programs
within one Emacs session, as that is currently unsupported by <kbd>M-x
gdb</kbd>.

</p>
<p>Internally, <kbd>M-x gdb</kbd> informs GDB that its screen size is
unlimited; for correct operation, you must not change GDB’s screen
height and width values during the debugging session.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#GDB-User-Interface-Layout" accesskey="1">GDB User Interface Layout</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Control the number of displayed buffers.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Source-Buffers" accesskey="2">Source Buffers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Use the mouse in the fringe/margin to
                                control your program.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Breakpoints-Buffer" accesskey="3">Breakpoints Buffer</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A breakpoint control panel.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Threads-Buffer" accesskey="4">Threads Buffer</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Displays your threads.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Stack-Buffer" accesskey="5">Stack Buffer</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Select a frame from the call stack.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Other-GDB-Buffers" accesskey="6">Other GDB Buffers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Other buffers for controlling the GDB state.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Watch-Expressions" accesskey="7">Watch Expressions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Monitor variable values in the speedbar.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Multithreaded-Debugging" accesskey="8">Multithreaded Debugging</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Debugging programs with several threads.

</td></tr>
</tbody></table>


<a name="GDB-User-Interface-Layout"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Source-Buffers" accesskey="n" rel="next">Source Buffers</a>, Up: <a href="#GDB-Graphical-Interface" accesskey="u" rel="up">GDB Graphical Interface</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="GDB-User-Interface-Layout-1"></a>
<h4 class="subsubsection">27.6.5.1 GDB User Interface Layout</h4>
<a name="index-GDB-User-Interface-layout"></a>

<a name="index-gdb_002dmany_002dwindows-1"></a>
<a name="index-gdb_002dshow_002dmain"></a>
<p>If the variable <code>gdb-many-windows</code> is <code>nil</code> (the default),
<kbd>M-x gdb</kbd> normally displays only the GUD interaction buffer.
However, if the variable <code>gdb-show-main</code> is also non-<code>nil</code>,
it starts with two windows: one displaying the GUD interaction buffer,
and the other showing the source for the <code>main</code> function of the
program you are debugging.

</p>
<p>If <code>gdb-many-windows</code> is non-<code>nil</code>, then <kbd>M-x gdb</kbd>
displays the following frame layout:

</p>
<div class="smallexample">
<pre class="smallexample">+--------------------------------+--------------------------------+
|   GUD interaction buffer       |   Locals/Registers buffer      |
|--------------------------------+--------------------------------+
|   Primary Source buffer        |   I/O buffer for debugged pgm  |
|--------------------------------+--------------------------------+
|   Stack buffer                 |   Breakpoints/Threads buffer   |
+--------------------------------+--------------------------------+
</pre></div>

<a name="index-gdb_002drestore_002dwindows"></a>
<a name="index-gdb_002dmany_002dwindows"></a>
<p>If you ever change the window layout, you can restore the many-windows
layout by typing <kbd>M-x gdb-restore-windows</kbd>.  To toggle
between the many windows layout and a simple layout with just the GUD
interaction buffer and a source file, type <kbd>M-x gdb-many-windows</kbd>.

</p>
<p>If you have an elaborate window setup, and don’t want
<code>gdb-many-windows</code> to disrupt that, it is better to invoke
<kbd>M-x gdb</kbd> in a separate frame to begin with, then the arrangement
of windows on your original frame will not be affected.  A separate
frame for GDB sessions can come in especially handy if you work on a
text-mode terminal, where the screen estate for windows could be at a
premium.

</p>
<p>You may also specify additional GDB-related buffers to display,
either in the same frame or a different one.  Select the buffers you
want by typing <kbd>M-x gdb-display-<var>buffertype</var>-buffer</kbd> or
<kbd>M-x gdb-frame-<var>buffertype</var>-buffer</kbd>, where <var>buffertype</var>
is the relevant buffer type, such as ‘<samp>breakpoints</samp>’.  You can do
the same with the menu bar, with the ‘<samp>GDB-Windows</samp>’ and
‘<samp>GDB-Frames</samp>’ sub-menus of the ‘<samp>GUD</samp>’ menu.

</p>
<p>When you finish debugging, kill the GUD interaction buffer with
<kbd>C-x k</kbd>, which will also kill all the buffers associated with the
session.  However you need not do this if, after editing and
re-compiling your source code within Emacs, you wish to continue
debugging.  When you restart execution, GDB automatically finds the
new executable.  Keeping the GUD interaction buffer has the advantage
of keeping the shell history as well as GDB’s breakpoints.  You do
need to check that the breakpoints in recently edited source files are
still in the right places.

</p>

<a name="Source-Buffers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Breakpoints-Buffer" accesskey="n" rel="next">Breakpoints Buffer</a>, Previous: <a href="#GDB-User-Interface-Layout" accesskey="p" rel="prev">GDB User Interface Layout</a>, Up: <a href="#GDB-Graphical-Interface" accesskey="u" rel="up">GDB Graphical Interface</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Source-Buffers-1"></a>
<h4 class="subsubsection">27.6.5.2 Source Buffers</h4>
<a name="index-fringes_002c-for-debugging"></a>

<dl compact="compact">
<dt><kbd>mouse-1</kbd> (in fringe)</dt>
<dd><p>Set or clear a breakpoint on that line
(<code>gdb-mouse-set-clear-breakpoint</code>).

</p>
</dd>
<dt><kbd>C-mouse-1</kbd> (in fringe)</dt>
<dd><p>Enable or disable a breakpoint on that line
(<code>gdb-mouse-toggle-breakpoint-margin</code>).

</p>
</dd>
<dt><kbd>mouse-3</kbd> (in fringe)</dt>
<dd><p>Continue execution to that line (<code>gdb-mouse-until</code>).

</p>
</dd>
<dt><kbd>C-mouse-3</kbd> (in fringe)</dt>
<dd><p>Jump to that line (<code>gdb-mouse-jump</code>).

</p></dd>
</dl>

<p>On a graphical display, you can click <kbd>mouse-1</kbd> in the fringe of
a source buffer, to set a breakpoint on that line (see <a href="#Fringes">Fringes</a>).
A red dot appears in the fringe, where you clicked.  If a breakpoint
already exists there, the click removes it.  A <kbd>C-mouse-1</kbd> click
enables or disables an existing breakpoint; a breakpoint that is
disabled, but not unset, is indicated by a gray dot.

</p>
<p>On a text terminal, or when fringes are disabled, enabled
breakpoints are indicated with a ‘<samp>B</samp>’ character in the left margin
of the window.  Disabled breakpoints are indicated with ‘<samp>b</samp>’.
(The margin is only displayed if a breakpoint is present.)

</p>
<p>A solid arrow in the left fringe of a source buffer indicates the
line of the innermost frame where the debugged program has stopped.  A
hollow arrow indicates the current execution line of a higher-level
frame.  If you drag the arrow in the fringe with <kbd>mouse-1</kbd>, that
causes execution to advance to the line where you release the button.
Alternatively, you can click <kbd>mouse-3</kbd> in the fringe to advance to
that line.  You can click <kbd>C-mouse-3</kbd> in the fringe to jump to
that line without executing the intermediate lines.  This command
allows you to go backwards, which can be useful for running through
code that has already executed, in order to examine its execution in
more detail.

</p>
<a name="index-gdb_002dmi_002ddecode_002dstrings"></a>
<p>If the file names of the source files are shown with octal escapes,
set the variable <code>gdb-mi-decode-strings</code> to the appropriate
coding-system, most probably <code>utf-8</code>.  (This is <code>nil</code> by
default because GDB may emit octal escapes in situations where
decoding is undesirable, and also because the program being debugged
might use an encoding different from the one used to encode non-ASCII
file names on your system.)

</p>

<a name="Breakpoints-Buffer"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Threads-Buffer" accesskey="n" rel="next">Threads Buffer</a>, Previous: <a href="#Source-Buffers" accesskey="p" rel="prev">Source Buffers</a>, Up: <a href="#GDB-Graphical-Interface" accesskey="u" rel="up">GDB Graphical Interface</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Breakpoints-Buffer-1"></a>
<h4 class="subsubsection">27.6.5.3 Breakpoints Buffer</h4>

<p>The GDB Breakpoints buffer shows the breakpoints, watchpoints and
catchpoints in the debugger session.  See <a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Breakpoints.html#Breakpoints">Breakpoints</a> in <cite>The
GNU debugger</cite>.  It provides the following commands, which mostly apply
to the <em>current breakpoint</em> (the breakpoint which point is on):

</p>
<dl compact="compact">
<dt><kbd><span class="key">SPC</span></kbd></dt>
<dd><a name="index-SPC-_0028GDB-Breakpoints-buffer_0029"></a>
<a name="index-gdb_002dtoggle_002dbreakpoint"></a>
<p>Enable/disable current breakpoint (<code>gdb-toggle-breakpoint</code>).  On
a graphical display, this changes the color of the dot in the fringe
of the source buffer at that line.  The dot is red when the breakpoint
is enabled, and gray when it is disabled.

</p>
</dd>
<dt><kbd>D</kbd></dt>
<dd><a name="index-D-_0028GDB-Breakpoints-buffer_0029"></a>
<a name="index-gdb_002ddelete_002dbreakpoint"></a>
<p>Delete the current breakpoint (<code>gdb-delete-breakpoint</code>).

</p>
</dd>
<dt><kbd><span class="key">RET</span></kbd></dt>
<dd><a name="index-RET-_0028GDB-Breakpoints-buffer_0029"></a>
<a name="index-gdb_002dgoto_002dbreakpoint"></a>
<p>Visit the source line for the current breakpoint
(<code>gdb-goto-breakpoint</code>).

</p>
</dd>
<dt><kbd>鼠标右键</kbd></dt>
<dd><a name="index-mouse_002d2-_0028GDB-Breakpoints-buffer_0029"></a>
<p>Visit the source line for the breakpoint you click on
(<code>gdb-goto-breakpoint</code>).

</p></dd>
</dl>

<a name="index-gdb_002dshow_002dthreads_002dby_002ddefault"></a>
<p>When <code>gdb-many-windows</code> is non-<code>nil</code>, the GDB Breakpoints
buffer shares its window with the GDB Threads buffer.  To switch from
one to the other click with <kbd>mouse-1</kbd> on the relevant button in
the header line.  If <code>gdb-show-threads-by-default</code> is
non-<code>nil</code>, the GDB Threads buffer is the one shown by default.

</p>

<a name="Threads-Buffer"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Stack-Buffer" accesskey="n" rel="next">Stack Buffer</a>, Previous: <a href="#Breakpoints-Buffer" accesskey="p" rel="prev">Breakpoints Buffer</a>, Up: <a href="#GDB-Graphical-Interface" accesskey="u" rel="up">GDB Graphical Interface</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Threads-Buffer-1"></a>
<h4 class="subsubsection">27.6.5.4 Threads Buffer</h4>

<a name="index-gdb_002dselect_002dthread"></a>
<p>The GDB Threads buffer displays a summary of the threads in the
debugged program.  See <a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Threads.html#Threads">Debugging programs with
multiple threads</a> in <cite>The GNU debugger</cite>.  To select a thread, move
point there and press <tt class="key">RET</tt> (<code>gdb-select-thread</code>), or click on
it with <kbd>mouse-2</kbd>.  This also displays the associated source
buffer, and updates the contents of the other GDB buffers.

</p>
<p>You can customize variables in the <code>gdb-buffers</code> group to
select fields included in GDB Threads buffer.

</p>
<dl compact="compact">
<dt><code>gdb-thread-buffer-verbose-names</code></dt>
<dd><a name="index-gdb_002dthread_002dbuffer_002dverbose_002dnames"></a>
<p>Show long thread names like ‘<samp>Thread 0x4e2ab70 (LWP 1983)</samp>’.

</p>
</dd>
<dt><code>gdb-thread-buffer-arguments</code></dt>
<dd><a name="index-gdb_002dthread_002dbuffer_002darguments"></a>
<p>Show arguments of thread top frames.

</p>
</dd>
<dt><code>gdb-thread-buffer-locations</code></dt>
<dd><a name="index-gdb_002dthread_002dbuffer_002dlocations"></a>
<p>Show file information or library names.

</p>
</dd>
<dt><code>gdb-thread-buffer-addresses</code></dt>
<dd><a name="index-gdb_002dthread_002dbuffer_002daddresses"></a>
<p>Show addresses for thread frames in threads buffer.

</p></dd>
</dl>

<p>To view information for several threads simultaneously, use the
following commands from the GDB Threads buffer.

</p>
<dl compact="compact">
<dt><kbd>d</kbd></dt>
<dd><a name="index-d-_0028GDB-threads-buffer_0029"></a>
<a name="index-gdb_002ddisplay_002ddisassembly_002dfor_002dthread"></a>
<p>Display disassembly buffer for the thread at current line
(<code>gdb-display-disassembly-for-thread</code>).

</p>
</dd>
<dt><kbd>f</kbd></dt>
<dd><a name="index-f-_0028GDB-threads-buffer_0029"></a>
<a name="index-gdb_002ddisplay_002dstack_002dfor_002dthread"></a>
<p>Display the GDB Stack buffer for the thread at current line
(<code>gdb-display-stack-for-thread</code>).

</p>
</dd>
<dt><kbd>l</kbd></dt>
<dd><a name="index-l-_0028GDB-threads-buffer_0029"></a>
<a name="index-gdb_002ddisplay_002dlocals_002dfor_002dthread"></a>
<p>Display the GDB Locals buffer for the thread at current line
(<code>gdb-display-locals-for-thread</code>).

</p>
</dd>
<dt><kbd>r</kbd></dt>
<dd><a name="index-r-_0028GDB-threads-buffer_0029"></a>
<a name="index-gdb_002ddisplay_002dregisters_002dfor_002dthread"></a>
<p>Display the GDB Registers buffer for the thread at current line
(<code>gdb-display-registers-for-thread</code>).

</p></dd>
</dl>

<p>Their upper-case counterparts, <kbd>D</kbd>, <kbd>F</kbd> ,<kbd>L</kbd> and <kbd>R</kbd>,
display the corresponding buffer in a new frame.

</p>
<p>When you create a buffer showing information about some specific
thread, it becomes bound to that thread and keeps showing actual
information while you debug your program.  The mode indicator for each
GDB buffer shows the number of the thread whose information that
buffer displays.  The thread number is also included in the name of
each bound buffer.

</p>
<p>Further commands are available in the GDB Threads buffer which
depend on the mode of GDB that is used for controlling execution of
your program.  See <a href="#Multithreaded-Debugging">Multithreaded Debugging</a>.

</p>

<a name="Stack-Buffer"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Other-GDB-Buffers" accesskey="n" rel="next">Other GDB Buffers</a>, Previous: <a href="#Threads-Buffer" accesskey="p" rel="prev">Threads Buffer</a>, Up: <a href="#GDB-Graphical-Interface" accesskey="u" rel="up">GDB Graphical Interface</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Stack-Buffer-1"></a>
<h4 class="subsubsection">27.6.5.5 Stack Buffer</h4>

<p>The GDB Stack buffer displays a <em>call stack</em>, with one line for
each of the nested subroutine calls (<em>stack frames</em>) in the
debugger session.  See <a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Backtrace.html#Backtrace">Backtraces</a> in <cite>The GNU
debugger</cite>.

</p>
<a name="index-gdb_002dframes_002dselect"></a>
<p>On graphical displays, the selected stack frame is indicated by an
arrow in the fringe.  On text terminals, or when fringes are disabled,
the selected stack frame is displayed in reverse contrast.  To select
a stack frame, move point in its line and type <tt class="key">RET</tt>
(<code>gdb-frames-select</code>), or click <kbd>mouse-2</kbd> on it.  Doing so
also updates the Locals buffer
(see <a href="#Other-GDB-Buffers">Other GDB Buffers</a>).

</p>
<a name="index-gdb_002dstack_002dbuffer_002daddresses"></a>
<p>If you want the frame address to be shown each stack frame,
customize the variable <code>gdb-stack-buffer-addresses</code> to a
non-<code>nil</code> value.

</p>

<a name="Other-GDB-Buffers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Watch-Expressions" accesskey="n" rel="next">Watch Expressions</a>, Previous: <a href="#Stack-Buffer" accesskey="p" rel="prev">Stack Buffer</a>, Up: <a href="#GDB-Graphical-Interface" accesskey="u" rel="up">GDB Graphical Interface</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Other-GDB-Buffers-1"></a>
<h4 class="subsubsection">27.6.5.6 Other GDB Buffers</h4>

<dl compact="compact">
<dt>Locals Buffer</dt>
<dd><p>This buffer displays the values of local variables of the current
frame for simple data types (see <a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Frame-Info.html#Frame-Info">Information on a frame</a> in <cite>The GNU debugger</cite>).  Press <tt class="key">RET</tt> or
click <kbd>mouse-2</kbd> on the value if you want to edit it.

</p>
<p>Arrays and structures display their type only.  With GDB 6.4 or later,
you can examine the value of the local variable at point by typing
<tt class="key">RET</tt>, or with a <kbd>mouse-2</kbd> click.  With earlier versions of
GDB, use <tt class="key">RET</tt> or <kbd>mouse-2</kbd> on the type description
(‘<samp>[struct/union]</samp>’ or ‘<samp>[array]</samp>’).  See <a href="#Watch-Expressions">Watch Expressions</a>.

</p>
</dd>
<dt>Registers Buffer</dt>
<dd><a name="index-toggle_002dgdb_002dall_002dregisters"></a>
<p>This buffer displays the values held by the registers
(see <a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Registers.html#Registers">Registers</a> in <cite>The GNU debugger</cite>).  Press <tt class="key">RET</tt> or
click <kbd>mouse-2</kbd> on a register if you want to edit its value.  With
GDB 6.4 or later, recently changed register values display with
<code>font-lock-warning-face</code>.

</p>
</dd>
<dt>Assembler Buffer</dt>
<dd><p>The assembler buffer displays the current frame as machine code.  An
arrow points to the current instruction, and you can set and remove
breakpoints as in a source buffer.  Breakpoint icons also appear in
the fringe or margin.

</p>
</dd>
<dt>Memory Buffer</dt>
<dd><p>The memory buffer lets you examine sections of program memory
(see <a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Memory.html#Memory">Examining memory</a> in <cite>The GNU debugger</cite>).
Click <kbd>mouse-1</kbd> on the appropriate part of the header line to
change the starting address or number of data items that the buffer
displays.  Alternatively, use <kbd>S</kbd> or <kbd>N</kbd> respectively.  Click
<kbd>mouse-3</kbd> on the header line to select the display format or unit
size for these data items.

</p></dd>
</dl>

<p>When <code>gdb-many-windows</code> is non-<code>nil</code>, the locals buffer
shares its window with the registers buffer, just like breakpoints and
threads buffers.  To switch from one to the other, click with
<kbd>mouse-1</kbd> on the relevant button in the header line.

</p>

<a name="Watch-Expressions"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Multithreaded-Debugging" accesskey="n" rel="next">Multithreaded Debugging</a>, Previous: <a href="#Other-GDB-Buffers" accesskey="p" rel="prev">Other GDB Buffers</a>, Up: <a href="#GDB-Graphical-Interface" accesskey="u" rel="up">GDB Graphical Interface</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Watch-Expressions-1"></a>
<h4 class="subsubsection">27.6.5.7 Watch Expressions</h4>
<a name="index-Watching-expressions-in-GDB"></a>

<a name="index-gud_002dwatch"></a>
<a name="index-C_002dx-C_002da-C_002dw-_0028GUD_0029"></a>
<p>If you want to see how a variable changes each time your program
stops, move point into the variable name and click on the watch icon
in the tool bar (<code>gud-watch</code>) or type <kbd>C-x C-a C-w</kbd>.  If you
specify a prefix argument, you can enter the variable name in the
minibuffer.

</p>
<p>Each watch expression is displayed in the speedbar
(see <a href="#Speedbar">Speedbar</a>).  Complex data types, such as arrays, structures
and unions are represented in a tree format.  Leaves and simple data
types show the name of the expression and its value and, when the
speedbar frame is selected, display the type as a tooltip.  Higher
levels show the name, type and address value for pointers and just the
name and type otherwise.  Root expressions also display the frame
address as a tooltip to help identify the frame in which they were
defined.

</p>
<p>To expand or contract a complex data type, click <kbd>mouse-2</kbd> or
press <tt class="key">SPC</tt> on the tag to the left of the expression.  Emacs asks
for confirmation before expanding the expression if its number of
immediate children exceeds the value of the variable
<code>gdb-max-children</code>.

</p>
<a name="index-D-_0028GDB-speedbar_0029"></a>
<a name="index-gdb_002dvar_002ddelete"></a>
<p>To delete a complex watch expression, move point to the root
expression in the speedbar and type <kbd>D</kbd> (<code>gdb-var-delete</code>).

</p>
<a name="index-RET-_0028GDB-speedbar_0029"></a>
<a name="index-gdb_002dedit_002dvalue"></a>
<p>To edit a variable with a simple data type, or a simple element of a
complex data type, move point there in the speedbar and type <tt class="key">RET</tt>
(<code>gdb-edit-value</code>).  Or you can click <kbd>mouse-2</kbd> on a value to
edit it.  Either way, this reads the new value using the minibuffer.

</p>
<a name="index-gdb_002dshow_002dchanged_002dvalues"></a>
<p>If you set the variable <code>gdb-show-changed-values</code> to
non-<code>nil</code> (the default value), Emacs uses
<code>font-lock-warning-face</code> to highlight values that have recently
changed and <code>shadow</code> face to make variables which have gone out of
scope less noticeable.  When a variable goes out of scope you can’t
edit its value.

</p>
<a name="index-gdb_002ddelete_002dout_002dof_002dscope"></a>
<p>If the variable <code>gdb-delete-out-of-scope</code> is non-<code>nil</code>
(the default value), Emacs automatically deletes watch expressions
which go out of scope.  Sometimes, when your program re-enters the
same function many times, it may be useful to set this value to
<code>nil</code> so that you don’t need to recreate the watch expression.

</p>
<a name="index-gdb_002duse_002dcolon_002dcolon_002dnotation"></a>
<p>If the variable <code>gdb-use-colon-colon-notation</code> is
non-<code>nil</code>, Emacs uses the ‘<samp><var>function</var>::<var>variable</var></samp>’
format.  This allows the user to display watch expressions which share
the same variable name.  The default value is <code>nil</code>.

</p>
<a name="index-gdb_002dspeedbar_002dauto_002draise"></a>
<p>To automatically raise the speedbar every time the display of watch
expressions updates, set <code>gdb-speedbar-auto-raise</code> to
non-<code>nil</code>.  This can be useful if you are debugging with a full
screen Emacs frame.

</p>

<a name="Multithreaded-Debugging"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Watch-Expressions" accesskey="p" rel="prev">Watch Expressions</a>, Up: <a href="#GDB-Graphical-Interface" accesskey="u" rel="up">GDB Graphical Interface</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Multithreaded-Debugging-1"></a>
<h4 class="subsubsection">27.6.5.8 Multithreaded Debugging</h4>
<a name="index-Multithreaded-debugging-in-GDB"></a>
<a name="index-Non_002dstop-debugging-in-GDB"></a>

<p>In GDB’s <em>all-stop mode</em>, whenever your program stops, all
execution threads stop.  Likewise, whenever you restart the program,
all threads start executing.  See <a href="http://sourceware.org/gdb/current/onlinedocs/gdb/All_002dStop-Mode.html#All_002dStop-Mode">All-Stop Mode</a> in <cite>The GNU debugger</cite>.  For some multi-threaded targets, GDB supports
a further mode of operation, called <em>non-stop mode</em>, in which you
can examine stopped program threads in the debugger while other
threads continue to execute freely.  See <a href="http://sourceware.org/gdb/current/onlinedocs/gdb/Non_002dStop-Mode.html#Non_002dStop-Mode">Non-Stop
Mode</a> in <cite>The GNU debugger</cite>.  Versions of GDB prior to 7.0 do not
support non-stop mode, and it does not work on all targets.

</p>
<a name="index-gdb_002dnon_002dstop_002dsetting"></a>
<p>The variable <code>gdb-non-stop-setting</code> determines whether Emacs
runs GDB in all-stop mode or non-stop mode.  The default is <code>t</code>,
which means it tries to use non-stop mode if that is available.  If
you change the value to <code>nil</code>, or if non-stop mode is
unavailable, Emacs runs GDB in all-stop mode.  The variable takes
effect when Emacs begins a debugging session; if you change its value,
you should restart any active debugging session.

</p>
<a name="index-gdb_002dswitch_002dwhen_002danother_002dstopped"></a>
<p>When a thread stops in non-stop mode, Emacs usually switches to that
thread.  If you don’t want Emacs to do this switch if another stopped
thread is already selected, change the variable
<code>gdb-switch-when-another-stopped</code> to <code>nil</code>.

</p>
<a name="index-gdb_002dswitch_002dreasons"></a>
<p>Emacs can decide whether or not to switch to the stopped thread
depending on the reason which caused the stop.  Customize the variable
<code>gdb-switch-reasons</code> to select the stop reasons which will cause
a thread switch.

</p>
<a name="index-gdb_002dstopped_002dfunctions"></a>
<p>The variable <code>gdb-stopped-functions</code> allows you to execute your
functions whenever some thread stops.

</p>
<p>In non-stop mode, you can switch between different modes for GUD
execution control commands.

</p>
<a name="index-gdb_002dgud_002dcontrol_002dall_002dthreads"></a>
<dl compact="compact">
<dt><em>Non-stop/A</em></dt>
<dd>
<p>When <code>gdb-gud-control-all-threads</code> is <code>t</code> (the default
value), interruption and continuation commands apply to all threads,
so you can halt or continue all your threads with one command using
<code>gud-stop-subjob</code> and <code>gud-cont</code>, respectively.  The
‘<samp>Go</samp>’ button is shown on the tool bar when at least one thread is
stopped, whereas ‘<samp>Stop</samp>’ button is shown when at least one thread
is running.

</p>
</dd>
<dt><em>Non-stop/T</em></dt>
<dd>
<p>When <code>gdb-gud-control-all-threads</code> is <code>nil</code>, only the
current thread is stopped/continued.  ‘<samp>Go</samp>’ and ‘<samp>Stop</samp>’
buttons on the GUD tool bar are shown depending on the state of
current thread.

</p></dd>
</dl>

<p>You can change the current value of <code>gdb-gud-control-all-threads</code>
from the tool bar or from ‘<samp>GUD-&gt;GDB-MI</samp>’ menu.

</p>
<p>Stepping commands always apply to the current thread.

</p>
<p>In non-stop mode, you can interrupt/continue your threads without
selecting them.  Hitting <kbd>i</kbd> in threads buffer interrupts thread
under point, <kbd>c</kbd> continues it, <kbd>s</kbd> steps through.  More such
commands may be added in the future.

</p>
<p>Note that when you interrupt a thread, it stops with the
‘<samp>signal received</samp>’ reason.  If that reason is included in your
<code>gdb-switch-reasons</code> (it is by default), Emacs will switch to
that thread.

</p>

<a name="Executing-Lisp"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Lisp-Libraries" accesskey="n" rel="next">Lisp Libraries</a>, Previous: <a href="#Debuggers" accesskey="p" rel="prev">Debuggers</a>, Up: <a href="#Building" accesskey="u" rel="up">Building</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Executing-Lisp-Expressions"></a>
<h3 class="section">27.7 Executing Lisp Expressions</h3>

<p>Emacs has major modes for several variants of Lisp.  They use the
same editing commands as other programming language modes
(see <a href="#Programs">Programs</a>).  In addition, they provide special commands for
executing Lisp expressions.

</p>
<dl compact="compact">
<dt>Emacs Lisp mode</dt>
<dd><p>The mode for editing Emacs Lisp source files.  It defines <kbd>C-M-x</kbd>
to evaluate the current top-level Lisp expression.  See <a href="#Lisp-Eval">Lisp Eval</a>.

</p>
</dd>
<dt>Lisp Interaction mode</dt>
<dd><p>The mode for an interactive Emacs Lisp session.  It defines <kbd>C-j</kbd>
to evaluate the expression before point and insert its value in the
buffer.  See <a href="#Lisp-Interaction">Lisp Interaction</a>.

</p>
</dd>
<dt>Lisp mode</dt>
<dd><p>The mode for editing source files of programs that run in Lisps other
than Emacs Lisp.  It defines <kbd>C-M-x</kbd> to evaluate the current
top-level expression in an external Lisp.  See <a href="#External-Lisp">External Lisp</a>.

</p>
</dd>
<dt>Inferior Lisp mode</dt>
<dd><p>The mode for an interactive session with an external Lisp which is
being run as a subprocess (or <em>inferior process</em>) of Emacs.
See <a href="#External-Lisp">External Lisp</a>.

</p>
</dd>
<dt>Scheme mode</dt>
<dd><p>Like Lisp mode, but for Scheme programs.

</p>
</dd>
<dt>Inferior Scheme mode</dt>
<dd><p>Like Inferior Lisp mode, but for Scheme.

</p></dd>
</dl>


<a name="Lisp-Libraries"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Lisp-Eval" accesskey="n" rel="next">Lisp Eval</a>, Previous: <a href="#Executing-Lisp" accesskey="p" rel="prev">Executing Lisp</a>, Up: <a href="#Building" accesskey="u" rel="up">Building</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Libraries-of-Lisp-Code-for-Emacs"></a>
<h3 class="section">27.8 Libraries of Lisp Code for Emacs</h3>
<a name="index-libraries"></a>
<a name="index-loading-Lisp-code"></a>

<p>Emacs Lisp code is stored in files whose names conventionally end in
<samp>.el</samp>.  Such files are automatically visited in Emacs Lisp mode.

</p>
<a name="index-byte-code"></a>
<p>Emacs Lisp code can be compiled into byte-code, which loads faster,
takes up less space, and executes faster.  By convention, compiled
Emacs Lisp code goes in a separate file whose name ends in
‘<samp>.elc</samp>’.  For example, the compiled code for <samp>foo.el</samp> goes in
<samp>foo.elc</samp>.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Byte-Compilation">Byte Compilation</a> in <cite>the
Emacs Lisp Reference Manual</cite>.

</p>
<a name="index-load_002dfile"></a>
<p>To <em>load</em> an Emacs Lisp file, type <kbd>M-x load-file</kbd>.  This
command reads a file name using the minibuffer, and executes the
contents of that file as Emacs Lisp code.  It is not necessary to
visit the file first; this command reads the file directly from disk,
not from an existing Emacs buffer.

</p>
<a name="index-load"></a>
<a name="index-load_002dlibrary"></a>
<a name="index-load_002dprefer_002dnewer"></a>
<a name="index-load-path-for-Emacs-Lisp"></a>
<p>If an Emacs Lisp file is installed in the Emacs Lisp <em>load path</em>
(defined below), you can load it by typing <kbd>M-x load-library</kbd>,
instead of using <kbd>M-x load-file</kbd>.  The <kbd>M-x load-library</kbd>
command prompts for a <em>library name</em> rather than a file name; it
searches through each directory in the Emacs Lisp load path, trying to
find a file matching that library name.  If the library name is
‘<samp><var>foo</var></samp>’, it tries looking for files named
<samp><var>foo</var>.elc</samp>, <samp><var>foo</var>.el</samp>, and <samp><var>foo</var></samp>.  The
default behavior is to load the first file found.  This command
prefers <samp>.elc</samp> files over <samp>.el</samp> files because compiled files
load and run faster.  If it finds that <samp><var>lib</var>.el</samp> is newer
than <samp><var>lib</var>.elc</samp>, it issues a warning, in case someone made
changes to the <samp>.el</samp> file and forgot to recompile it, but loads
the <samp>.elc</samp> file anyway.  (Due to this behavior, you can save
unfinished edits to Emacs Lisp source files, and not recompile until
your changes are ready for use.)  If you set the option
<code>load-prefer-newer</code> to a non-<code>nil</code> value, however, then
rather than the procedure described above, Emacs loads whichever
version of the file is newest.

</p>
<p>Emacs Lisp programs usually load Emacs Lisp files using the
<code>load</code> function.  This is similar to <code>load-library</code>, but is
lower-level and accepts additional arguments.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#How-Programs-Do-Loading">How Programs Do
Loading</a> in <cite>the Emacs Lisp Reference Manual</cite>.

</p>
<a name="index-load_002dpath"></a>
<p>The Emacs Lisp load path is specified by the variable
<code>load-path</code>.  Its value should be a list of directories
(strings).  These directories are searched, in the specified order, by
the <kbd>M-x load-library</kbd> command, the lower-level <code>load</code>
function, and other Emacs functions that find Emacs Lisp libraries.
An entry in <code>load-path</code> can also have the special value
<code>nil</code>, which stands for the current default directory, but it is
almost always a bad idea to use this, because its meaning will depend
on the buffer that is current when <code>load-path</code> is used by Emacs.
(If you find yourself wishing that <code>nil</code> were in the list, most
likely what you really want is to use <kbd>M-x load-file</kbd>.)

</p>
<p>The default value of <code>load-path</code> is a list of directories where
the Lisp code for Emacs itself is stored.  If you have libraries of
your own in another directory, you can add that directory to the load
path.  Unlike most other variables described in this manual,
<code>load-path</code> cannot be changed via the Customize interface
(see <a href="#Easy-Customization">Easy Customization</a>), but you can add a directory to it by
putting a line like this in your init file (see <a href="#Init-File">Init File</a>):

</p>
<div class="example">
<pre class="example">(add-to-list 'load-path "/path/to/my/lisp/library")
</pre></div>

<p>It is customary to put locally installed libraries in the
<samp>site-lisp</samp> directory that is already in the default value of
<code>load-path</code>, or in some subdirectory of <samp>site-lisp</samp>.  This
way, you don’t need to modify the default value of <code>load-path</code>.

</p>
<a name="index-autoload"></a>
<p>Some commands are <em>autoloaded</em>; when you run them, Emacs
automatically loads the associated library first.  For instance, the
<kbd>M-x compile</kbd> command (see <a href="#Compilation">Compilation</a>) is autoloaded; if you
call it, Emacs automatically loads the <code>compile</code> library first.
In contrast, the command <kbd>M-x recompile</kbd> is not autoloaded, so it
is unavailable until you load the <code>compile</code> library.

</p>
<a name="index-help_002denable_002dautoload"></a>
<p>Automatic loading can also occur when you look up the documentation
of an autoloaded command (see <a href="#Name-Help">Name Help</a>), if the documentation
refers to other functions and variables in its library (loading the
library lets Emacs properly set up the hyperlinks in the <samp>*Help*</samp>
buffer).  To disable this feature, change the variable
<code>help-enable-autoload</code> to <code>nil</code>.

</p>
<a name="index-help_002denable_002dcompletion_002dautoload"></a>
<p>Automatic loading also occurs when completing names for
<code>describe-variable</code> and <code>describe-function</code>, based on the
prefix being completed.  To disable this feature, change the variable
<code>help-enable-completion-autoload</code> to <code>nil</code>.

</p>
<a name="index-load_002ddangerous_002dlibraries"></a>
<a name="index-Lisp-files-byte_002dcompiled-by-XEmacs"></a>
<p>By default, Emacs refuses to load compiled Lisp files which were
compiled with XEmacs, a modified version of Emacs—they can cause
Emacs to crash.  Set the variable <code>load-dangerous-libraries</code> to
<code>t</code> if you want to try loading them.

</p>
<p>Once you put your library in a directory where Emacs can find and load it, you may wish to make it available at startup. This is useful when the library defines features that should be available automatically on demand, and manually loading the library is thus inconvenient. In these cases, make sure the library will be loaded by adding suitable forms to your init file: either <code>load</code> or <code>require</code> (if you always need to load the library at startup), or <code>autoload</code> if you need Emacs to load the library when some command or function is invoked. 例如：
</p>
<div class="smalllisp">
<pre class="smalllisp"> ;; Loads <samp>my-shining-package.elc</samp> unconditionally.
 (require 'my-shining-package)
</pre><pre class="smalllisp"> ;; Will load <samp>my-shining-package.elc</samp> when <code>my-func</code> is invoked.
 (autoload 'my-func "my-shining-package")
</pre></div>

<p>Note that installing a package using <code>package-install</code>
(see <a href="#Package-Installation">Package Installation</a>) takes care of placing the package’s
Lisp files in a directory where Emacs will find it, and also writes
the necessary initialization code into your init files, making the
above manual customizations unnecessary.

</p>

<a name="Lisp-Eval"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Lisp-Interaction" accesskey="n" rel="next">Lisp Interaction</a>, Previous: <a href="#Lisp-Libraries" accesskey="p" rel="prev">Lisp Libraries</a>, Up: <a href="#Building" accesskey="u" rel="up">Building</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Evaluating-Emacs-Lisp-Expressions"></a>
<h3 class="section">27.9 Evaluating Emacs Lisp Expressions</h3>
<a name="index-Emacs-Lisp-mode"></a>
<a name="index-mode_002c-Emacs-Lisp"></a>
<a name="index-evaluation_002c-Emacs-Lisp"></a>

<a name="index-emacs_002dlisp_002dmode"></a>
<p>Emacs Lisp mode is the major mode for editing Emacs Lisp.  Its mode
command is <kbd>M-x emacs-lisp-mode</kbd>.

</p>
<p>Emacs provides several commands for evaluating Emacs Lisp
expressions.  You can use these commands in Emacs Lisp mode, to test
your Emacs Lisp code as it is being written.  For example, after
re-writing a function, you can evaluate the function definition to
make it take effect for subsequent function calls.  These commands are
also available globally, and can be used outside Emacs Lisp mode.

</p>
<dl compact="compact">
<dt><kbd>M-:</kbd></dt>
<dd><p>Read a single Emacs Lisp expression in the minibuffer, evaluate it,
and print the value in the echo area (<code>eval-expression</code>).

</p></dd>
<dt><kbd>C-x C-e</kbd></dt>
<dd><p>Evaluate the Emacs Lisp expression before point, and print the value
in the echo area (<code>eval-last-sexp</code>).

</p></dd>
<dt><kbd>C-M-x</kbd> <span class="roman">(in Emacs Lisp mode)</span></dt>
<dt><kbd>M-x eval-defun</kbd></dt>
<dd><p>Evaluate the defun containing or after point, and print the value in
the echo area (<code>eval-defun</code>).

</p></dd>
<dt><kbd>M-x eval-region</kbd></dt>
<dd><p>Evaluate all the Emacs Lisp expressions in the region.

</p></dd>
<dt><kbd>M-x eval-buffer</kbd></dt>
<dd><p>Evaluate all the Emacs Lisp expressions in the buffer.

</p></dd>
</dl>

<a name="index-M_002d_003a"></a>
<a name="index-eval_002dexpression"></a>
<p><kbd>M-:</kbd> (<code>eval-expression</code>) reads an expression using the
minibuffer, and evaluates it.  (Before evaluating the expression, the
current buffer switches back to the buffer that was current when you
typed <kbd>M-:</kbd>, not the minibuffer into which you typed the
expression.)

</p>
<a name="index-C_002dx-C_002de"></a>
<a name="index-eval_002dlast_002dsexp"></a>
<p>The command <kbd>C-x C-e</kbd> (<code>eval-last-sexp</code>) evaluates the
Emacs Lisp expression preceding point in the buffer, and displays the
value in the echo area.  When the result of an evaluation is an
integer, it is displayed together with the value in other formats
(octal, hexadecimal, and character if
<code>eval-expression-print-maximum-character</code>, described below,
allows it).

</p>
<p>If <kbd>M-:</kbd> or <kbd>C-x C-e</kbd> is given a prefix argument, it inserts
the value into the current buffer at point, rather than displaying it
in the echo area.  If the prefix argument is zero, any integer output
is inserted together with its value in other formats (octal,
hexadecimal, and character).  Such a prefix argument also prevents
abbreviation of the output according to the variables
<code>eval-expression-print-level</code> and
<code>eval-expression-print-length</code> (see below).  Similarly, a prefix
argument of <code>-1</code> overrides the effect of
<code>eval-expression-print-length</code>.

</p>
<a name="index-C_002dM_002dx-_0028Emacs-Lisp-mode_0029"></a>
<a name="index-eval_002ddefun"></a>
<p>The <code>eval-defun</code> command is bound to <kbd>C-M-x</kbd> in Emacs Lisp
mode.  It evaluates the top-level Lisp expression containing or
following point, and prints the value in the echo area.  In this
context, a top-level expression is referred to as a “defun”, but it
need not be an actual <code>defun</code> (function definition).  In
particular, this command treats <code>defvar</code> expressions specially.
Normally, evaluating a <code>defvar</code> expression does nothing if the
variable it defines already has a value.  But this command
unconditionally resets the variable to the initial value specified by
the <code>defvar</code>; this is convenient for debugging Emacs Lisp
programs.  <code>defcustom</code> and <code>defface</code> expressions are treated
similarly.  Note that the other commands documented in this section do
not have this special feature.

</p>
<p>With a prefix argument, <kbd>C-M-x</kbd> instruments the function
definition for Edebug, the Emacs Lisp Debugger.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Instrumenting">Instrumenting for Edebug</a> in <cite>the Emacs Lisp Reference Manual</cite>.

</p>
<a name="index-eval_002dregion"></a>
<a name="index-eval_002dbuffer"></a>
<p>The command <kbd>M-x eval-region</kbd> parses the text of the region as
one or more Lisp expressions, evaluating them one by one.  <kbd>M-x
eval-buffer</kbd> is similar but evaluates the entire buffer.

</p>
<a name="index-eval_002dexpression_002dprint_002dlevel"></a>
<a name="index-eval_002dexpression_002dprint_002dlength"></a>
<a name="index-eval_002dexpression_002dprint_002dmaximum_002dcharacter"></a>
<a name="index-eval_002dexpression_002ddebug_002don_002derror"></a>
<p>The options <code>eval-expression-print-level</code> and
<code>eval-expression-print-length</code> control the maximum depth and
length of lists to print in the result of the evaluation commands
before abbreviating them.  Supplying a zero prefix argument to
<code>eval-expression</code> or <code>eval-last-sexp</code> causes lists to be
printed in full.  <code>eval-expression-debug-on-error</code> controls
whether evaluation errors invoke the debugger when these commands are
used; its default is <code>t</code>.
<code>eval-expression-print-maximum-character</code> prevents integers which
are larger than it from being displayed as characters.

</p>

<a name="Lisp-Interaction"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#External-Lisp" accesskey="n" rel="next">External Lisp</a>, Previous: <a href="#Lisp-Eval" accesskey="p" rel="prev">Lisp Eval</a>, Up: <a href="#Building" accesskey="u" rel="up">Building</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Lisp-Interaction-Buffers"></a>
<h3 class="section">27.10 Lisp Interaction Buffers</h3>

<a name="index-lisp_002dinteraction_002dmode"></a>
<p>When Emacs starts up, it contains a buffer named <samp>*scratch*</samp>,
which is provided for evaluating Emacs Lisp expressions interactively.
Its major mode is Lisp Interaction mode.  You can also enable Lisp
Interaction mode by typing <kbd>M-x lisp-interaction-mode</kbd>.

</p>
<a name="index-eval_002dprint_002dlast_002dsexp"></a>
<a name="index-C_002dj-_0028Lisp-Interaction-mode_0029"></a>
<p>In the <samp>*scratch*</samp> buffer, and other Lisp Interaction mode
buffers, <kbd>C-j</kbd> (<code>eval-print-last-sexp</code>) evaluates the Lisp
expression before point, and inserts the value at point.  Thus, as you
type expressions into the buffer followed by <kbd>C-j</kbd> after each
expression, the buffer records a transcript of the evaluated
expressions and their values.  All other commands in Lisp Interaction
mode are the same as in Emacs Lisp mode.

</p>
<a name="index-initial_002dscratch_002dmessage"></a>
<p>At startup, the <samp>*scratch*</samp> buffer contains a short message, in
the form of a Lisp comment, that explains what it is for.  This
message is controlled by the variable <code>initial-scratch-message</code>,
which should be either a documentation string, or <code>nil</code> (which means to
suppress the message).

</p>
<a name="index-ielm"></a>
<p>An alternative way of evaluating Emacs Lisp expressions
interactively is to use Inferior Emacs Lisp mode, which provides an
interface rather like Shell mode (see <a href="#Shell-Mode">Shell Mode</a>) for evaluating
Emacs Lisp expressions.  Type <kbd>M-x ielm</kbd> to create an
<samp>*ielm*</samp> buffer which uses this mode.  For more information, see
that command’s documentation.

</p>

<a name="External-Lisp"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Lisp-Interaction" accesskey="p" rel="prev">Lisp Interaction</a>, Up: <a href="#Building" accesskey="u" rel="up">Building</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Running-an-External-Lisp"></a>
<h3 class="section">27.11 Running an External Lisp</h3>
<a name="index-Lisp-mode"></a>
<a name="index-mode_002c-Lisp"></a>
<a name="index-Common-Lisp"></a>

<p>Lisp mode is the major mode for editing programs written in
general-purpose Lisp dialects, such as Common Lisp.  Its mode command
is <kbd>M-x lisp-mode</kbd>.  Emacs uses Lisp mode automatically for files
whose names end in <samp>.l</samp>, <samp>.lsp</samp>, or <samp>.lisp</samp>.

</p>
<a name="index-run_002dlisp"></a>
<a name="index-inferior_002dlisp_002dprogram"></a>
<a name="index-C_002dx-C_002dz"></a>
<p>You can run an external Lisp session as a subprocess or
<em>inferior process</em> of Emacs, and pass expressions to it to be
evaluated.  To begin an external Lisp session, type <kbd>M-x
run-lisp</kbd>.  This runs the program named <code>lisp</code>, and sets it up
so that both input and output go through an Emacs buffer named
<samp>*inferior-lisp*</samp>.  To change the name of the Lisp program run by
<kbd>M-x run-lisp</kbd>, change the variable <code>inferior-lisp-program</code>.

</p>
<p>The major mode for the <samp>*lisp*</samp> buffer is Inferior Lisp mode,
which combines the characteristics of Lisp mode and Shell mode
(see <a href="#Shell-Mode">Shell Mode</a>).  To send input to the Lisp session, go to the
end of the <samp>*lisp*</samp> buffer and type the input, followed by
<tt class="key">RET</tt>.  Terminal output from the Lisp session is automatically
inserted in the buffer.

</p>
<a name="index-C_002dM_002dx-_0028Lisp-mode_0029"></a>
<a name="index-lisp_002deval_002ddefun"></a>
<p>When you edit a Lisp program in Lisp mode, you can type <kbd>C-M-x</kbd>
(<code>lisp-eval-defun</code>) to send an expression from the Lisp mode
buffer to a Lisp session that you had started with <kbd>M-x run-lisp</kbd>.
The expression sent is the top-level Lisp expression at or following
point.  The resulting value goes as usual into the
<samp>*inferior-lisp*</samp> buffer.  Note that the effect of <kbd>C-M-x</kbd> in
Lisp mode is thus very similar to its effect in Emacs Lisp mode
(see <a href="#Lisp-Eval">Lisp Eval</a>), except that the expression is sent to a different
Lisp environment instead of being evaluated in Emacs.

</p>
<a name="index-scheme_002dmode"></a>
<a name="index-run_002dscheme"></a>
<a name="index-Scheme-mode"></a>
<a name="index-mode_002c-Scheme"></a>
<a name="index-C_002dM_002dx-_0028Scheme-mode_0029"></a>
<p>The facilities for editing Scheme code, and for sending expressions
to a Scheme subprocess, are very similar.  Scheme source files are
edited in Scheme mode, which can be explicitly enabled with <kbd>M-x
scheme-mode</kbd>.  You can initiate a Scheme session by typing <kbd>M-x
run-scheme</kbd> (the buffer for interacting with Scheme is named
<samp>*scheme*</samp>), and send expressions to it by typing <kbd>C-M-x</kbd>.

</p><hr>
<a name="Maintaining"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Abbrevs" accesskey="n" rel="next">Abbrevs</a>, Previous: <a href="#Building" accesskey="p" rel="prev">Building</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Maintaining-Large-Programs"></a>
<h2 class="chapter">28 Maintaining Large Programs</h2>

<p>This chapter describes Emacs features for maintaining medium- to
large-size programs and packages.  These features include:

</p>
<ul class="no-bullet">
<li>- Unified interface to Support for Version Control Systems
(<acronym>VCS</acronym>) that record the history of changes to source files.



</li><li>- Commands for handling programming projects.



</li><li>- A specialized mode for maintaining <samp>ChangeLog</samp> files that provide
a chronological log of program changes.



</li><li>- <acronym>Xref</acronym>, a set of commands for displaying definitions of
symbols (a.k.a. “identifiers”) and their references.



</li><li>- <acronym>EDE</acronym>, the Emacs’s own IDE.



</li><li>- A mode for merging changes to program sources made on separate
branches of development.

</li></ul>

<p>If you are maintaining a large Lisp program, then in addition to the
features described here, you may find the Emacs Lisp Regression
Testing (<acronym>ERT</acronym>) library useful (see <a href="https://www.gnu.org/software/emacs/manual/html_mono/ert.html#Top">ERT</a> in <cite>Emacs
Lisp Regression Testing</cite>).

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Version-Control" accesskey="1">Version Control</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Using version control systems.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Projects" accesskey="2">Projects</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands for handling source files in a project.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Change-Log" accesskey="3">Change Log</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Maintaining a change history for your program.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Xref" accesskey="4">Xref</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Find definitions and references of any function,
                          method, struct, macro, … in your program.

</td></tr>
<tr><td align="left" valign="top">• <a href="#EDE" accesskey="5">EDE</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">An integrated development environment for Emacs.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Emerge" accesskey="6">Emerge</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">A convenient way of merging two versions of a program.

</td></tr>
</tbody></table>


<a name="Version-Control"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Projects" accesskey="n" rel="next">Projects</a>, Up: <a href="#Maintaining" accesskey="u" rel="up">Maintaining</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Version-Control-1"></a>
<h3 class="section">28.1 Version Control</h3>
<a name="index-version-control"></a>

<p>A <em>version control system</em> is a program that can record multiple
versions of a source file, storing information such as the creation
time of each version, who made it, and a description of what was
changed.

</p>
<a name="index-VC"></a>
<p>The Emacs version control interface is called <em>VC</em>.  VC
commands work with several different version control systems;
currently, it supports Bazaar, CVS, Git, Mercurial, Monotone, RCS,
SRC, SCCS/CSSC, and Subversion.  Of these, the GNU project distributes
CVS, RCS, and Bazaar.

</p>
<p>VC is enabled automatically whenever you visit a file governed by a
version control system.  To disable VC entirely, set the customizable
variable <code>vc-handled-backends</code> to <code>nil</code>
(see <a href="#Customizing-VC">Customizing VC</a>).

</p>
<a name="index-vc_002drefresh_002dstate"></a>
<a name="index-vc_002dstate_002drefresh"></a>
<p>To update the VC state information for the file visited in the
current buffer, use the command <code>vc-refresh-state</code>.  This command
is useful when you perform version control commands outside Emacs
(e.g., from the shell prompt), or if you put the buffer’s file under a
different version control system, or remove it from version control
entirely.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Introduction-to-VC" accesskey="1">Introduction to VC</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How version control works in general.

</td></tr>
<tr><td align="left" valign="top">• <a href="#VC-Mode-Line" accesskey="2">VC Mode Line</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How the mode line shows version control status.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Basic-VC-Editing" accesskey="3">Basic VC Editing</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to edit a file under version control.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Log-Buffer" accesskey="4">Log Buffer</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Features available in log entry buffers.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Registering" accesskey="5">Registering</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Putting a file under version control.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Old-Revisions" accesskey="6">Old Revisions</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Examining and comparing old versions.

</td></tr>
<tr><td align="left" valign="top">• <a href="#VC-Change-Log" accesskey="7">VC Change Log</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Viewing the VC Change Log.

</td></tr>
<tr><td align="left" valign="top">• <a href="#VC-Undo" accesskey="8">VC Undo</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Canceling changes before or after committing.

</td></tr>
<tr><td align="left" valign="top">• <a href="#VC-Ignore" accesskey="9">VC Ignore</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Ignore files under version control system.

</td></tr>
<tr><td align="left" valign="top">• <a href="#VC-Directory-Mode">VC Directory Mode</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Listing files managed by version control.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Branches">Branches</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Multiple lines of development.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Miscellaneous-VC">Miscellaneous VC</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Various other commands and features of VC.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Customizing-VC">Customizing VC</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Variables that change VC’s behavior.

</td></tr>
</tbody></table>


<a name="Introduction-to-VC"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#VC-Mode-Line" accesskey="n" rel="next">VC Mode Line</a>, Up: <a href="#Version-Control" accesskey="u" rel="up">Version Control</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Introduction-to-Version-Control"></a>
<h4 class="subsection">28.1.1 Introduction to Version Control</h4>

<p>VC allows you to use a version control system from within Emacs,
integrating the version control operations smoothly with editing.  It
provides a uniform interface for common operations in many version
control operations.

</p>
<p>Some uncommon or intricate version control operations, such as
altering repository settings, are not supported in VC.  You should
perform such tasks outside VC, e.g., via the command line.

</p>
<p>This section provides a general overview of version control, and
describes the version control systems that VC supports.  You can skip
this section if you are already familiar with the version control system
you want to use.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Why-Version-Control_003f" accesskey="1">Why Version Control?</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Understanding the problems it addresses.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Version-Control-Systems" accesskey="2">Version Control Systems</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Supported version control back-end systems.

</td></tr>
<tr><td align="left" valign="top">• <a href="#VCS-Concepts" accesskey="3">VCS Concepts</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Words and concepts related to version control.

</td></tr>
<tr><td align="left" valign="top">• <a href="#VCS-Merging" accesskey="4">VCS Merging</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How file conflicts are handled.

</td></tr>
<tr><td align="left" valign="top">• <a href="#VCS-Changesets" accesskey="5">VCS Changesets</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How changes are grouped.

</td></tr>
<tr><td align="left" valign="top">• <a href="#VCS-Repositories" accesskey="6">VCS Repositories</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Where version control repositories are stored.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Types-of-Log-File" accesskey="7">Types of Log File</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The VCS log in contrast to the ChangeLog.

</td></tr>
</tbody></table>


<a name="Why-Version-Control_003f"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Version-Control-Systems" accesskey="n" rel="next">Version Control Systems</a>, Up: <a href="#Introduction-to-VC" accesskey="u" rel="up">Introduction to VC</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Understanding-the-Problems-it-Addresses"></a>
<h4 class="subsubsection">28.1.1.1 Understanding the Problems it Addresses</h4>

<p>Version control systems provide you with three important
capabilities:

</p>
<ul>
<li> <em>Reversibility</em>: the ability to back up to a previous state if you
discover that some modification you did was a mistake or a bad idea.



</li><li> <em>Concurrency</em>: the ability to have many people modifying the same
collection of files knowing that conflicting modifications can be
detected and resolved.



</li><li> <em>History</em>: the ability to attach historical data to your data,
such as explanatory comments about the intention behind each change.
Even for a programmer working solo, change histories are an important
aid to memory; for a multi-person project, they are a vitally
important form of communication among developers.

</li></ul>


<a name="Version-Control-Systems"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#VCS-Concepts" accesskey="n" rel="next">VCS Concepts</a>, Previous: <a href="#Why-Version-Control_003f" accesskey="p" rel="prev">Why Version Control?</a>, Up: <a href="#Introduction-to-VC" accesskey="u" rel="up">Introduction to VC</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Supported-Version-Control-Systems"></a>
<h4 class="subsubsection">28.1.1.2 Supported Version Control Systems</h4>

<a name="index-back-end-_0028version-control_0029"></a>
<p>VC currently works with many different version control systems,
which it refers to as <em>back ends</em>:

</p>
<ul>
<li> <a name="index-SCCS"></a>

SCCS was the first version control system ever built, and was long ago
superseded by more advanced ones.  VC compensates for certain features
missing in SCCS (e.g., tag names for releases) by implementing them
itself.  Other VC features, such as multiple branches, are simply
unavailable.  Since SCCS is non-free, we recommend avoiding it.



</li><li> <a name="index-CSSC"></a>

CSSC is a free replacement for SCCS.  You should use CSSC only if, for
some reason, you cannot use a more recent and better-designed version
control system.



</li><li> <a name="index-RCS"></a>

RCS is the free version control system around which VC was initially
built.  It is relatively primitive: it cannot be used over the
network, and works at the level of individual files.  Almost
everything you can do with RCS can be done through VC.



</li><li> <a name="index-CVS"></a>

CVS is the free version control system that was, until circa 2008,
used by the majority of free software projects.  Since then, it has
been superseded by newer systems.  CVS allows concurrent multi-user
development either locally or over the network.  Unlike newer systems,
it lacks support for atomic commits and file moving/renaming.  VC
supports all basic editing operations under CVS.



</li><li> <a name="index-SVN"></a>
<a name="index-Subversion"></a>

Subversion (svn) is a free version control system designed to be
similar to CVS but without its problems (e.g., it supports atomic
commits of filesets, and versioning of directories, symbolic links,
meta-data, renames, copies, and deletes).



</li><li> <a name="index-git"></a>

Git is a decentralized version control system originally invented by
Linus Torvalds to support development of Linux (his kernel).  VC
supports many common Git operations, but others, such as repository
syncing, must be done from the command line.



</li><li> <a name="index-hg"></a>
<a name="index-Mercurial"></a>

Mercurial (hg) is a decentralized version control system broadly
resembling Git.  VC supports most Mercurial commands, with the
exception of repository sync operations.



</li><li> <a name="index-bzr"></a>
<a name="index-Bazaar"></a>

Bazaar (bzr) is a decentralized version control system that supports
both repository-based and decentralized versioning.  VC supports most
basic editing operations under Bazaar.



</li><li> <a name="index-SRC"></a>
<a name="index-src"></a>

SRC (src) is RCS, reloaded—a specialized version-control system
designed for single-file projects worked on by only one person.  It
allows multiple files with independent version-control histories to
exist in one directory, and is thus particularly well suited for
maintaining small documents, scripts, and dotfiles.  While it uses RCS
for revision storage, it presents a modern user interface featuring
lockless operation and integer sequential version numbers.  VC
supports almost all SRC operations.

</li></ul>


<a name="VCS-Concepts"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#VCS-Merging" accesskey="n" rel="next">VCS Merging</a>, Previous: <a href="#Version-Control-Systems" accesskey="p" rel="prev">Version Control Systems</a>, Up: <a href="#Introduction-to-VC" accesskey="u" rel="up">Introduction to VC</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Concepts-of-Version-Control"></a>
<h4 class="subsubsection">28.1.1.3 Concepts of Version Control</h4>

<a name="index-repository"></a>
<a name="index-registered-file"></a>
<p>When a file is under version control, we say that it is
<em>registered</em> in the version control system.  The system has a
<em>repository</em> which stores both the file’s present state and its
change history—enough to reconstruct the current version or any
earlier version.  The repository also contains other information, such
as <em>log entries</em> that describe the changes made to each file.

</p>
<a name="index-work-file"></a>
<a name="index-checking-out-files"></a>
<p>The copy of a version-controlled file that you actually edit is
called the <em>work file</em>.  You can change each work file as you
would an ordinary file.  After you are done with a set of changes, you
may <em>commit</em> (or <em>check in</em>) the changes; this records the
changes in the repository, along with a descriptive log entry.

</p>
<a name="index-working-tree"></a>
<p>A directory tree of work files is called a <em>working tree</em>.

</p>
<a name="index-revision"></a>
<a name="index-revision-ID"></a>
<p>Each commit creates a new <em>revision</em> in the repository.  The
version control system keeps track of all past revisions and the
changes that were made in each revision.  Each revision is named by a
<em>revision ID</em>, whose format depends on the version control system;
in the simplest case, it is just an integer.

</p>
<p>To go beyond these basic concepts, you will need to understand three
aspects in which version control systems differ.  As explained in the
next three sections, they can be lock-based or merge-based; file-based
or changeset-based; and centralized or decentralized.  VC handles all
these modes of operation, but it cannot hide the differences.

</p>

<a name="VCS-Merging"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#VCS-Changesets" accesskey="n" rel="next">VCS Changesets</a>, Previous: <a href="#VCS-Concepts" accesskey="p" rel="prev">VCS Concepts</a>, Up: <a href="#Introduction-to-VC" accesskey="u" rel="up">Introduction to VC</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Merge_002dbased-vs-Lock_002dbased-Version-Control"></a>
<h4 class="subsubsection">28.1.1.4 Merge-based vs Lock-based Version Control</h4>

<p>A version control system typically has some mechanism to coordinate
between users who want to change the same file.  There are two ways to
do this: merging and locking.

</p>
<a name="index-merging_002dbased-version"></a>
<p>In a version control system that uses merging, each user may modify
a work file at any time.  The system lets you <em>merge</em> your work
file, which may contain changes that have not been committed, with the
latest changes that others have committed.

</p>
<a name="index-locking_002dbased-version"></a>
<p>Older version control systems use a <em>locking</em> scheme instead.
Here, work files are normally read-only.  To edit a file, you ask the
version control system to make it writable for you by <em>locking</em>
it; only one user can lock a given file at any given time.  This
procedure is analogous to, but different from, the locking that Emacs
uses to detect simultaneous editing of ordinary files
(see <a href="#Interlocking">Interlocking</a>).  When you commit your changes, that unlocks
the file, and the work file becomes read-only again.  Other users may
then lock the file to make their own changes.

</p>
<p>Both locking and merging systems can have problems when multiple
users try to modify the same file at the same time.  Locking systems
have <em>lock conflicts</em>; a user may try to check a file out and be
unable to because it is locked.  In merging systems, <em>merge
conflicts</em> happen when you commit a change to a file that conflicts
with a change committed by someone else after your checkout.  Both
kinds of conflict have to be resolved by human judgment and
communication.  Experience has shown that merging is superior to
locking, both in convenience to developers and in minimizing the
number and severity of conflicts that actually occur.

</p>
<p>SCCS always uses locking.  RCS is lock-based by default but can be
told to operate in a merging style.  CVS and Subversion are
merge-based by default but can be told to operate in a locking mode.
Decentralized version control systems, such as Git and Mercurial, are
exclusively merging-based.

</p>
<p>VC mode supports both locking and merging version control.  The
terms “commit” and “update” are used in newer version control
systems; older lock-based systems use the terms “check in” and
“check out”.  VC hides the differences between them as much as
possible.

</p>

<a name="VCS-Changesets"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#VCS-Repositories" accesskey="n" rel="next">VCS Repositories</a>, Previous: <a href="#VCS-Merging" accesskey="p" rel="prev">VCS Merging</a>, Up: <a href="#Introduction-to-VC" accesskey="u" rel="up">Introduction to VC</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Changeset_002dbased-vs-File_002dbased-Version-Control"></a>
<h4 class="subsubsection">28.1.1.5 Changeset-based vs File-based Version Control</h4>

<a name="index-file_002dbased-version-control"></a>
<p>On SCCS, RCS, CVS, and other early version control systems (and also
in SRC), version control operations are <em>file-based</em>: each file
has its own comment and revision history separate from that of all
other files.  Newer systems, beginning with Subversion, are
<em>changeset-based</em>: a commit may include changes to several files,
and the entire set of changes is handled as a unit.  Any comment
associated with the change does not belong to a single file, but to
the changeset itself.

</p>
<a name="index-changeset_002dbased-version-control"></a>
<p>Changeset-based version control is more flexible and powerful than
file-based version control; usually, when a change to multiple files
has to be reversed, it’s good to be able to easily identify and remove
all of it.

</p>

<a name="VCS-Repositories"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Types-of-Log-File" accesskey="n" rel="next">Types of Log File</a>, Previous: <a href="#VCS-Changesets" accesskey="p" rel="prev">VCS Changesets</a>, Up: <a href="#Introduction-to-VC" accesskey="u" rel="up">Introduction to VC</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Decentralized-vs-Centralized-Repositories"></a>
<h4 class="subsubsection">28.1.1.6 Decentralized vs Centralized Repositories</h4>

<a name="index-centralized-version-control"></a>
<a name="index-decentralized-version-control"></a>
<a name="index-distributed-version-control"></a>
<p>Early version control systems were designed around a
<em>centralized</em> model in which each project has only one repository
used by all developers.  SCCS, RCS, CVS, Subversion, and SRC share this
kind of model.  One of its drawbacks is that the repository is a choke
point for reliability and efficiency.

</p>
<p>GNU Arch pioneered the concept of <em>distributed</em> or
<em>decentralized</em> version control, later implemented in Git,
Mercurial, and Bazaar.  A project may have several different
repositories, and these systems support a sort of super-merge between
repositories that tries to reconcile their change histories.  In
effect, there is one repository for each developer, and repository
merges take the place of commit operations.

</p>
<p>VC helps you manage the traffic between your personal workfiles and
a repository.  Whether the repository is a single master, or one of a
network of peer repositories, is not something VC has to care about.

</p>

<a name="Types-of-Log-File"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#VCS-Repositories" accesskey="p" rel="prev">VCS Repositories</a>, Up: <a href="#Introduction-to-VC" accesskey="u" rel="up">Introduction to VC</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Types-of-Log-File-1"></a>
<h4 class="subsubsection">28.1.1.7 Types of Log File</h4>
<a name="index-types-of-log-file"></a>
<a name="index-log-File_002c-types-of"></a>
<a name="index-version-control-log"></a>

<p>Projects that use a version control system can have two types of log
for changes.  One is the log maintained by the version control system:
each time you commit a change, you fill out a <em>log entry</em> for the
change (see <a href="#Log-Buffer">Log Buffer</a>).  This is called the <em>version control
log</em>.

</p>
<p>The other kind of log is the file <samp>ChangeLog</samp> (see <a href="#Change-Log">Change Log</a>).  It provides a chronological record of all changes to a large
portion of a program—typically one directory and its subdirectories.
A small program would use one <samp>ChangeLog</samp> file; a large program
may have a <samp>ChangeLog</samp> file in each major directory.
See <a href="#Change-Log">Change Log</a>.  Programmers have used change logs since long
before version control systems.

</p>
<p>Changeset-based version systems typically maintain a changeset-based
modification log for the entire system, which makes change log files
somewhat redundant.  One advantage that they retain is that it is
sometimes useful to be able to view the transaction history of a
single directory separately from those of other directories.  Another
advantage is that commit logs can’t be fixed in many version control
systems.

</p>
<p>A project maintained with version control can use just the version
control log, or it can use both kinds of logs.  It can handle some
files one way and some files the other way.  Each project has its
policy, which you should follow.

</p>
<p>When the policy is to use both, you typically want to write an entry
for each change just once, then put it into both logs.  You can write
the entry in <samp>ChangeLog</samp>, then copy it to the log buffer with
<kbd>C-c C-a</kbd> when committing the change (see <a href="#Log-Buffer">Log Buffer</a>).  Or you
can write the entry in the log buffer while committing the change
(with the help of <kbd>C-c C-w</kbd>), and later use the <kbd>C-x v a</kbd>
command to copy it to <samp>ChangeLog</samp>
(see <a href="#Change-Logs-and-VC">Change Logs and VC</a>).

</p>

<a name="VC-Mode-Line"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Basic-VC-Editing" accesskey="n" rel="next">Basic VC Editing</a>, Previous: <a href="#Introduction-to-VC" accesskey="p" rel="prev">Introduction to VC</a>, Up: <a href="#Version-Control" accesskey="u" rel="up">Version Control</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Version-Control-and-the-Mode-Line"></a>
<h4 class="subsection">28.1.2 Version Control and the Mode Line</h4>
<a name="index-VC-mode-line-indicator"></a>

<p>When you visit a file that is under version control, Emacs indicates
this on the mode line.  For example, ‘<samp>Bzr-1223</samp>’ says that Bazaar
is used for that file, and the current revision ID is 1223.

</p>
<a name="index-version-control-status"></a>
<p>The character between the back-end name and the revision ID
indicates the <em>version control status</em> of the work file.  In a
merge-based version control system, a ‘<samp>-</samp>’ character indicates
that the work file is unmodified, and ‘<samp>:</samp>’ indicates that it has
been modified.  ‘<samp>!</samp>’ indicates that the file contains conflicts as
result of a recent merge operation (see <a href="#Merging">Merging</a>), or that the file
was removed from the version control.  Finally, ‘<samp>?</samp>’ means that
the file is under version control, but is missing from the working
tree.

</p>
<p>In a lock-based system, ‘<samp>-</samp>’ indicates an unlocked file, and
‘<samp>:</samp>’ a locked file; if the file is locked by another user (for
instance, ‘<samp>jim</samp>’), that is displayed as ‘<samp>RCS:jim:1.3</samp>’.
‘<samp>@</samp>’ means that the file was locally added, but not yet committed
to the master repository.

</p>
<p>On a graphical display, you can move the mouse over this mode line
indicator to pop up a tool-tip, which displays a more verbose
description of the version control status.  Pressing <kbd>mouse-1</kbd>
over the indicator pops up a menu of VC commands, identical to
‘<samp>Tools / Version Control</samp>’ on the menu bar.

</p>
<a name="index-auto_002drevert_002dcheck_002dvc_002dinfo"></a>
<p>When Auto Revert mode (see <a href="#Reverting">Reverting</a>) reverts a buffer that is
under version control, it updates the version control information in
the mode line.  However, Auto Revert mode may not properly update this
information if the version control status changes without changes to
the work file, from outside the current Emacs session.  If you set
<code>auto-revert-check-vc-info</code> to <code>t</code>, Auto Revert mode updates
the version control status information every
<code>auto-revert-interval</code> seconds, even if the work file itself is
unchanged.  The resulting CPU usage depends on the version control
system, but is usually not excessive.

</p>

<a name="Basic-VC-Editing"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Log-Buffer" accesskey="n" rel="next">Log Buffer</a>, Previous: <a href="#VC-Mode-Line" accesskey="p" rel="prev">VC Mode Line</a>, Up: <a href="#Version-Control" accesskey="u" rel="up">Version Control</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Basic-Editing-under-Version-Control"></a>
<h4 class="subsection">28.1.3 Basic Editing under Version Control</h4>

<a name="index-filesets_002c-VC"></a>
<a name="index-VC-filesets"></a>
<p>Most VC commands operate on <em>VC filesets</em>.  A VC fileset is a
collection of one or more files that a VC operation acts on.  When you
type VC commands in a buffer visiting a version-controlled file, the
VC fileset is simply that one file.  When you type them in a VC
Directory buffer, and some files in it are marked, the VC fileset
consists of the marked files (see <a href="#VC-Directory-Mode">VC Directory Mode</a>).

</p>
<p>On modern changeset-based version control systems (see <a href="#VCS-Changesets">VCS Changesets</a>), VC commands handle multi-file VC filesets as a group.
For example, committing a multi-file VC fileset generates a single
revision, containing the changes to all those files.  On older
file-based version control systems like CVS, each file in a multi-file
VC fileset is handled individually; for example, a commit generates
one revision for each changed file.

</p>
<dl compact="compact">
<dt><kbd>C-x v v</kbd></dt>
<dd><p>Perform the next appropriate version control operation on the current
VC fileset.

</p></dd>
</dl>

<a name="index-vc_002dnext_002daction"></a>
<a name="index-C_002dx-v-v"></a>
<p>The principal VC command is a multi-purpose command, <kbd>C-x v v</kbd>
(<code>vc-next-action</code>), which performs the most appropriate
action on the current VC fileset: either registering it with a version
control system, or committing it, or unlocking it, or merging changes
into it.  The precise actions are described in detail in the following
subsections.  You can use <kbd>C-x v v</kbd> either in a file-visiting
buffer or in a VC Directory buffer.

</p>
<p>Note that VC filesets are distinct from the named filesets used
for viewing and visiting files in functional groups
(see <a href="#Filesets">Filesets</a>).  Unlike named filesets, VC filesets are not named
and don’t persist across sessions.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#VC-With-A-Merging-VCS" accesskey="1">VC With A Merging VCS</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Without locking: default mode for CVS.

</td></tr>
<tr><td align="left" valign="top">• <a href="#VC-With-A-Locking-VCS" accesskey="2">VC With A Locking VCS</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">RCS in its default mode, SCCS, and optionally CVS.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Advanced-C_002dx-v-v" accesskey="3">Advanced C-x v v</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Advanced features available with a prefix argument.

</td></tr>
</tbody></table>


<a name="VC-With-A-Merging-VCS"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#VC-With-A-Locking-VCS" accesskey="n" rel="next">VC With A Locking VCS</a>, Up: <a href="#Basic-VC-Editing" accesskey="u" rel="up">Basic VC Editing</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Basic-Version-Control-with-Merging"></a>
<h4 class="subsubsection">28.1.3.1 Basic Version Control with Merging</h4>

<p>On a merging-based version control system (i.e., most modern ones;
see <a href="#VCS-Merging">VCS Merging</a>), <kbd>C-x v v</kbd> does the following:

</p>
<ul>
<li>  If there is more than one file in the VC fileset and the files have
inconsistent version control statuses, signal an error.  (Note,
however, that a fileset is allowed to include both newly-added
files and modified files; see <a href="#Registering">Registering</a>.)



</li><li>  If none of the files in the VC fileset are registered with a version
control system, register the VC fileset, i.e., place it under version
control.  See <a href="#Registering">Registering</a>.  If Emacs cannot find a system to
register under, it prompts for a repository type, creates a new
repository, and registers the VC fileset with it.



</li><li>  If every work file in the VC fileset is unchanged, do nothing.



</li><li>  If every work file in the VC fileset has been modified, commit the
changes.  To do this, Emacs pops up a <samp>*vc-log*</samp> buffer; type the
desired log entry for the new revision, followed by <kbd>C-c C-c</kbd> to
commit.  See <a href="#Log-Buffer">Log Buffer</a>.



<p>If committing to a shared repository, the commit may fail if the
repository has been changed since your last update.  In that
case, you must perform an update before trying again.  On a
decentralized version control system, use <kbd>C-x v +</kbd>
(see <a href="#Pulling-_002f-Pushing">Pulling / Pushing</a>) or <kbd>C-x v m</kbd> (see <a href="#Merging">Merging</a>).
On a centralized version control system, type <kbd>C-x v v</kbd> again to
merge in the repository changes.

</p>
</li><li>  Finally, if you are using a centralized version control system, check
if each work file in the VC fileset is up-to-date.  If any file has
been changed in the repository, offer to update it.

</li></ul>

<p>These rules also apply when you use RCS in its non-locking mode,
except that changes are not automatically merged from the repository.
Nothing informs you if another user has committed changes in the same
file since you began editing it; when you commit your revision, that
other user’s changes are removed (however, they remain in the
repository and are thus not irrevocably lost).  Therefore, you must
verify that the current revision is unchanged before committing your
changes.  In addition, locking is possible with RCS even in this mode:
<kbd>C-x v v</kbd> with an unmodified file locks the file, just as it does
with RCS in its normal locking mode (see <a href="#VC-With-A-Locking-VCS">VC With A Locking VCS</a>).

</p>

<a name="VC-With-A-Locking-VCS"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Advanced-C_002dx-v-v" accesskey="n" rel="next">Advanced C-x v v</a>, Previous: <a href="#VC-With-A-Merging-VCS" accesskey="p" rel="prev">VC With A Merging VCS</a>, Up: <a href="#Basic-VC-Editing" accesskey="u" rel="up">Basic VC Editing</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Basic-Version-Control-with-Locking"></a>
<h4 class="subsubsection">28.1.3.2 Basic Version Control with Locking</h4>

<p>On a locking-based version control system (such as SCCS, and RCS in
its default mode), <kbd>C-x v v</kbd> does the following:

</p>
<ul>
<li>  If there is more than one file in the VC fileset and the files have
inconsistent version control statuses, signal an error.



</li><li>  If each file in the VC fileset is not registered with a version
control system, register the VC fileset.  See <a href="#Registering">Registering</a>.  If
Emacs cannot find a system to register under, it prompts for a
repository type, creates a new repository, and registers the VC
fileset with it.



</li><li>  If each file is registered and unlocked, lock it and make it writable,
so that you can begin to edit it.



</li><li>  If each file is locked by you and contains changes, commit the
changes.  To do this, Emacs pops up a <samp>*vc-log*</samp> buffer; type the
desired log entry for the new revision, followed by <kbd>C-c C-c</kbd> to
commit (see <a href="#Log-Buffer">Log Buffer</a>).



</li><li>  If each file is locked by you, but you have not changed it, release
the lock and make the file read-only again.



</li><li>  If each file is locked by another user, ask whether you want to
steal the lock.  If you say yes, the file becomes locked by you,
and a warning message is sent to the user who had formerly locked the
file.

</li></ul>

<p>These rules also apply when you use CVS in locking mode, except
that CVS does not support stealing locks.

</p>

<a name="Advanced-C_002dx-v-v"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#VC-With-A-Locking-VCS" accesskey="p" rel="prev">VC With A Locking VCS</a>, Up: <a href="#Basic-VC-Editing" accesskey="u" rel="up">Basic VC Editing</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Advanced-Control-in-C_002dx-v-v"></a>
<h4 class="subsubsection">28.1.3.3 Advanced Control in <kbd>C-x v v</kbd></h4>

<a name="index-revision-ID-in-version-control"></a>
<p>When you give a prefix argument to <code>vc-next-action</code> (<kbd>C-u
C-x v v</kbd>), it still performs the next logical version control
operation, but accepts additional arguments to specify precisely how
to do the operation.

</p>
<ul>
<li> <a name="index-specific-version-control-system"></a>

You can specify the name of a version control system.  This is useful
if the fileset can be managed by more than one version control system,
and Emacs fails to detect the correct one.



</li><li>  Otherwise, if using CVS, RCS or SRC, you can specify a revision ID.



<p>If the fileset is modified (or locked), this makes Emacs commit with
that revision ID.  You can create a new branch by supplying an
appropriate revision ID (see <a href="#Branches">Branches</a>).

</p>
<p>If the fileset is unmodified (and unlocked), this checks the specified
revision into the working tree.  You can also specify a revision on
another branch by giving its revision or branch ID (see <a href="#Switching-Branches">Switching Branches</a>).  An empty argument (i.e., <kbd>C-u C-x v v <span class="key">RET</span></kbd>)
checks out the latest (head) revision on the current branch.

</p>
<p>This is silently ignored on a decentralized version control system.
Those systems do not let you specify your own revision IDs, nor do
they use the concept of checking out individual files.

</p></li></ul>


<a name="Log-Buffer"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Registering" accesskey="n" rel="next">Registering</a>, Previous: <a href="#Basic-VC-Editing" accesskey="p" rel="prev">Basic VC Editing</a>, Up: <a href="#Version-Control" accesskey="u" rel="up">Version Control</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Features-of-the-Log-Entry-Buffer"></a>
<h4 class="subsection">28.1.4 Features of the Log Entry Buffer</h4>

<a name="index-C_002dc-C_002dc-_0028Log-Edit-mode_0029"></a>
<a name="index-log_002dedit_002ddone"></a>
<p>When you tell VC to commit a change, it pops up a buffer named
<samp>*vc-log*</samp>.  In this buffer, you should write a <em>log entry</em>
describing the changes you have made (see <a href="#Why-Version-Control_003f">Why Version Control?</a>).
After you are done, type <kbd>C-c C-c</kbd> (<code>log-edit-done</code>) to exit
the buffer and commit the change, together with your log entry.

</p>
<a name="index-Log-Edit-mode"></a>
<a name="index-mode_002c-Log-Edit"></a>
<a name="index-vc_002dlog_002dmode_002dhook"></a>
<p>The major mode for the <samp>*vc-log*</samp> buffer is Log Edit mode, a
variant of Text mode (see <a href="#Text-Mode">Text Mode</a>).  On entering Log Edit mode,
Emacs runs the hooks <code>text-mode-hook</code> and <code>vc-log-mode-hook</code>
(see <a href="#Hooks">Hooks</a>).

</p>
<p>In the <samp>*vc-log*</samp> buffer, you can write one or more <em>header
lines</em>, specifying additional information to be supplied to the
version control system.  Each header line must occupy a single line at
the top of the buffer; the first line that is not a header line is
treated as the start of the log entry.  For example, the following
header line states that the present change was not written by you, but
by another developer:

</p>
<div class="smallexample">
<pre class="smallexample">Author: J. R. Hacker &lt;jrh@example.com&gt;
</pre></div>

<p>Apart from the ‘<samp>Author</samp>’ header, Emacs recognizes the headers
‘<samp>Summary</samp>’ (a one-line summary of the changeset), ‘<samp>Date</samp>’ (a
manually-specified commit time), and ‘<samp>Fixes</samp>’ (a reference to a
bug fixed by the change).  Not all version control systems recognize
all headers.  If you specify a header for a system that does not
support it, the header is treated as part of the log entry.

</p>
<a name="index-C_002dc-C_002df-_0028Log-Edit-mode_0029"></a>
<a name="index-log_002dedit_002dshow_002dfiles"></a>
<a name="index-C_002dc-C_002dd-_0028Log-Edit-mode_0029"></a>
<a name="index-log_002dedit_002dshow_002ddiff"></a>
<p>While in the <samp>*vc-log*</samp> buffer, the current VC fileset is
considered to be the fileset that will be committed if you type
<kbd><span class="nolinebreak">C-c</span>&nbsp;<span class="nolinebreak">C-c</span></kbd><!-- /@w -->.  To view a list of the files in the VC fileset,
type <kbd><span class="nolinebreak">C-c</span>&nbsp;<span class="nolinebreak">C-f</span></kbd><!-- /@w -->  (<code>log-edit-show-files</code>).  To view a diff
of changes between the VC fileset and the version from which you
started editing (see <a href="#Old-Revisions">Old Revisions</a>), type <kbd>C-c C-d</kbd>
(<code>log-edit-show-diff</code>).

</p>
<a name="index-C_002dc-C_002dw-_0028Log-Edit-mode_0029"></a>
<a name="index-log_002dedit_002dgenerate_002dchangelog_002dfrom_002ddiff"></a>
<p>To help generate ChangeLog entries, type <kbd>C-c C-w</kbd>
(<code>log-edit-generate-changelog-from-diff</code>), to generate skeleton
ChangeLog entries, listing all changed file and function names based
on the diff of the VC fileset.  Consecutive entries left empty will be
combined by <kbd>C-q</kbd> (<code>fill-paragraph</code>).

</p>
<a name="index-C_002dc-C_002da-_0028Log-Edit-mode_0029"></a>
<a name="index-log_002dedit_002dinsert_002dchangelog"></a>
<p>If the VC fileset includes one or more <samp>ChangeLog</samp> files
(see <a href="#Change-Log">Change Log</a>), type <kbd>C-c C-a</kbd>
(<code>log-edit-insert-changelog</code>) to pull the relevant entries into
the <samp>*vc-log*</samp> buffer.  If the topmost item in each
<samp>ChangeLog</samp> was made under your user name on the current date,
this command searches that item for entries matching the file(s) to be
committed, and inserts them.
If you are using CVS or RCS, see <a href="#Change-Logs-and-VC">Change Logs and VC</a>, for the
opposite way of working—generating ChangeLog entries from the Log
Edit buffer.

</p>
<p>To abort a commit, just <em>don’t</em> type <kbd>C-c C-c</kbd> in that
buffer.  You can switch buffers and do other editing.  As long as you
don’t try to make another commit, the entry you were editing remains
in the <samp>*vc-log*</samp> buffer, and you can go back to that buffer at
any time to complete the commit.

</p>
<a name="index-M_002dn-_0028Log-Edit-mode_0029"></a>
<a name="index-M_002dp-_0028Log-Edit-mode_0029"></a>
<a name="index-M_002ds-_0028Log-Edit-mode_0029"></a>
<a name="index-M_002dr-_0028Log-Edit-mode_0029"></a>
<p>You can also browse the history of previous log entries to duplicate
a commit comment.  This can be useful when you want to make several
commits with similar comments.  The commands <kbd>M-n</kbd>, <kbd>M-p</kbd>,
<kbd>M-s</kbd> and <kbd>M-r</kbd> for doing this work just like the minibuffer
history commands (see <a href="#Minibuffer-History">Minibuffer History</a>), except that they are
used outside the minibuffer.

</p>

<a name="Registering"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Old-Revisions" accesskey="n" rel="next">Old Revisions</a>, Previous: <a href="#Log-Buffer" accesskey="p" rel="prev">Log Buffer</a>, Up: <a href="#Version-Control" accesskey="u" rel="up">Version Control</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Registering-a-File-for-Version-Control"></a>
<h4 class="subsection">28.1.5 Registering a File for Version Control</h4>

<dl compact="compact">
<dt><kbd>C-x v i</kbd></dt>
<dd><p>Register the visited file for version control.

</p></dd>
</dl>

<a name="index-C_002dx-v-i"></a>
<a name="index-vc_002dregister"></a>
<p>The command <kbd>C-x v i</kbd> (<code>vc-register</code>) <em>registers</em> each
file in the current VC fileset, placing it under version control.
This is essentially equivalent to the action of <kbd>C-x v v</kbd> on an
unregistered VC fileset (see <a href="#Basic-VC-Editing">Basic VC Editing</a>), except that if the
VC fileset is already registered, <kbd>C-x v i</kbd> signals an error
whereas <kbd>C-x v v</kbd> performs some other action.

</p>
<p>To register a file, Emacs must choose a version control system.  For
a multi-file VC fileset, the VC Directory buffer specifies the system
to use (see <a href="#VC-Directory-Mode">VC Directory Mode</a>).  For a single-file VC fileset, if
the file’s directory already contains files registered in a version
control system, or if the directory is part of a directory tree
controlled by a version control system, Emacs chooses that system.  In
the event that more than one version control system is applicable,
Emacs uses the one that appears first in the variable
<code>vc-handled-backends</code> (see <a href="#Customizing-VC">Customizing VC</a>).
If Emacs cannot find a version control system to register the file
under, it prompts for a repository type, creates a new repository, and
registers the file into that repository.

</p>
<p>On most version control systems, registering a file with <kbd>C-x v
i</kbd> or <kbd>C-x v v</kbd> adds it to the working tree but not to the
repository.  Such files are labeled as ‘<samp>added</samp>’ in the VC
Directory buffer, and show a revision ID of ‘<samp>@@</samp>’ in the mode
line.  To make the registration take effect in the repository, you
must perform a commit (see <a href="#Basic-VC-Editing">Basic VC Editing</a>).  Note that a single
commit can include both file additions and edits to existing files.

</p>
<p>On a locking-based version control system (see <a href="#VCS-Merging">VCS Merging</a>),
registering a file leaves it unlocked and read-only.  Type <kbd>C-x v
v</kbd> to start editing it.

</p>

<a name="Old-Revisions"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#VC-Change-Log" accesskey="n" rel="next">VC Change Log</a>, Previous: <a href="#Registering" accesskey="p" rel="prev">Registering</a>, Up: <a href="#Version-Control" accesskey="u" rel="up">Version Control</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Examining-And-Comparing-Old-Revisions"></a>
<h4 class="subsection">28.1.6 Examining And Comparing Old Revisions</h4>

<dl compact="compact">
<dt><kbd>C-x v =</kbd></dt>
<dd><p>Compare the work files in the current VC fileset with the versions you
started from (<code>vc-diff</code>).  With a prefix argument, prompt for two
revisions of the current VC fileset and compare them.  You can also
call this command from a Dired buffer (see <a href="#Dired">Dired</a>).

</p>
</dd>
<dt><kbd>M-x vc-ediff</kbd></dt>
<dd><p>Like <kbd>C-x v =</kbd>, but using Ediff.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/ediff.html#Top">Ediff</a> in <cite>The
Ediff Manual</cite>.

</p>
</dd>
<dt><kbd>C-x v D</kbd></dt>
<dd><p>Compare the entire working tree to the revision you started from
(<code>vc-root-diff</code>).  With a prefix argument, prompt for two
revisions and compare their trees.

</p>
</dd>
<dt><kbd>C-x v ~</kbd></dt>
<dd><p>Prompt for a revision of the current file, and visit it in a separate
buffer (<code>vc-revision-other-window</code>).

</p>
</dd>
<dt><kbd>C-x v g</kbd></dt>
<dd><p>Display an annotated version of the current file: for each line, show
the latest revision in which it was modified (<code>vc-annotate</code>).

</p></dd>
</dl>

<a name="index-vc_002ddiff"></a>
<a name="index-C_002dx-v-_003d"></a>
<p><kbd>C-x v =</kbd> (<code>vc-diff</code>) displays a <em>diff</em> which compares
each work file in the current VC fileset to the version(s) from which
you started editing.  The diff is displayed in another window, in a
Diff mode buffer (see <a href="#Diff-Mode">Diff Mode</a>) named <samp>*vc-diff*</samp>.  The
usual Diff mode commands are available in this buffer.  In particular,
the <kbd>g</kbd> (<code>revert-buffer</code>) command performs the file
comparison again, generating a new diff.

</p>
<a name="index-C_002du-C_002dx-v-_003d"></a>
<p>To compare two arbitrary revisions of the current VC fileset, call
<code>vc-diff</code> with a prefix argument: <kbd>C-u C-x v =</kbd>.  This
prompts for two revision IDs (see <a href="#VCS-Concepts">VCS Concepts</a>), and displays a
diff between those versions of the fileset.  This will not work
reliably for multi-file VC filesets, if the version control system is
file-based rather than changeset-based (e.g., CVS), since then
revision IDs for different files would not be related in any
meaningful way.

</p>
<p>Instead of the revision ID, some version control systems let you
specify revisions in other formats.  For instance, under Bazaar you
can enter ‘<samp>date:yesterday</samp>’ for the argument to <kbd>C-u C-x v =</kbd>
(and related commands) to specify the first revision committed after
yesterday.  See the documentation of the version control system for
details.

</p>
<p>If you invoke <kbd>C-x v =</kbd> or <kbd>C-u C-x v =</kbd> from a Dired buffer
(see <a href="#Dired">Dired</a>), the file listed on the current line is treated as the
current VC fileset.

</p>
<a name="index-vc_002dediff"></a>
<p><kbd>M-x vc-ediff</kbd> works like <kbd>C-x v =</kbd>, except that it uses an
Ediff session.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/ediff.html#Top">Ediff</a> in <cite>The Ediff Manual</cite>.

</p>
<a name="index-vc_002droot_002ddiff"></a>
<a name="index-C_002dx-v-D"></a>
<p><kbd>C-x v D</kbd> (<code>vc-root-diff</code>) is similar to <kbd>C-x v =</kbd>, but
it displays the changes in the entire current working tree (i.e., the
working tree containing the current VC fileset).  If you invoke this
command from a Dired buffer, it applies to the working tree containing
the directory.

</p>
<a name="index-vc_002droot_002dversion_002ddiff"></a>
<a name="index-C_002du-C_002dx-v-D"></a>
<p>To compare two arbitrary revisions of the whole trees, call
<code>vc-root-diff</code> with a prefix argument: <kbd>C-u C-x v D</kbd>.  This
prompts for two revision IDs (see <a href="#VCS-Concepts">VCS Concepts</a>), and displays a
diff between those versions of the entire version-controlled directory
trees (RCS, SCCS, CVS, and SRC do not support this feature).

</p>
<a name="index-vc_002ddiff_002dswitches"></a>
<p>You can customize the <code>diff</code> options that <kbd>C-x v =</kbd> and
<kbd>C-x v D</kbd> use for generating diffs.  The options used are taken
from the first non-<code>nil</code> value amongst the variables
<code>vc-<var>backend</var>-diff-switches</code>, <code>vc-diff-switches</code>, and
<code>diff-switches</code> (see <a href="#Comparing-Files">Comparing Files</a>), in that order.  Here,
<var>backend</var> stands for the relevant version control system,
e.g., <code>bzr</code> for Bazaar.  Since <code>nil</code> means to check the
next variable in the sequence, either of the first two may use the
value <code>t</code> to mean no switches at all.  Most of the
<code>vc-<var>backend</var>-diff-switches</code> variables default to <code>nil</code>,
but some default to <code>t</code>; these are for version control systems
whose <code>diff</code> implementations do not accept common diff options,
such as Subversion.

</p>
<a name="index-vc_002drevision_002dother_002dwindow"></a>
<a name="index-C_002dx-v-_007e"></a>
<p>To directly examine an older version of a file, visit the work file
and type <kbd>C-x v ~ <var>revision</var> <span class="key">RET</span></kbd>
(<code>vc-revision-other-window</code>).  This retrieves the file version
corresponding to <var>revision</var>, saves it to
<samp><var>filename</var>.~<var>revision</var>~</samp>, and visits it in a separate
window.

</p>
<a name="index-vc_002dannotate"></a>
<a name="index-vc_002dannotate_002dbackground_002dmode"></a>
<a name="index-C_002dx-v-g"></a>
<p>Many version control systems allow you to view files <em>annotated</em>
with per-line revision information, by typing <kbd>C-x v g</kbd>
(<code>vc-annotate</code>).  This creates a new “annotate” buffer
displaying the file’s text, with each line colored to show how old it
is.  Red text is new, blue is old, and intermediate colors indicate
intermediate ages.  By default, the color is scaled over the full
range of ages, such that the oldest changes are blue, and the newest
changes are red.  If the variable <code>vc-annotate-background-mode</code>
is non-<code>nil</code>, the colors expressing the age of each line are
applied to the background color, leaving the foreground at its default
color.

</p>
<p>When you give a prefix argument to this command, Emacs reads two
arguments using the minibuffer: the revision to display and annotate
(instead of the current file contents), and the time span in days the
color range should cover.

</p>
<p>From the “annotate” buffer, these and other color scaling options are
available from the ‘<samp>VC-Annotate</samp>’ menu.  In this buffer, you can
also use the following keys to browse the annotations of past revisions,
view diffs, or view log entries:

</p>
<dl compact="compact">
<dt><kbd>p</kbd></dt>
<dd><p>Annotate the previous revision, i.e., the revision before the one
currently annotated.  A numeric prefix argument is a repeat count, so
<kbd>C-u 10 p</kbd> would take you back 10 revisions.

</p>
</dd>
<dt><kbd>n</kbd></dt>
<dd><p>Annotate the next revision, i.e., the revision after the one
currently annotated.  A numeric prefix argument is a repeat count.

</p>
</dd>
<dt><kbd>j</kbd></dt>
<dd><p>Annotate the revision indicated by the current line.

</p>
</dd>
<dt><kbd>a</kbd></dt>
<dd><p>Annotate the revision before the one indicated by the current line.
This is useful to see the state the file was in before the change on
the current line was made.

</p>
</dd>
<dt><kbd>f</kbd></dt>
<dd><p>Show in a buffer the file revision indicated by the current line.

</p>
</dd>
<dt><kbd>d</kbd></dt>
<dd><p>Display the diff between the current line’s revision and the previous
revision.  This is useful to see what the current line’s revision
actually changed in the file.

</p>
</dd>
<dt><kbd>D</kbd></dt>
<dd><p>Display the diff between the current line’s revision and the previous
revision for all files in the changeset (for VC systems that support
changesets).  This is useful to see what the current line’s revision
actually changed in the tree.

</p>
</dd>
<dt><kbd>l</kbd></dt>
<dd><p>Show the log of the current line’s revision.  This is useful to see
the author’s description of the changes in the revision on the current
line.

</p>
</dd>
<dt><kbd>w</kbd></dt>
<dd><p>Annotate the working revision–the one you are editing.  If you used
<kbd>p</kbd> and <kbd>n</kbd> to browse to other revisions, use this key to
return to your working revision.

</p>
</dd>
<dt><kbd>v</kbd></dt>
<dd><p>Toggle the annotation visibility.  This is useful for looking just at
the file contents without distraction from the annotations.

</p></dd>
</dl>


<a name="VC-Change-Log"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#VC-Undo" accesskey="n" rel="next">VC Undo</a>, Previous: <a href="#Old-Revisions" accesskey="p" rel="prev">Old Revisions</a>, Up: <a href="#Version-Control" accesskey="u" rel="up">Version Control</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="VC-Change-Log-1"></a>
<h4 class="subsection">28.1.7 VC Change Log</h4>
<a name="index-VC-change-log"></a>

<dl compact="compact">
<dt><kbd>C-x v l</kbd></dt>
<dd><p>Display the change history for the current fileset
(<code>vc-print-log</code>).

</p>
</dd>
<dt><kbd>C-x v L</kbd></dt>
<dd><p>Display the change history for the current repository
(<code>vc-print-root-log</code>).

</p>
</dd>
<dt><kbd>C-x v I</kbd></dt>
<dd><p>Display the changes that a “pull” operation will retrieve
(<code>vc-log-incoming</code>).

</p>
</dd>
<dt><kbd>C-x v O</kbd></dt>
<dd><p>Display the changes that will be sent by the next “push” operation
(<code>vc-log-outgoing</code>).

</p>
</dd>
<dt><kbd>C-x v h</kbd></dt>
<dd><p>Display the history of changes made in the region of file visited by
the current buffer (<code>vc-region-history</code>).

</p>
</dd>
<dt><kbd>M-x vc-log-search <span class="key">RET</span></kbd></dt>
<dd><p>Search the change history for a specified pattern.

</p></dd>
</dl>

<a name="index-C_002dx-v-l"></a>
<a name="index-vc_002dprint_002dlog"></a>
<p><kbd>C-x v l</kbd> (<code>vc-print-log</code>) displays a buffer named
<samp>*vc-change-log*</samp>, showing the history of changes made to the
current file, including who made the changes, the dates, and the log
entry for each change (these are the same log entries you would enter
via the <samp>*vc-log*</samp> buffer; see <a href="#Log-Buffer">Log Buffer</a>).  Point is
centered at the revision of the file currently being visited.  With a
prefix argument, the command prompts for the revision to center on,
and the maximum number of revisions to display.

</p>
<p>If you call <kbd>C-x v l</kbd> from a VC Directory buffer (see <a href="#VC-Directory-Mode">VC Directory Mode</a>) or a Dired buffer (see <a href="#Dired">Dired</a>), it applies to the
file listed on the current line.

</p>
<a name="index-C_002dx-v-L"></a>
<a name="index-vc_002dprint_002droot_002dlog"></a>
<a name="index-log_002dview_002dtoggle_002dentry_002ddisplay"></a>
<p><kbd>C-x v L</kbd> (<code>vc-print-root-log</code>) displays a
<samp>*vc-change-log*</samp> buffer showing the history of the entire
version-controlled directory tree (RCS, SCCS, CVS, and SRC do not
support this feature).  With a prefix argument, the command prompts
for the maximum number of revisions to display.  A numeric prefix
argument specifies the maximum number of revisions without prompting.
When the numeric prefix argument is 1, as in <kbd><span class="nolinebreak">C-1</span>&nbsp;<span class="nolinebreak">C-x</span>&nbsp;v&nbsp;L</kbd><!-- /@w -->  or
<kbd><span class="nolinebreak">C-u</span>&nbsp;1&nbsp;<span class="nolinebreak">C-x</span>&nbsp;v&nbsp;L</kbd><!-- /@w -->, the command prompts for the revision ID, and
displays the log entry of that revision together with the changes
(diffs) it introduced.  (Some less capable version control systems,
such as RCS and CVS, don’t have commands to show a revision log with
its diffs; for them the command displays only the log entry, and you
can request to show the diffs by typing <kbd>d</kbd> or <kbd>D</kbd>, see
below.)

</p>
<p>The <kbd>C-x v L</kbd> history is shown in a compact form, usually
showing only the first line of each log entry.  However, you can type
<tt class="key">RET</tt> (<code>log-view-toggle-entry-display</code>) in the
<samp>*vc-change-log*</samp> buffer to reveal the entire log entry for the
revision at point.  A second <tt class="key">RET</tt> hides it again.

</p>
<a name="index-C_002dx-v-I"></a>
<a name="index-C_002dx-v-O"></a>
<a name="index-vc_002dlog_002dincoming"></a>
<a name="index-vc_002dlog_002doutgoing"></a>
<p>On a decentralized version control system, the <kbd>C-x v I</kbd>
(<code>vc-log-incoming</code>) command displays a log buffer showing the
changes that will be applied, the next time you run the version
control system’s pull command to get new revisions from another
repository (see <a href="#Pulling-_002f-Pushing">Pulling / Pushing</a>).  This other repository is the default
one from which changes are pulled, as defined by the version control
system; with a prefix argument, <code>vc-log-incoming</code> prompts for a
specific repository.  Similarly, <kbd>C-x v O</kbd>
(<code>vc-log-outgoing</code>) shows the changes that will be sent to
another repository, the next time you run the push command; with a
prefix argument, it prompts for a specific destination repository.

</p>
<a name="index-VC-log-buffer_002c-commands-in"></a>
<a name="index-vc_002dlog-buffer"></a>
<p>In the <samp>*vc-change-log*</samp> buffer, you can use the following keys
to move between the logs of revisions and of files, and to examine and
compare past revisions (see <a href="#Old-Revisions">Old Revisions</a>):

</p>
<dl compact="compact">
<dt><kbd>p</kbd></dt>
<dd><p>Move to the previous revision entry.  (Revision entries in the log
buffer are usually in reverse-chronological order, so the previous
revision-item usually corresponds to a newer revision.)  A numeric
prefix argument is a repeat count.

</p>
</dd>
<dt><kbd>n</kbd></dt>
<dd><p>Move to the next revision entry.  A numeric prefix argument is a
repeat count.

</p>
</dd>
<dt><kbd>P</kbd></dt>
<dd><p>Move to the log of the previous file, if showing logs for a multi-file
VC fileset.  Otherwise, just move to the beginning of the log.  A
numeric prefix argument is a repeat count.

</p>
</dd>
<dt><kbd>N</kbd></dt>
<dd><p>Move to the log of the next file, if showing logs for a multi-file VC
fileset.  A numeric prefix argument is a repeat count.

</p>
</dd>
<dt><kbd>a</kbd></dt>
<dd><p>Annotate the revision on the current line (see <a href="#Old-Revisions">Old Revisions</a>).

</p>
</dd>
<dt><kbd>e</kbd></dt>
<dd><p>Modify the change comment displayed at point.  Note that not all VC
systems support modifying change comments.

</p>
</dd>
<dt><kbd>f</kbd></dt>
<dd><p>Visit the revision indicated at the current line.

</p>
</dd>
<dt><kbd>d</kbd></dt>
<dd><p>Display a diff between the revision at point and the next earlier
revision, for the specific file.

</p>
</dd>
<dt><kbd>D</kbd></dt>
<dd><p>Display the changeset diff between the revision at point and the next
earlier revision.  This shows the changes to all files made in that
revision.

</p>
</dd>
<dt><kbd><span class="key">RET</span></kbd></dt>
<dd><p>In a compact-style log buffer (e.g., the one created by <kbd>C-x v
L</kbd>), toggle between showing and hiding the full log entry for the
revision at point.

</p></dd>
</dl>

<a name="index-vc_002dlog_002dshow_002dlimit"></a>
<p>Because fetching many log entries can be slow, the
<samp>*vc-change-log*</samp> buffer displays no more than 2000 revisions by
default.  The variable <code>vc-log-show-limit</code> specifies this limit;
if you set the value to zero, that removes the limit.  You can also
increase the number of revisions shown in an existing
<samp>*vc-change-log*</samp> buffer by clicking on the ‘<samp>Show 2X
entries</samp>’ or ‘<samp>Show unlimited entries</samp>’ buttons at the end of the
buffer.  However, RCS, SCCS, CVS, and SRC do not support this feature.

</p>
<a name="index-C_002dx-v-h"></a>
<a name="index-vc_002dregion_002dhistory"></a>
<p>A useful variant of examining history of changes is provided by the command
<kbd>vc-region-history</kbd> (by default bound to <kbd>C-x v h</kbd>), which shows
a <samp>*VC-history*</samp> buffer with the history of changes made in the region
of the current buffer’s file between point and the mark (see <a href="#Mark">Mark</a>).  The
history of changes includes the commit log messages and also the
changes themselves in the Diff format.

</p>
<p>Invoke this command after marking in the current buffer the region in
whose changes you are interested.  In the <samp>*VC-history*</samp> buffer
it pops up, you can use all of the commands available in the
<samp>*vc-change-log*</samp> buffer described above, and also the commands
defined by Diff mode (see <a href="#Diff-Mode">Diff Mode</a>).

</p>
<p>This command is currently available only with Git and Mercurial (hg).

</p>
<a name="index-vc_002dlog_002dsearch"></a>
<p>The command <code>vc-log-search</code> allows searching for a pattern in the
log of changes.  It prompts for a pattern (a regular expression), and
displays all entries in the change history whose log messages match
the pattern.  When invoked with a prefix argument, the command will
also prompt for a specific VCS shell command to run for this purpose.

</p>

<a name="VC-Undo"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#VC-Ignore" accesskey="n" rel="next">VC Ignore</a>, Previous: <a href="#VC-Change-Log" accesskey="p" rel="prev">VC Change Log</a>, Up: <a href="#Version-Control" accesskey="u" rel="up">Version Control</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Undoing-Version-Control-Actions"></a>
<h4 class="subsection">28.1.8 Undoing Version Control Actions</h4>

<dl compact="compact">
<dt><kbd>C-x v u</kbd></dt>
<dd><p>Revert the work file(s) in the current VC fileset to the last revision
(<code>vc-revert</code>).

</p></dd>
</dl>

<a name="index-C_002dx-v-u"></a>
<a name="index-vc_002drevert"></a>
<a name="index-vc_002drevert_002dshow_002ddiff"></a>
<p>If you want to discard all the changes you have made to the current
VC fileset, type <kbd>C-x v u</kbd> (<code>vc-revert</code>).  This shows
you a diff between the work file(s) and the revision from which you
started editing, and asks for confirmation for discarding the changes.
If you agree, the fileset is reverted.  If you don’t want <kbd>C-x v
u</kbd> to show a diff, set the variable <code>vc-revert-show-diff</code> to
<code>nil</code> (you can still view the diff directly with <kbd>C-x v =</kbd>;
see <a href="#Old-Revisions">Old Revisions</a>).

</p>
<p>On locking-based version control systems, <kbd>C-x v u</kbd> leaves files
unlocked; you must lock again to resume editing.  You can also use
<kbd>C-x v u</kbd> to unlock a file if you lock it and then decide not to
change it.

</p>

<a name="VC-Ignore"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#VC-Directory-Mode" accesskey="n" rel="next">VC Directory Mode</a>, Previous: <a href="#VC-Undo" accesskey="p" rel="prev">VC Undo</a>, Up: <a href="#Version-Control" accesskey="u" rel="up">Version Control</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Ignore-Version-Control-Files"></a>
<h4 class="subsection">28.1.9 Ignore Version Control Files</h4>

<dl compact="compact">
<dt><kbd>C-x v G</kbd></dt>
<dd><p>Ignore a file under current version control system.  (<code>vc-ignore</code>).

</p></dd>
</dl>

<a name="index-C_002dx-v-G"></a>
<a name="index-vc_002dignore"></a>
<p>Many source trees contain some files that do not need to be
versioned, such as editor backups, object or bytecode files, and built
programs.  You can simply not add them, but then they’ll always crop
up as unknown files.  You can also tell the version control system to
ignore these files by adding them to the ignore file at the top of the
tree.  <kbd>C-x v G</kbd> (<code>vc-ignore</code>) can help you do this.  When
called with a prefix argument, you can remove a file from the ignored
file list.

</p>

<a name="VC-Directory-Mode"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Branches" accesskey="n" rel="next">Branches</a>, Previous: <a href="#VC-Ignore" accesskey="p" rel="prev">VC Ignore</a>, Up: <a href="#Version-Control" accesskey="u" rel="up">Version Control</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="VC-Directory-Mode-1"></a>
<h4 class="subsection">28.1.10 VC Directory Mode</h4>

<a name="index-VC-Directory-buffer"></a>
<p>The <em>VC Directory buffer</em> is a specialized buffer for viewing
the version control statuses of the files in a directory tree, and
performing version control operations on those files.  In particular,
it is used to specify multi-file VC filesets for commands like
<kbd><span class="nolinebreak">C-x</span>&nbsp;v&nbsp;v</kbd><!-- /@w -->  to act on (see <a href="#VC-Directory-Commands">VC Directory Commands</a>).

</p>
<a name="index-C_002dx-v-d"></a>
<a name="index-vc_002ddir"></a>
<p>To use the VC Directory buffer, type <kbd>C-x v d</kbd> (<code>vc-dir</code>).
This reads a directory’s name using the minibuffer, and switches to a VC
Directory buffer for that directory.  By default, the buffer is named
<samp>*vc-dir*</samp>.  Its contents are described
in <a href="#VC-Directory-Buffer">VC Directory Buffer</a>.

</p>
<p>The <code>vc-dir</code> command automatically detects the version control
system to be used in the specified directory.  In the event that more
than one system is being used in the directory, you should invoke the
command with a prefix argument, <kbd>C-u C-x v d</kbd>; this prompts for
the version control system which the VC Directory buffer should use.

</p>
<a name="index-PCL_002dCVS"></a>
<a name="index-cvs"></a>
<a name="index-CVS-directory-mode"></a>
<p>In addition to the VC Directory buffer, Emacs has a similar facility
called PCL-CVS which is specialized for CVS.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/pcl-cvs.html#Top">About
PCL-CVS</a> in <cite>PCL-CVS—The Emacs Front-End to CVS</cite>.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#VC-Directory-Buffer" accesskey="1">Buffer</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">What the buffer looks like and means.

</td></tr>
<tr><td align="left" valign="top">• <a href="#VC-Directory-Commands" accesskey="2">Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands to use in a VC directory buffer.

</td></tr>
</tbody></table>


<a name="VC-Directory-Buffer"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#VC-Directory-Commands" accesskey="n" rel="next">VC Directory Commands</a>, Up: <a href="#VC-Directory-Mode" accesskey="u" rel="up">VC Directory Mode</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="The-VC-Directory-Buffer"></a>
<h4 class="subsubsection">28.1.10.1 The VC Directory Buffer</h4>

<p>The VC Directory buffer contains a list of version-controlled files
and their version control statuses.  It lists files in the current
directory (the one specified when you called <kbd>C-x v d</kbd>) and its
subdirectories, but only those with a noteworthy status.  Files
that are up-to-date (i.e., the same as in the repository) are
omitted.  If all the files in a subdirectory are up-to-date, the
subdirectory is not listed either.  As an exception, if a file has
become up-to-date as a direct result of a VC command, it is listed.

</p>
<p>Here is an example of a VC Directory buffer listing:

</p>
<div class="smallexample">
<pre class="smallexample">                     ./
    edited           configure.ac
*   added            README
    unregistered     temp.txt
                     src/
*   edited           src/main.c
</pre></div>

<p>Two work files have been modified but not committed:
<samp>configure.ac</samp> in the current directory, and <samp>main.c</samp> in the
<samp>src/</samp> subdirectory.  The file named <samp>README</samp> has been added
but is not yet committed, while <samp>temp.txt</samp> is not under version
control (see <a href="#Registering">Registering</a>).

</p>
<p>The ‘<samp>*</samp>’ characters next to the entries for <samp>README</samp> and
<samp>src/main.c</samp> indicate that the user has marked these files as
the current VC fileset
(see <a href="#VC-Directory-Commands">VC Directory Commands</a>).

</p>
<p>The above example is typical for a decentralized version control
system like Bazaar, Git, or Mercurial.  Other systems can show other
statuses.  For instance, CVS shows the ‘<samp>needs-update</samp>’ status if
the repository has changes that have not been applied to the work
file.  RCS and SCCS show the name of the user locking a file as its
status.

</p>
<p>On CVS, the <code>vc-dir</code> command normally contacts the repository,
which may be on a remote machine, to check for updates.  If you change
the variable <code>vc-cvs-stay-local</code> to <code>nil</code> (see <a href="#CVS-Options">CVS Options</a>), then Emacs avoids contacting a remote repository when
generating the VC Directory buffer (it will still contact it when
necessary, e.g., when doing a commit).  This may be desirable if you
are working offline or the network is slow.

</p>
<a name="index-vc_002ddirectory_002dexclusion_002dlist"></a>
<p>The VC Directory buffer omits subdirectories listed in the variable
<code>vc-directory-exclusion-list</code>.  Its default value contains
directories that are used internally by version control systems.

</p>

<a name="VC-Directory-Commands"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#VC-Directory-Buffer" accesskey="p" rel="prev">VC Directory Buffer</a>, Up: <a href="#VC-Directory-Mode" accesskey="u" rel="up">VC Directory Mode</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="VC-Directory-Commands-1"></a>
<h4 class="subsubsection">28.1.10.2 VC Directory Commands</h4>

<p>Emacs provides several commands for navigating the VC Directory
buffer, and for marking files as belonging to the current VC
fileset.

</p>
<dl compact="compact">
<dt><kbd>n</kbd></dt>
<dt><kbd><span class="key">SPC</span></kbd></dt>
<dd><p>Move point to the next entry (<code>vc-dir-next-line</code>).

</p>
</dd>
<dt><kbd>p</kbd></dt>
<dd><p>Move point to the previous entry (<code>vc-dir-previous-line</code>).

</p>
</dd>
<dt><kbd><span class="key">TAB</span></kbd></dt>
<dd><p>Move to the next directory entry (<code>vc-dir-next-directory</code>).

</p>
</dd>
<dt><kbd>S-<span class="key">TAB</span></kbd></dt>
<dd><p>Move to the previous directory entry
(<code>vc-dir-previous-directory</code>).

</p>
</dd>
<dt><kbd><span class="key">RET</span></kbd></dt>
<dt><kbd>f</kbd></dt>
<dd><p>Visit the file or directory listed on the current line
(<code>vc-dir-find-file</code>).

</p>
</dd>
<dt><kbd>o</kbd></dt>
<dd><p>Visit the file or directory on the current line, in a separate window
(<code>vc-dir-find-file-other-window</code>).

</p>
</dd>
<dt><kbd>m</kbd></dt>
<dd><p>Mark the file or directory on the current line (<code>vc-dir-mark</code>),
putting it in the current VC fileset.  If the region is active, mark
all files in the region.

</p>
<p>A file cannot be marked with this command if it is already in a marked
directory, or one of its subdirectories.  Similarly, a directory
cannot be marked with this command if any file in its tree is marked.

</p>
</dd>
<dt><kbd>M</kbd></dt>
<dd><p>If point is on a file entry, mark all files with the same status; if
point is on a directory entry, mark all files in that directory tree
(<code>vc-dir-mark-all-files</code>).  With a prefix argument, mark all
listed files and directories.

</p>
</dd>
<dt><kbd>G</kbd></dt>
<dd><p>Add the file under point to the list of files that the VC should
ignore (<code>vc-dir-ignore</code>).  For instance, if the VC is Git, it
will append this file to the <samp>.gitignore</samp> file.  If given a
prefix, do this with all the marked files.

</p>
</dd>
<dt><kbd>q</kbd></dt>
<dd><p>Quit the VC Directory buffer, and bury it (<code>quit-window</code>).

</p>
</dd>
<dt><kbd>u</kbd></dt>
<dd><p>Unmark the file or directory on the current line.  If the region is
active, unmark all the files in the region (<code>vc-dir-unmark</code>).

</p>
</dd>
<dt><kbd>U</kbd></dt>
<dd><p>If point is on a file entry, unmark all files with the same status; if
point is on a directory entry, unmark all files in that directory tree
(<code>vc-dir-unmark-all-files</code>).  With a prefix argument, unmark all
files and directories.

</p>
</dd>
<dt><kbd>x</kbd></dt>
<dd><p>Hide files with ‘<samp>up-to-date</samp>’ or ‘<samp>ignored</samp>’ status
(<code>vc-dir-hide-up-to-date</code>).  With a prefix argument, hide items
whose state is that of the item at point.

</p></dd>
</dl>

<a name="index-vc_002ddir_002dmark"></a>
<a name="index-vc_002ddir_002dmark_002dall_002dfiles"></a>
<p>While in the VC Directory buffer, all the files that you mark with
<kbd>m</kbd> (<code>vc-dir-mark</code>) or <kbd>M</kbd> (<code>vc-dir-mark-all-files</code>)
are in the current VC fileset.  If you mark a directory entry with
<kbd>m</kbd>, all the listed files in that directory tree are in the
current VC fileset.  The files and directories that belong to the
current VC fileset are indicated with a ‘<samp>*</samp>’ character in the VC
Directory buffer, next to their VC status.  In this way, you can set
up a multi-file VC fileset to be acted on by VC commands like
<kbd><span class="nolinebreak">C-x</span>&nbsp;v&nbsp;v</kbd><!-- /@w -->  (see <a href="#Basic-VC-Editing">Basic VC Editing</a>), <kbd><span class="nolinebreak">C-x</span>&nbsp;v&nbsp;=</kbd><!-- /@w -->

(see <a href="#Old-Revisions">Old Revisions</a>), and <kbd><span class="nolinebreak">C-x</span>&nbsp;v&nbsp;u</kbd><!-- /@w -->  (see <a href="#VC-Undo">VC Undo</a>).

</p>
<p>The VC Directory buffer also defines some single-key shortcuts for
VC commands with the <kbd>C-x v</kbd> prefix: <kbd>=</kbd>, <kbd>+</kbd>, <kbd>l</kbd>,
<kbd>i</kbd>, <kbd>D</kbd>, <kbd>L</kbd>, <kbd>G</kbd>, <kbd>I</kbd>, <kbd>O</kbd>, and <kbd>v</kbd>.

</p>
<p>For example, you can commit a set of edited files by opening a VC
Directory buffer, where the files are listed with the ‘<samp>edited</samp>’
status; marking the files; and typing <kbd>v</kbd> or <kbd>C-x v v</kbd>
(<code>vc-next-action</code>).  If the version control system is
changeset-based, Emacs will commit the files in a single revision.

</p>
<p>While in the VC Directory buffer, you can also perform search and
replace on the current VC fileset, with the following commands:

</p>
<dl compact="compact">
<dt><kbd>S</kbd></dt>
<dd><p>Search the fileset (<code>vc-dir-search</code>).

</p>
</dd>
<dt><kbd>Q</kbd></dt>
<dd><p>Do a regular expression query replace on the fileset
(<code>vc-dir-query-replace-regexp</code>).

</p>
</dd>
<dt><kbd>M-s a C-s</kbd></dt>
<dd><p>Do an incremental search on the fileset (<code>vc-dir-isearch</code>).

</p>
</dd>
<dt><kbd>M-s a C-M-s</kbd></dt>
<dd><p>Do an incremental regular expression search on the fileset
(<code>vc-dir-isearch-regexp</code>).

</p></dd>
</dl>

<p>Apart from acting on multiple files, these commands behave much like
their single-buffer counterparts (see <a href="#Search">Search</a>).

</p>
<p>The VC Directory buffer additionally defines some branch-related
commands starting with the prefix <kbd>B</kbd>:

</p>
<dl compact="compact">
<dt><kbd>B c</kbd></dt>
<dd><p>Create a new branch (<code>vc-create-tag</code>).

</p>
</dd>
<dt><kbd>B l</kbd></dt>
<dd><p>Prompt for the name of a branch and display the change history of that
branch (<code>vc-print-branch-log</code>).

</p>
</dd>
<dt><kbd>B s</kbd></dt>
<dd><p>Switch to a branch (<code>vc-retrieve-tag</code>).  See <a href="#Switching-Branches">Switching Branches</a>.

</p>
</dd>
<dt><kbd>d</kbd></dt>
<dd><p>Delete the marked files, or the current file if no marks
(<code>vc-dir-clean-delete)</code>.  The files will not be marked as
deleted in the version control system, so this function is mostly
useful for unregistered files.

</p></dd>
</dl>

<a name="index-stashes-in-version-control"></a>
<a name="index-shelves-in-version-control"></a>
<p>The above commands are also available via the menu bar, and via a
context menu invoked by <kbd>mouse-2</kbd>.  Furthermore, some VC backends
use the menu to provide extra backend-specific commands.  For example,
Git and Bazaar allow you to manipulate <em>stashes</em> and <em>shelves</em>
(which are a way to temporarily put aside uncommitted changes, and
bring them back at a later time).

</p>

<a name="Branches"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Miscellaneous-VC" accesskey="n" rel="next">Miscellaneous VC</a>, Previous: <a href="#VC-Directory-Mode" accesskey="p" rel="prev">VC Directory Mode</a>, Up: <a href="#Version-Control" accesskey="u" rel="up">Version Control</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Version-Control-Branches"></a>
<h4 class="subsection">28.1.11 Version Control Branches</h4>
<a name="index-branch-_0028version-control_0029"></a>

<p>One use of version control is to support multiple independent lines
of development, which are called <em>branches</em>.  Amongst other
things, branches can be used for maintaining separate stable and
development versions of a program, and for developing unrelated
features in isolation from one another.

</p>
<p>VC’s support for branch operations is currently fairly limited.  For
decentralized version control systems, it provides commands for
<em>updating</em> one branch with the contents of another, and for
<em>merging</em> the changes made to two different branches
(see <a href="#Merging">Merging</a>).  For centralized version control systems, it
supports checking out different branches and committing into new or
different branches.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Switching-Branches" accesskey="1">Switching Branches</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to get to another existing branch.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Pulling-_002f-Pushing" accesskey="2">Pulling / Pushing</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Receiving/sending changes from/to elsewhere.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Merging" accesskey="3">Merging</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Transferring changes between branches.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Creating-Branches" accesskey="4">Creating Branches</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to start a new branch.

</td></tr>
</tbody></table>


<a name="Switching-Branches"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Pulling-_002f-Pushing" accesskey="n" rel="next">Pulling / Pushing</a>, Up: <a href="#Branches" accesskey="u" rel="up">Branches</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Switching-between-Branches"></a>
<h4 class="subsubsection">28.1.11.1 Switching between Branches</h4>

<p>The various version control systems differ in how branches are
implemented, and these differences cannot be entirely concealed by VC.

</p>
<p>On some decentralized version control systems, including Bazaar and
Mercurial in its normal mode of operation, each branch has its own
working directory tree, so switching between branches just involves
switching directories.  On Git, branches are normally <em>co-located</em>
in the same directory, and switching between branches is done using
the <kbd>git checkout</kbd> command, which changes the contents of the
working tree to match the branch you switch to.  Bazaar also supports
co-located branches, in which case the <kbd>bzr switch</kbd> command
will switch branches in the current directory.  With Subversion, you
switch to another branch using the <kbd>svn switch</kbd> command.  With
Mercurial, command <kbd>hg update</kbd> is used to swith to another
branch.

</p>
<p>The VC command to switch to another branch in the current directory
is <kbd>C-x v r <var>branch-name</var> <span class="key">RET</span></kbd> (<code>vc-retrieve-tag</code>).

</p>
<p>On centralized version control systems, you can also switch between
branches by typing <kbd>C-u C-x v v</kbd> in an up-to-date work file
(see <a href="#Advanced-C_002dx-v-v">Advanced C-x v v</a>), and entering the revision ID for a
revision on another branch.  On CVS, for instance, revisions on the
<em>trunk</em> (the main line of development) normally have IDs of the
form 1.1, 1.2, 1.3, …, while the first branch created from (say)
revision 1.2 has revision IDs 1.2.1.1, 1.2.1.2, …, the second
branch created from revision 1.2 has revision IDs 1.2.2.1, 1.2.2.2,
…, and so forth.  You can also specify the <em>branch ID</em>,
which is a branch revision ID omitting its final component
(e.g., 1.2.1), to switch to the latest revision on that branch.

</p>
<p>On a locking-based system, switching to a different branch also
unlocks (write-protects) the working tree.

</p>
<p>Once you have switched to a branch, VC commands will apply to that
branch until you switch away; for instance, any VC filesets that you
commit will be committed to that specific branch.

</p>

<a name="Pulling-_002f-Pushing"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Merging" accesskey="n" rel="next">Merging</a>, Previous: <a href="#Switching-Branches" accesskey="p" rel="prev">Switching Branches</a>, Up: <a href="#Branches" accesskey="u" rel="up">Branches</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Pulling_002fPushing-Changes-into_002ffrom-a-Branch"></a>
<h4 class="subsubsection">28.1.11.2 Pulling/Pushing Changes into/from a Branch</h4>

<dl compact="compact">
<dt><kbd>C-x v P</kbd></dt>
<dd><p>On a decentralized version control system, update another location
with changes from the current branch (a.k.a. “push” changes).  This
concept does not exist for centralized version control systems

</p>
</dd>
<dt><kbd>C-x v +</kbd></dt>
<dd><p>On a decentralized version control system, update the current branch
by “pulling in” changes from another location.

</p>
<p>On a centralized version control system, update the current VC
fileset.

</p></dd>
</dl>

<a name="index-C_002dx-v-P"></a>
<a name="index-vc_002dpush"></a>
<p>On a decentralized version control system, the command <kbd>C-x v P</kbd>
(<code>vc-push</code>) updates another location with changes from the
current branch.  With a prefix argument, it prompts for the exact
version control command to run, which lets you specify where to push
changes; the default is <kbd>bzr push</kbd> with Bazaar, <kbd>git
push</kbd> with Git, and <kbd>hg push</kbd> with Mercurial.  The default
commands always push to a default location determined by the version
control system from your branch configuration.

</p>
<p>Prior to pushing, you can use <kbd>C-x v O</kbd> (<code>vc-log-outgoing</code>)
to view a log buffer of the changes to be sent.  See <a href="#VC-Change-Log">VC Change Log</a>.

</p>
<a name="index-bound-branch-_0028Bazaar-VCS_0029"></a>
<p>This command is currently supported only by Bazaar, Git, and Mercurial.
The concept of “pushing” does not exist for centralized version
control systems, where this operation is a part of committing a
changeset, so invoking this command on a centralized VCS signals an
error.  This command also signals an error when attempted in a Bazaar
<em>bound branch</em>, where committing a changeset automatically pushes
the changes to the remote repository to which the local branch is
bound.

</p>
<a name="index-C_002dx-v-_002b"></a>
<a name="index-vc_002dpull"></a>
<p>On a decentralized version control system, the command <kbd>C-x v +</kbd>
(<code>vc-pull</code>) updates the current branch and working tree.  It is
typically used to update a copy of a remote branch.  If you supply a
prefix argument, the command prompts for the exact version control
command to use, which lets you specify where to pull changes from.
Otherwise, it pulls from a default location determined by the version
control system.

</p>
<p>Amongst decentralized version control systems, <kbd>C-x v +</kbd> is
currently supported only by Bazaar, Git, and Mercurial.  With Bazaar,
it calls <kbd>bzr pull</kbd> for ordinary branches (to pull from a
master branch into a mirroring branch), and <kbd>bzr update</kbd> for a
bound branch (to pull from a central repository).  With Git, it calls
<kbd>git pull</kbd> to fetch changes from a remote repository and merge
it into the current branch.  With Mercurial, it calls <kbd>hg pull
-u</kbd> to fetch changesets from the default remote repository and update
the working directory.

</p>
<p>Prior to pulling, you can use <kbd>C-x v I</kbd> (<code>vc-log-incoming</code>)
to view a log buffer of the changes to be applied.  See <a href="#VC-Change-Log">VC Change Log</a>.

</p>
<p>On a centralized version control system like CVS, <kbd>C-x v +</kbd>
updates the current VC fileset from the repository.

</p>

<a name="Merging"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Creating-Branches" accesskey="n" rel="next">Creating Branches</a>, Previous: <a href="#Pulling-_002f-Pushing" accesskey="p" rel="prev">Pulling / Pushing</a>, Up: <a href="#Branches" accesskey="u" rel="up">Branches</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Merging-Branches"></a>
<h4 class="subsubsection">28.1.11.3 Merging Branches</h4>
<a name="index-merging-changes"></a>

<dl compact="compact">
<dt><kbd>C-x v m</kbd></dt>
<dd><p>On a decentralized version control system, merge changes from another
branch into the current one.

</p>
<p>On a centralized version control system, merge changes from another
branch into the current VC fileset.

</p></dd>
</dl>

<p>While developing a branch, you may sometimes need to <em>merge</em> in
changes that have already been made in another branch.  This is not a
trivial operation, as overlapping changes may have been made to the
two branches.

</p>
<p>On a decentralized version control system, merging is done with the
command <kbd>C-x v m</kbd> (<code>vc-merge</code>).  On Bazaar, this prompts for
the exact arguments to pass to <kbd>bzr merge</kbd>, offering a
sensible default if possible.  On Git, this prompts for the name of a
branch to merge from, with completion (based on the branch names known
to the current repository).  With Mercurial, this prompts for argument
to pass to <kbd>hg merge</kbd>.  The output from running the merge
command is shown in a separate buffer.

</p>
<p>On a centralized version control system like CVS, <kbd>C-x v m</kbd>
prompts for a branch ID, or a pair of revision IDs (see <a href="#Switching-Branches">Switching Branches</a>); then it finds the changes from that branch, or the changes
between the two revisions you specified, and merges those changes into
the current VC fileset.  If you just type <kbd><span class="key">RET</span></kbd>, Emacs simply
merges any changes that were made on the same branch since you checked
the file out.

</p>
<a name="index-conflicts"></a>
<a name="index-resolving-conflicts"></a>
<p>Immediately after performing a merge, only the working tree is
modified, and you can review the changes produced by the merge with
<kbd>C-x v D</kbd> and related commands (see <a href="#Old-Revisions">Old Revisions</a>).  If the
two branches contained overlapping changes, merging produces a
<em>conflict</em>; a warning appears in the output of the merge command,
and <em>conflict markers</em> are inserted into each affected work file,
surrounding the two sets of conflicting changes.  You must then
resolve the conflict by editing the conflicted files.  Once you are
done, the modified files must be committed in the usual way for the
merge to take effect (see <a href="#Basic-VC-Editing">Basic VC Editing</a>).

</p>

<a name="Creating-Branches"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Merging" accesskey="p" rel="prev">Merging</a>, Up: <a href="#Branches" accesskey="u" rel="up">Branches</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Creating-New-Branches"></a>
<h4 class="subsubsection">28.1.11.4 Creating New Branches</h4>

<p>On centralized version control systems like CVS, Emacs supports
creating new branches as part of a commit operation.  When committing
a modified VC fileset, type <kbd>C-u C-x v v</kbd> (<code>vc-next-action</code>
with a prefix argument; see <a href="#Advanced-C_002dx-v-v">Advanced C-x v v</a>).  Then Emacs prompts
for a revision ID for the new revision.  You should specify a suitable
branch ID for a branch starting at the current revision.  For example,
if the current revision is 2.5, the branch ID should be 2.5.1, 2.5.2,
and so on, depending on the number of existing branches at that point.

</p>
<p>To create a new branch at an older revision (one that is no longer
the head of a branch), first select that revision (see <a href="#Switching-Branches">Switching Branches</a>).  Your procedure will then differ depending on whether you
are using a locking or merging-based VCS.

</p>
<p>On a locking VCS, you will need to lock the old revision branch with
<kbd>C-x v v</kbd>.  You’ll be asked to confirm, when you lock the old
revision, that you really mean to create a new branch—if you say no,
you’ll be offered a chance to lock the latest revision instead.  On a
merging-based VCS you will skip this step.

</p>
<p>Then make your changes and type <kbd>C-x v v</kbd> again to commit a new
revision.  This creates a new branch starting from the selected
revision.

</p>
<p>After the branch is created, subsequent commits create new revisions
on that branch.  To leave the branch, you must explicitly select a
different revision with <kbd>C-u C-x v v</kbd>.

</p>


<a name="Miscellaneous-VC"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Customizing-VC" accesskey="n" rel="next">Customizing VC</a>, Previous: <a href="#Branches" accesskey="p" rel="prev">Branches</a>, Up: <a href="#Version-Control" accesskey="u" rel="up">Version Control</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Miscellaneous-Commands-and-Features-of-VC"></a>
<h4 class="subsection">28.1.12 Miscellaneous Commands and Features of VC</h4>

<p>This section explains the less-frequently-used features of VC.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Change-Logs-and-VC" accesskey="1">Change Logs and VC</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Generating a change log file from log entries.

</td></tr>
<tr><td align="left" valign="top">• <a href="#VC-Delete_002fRename" accesskey="2">VC Delete/Rename</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Deleting and renaming version-controlled files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Revision-Tags" accesskey="3">Revision Tags</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Symbolic names for revisions.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Version-Headers" accesskey="4">Version Headers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Inserting version control headers into working files.

</td></tr>
</tbody></table>


<a name="Change-Logs-and-VC"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#VC-Delete_002fRename" accesskey="n" rel="next">VC Delete/Rename</a>, Up: <a href="#Miscellaneous-VC" accesskey="u" rel="up">Miscellaneous VC</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Change-Logs-and-VC-1"></a>
<h4 class="subsubsection">28.1.12.1 Change Logs and VC</h4>

<p>If you use RCS or CVS for a program with a <samp>ChangeLog</samp> file
(see <a href="#Change-Log">Change Log</a>),
you can generate change log entries from the version control log
entries of previous commits.

</p>
<p>Note that this only works with RCS or CVS.  This procedure would be
particularly incorrect on a modern changeset-based version control
system, where changes to the <samp>ChangeLog</samp> file would normally be
committed as part of a changeset.  In that case, you should write the
change log entries first, then pull them into the ‘<samp>*vc-log*</samp>’
buffer when you commit
(see <a href="#Log-Buffer">Log Buffer</a>).

</p>
<dl compact="compact">
<dt><kbd>C-x v a</kbd></dt>
<dd><a name="index-C_002dx-v-a"></a>
<a name="index-vc_002dupdate_002dchange_002dlog"></a>
<p>Visit the current directory’s <samp>ChangeLog</samp> file and, for
registered files in that directory, create new entries for versions
committed since the most recent change log entry
(<code>vc-update-change-log</code>).

</p>
</dd>
<dt><kbd>C-u C-x v a</kbd></dt>
<dd><p>As above, but only find entries for the current buffer’s file.

</p></dd>
</dl>

<p>For example, suppose the first line of <samp>ChangeLog</samp> is dated
1999-04-10, and that the only check-in since then was by Nathaniel
Bowditch to <samp>rcs2log</samp> on 1999-05-22 with log entry ‘<samp>Ignore
log messages that start with '#'.</samp>’.  Then <kbd>C-x v a</kbd> inserts this
<samp>ChangeLog</samp> entry:

</p>
<div class="smallexample">
<pre class="smallexample">1999-05-22  Nathaniel Bowditch  &lt;nat@apn.org&gt;

        * rcs2log: Ignore log messages that start with '#'.
</pre></div>

<p>If the version control log entry specifies a function name (in
parenthesis at the beginning of a line), that is reflected in the
<samp>ChangeLog</samp> entry.  For example, if a log entry for <samp>vc.el</samp>
is ‘<samp>(vc-do-command): Check call-process status.</samp>’, the
<samp>ChangeLog</samp> entry is:

</p>
<div class="smallexample">
<pre class="smallexample">1999-05-06  Nathaniel Bowditch  &lt;nat@apn.org&gt;

        * vc.el (vc-do-command): Check call-process status.
</pre></div>

<p>When <kbd>C-x v a</kbd> adds several change log entries at once, it
groups related log entries together if they all are checked in by the
same author at nearly the same time.  If the log entries for several
such files all have the same text, it coalesces them into a single
entry.

</p>

<a name="VC-Delete_002fRename"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Revision-Tags" accesskey="n" rel="next">Revision Tags</a>, Previous: <a href="#Change-Logs-and-VC" accesskey="p" rel="prev">Change Logs and VC</a>, Up: <a href="#Miscellaneous-VC" accesskey="u" rel="up">Miscellaneous VC</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Deleting-and-Renaming-Version_002dControlled-Files"></a>
<h4 class="subsubsection">28.1.12.2 Deleting and Renaming Version-Controlled Files</h4>
<a name="index-renaming-version_002dcontrolled-files"></a>

<dl compact="compact">
<dt><kbd>M-x vc-delete-file</kbd></dt>
<dd><p>Prompt for a file name, delete the file from the working tree, and
schedule the deletion for committing.

</p>
</dd>
<dt><kbd>M-x vc-rename-file</kbd></dt>
<dd><p>Prompt for two file names, <var>old</var> and <var>new</var>, rename them in the
working tree, and schedule the renaming for committing.  The <var>old</var>
file defaults to the current buffer’s file name if it is under VC.

</p></dd>
</dl>

<a name="index-vc_002ddelete_002dfile"></a>
<p>If you wish to delete a version-controlled file, use the command
<kbd>M-x vc-delete-file</kbd>.  This prompts for the file name, and deletes
it via the version control system.  The file is removed from the
working tree, and in the VC Directory buffer
(see <a href="#VC-Directory-Mode">VC Directory Mode</a>),
it is displayed with the ‘<samp>removed</samp>’ status.  When you commit it,
the deletion takes effect in the repository.

</p>
<a name="index-vc_002drename_002dfile"></a>
<p>To rename a version-controlled file, type <kbd>M-x vc-rename-file</kbd>.
This prompts for two arguments: the name of the file you wish to
rename, and the new name; then it performs the renaming via the
version control system.  The renaming takes effect immediately in the
working tree, and takes effect in the repository when you commit the
renamed file.

</p>
<p>On modern version control systems that have built-in support for
renaming, the renamed file retains the full change history of the
original file.  On CVS and older version control systems, the
<code>vc-rename-file</code> command actually works by creating a copy of the
old file under the new name, registering it, and deleting the old
file.  In this case, the change history is not preserved.

</p>

<a name="Revision-Tags"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Version-Headers" accesskey="n" rel="next">Version Headers</a>, Previous: <a href="#VC-Delete_002fRename" accesskey="p" rel="prev">VC Delete/Rename</a>, Up: <a href="#Miscellaneous-VC" accesskey="u" rel="up">Miscellaneous VC</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Revision-Tags-1"></a>
<h4 class="subsubsection">28.1.12.3 Revision Tags</h4>
<a name="index-revision-tag"></a>
<a name="index-tags-for-version-control"></a>

<p>Most version control systems allow you to apply a <em>revision tag</em>
to a specific version of a version-controlled tree.  On modern
changeset-based version control systems, a revision tag is simply a
symbolic name for a particular revision.  On older file-based systems
like CVS, each tag is added to the entire set of version-controlled
files, allowing them to be handled as a unit.  Revision tags are
commonly used to identify releases that are distributed to users.

</p>
<p>There are two basic commands for tags; one makes a tag with a given
name, the other retrieves a named tag.

</p>
<dl compact="compact">
<dd><a name="index-C_002dx-v-s"></a>
<a name="index-vc_002dcreate_002dtag"></a>
</dd>
<dt><code>C-x v s <var>name</var> <span class="key">RET</span></code></dt>
<dd><p>Define the working revision of every registered file in or under the
current directory as a tag named <var>name</var>
(<code>vc-create-tag</code>).

</p>
<a name="index-C_002dx-v-r"></a>
<a name="index-vc_002dretrieve_002dtag"></a>
</dd>
<dt><code>C-x v r <var>name</var> <span class="key">RET</span></code></dt>
<dd><p>For all registered files at or below the current directory level,
retrieve the tagged revision <var>name</var>. This command will switch to a
branch if <var>name</var> is a branch name and your VCS distinguishes
branches from tags.  (<code>vc-retrieve-tag</code>).

</p>
<p>This command reports an error if any files are locked at or below the
current directory, without changing anything; this is to avoid
overwriting work in progress.

</p></dd>
</dl>

<p>You can give a tag or branch name as an argument to <kbd>C-x v =</kbd> or
<kbd>C-x v ~</kbd>
(see <a href="#Old-Revisions">Old Revisions</a>).
Thus, you can use it to compare a tagged version against the current files,
or two tagged versions against each other.

</p>
<p>On SCCS, VC implements tags itself; these tags are visible only
through VC.  Most later systems (including CVS, Subversion, bzr, git,
and hg) have a native tag facility, and VC uses it where available;
those tags will be visible even when you bypass VC.

</p>
<p>In file-based version control systems, when you rename a registered
file you need to rename its master along with it; the command
<code>vc-rename-file</code> will do this automatically
(see <a href="#VC-Delete_002fRename">VC Delete/Rename</a>).
If you are using SCCS, you must also update the records of the tag, to
mention the file by its new name (<code>vc-rename-file</code> does this,
too).  An old tag that refers to a master file that no longer exists
under the recorded name is invalid; VC can no longer retrieve it.  It
would be beyond the scope of this manual to explain enough about RCS
and SCCS to explain how to update the tags by hand.  Using
<code>vc-rename-file</code> makes the tag remain valid for retrieval, but it
does not solve all problems.  For example, some of the files in your
program probably refer to others by name.  At the very least, the
makefile probably mentions the file that you renamed.  If you retrieve
an old tag, the renamed file is retrieved under its new name, which is
not the name that the makefile expects.  So the program won’t really
work as retrieved.

</p>

<a name="Version-Headers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Revision-Tags" accesskey="p" rel="prev">Revision Tags</a>, Up: <a href="#Miscellaneous-VC" accesskey="u" rel="up">Miscellaneous VC</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Inserting-Version-Control-Headers"></a>
<h4 class="subsubsection">28.1.12.4 Inserting Version Control Headers</h4>

<p>On Subversion, CVS, RCS, and SCCS, you can put certain special
strings called <em>version headers</em> into a work file.  When the file
is committed, the version control system automatically puts the
revision number, the name of the user who made the commit, and other
relevant information into the version header.

</p>
<a name="index-vc_002dconsult_002dheaders"></a>
<p>VC does not normally use the information in the version headers.  As
an exception, when using RCS, Emacs uses the version header, if there
is one, to determine the file version, since it is often more reliable
than the RCS master file.  To inhibit using the version header this
way, change the variable <code>vc-consult-headers</code> to <code>nil</code>.  VC
then always uses the file permissions (if it is supposed to trust
them), or else checks the master file.

</p>
<a name="index-vc_002dinsert_002dheaders"></a>
<a name="index-vc_002dbackend_002dheader"></a>
<p>To insert a suitable header string into the current buffer, use the
command <kbd>M-x vc-insert-headers</kbd>.  This command works only on
Subversion, CVS, RCS, and SCCS.  The variable
<code>vc-<var>backend</var>-header</code> contains the list of keywords to insert
into the version header; for instance, CVS uses <code>vc-cvs-header</code>,
whose default value is <code>'("\$Id\$")</code>.  (The extra backslashes
prevent the string constant from being interpreted as a header, if the
Emacs Lisp file defining it is maintained with version control.)  The
<code>vc-insert-headers</code> command inserts each keyword in the list on a
new line at point, surrounded by tabs, and inside comment delimiters
if necessary.

</p>
<a name="index-vc_002dstatic_002dheader_002dalist"></a>
<p>The variable <code>vc-static-header-alist</code> specifies further strings
to add based on the name of the buffer.  Its value should be a list of
elements of the form <code>(<var>regexp</var> . <var>format</var>)</code>.  Whenever
<var>regexp</var> matches the buffer name, <var>format</var> is also inserted as
part of the version header.  A ‘<samp>%s</samp>’ in <var>format</var> is replaced
with the file’s version control type.

</p>

<a name="Customizing-VC"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Miscellaneous-VC" accesskey="p" rel="prev">Miscellaneous VC</a>, Up: <a href="#Version-Control" accesskey="u" rel="up">Version Control</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Customizing-VC-1"></a>
<h4 class="subsection">28.1.13 Customizing VC</h4>

<a name="index-vc_002dhandled_002dbackends"></a>
<p>The variable <code>vc-handled-backends</code> determines which version
control systems VC should handle.  The default value is <code>(RCS CVS
SVN SCCS SRC Bzr Git Hg Mtn)</code>, so it contains all the version systems
that are currently supported.  If you want VC to ignore one or more of
these systems, exclude its name from the list.  To disable VC
entirely, set this variable to <code>nil</code>.

</p>
<p>The order of systems in the list is significant: when you visit a
file registered in more than one system, VC uses the system that comes
first in <code>vc-handled-backends</code> by default.  The order is also
significant when you register a file for the first time
(see <a href="#Registering">Registering</a>).

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#General-VC-Options" accesskey="1">General VC Options</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Options that apply to multiple back ends.

</td></tr>
<tr><td align="left" valign="top">• <a href="#RCS-and-SCCS" accesskey="2">RCS and SCCS</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Options for RCS and SCCS.

</td></tr>
<tr><td align="left" valign="top">• <a href="#CVS-Options" accesskey="3">CVS Options</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Options for CVS.

</td></tr>
</tbody></table>


<a name="General-VC-Options"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#RCS-and-SCCS" accesskey="n" rel="next">RCS and SCCS</a>, Up: <a href="#Customizing-VC" accesskey="u" rel="up">Customizing VC</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="General-Options"></a>
<h4 class="subsubsection">28.1.13.1 General Options</h4>

<a name="index-vc_002dmake_002dbackup_002dfiles"></a>
<p>Emacs normally does not save backup files for source files that are
maintained with version control.  If you want to make backup files even
for files that use version control, set the variable
<code>vc-make-backup-files</code> to a non-<code>nil</code> value.

</p>
<a name="index-vc_002dfollow_002dsymlinks"></a>
<a name="index-symbolic-links-_0028and-version-control_0029"></a>
<p>Editing a version-controlled file through a symbolic link may cause
unexpected results, if you are unaware that the underlying file is
version-controlled.  The variable <code>vc-follow-symlinks</code> controls
what Emacs does if you try to visit a symbolic link pointing to a
version-controlled file.  If the value is <code>ask</code> (the default),
Emacs asks for confirmation.  If it is <code>nil</code>, Emacs just displays
a warning message.  If it is <code>t</code>, Emacs automatically follows the
link and visits the real file instead.

</p>
<a name="index-vc_002dsuppress_002dconfirm"></a>
<p>If <code>vc-suppress-confirm</code> is non-<code>nil</code>, then <kbd>C-x v v</kbd>
and <kbd>C-x v i</kbd> can save the current buffer without asking, and
<kbd>C-x v u</kbd> also operates without asking for confirmation.

</p>
<a name="index-vc_002dcommand_002dmessages"></a>
<p>VC mode does much of its work by running the shell commands for the
appropriate version control system.  If <code>vc-command-messages</code> is
non-<code>nil</code>, VC displays messages to indicate which shell commands
it runs, and additional messages when the commands finish.

</p>

<a name="RCS-and-SCCS"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#CVS-Options" accesskey="n" rel="next">CVS Options</a>, Previous: <a href="#General-VC-Options" accesskey="p" rel="prev">General VC Options</a>, Up: <a href="#Customizing-VC" accesskey="u" rel="up">Customizing VC</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Options-for-RCS-and-SCCS"></a>
<h4 class="subsubsection">28.1.13.2 Options for RCS and SCCS</h4>

<a name="index-non_002dstrict-locking-_0028RCS_0029"></a>
<a name="index-locking_002c-non_002dstrict-_0028RCS_0029"></a>
<p>By default, RCS uses locking to coordinate the activities of several
users, but there is a mode called <em>non-strict locking</em> in which
you can check-in changes without locking the file first.  Use
‘<samp>rcs -U</samp>’ to switch to non-strict locking for a particular file,
see the <code>rcs</code> manual page for details.

</p>
<p>When deducing the version control state of an RCS file, VC first
looks for an RCS version header string in the file (see <a href="#Version-Headers">Version Headers</a>).  If there is no header string, VC normally looks at the
file permissions of the work file; this is fast.  But there might be
situations when the file permissions cannot be trusted.  In this case
the master file has to be consulted, which is rather expensive.  Also
the master file can only tell you <em>if</em> there’s any lock on the
file, but not whether your work file really contains that locked
version.

</p>
<p>You can tell VC not to use version headers to determine the file
status by setting <code>vc-consult-headers</code> to <code>nil</code>.  VC then
always uses the file permissions (if it is supposed to trust them), or
else checks the master file.

</p>
<p>VC determines the version control state of files under SCCS much as
with RCS.  It does not consider SCCS version headers, though.  Thus,
the variable <code>vc-consult-headers</code> does not affect SCCS use.

</p>

<a name="CVS-Options"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#RCS-and-SCCS" accesskey="p" rel="prev">RCS and SCCS</a>, Up: <a href="#Customizing-VC" accesskey="u" rel="up">Customizing VC</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Options-specific-for-CVS"></a>
<h4 class="subsubsection">28.1.13.3 Options specific for CVS</h4>

<a name="index-vc_002dcvs_002dglobal_002dswitches"></a>
<p>You can specify additional command line options to pass to all CVS
operations in the variable <code>vc-cvs-global-switches</code>.  These
switches are inserted immediately after the <code>cvs</code> command, before
the name of the operation to invoke.

</p>
<a name="index-vc_002dcvs_002dstay_002dlocal"></a>
<a name="index-remote-repositories-_0028CVS_0029"></a>
<p>When using a CVS repository on a remote machine, VC can try keeping
network interactions to a minimum.  This is controlled by the variable
<code>vc-cvs-stay-local</code>.  If <code>vc-cvs-stay-local</code> is
<code>only-file</code> (the default), VC determines the version control
status of each file using only the entry in the local CVS subdirectory
and the information returned by previous CVS commands.  As a
consequence, if you have modified a file and somebody else has checked
in other changes, you will not be notified of the conflict until you
try to commit.

</p>
<p>If you change <code>vc-cvs-stay-local</code> to <code>nil</code>, VC queries the
remote repository <em>before</em> it decides what to do in
<code>vc-next-action</code> (<kbd>C-x v v</kbd>), just as it does for local
repositories.

</p>
<p>You can also set <code>vc-cvs-stay-local</code> to a regular expression
that is matched against the repository host name; VC then stays local
only for repositories from hosts that match the pattern.

</p>
<a name="index-automatic-version-backups"></a>
<p>When using a remote repository, Emacs normally makes <em>automatic
version backups</em> of the original versions of each edited file.  These
local backups are made whenever you save the first changes to a file,
and they are removed after you commit your changes to the repository.
(Note that these are not the same as ordinary Emacs backup files;
see <a href="#Backup">Backup</a>.)
Commands like <kbd>C-x v =</kbd> and <kbd>C-x v u</kbd> make use of automatic
version backups, if possible, to avoid having to access the network.

</p>
<p>Setting <code>vc-cvs-stay-local</code> to <code>nil</code> disables the making
of automatic version backups.

</p>
<a name="index-manual-version-backups"></a>
<p>Automatic version backups have names of the form
<code><var>file</var>.~<var>version</var>.~</code><!-- /@w -->.  This is similar to the name
that <kbd>C-x v ~</kbd> saves old versions to
(see <a href="#Old-Revisions">Old Revisions</a>),
except for the additional dot (‘<samp>.</samp>’) after the version.  The
relevant VC commands can use both kinds of version backups.  The main
difference is that the manual version backups made by <kbd>C-x v
~</kbd> are not deleted automatically when you commit.

</p>
<a name="index-locking-_0028CVS_0029"></a>
<p>CVS does not use locking by default, but there are ways to enable
locking-like behavior using its <code>CVSREAD</code> or <em>watch</em> feature;
see the CVS documentation for details.  If that case, you can use
<kbd>C-x v v</kbd> in Emacs to toggle locking, as you would for a
locking-based version control system
(see <a href="#VC-With-A-Locking-VCS">VC With A Locking VCS</a>).

</p>

<a name="Projects"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Change-Log" accesskey="n" rel="next">Change Log</a>, Previous: <a href="#Version-Control" accesskey="p" rel="prev">Version Control</a>, Up: <a href="#Maintaining" accesskey="u" rel="up">Maintaining</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Working-with-Projects"></a>
<h3 class="section">28.2 Working with Projects</h3>
<a name="index-projects"></a>

<a name="index-project-root"></a>
<p>A <em>project</em> is a collection of files used for producing one or
more programs.  Files that belong to a project are typically stored in
a hierarchy of directories; the top-level directory of the hierarchy
is known as the <em>project root</em>.

</p>
<a name="index-project-back_002dend"></a>
<p>Whether a given directory is a root of some project is determined by
the project-specific infrastructure, known as <em>project back-end</em>.
Emacs currently supports two such back-ends: VC (see <a href="#Version-Control">Version Control</a>), whereby a VCS repository is considered a project; and EDE
(see <a href="#EDE">EDE</a>).  This is expected to be extended in the future to
support additional types of projects.

</p>
<p>Which files do or don’t belong to a project is also determined by
the project back-end.  For example, the VC back-end doesn’t consider
“ignored” files (see <a href="#VC-Ignore">VC Ignore</a>) to be part of the project.

</p>
<p>Emacs provides commands for handling project files conveniently.
This section describes these commands.

</p>
<a name="index-current-project"></a>
<p>All of the commands described here share the notion of the
<em>current project</em>.  The current project is determined by the
<code>default-directory</code> (see <a href="#File-Names">File Names</a>) of the buffer that is
the current buffer when the command is invoked.  If that directory
doesn’t seem to belong to a recognizable project, these commands
prompt you for the project directory.

</p>
<a name="index-project_002dfind_002dfile"></a>
<p>The command <code>project-find-file</code> is a convenient way of visiting
files (see <a href="#Visiting">Visiting</a>) that belong to the current project.  Unlike
<kbd>C-x C-f</kbd>, this command doesn’t require to type the full file name
of the file to visit, you can type only the file’s base name (i.e.,
omit the leading directories).  In addition, the completion candidates
considered by the command include only the files belonging to the
current project, and nothing else.  If there’s a file name at point,
this command offers that file as the default to visit.

</p>
<a name="index-project_002dfind_002dregexp"></a>
<p>The command <code>project-find-regexp</code> is similar to <code>rgrep</code>
(see <a href="#Grep-Searching">Grep Searching</a>), but it searches only the files that belong
to the current project.  The command prompts for the regular
expression to search, and pops up an Xref mode buffer with the search
results, where you can select a match using the Xref mode commands
(see <a href="#Xref-Commands">Xref Commands</a>).  When invoked with a prefix argument, this
command additionally prompts for the base directory from which to
start the search; this allows, for example, to limit the search only
to project files under a certain subdirectory of the project root.

</p>
<a name="index-project_002dsearch"></a>
<p><kbd>M-x project-search</kbd> is an interactive variant of
<code>project-find-regexp</code>.  It prompts for a regular expression to
search in the current project’s files, but instead of finding all the
matches and displaying them, it stops when it finds a match and visits
the matched file at the locus of the match, allowing you to edit the
matched file.  To find the rest of the matches, type <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">fileloop-continue</span>&nbsp;<span class="key">RET</span></kbd><!-- /@w -->.

</p>
<a name="index-project_002dquery_002dreplace_002dregexp"></a>
<p><kbd>M-x project-query-replace-regexp</kbd> is similar to
<code>project-search</code>, but it prompts you for whether to replace each
match it finds, like <code>query-replace</code> does (see <a href="#Query-Replace">Query Replace</a>), and continues to the next match after you respond.  If your
response causes Emacs to exit the query-replace loop, you can later
continue with <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">fileloop-continue</span>&nbsp;<span class="key">RET</span></kbd><!-- /@w -->.

</p>

<a name="Change-Log"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Xref" accesskey="n" rel="next">Xref</a>, Previous: <a href="#Projects" accesskey="p" rel="prev">Projects</a>, Up: <a href="#Maintaining" accesskey="u" rel="up">Maintaining</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Change-Logs"></a>
<h3 class="section">28.3 Change Logs</h3>

<a name="index-change-log"></a>
<p>Many software projects keep a <em>change log</em>.  This is a file,
normally named <samp>ChangeLog</samp>, containing a chronological record of
when and how the program was changed.  Sometimes, these files are
automatically generated from the change log entries stored in version
control systems, or are used to generate these change log entries.
Sometimes, there are several change log files, each recording the
changes in one directory or directory tree.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Change-Log-Commands" accesskey="1">Change Log Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands for editing change log files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Format-of-ChangeLog" accesskey="2">Format of ChangeLog</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">What the change log file looks like.

</td></tr>
</tbody></table>


<a name="Change-Log-Commands"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Format-of-ChangeLog" accesskey="n" rel="next">Format of ChangeLog</a>, Up: <a href="#Change-Log" accesskey="u" rel="up">Change Log</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Change-Log-Commands-1"></a>
<h4 class="subsection">28.3.1 Change Log Commands</h4>

<a name="index-C_002dx-4-a"></a>
<a name="index-add_002dchange_002dlog_002dentry_002dother_002dwindow"></a>
<p>The Emacs command <kbd>C-x 4 a</kbd> adds a new entry to the change log
file for the file you are editing
(<code>add-change-log-entry-other-window</code>).  If that file is actually
a backup file, it makes an entry appropriate for the file’s
parent—that is useful for making log entries for functions that
have been deleted in the current version.

</p>
<p><kbd>C-x 4 a</kbd> visits the change log file and creates a new entry
unless the most recent entry is for today’s date and your name.  It
also creates a new item for the current file.  For many languages, it
can even guess the name of the function or other object that was
changed.

</p>
<p>To find the change log file, Emacs searches up the directory tree from
the file you are editing.  By default, it stops if it finds a
directory that seems to be the root of a version-control repository.
To change this, customize <code>change-log-directory-files</code>.

</p>
<a name="index-add_002dlog_002dkeep_002dchanges_002dtogether"></a>
<p>When the variable <code>add-log-keep-changes-together</code> is
non-<code>nil</code>, <kbd>C-x 4 a</kbd> adds to any existing item for the file,
rather than starting a new item.

</p>
<p>You can combine multiple changes of the same nature.  If you don’t
enter any text after the initial <kbd>C-x 4 a</kbd>, any subsequent
<kbd>C-x 4 a</kbd> adds another symbol to the change log entry.

</p>
<a name="index-add_002dlog_002dalways_002dstart_002dnew_002drecord"></a>
<p>If <code>add-log-always-start-new-record</code> is non-<code>nil</code>,
<kbd>C-x 4 a</kbd> always makes a new entry, even if the last entry
was made by you and on the same date.

</p>
<a name="index-change_002dlog_002dversion_002dinfo_002denabled"></a>
<a name="index-change_002dlog_002dversion_002dnumber_002dregexp_002dlist"></a>
<a name="index-file-version-in-change-log-entries"></a>
<p>If the value of the variable <code>change-log-version-info-enabled</code>
is non-<code>nil</code>, <kbd>C-x 4 a</kbd> adds the file’s version number to the
change log entry.  It finds the version number by searching the first
ten percent of the file, using regular expressions from the variable
<code>change-log-version-number-regexp-list</code>.

</p>
<a name="index-Change-Log-mode"></a>
<a name="index-change_002dlog_002dmode"></a>
<p>The change log file is visited in Change Log mode.  In this major
mode, each bunch of grouped items counts as one paragraph, and each
entry is considered a page.  This facilitates editing the entries.
<kbd>C-j</kbd> and auto-fill indent each new line like the previous line;
this is convenient for entering the contents of an entry.

</p>
<a name="index-change_002dlog_002dgoto_002dsource"></a>
<p>You can use the command <code>change-log-goto-source</code> (by default
bound to <kbd>C-c C-c</kbd>) to go to the source location of the change log
entry near point, when Change Log mode is on.  Then subsequent
invocations of the <code>next-error</code> command (by default bound to
<kbd>M-g M-n</kbd> and <kbd>C-x `</kbd>) will move between entries in the change
log.  You will jump to the actual site in the file that was changed,
not just to the next change log entry.  You can also use
<code>previous-error</code> to move back through the change log entries.

</p>
<a name="index-change_002dlog_002dmerge"></a>
<p>You can use the command <kbd>M-x change-log-merge</kbd> to merge other
log files into a buffer in Change Log Mode, preserving the date
ordering of entries.

</p>
<a name="index-add_002dlog_002ddont_002dcreate_002dchangelog_002dfile"></a>
<p>Version control systems are another way to keep track of changes in
your program and keep a change log.  Many projects that use a VCS don’t
keep a separate versioned change log file nowadays, so you may wish to
avoid having such a file in the repository.  If the value of
<code>add-log-dont-create-changelog-file</code> is non-<code>nil</code>, commands
like <kbd>C-x 4 a</kbd> (<code>add-change-log-entry-other-window</code>) will
record changes in a suitably named temporary buffer instead of a file,
if such a file does not already exist.

</p>
<p>Whether you have a change log file or use a temporary buffer for
change logs, you can type <kbd>C-c C-a</kbd>
(<code>log-edit-insert-changelog</code>) in the VC Log buffer to insert the
relevant change log entries, if they exist.  See <a href="#Log-Buffer">Log Buffer</a>.

</p>

<a name="Format-of-ChangeLog"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Change-Log-Commands" accesskey="p" rel="prev">Change Log Commands</a>, Up: <a href="#Change-Log" accesskey="u" rel="up">Change Log</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Format-of-ChangeLog-1"></a>
<h4 class="subsection">28.3.2 Format of ChangeLog</h4>

<p>A change log entry starts with a header line that contains the
current date, your name (taken from the variable
<code>add-log-full-name</code>), and your email address (taken from the
variable <code>add-log-mailing-address</code>).  Aside from these header
lines, every line in the change log starts with a space or a tab.  The
bulk of the entry consists of <em>items</em>, each of which starts with a
line starting with whitespace and a star.  Here are two entries, both
dated in May 1993, with two items and one item respectively.

</p>
<div class="smallexample">
<pre class="smallexample">1993-05-25  Richard Stallman  &lt;rms@gnu.org&gt;

        * man.el: Rename symbols 'man-*' to 'Man-*'.
        (manual-entry): Make prompt string clearer.

        * simple.el (blink-matching-paren-distance):
        Change default to 12,000.

1993-05-24  Richard Stallman  &lt;rms@gnu.org&gt;

        * vc.el (minor-mode-map-alist): Don't use it if it's void.
        (vc-cancel-version): Doc fix.
</pre></div>

<p>One entry can describe several changes; each change should have its
own item, or its own line in an item.  Normally there should be a
blank line between items.  When items are related (parts of the same
change, in different places), group them by leaving no blank line
between them.

</p>
<p>You should put a copyright notice and permission notice at the
end of the change log file.  Here is an example:

</p>
<div class="smallexample">
<pre class="smallexample">Copyright 1997, 1998 Free Software Foundation, Inc.
Copying and distribution of this file, with or without modification, are
permitted provided the copyright notice and this notice are preserved.
</pre></div>

<p>Of course, you should substitute the proper years and copyright holder.

</p>

<a name="Xref"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#EDE" accesskey="n" rel="next">EDE</a>, Previous: <a href="#Change-Log" accesskey="p" rel="prev">Change Log</a>, Up: <a href="#Maintaining" accesskey="u" rel="up">Maintaining</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Find-Identifier-References"></a>
<h3 class="section">28.4 Find Identifier References</h3>
<a name="index-xref"></a>

<p>An <em>identifier</em> is a name of a syntactical subunit of the
program: a function, a subroutine, a method, a class, a data type, a
macro, etc.  In a programming language, each identifier is a symbol in
the language’s syntax.  Program development and maintenance requires
capabilities to quickly find where each identifier was defined and
referenced, to rename identifiers across the entire project, etc.

</p>
<p>These capabilities are also useful for finding references in major
modes other than those defined to support programming languages.  For
example, chapters, sections, appendices, etc. of a text or a TeX
document can be treated as subunits as well, and their names can be
used as identifiers.  In this chapter, we use the term “identifiers”
to collectively refer to the names of any kind of subunits, in program
source and in other kinds of text alike.

</p>
<p>Emacs provides a unified interface to these capabilities, called
‘<samp>xref</samp>’.

</p>
<a name="index-xref-backend"></a>
<p>To do its job, <code>xref</code> needs to make use of information and to
employ methods specific to the major mode.  What files to search for
identifiers, how to find references to identifiers, how to complete on
identifiers—all this and more is mode-specific knowledge.
<code>xref</code> delegates the mode-specific parts of its job to a
<em>backend</em> provided by the mode; it also includes defaults for some
of its commands, for those modes that don’t provide their own.

</p>
<p>A backend can implement its capabilities in a variety of ways.  Here
are a few examples:

</p>
<ol type="a" start="1">
<li>  Some major modes provide built-in means for looking up the language
symbols.  For example, Emacs Lisp symbols can be identified by
searching the package load history, maintained by the Emacs Lisp
interpreter, and by consulting the built-in documentation strings; the
Emacs Lisp mode uses these facilities in its backend to allow finding
definitions of symbols.  (One disadvantage of this kind of backend is
that it only knows about subunits that were loaded into the
interpreter.)



</li><li>  An external program can extract references by scanning the relevant
files, and build a database of these references.  A backend can then
access this database whenever it needs to list or look up references.
The Emacs distribution includes <code>etags</code>, a command for tagging
identifier definitions in programs, which supports many programming
languages and other major modes, such as HTML, by extracting
references into <em>tags tables</em>.  See <a href="#Create-Tags-Table">Create Tags Table</a>.  Major
modes for languages supported by <code>etags</code> can use tags tables
as basis for their backend.  (One disadvantage of this kind of backend
is that tags tables need to be kept reasonably up to date, by
rebuilding them from time to time.)

</li></ol>

<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Find-Identifiers" accesskey="1">Find Identifiers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands to find where an identifier is defined
                          or referenced, to list identifiers, etc.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Tags-Tables" accesskey="2">Tags Tables</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Tags table records which file defines a symbol.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Select-Tags-Table" accesskey="3">Select Tags Table</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to visit a specific tags table.

</td></tr>
</tbody></table>


<a name="Find-Identifiers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Tags-Tables" accesskey="n" rel="next">Tags Tables</a>, Up: <a href="#Xref" accesskey="u" rel="up">Xref</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Find-Identifiers-1"></a>
<h4 class="subsection">28.4.1 Find Identifiers</h4>

<p>This subsection describes the commands that find references to
identifiers and perform various queries about identifiers.  Each such
reference could <em>define</em> an identifier, e.g., provide the
implementation of a program subunit or the text of a document section;
or it could <em>use</em> the identifier, e.g., call a function or a
method, assign a value to a variable, mention a chapter in a
cross-reference, etc.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Looking-Up-Identifiers" accesskey="1">Looking Up Identifiers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands to find the definition of an identifier.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Xref-Commands" accesskey="2">Xref Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands in the <samp>*xref*</samp> buffer.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Identifier-Search" accesskey="3">Identifier Search</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Searching and replacing identifiers.

</td></tr>
<tr><td align="left" valign="top">• <a href="#List-Identifiers" accesskey="4">List Identifiers</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Listing identifiers and completing on them.

</td></tr>
</tbody></table>


<a name="Looking-Up-Identifiers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Xref-Commands" accesskey="n" rel="next">Xref Commands</a>, Up: <a href="#Find-Identifiers" accesskey="u" rel="up">Find Identifiers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Looking-Up-Identifiers-1"></a>
<h4 class="subsubsection">28.4.1.1 Looking Up Identifiers</h4>
<a name="index-find-definition-of-symbols"></a>
<a name="index-identifier_002c-finding-definition-of"></a>
<a name="index-find-references-to-symbols"></a>

<p>The most important thing that <code>xref</code> enables you to do is to find
the definition of a specific identifier.

</p>
<dl compact="compact">
<dt><kbd>M-.</kbd></dt>
<dd><p>Find definitions of an identifier (<code>xref-find-definitions</code>).

</p></dd>
<dt><kbd>C-M-. <var>pattern</var> <span class="key">RET</span></kbd></dt>
<dd><p>Find all identifiers whose name matches <var>pattern</var>
(<code>xref-find-apropos</code>).

</p></dd>
<dt><kbd>C-x 4 . <span class="key">RET</span></kbd></dt>
<dd><p>Find definitions of identifier, but display it in another window
(<code>xref-find-definitions-other-window</code>).

</p></dd>
<dt><kbd>C-x 5 . <span class="key">RET</span></kbd></dt>
<dd><p>Find definition of identifier, and display it in a new frame
(<code>xref-find-definitions-other-frame</code>).

</p></dd>
<dt><kbd>M-x xref-find-definitions-at-mouse</kbd></dt>
<dd><p>Find definition of identifier at mouse click.

</p></dd>
<dt><kbd>M-,</kbd></dt>
<dd><p>Go back to where you previously invoked <kbd>M-.</kbd> and friends
(<code>xref-pop-marker-stack</code>).

</p></dd>
<dt><kbd>M-x xref-etags-mode</kbd></dt>
<dd><p>Switch <code>xref</code> to use the <code>etags</code> backend.

</p></dd>
</dl>

<a name="index-M_002d_002e"></a>
<a name="index-xref_002dfind_002ddefinitions"></a>
<a name="index-xref_002dprompt_002dfor_002didentifier"></a>
<p><kbd>M-.</kbd> (<code>xref-find-definitions</code>) shows the definitions of
the identifier at point.  With a prefix argument, or if there’s no
identifier at point, it prompts for the identifier.  (If you want it
to always prompt, customize <code>xref-prompt-for-identifier</code> to
<code>t</code>.)

</p>
<p>If the specified identifier has only one definition, the command jumps
to it.  If the identifier has more than one possible definition (e.g.,
in an object-oriented language, or if there’s a function and a
variable by the same name), the command shows the candidate
definitions in the <samp>*xref*</samp> buffer, together with the files in
which these definitions are found.  Selecting one of these candidates
by typing <kbd><span class="key">RET</span></kbd> or clicking <kbd>mouse-2</kbd> will pop a buffer
showing the corresponding definition.

</p>
<p>When entering the identifier argument to <kbd>M-.</kbd>, the usual
minibuffer completion commands can be used (see <a href="#Completion">Completion</a>), with
the known identifier names as completion candidates.

</p>
<a name="index-C_002dx-4-_002e"></a>
<a name="index-xref_002dfind_002ddefinitions_002dother_002dwindow"></a>
<a name="index-C_002dx-5-_002e"></a>
<a name="index-xref_002dfind_002ddefinitions_002dother_002dframe"></a>
<p>Like most commands that can switch buffers,
<code>xref-find-definitions</code> has a variant that displays the new
buffer in another window, and one that makes a new frame for it.  The
former is <kbd><span class="nolinebreak">C-x</span>&nbsp;4&nbsp;.</kbd><!-- /@w -->

(<code>xref-find-definitions-other-window</code>), and the latter is
<kbd><span class="nolinebreak">C-x</span>&nbsp;5&nbsp;.</kbd><!-- /@w -->    (<code>xref-find-definitions-other-frame</code>).

</p>
<p>The command <code>xref-find-definitions-at-mouse</code> works like
<code>xref-find-definitions</code>, but it looks for the identifier name at
or around the place of a mouse event.  This command is intended to be
bound to a mouse event, such as <kbd>C-M-mouse-1</kbd>, for example.

</p>
<a name="index-xref_002dfind_002dapropos"></a>
<a name="index-C_002dM_002d_002e"></a>
<p>The command <kbd>C-M-.</kbd> (<code>xref-find-apropos</code>) finds the
definitions of one or more identifiers that match a specified regular
expression.  It is just like <kbd>M-.</kbd> except that it does regexp
matching of identifiers instead of matching symbol names as fixed
strings.

</p>
<p>When any of the above commands finds more than one definition, it
presents the <samp>*xref*</samp> buffer showing the definition candidates.
In that buffer, you have several specialized commands, described in
<a href="#Xref-Commands">Xref Commands</a>.

</p>
<a name="index-M_002d_002c"></a>
<a name="index-xref_002dpop_002dmarker_002dstack"></a>
<a name="index-xref_002dmarker_002dring_002dlength"></a>
<p>To go back to places <em>from where</em> you found the definition,
use <kbd>M-,</kbd> (<code>xref-pop-marker-stack</code>).  It jumps back to the
point of the last invocation of <kbd>M-.</kbd>.  Thus you can find and
examine the definition of something with <kbd>M-.</kbd> and then return to
where you were with <kbd>M-,</kbd>.  <kbd>M-,</kbd> allows you to retrace your
steps to a depth determined by the variable
<code>xref-marker-ring-length</code>, which defaults to 16.

</p>
<a name="index-xref_002detags_002dmode"></a>
<p>Some major modes install <code>xref</code> support facilities that might
sometimes fail to find certain identifiers.  For example, in Emacs
Lisp mode (see <a href="#Lisp-Eval">Lisp Eval</a>) <kbd>M-.</kbd> will by default find only
functions and variables from Lisp packages which are loaded into the
current Emacs session or are auto-loaded (see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Autoload">Autoload</a> in <cite>The Emacs Lisp Reference Manual</cite>).  If <kbd>M-.</kbd> fails to find some
identifiers, you can try forcing <code>xref</code> to use the <code>etags</code>
backend (see <a href="#Xref">Xref</a>).  To this end, turn on the Xref Etags minor
mode with <kbd><span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">xref-etags-mode</span></kbd><!-- /@w -->, then invoke <kbd>M-.</kbd> again.
(For this to work, be sure to run <code>etags</code> to create the tags
table in the directory tree of the source files, see <a href="#Create-Tags-Table">Create Tags Table</a>.)

</p>

<a name="Xref-Commands"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Identifier-Search" accesskey="n" rel="next">Identifier Search</a>, Previous: <a href="#Looking-Up-Identifiers" accesskey="p" rel="prev">Looking Up Identifiers</a>, Up: <a href="#Find-Identifiers" accesskey="u" rel="up">Find Identifiers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Commands-Available-in-the-_002axref_002a-Buffer"></a>
<h4 class="subsubsection">28.4.1.2 Commands Available in the <samp>*xref*</samp> Buffer</h4>
<a name="index-commands-in-_002axref_002a-buffers"></a>
<a name="index-XREF-mode"></a>

<p>The following commands are provided in the <samp>*xref*</samp> buffer by
the special XREF mode:

</p>
<dl compact="compact">
<dt><kbd><span class="key">RET</span></kbd></dt>
<dt><kbd>鼠标右键</kbd></dt>
<dd><p>Display the reference on the current line.

</p>
</dd>
<dt><kbd>n</kbd></dt>
<dt><kbd>.</kbd></dt>
<dd><a name="index-xref_002dnext_002dline"></a>
<p>Move to the next reference and display it in the other window
(<code>xref-next-line</code>).

</p>
</dd>
<dt><kbd>p</kbd></dt>
<dt><kbd>,</kbd></dt>
<dd><a name="index-xref_002dprev_002dline"></a>
<p>Move to the previous reference and display it in the other window
(<code>xref-prev-line</code>).

</p>
</dd>
<dt><kbd>C-o</kbd></dt>
<dd><a name="index-xref_002dshow_002dlocation_002dat_002dpoint"></a>
<p>Display the reference on the current line in the other window
(<code>xref-show-location-at-point</code>).

</p>
</dd>
<dt><kbd><span class="key">TAB</span></kbd></dt>
<dd><a name="index-xref_002dquit_002dand_002dgoto_002dxref"></a>
<p>Display the reference on the current line and bury the <samp>*xref*</samp>
buffer (<code>xref-quit-and-goto-xref</code>).

</p>
</dd>
<dt><kbd>r <var>pattern</var> <span class="key">RET</span> <var>replacement</var> <span class="key">RET</span></kbd></dt>
<dd><p>Perform interactive query-replace on references that match
<var>pattern</var> (<code>xref-query-replace-in-results</code>), replacing
the match with <var>replacement</var>.  See <a href="#Identifier-Search">Identifier Search</a>.

</p>
</dd>
<dt><kbd>g</kbd></dt>
<dd><a name="index-xref_002drevert_002dbuffer"></a>
<p>Refresh the contents of the <samp>*xref*</samp> buffer
(<code>xref-revert-buffer</code>.

</p>
<a name="index-xref_002dquit"></a>
</dd>
<dt><kbd>q</kbd></dt>
<dd><p>Quit the window showing the <samp>*xref*</samp> buffer (<code>xref-quit</code>).

</p></dd>
</dl>

<p>In addition, the usual navigation commands, such as the arrow keys,
<kbd>C-n</kbd>, and <kbd>C-p</kbd> are available for moving around the buffer
without displaying the references.

</p>

<a name="Identifier-Search"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#List-Identifiers" accesskey="n" rel="next">List Identifiers</a>, Previous: <a href="#Xref-Commands" accesskey="p" rel="prev">Xref Commands</a>, Up: <a href="#Find-Identifiers" accesskey="u" rel="up">Find Identifiers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Searching-and-Replacing-with-Identifiers"></a>
<h4 class="subsubsection">28.4.1.3 Searching and Replacing with Identifiers</h4>
<a name="index-search-and-replace-in-multiple-source-files"></a>
<a name="index-multiple-source-file-search-and-replace"></a>

<p>The commands in this section perform various search and replace
operations either on identifiers themselves or on files that reference
them.

</p>
<dl compact="compact">
<dt><kbd>M-?</kbd></dt>
<dd><p>Find all the references for the identifier at point.

</p>
</dd>
<dt><kbd>M-x xref-query-replace-in-results <span class="key">RET</span> <var>regexp</var> <span class="key">RET</span> <var>replacement</var> <span class="key">RET</span></kbd></dt>
<dd><p>Interactively replace <var>regexp</var> with <var>replacement</var> in the names
of all the identifiers shown in the <samp>*xref*</samp> buffer.

</p>
</dd>
<dt><kbd>M-x tags-search <span class="key">RET</span> <var>regexp</var> <span class="key">RET</span></kbd></dt>
<dd><p>Search for <var>regexp</var> through the files in the selected tags
table.

</p>
</dd>
<dt><kbd>M-x tags-query-replace <span class="key">RET</span> <var>regexp</var> <span class="key">RET</span> <var>replacement</var> <span class="key">RET</span></kbd></dt>
<dd><p>Perform a <code>query-replace-regexp</code> on each file in the selected tags table.

</p>
</dd>
<dt><kbd>M-x fileloop-continue</kbd></dt>
<dd><p>Restart one of the last 2 commands above, from the current location of point.

</p></dd>
</dl>

<a name="index-M_002d_003f"></a>
<a name="index-xref_002dfind_002dreferences"></a>
<p><kbd>M-?</kbd> finds all the references for the identifier at point,
prompting for the identifier as needed, with completion.  Depending on
the current backend (see <a href="#Xref">Xref</a>), the command may prompt even if it
finds a valid identifier at point.  When invoked with a prefix
argument, it always prompts for the identifier.  (If you want it to
prompt always, customize the value of the variable
<code>xref-prompt-for-identifier</code> to <code>t</code>; or set it to <code>nil</code>
to prompt only if there’s no usable identifier at point.)  The command
then presents the <samp>*xref*</samp> buffer with all the references to the
identifier, showing the file name and the line where the identifier is
referenced.  The XREF mode commands are available in this buffer, see
<a href="#Xref-Commands">Xref Commands</a>.

</p>
<a name="index-xref_002dquery_002dreplace_002din_002dresults"></a>
<p><kbd>M-x xref-query-replace-in-results</kbd> reads a regexp to match identifier
names and a replacement string, just like ordinary <kbd>M-x
query-replace-regexp</kbd>.  It then performs the specified replacement in
the names of the matching identifiers in all the places in all the
files where these identifiers are referenced.  This is useful when you
rename your identifiers as part of refactoring.  This command should
be invoked in the <samp>*xref*</samp> buffer generated by <kbd>M-?</kbd>.

</p>
<a name="index-tags_002dsearch"></a>
<p><kbd>M-x tags-search</kbd> reads a regexp using the minibuffer, then
searches for matches in all the files in the selected tags table, one
file at a time.  It displays the name of the file being searched so
you can follow its progress.  As soon as it finds an occurrence,
<code>tags-search</code> returns.  This command requires tags tables to be
available (see <a href="#Tags-Tables">Tags Tables</a>).

</p>
<a name="index-fileloop_002dcontinue"></a>
<p>Having found one match with <code>tags-search</code>, you probably want to
find all the rest.  <kbd>M-x fileloop-continue</kbd> resumes the
<code>tags-search</code>, finding one more match.  This searches the rest of
the current buffer, followed by the remaining files of the tags table.

</p>
<a name="index-tags_002dquery_002dreplace"></a>
<p><kbd>M-x tags-query-replace</kbd> performs a single
<code>query-replace-regexp</code> through all the files in the tags table.  It
reads a regexp to search for and a string to replace with, just like
ordinary <kbd>M-x query-replace-regexp</kbd>.  It searches much like <kbd>M-x
tags-search</kbd>, but repeatedly, processing matches according to your
input.  See <a href="#Query-Replace">Query Replace</a>, for more information on query replace.

</p>
<a name="index-tags_002dcase_002dfold_002dsearch"></a>
<a name="index-case_002dsensitivity-and-tags-search"></a>
<p>You can control the case-sensitivity of tags search commands by
customizing the value of the variable <code>tags-case-fold-search</code>.  The
default is to use the same setting as the value of
<code>case-fold-search</code> (see <a href="#Lax-Search">Lax Search</a>).

</p>
<p>It is possible to get through all the files in the tags table with a
single invocation of <kbd>M-x tags-query-replace</kbd>.  But often it is
useful to exit temporarily, which you can do with any input event that
has no special query replace meaning.  You can resume the query
replace subsequently by typing <kbd>M-x fileloop-continue</kbd>; this
command resumes the last tags search or replace command that you did.
For instance, to skip the rest of the current file, you can type
<kbd><span class="nolinebreak">M-&gt;</span>&nbsp;<span class="nolinebreak">M-x</span>&nbsp;<span class="nolinebreak">fileloop-continue</span></kbd><!-- /@w -->.

</p>
<p>Note that the commands described above carry out much broader
searches than the <code>xref-find-definitions</code> family.  The
<code>xref-find-definitions</code> commands search only for definitions of
identifiers that match your string or regexp.  The commands
<code>xref-find-references</code>, <code>tags-search</code>, and
<code>tags-query-replace</code> find every occurrence of the identifier or
regexp, as ordinary search commands and replace commands do in the
current buffer.

</p>
<p>As an alternative to <code>xref-find-references</code> and
<code>tags-search</code>, you can run <code>grep</code> as a subprocess and
have Emacs show you the matching lines one by one.  See <a href="#Grep-Searching">Grep Searching</a>.

</p>

<a name="List-Identifiers"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Identifier-Search" accesskey="p" rel="prev">Identifier Search</a>, Up: <a href="#Find-Identifiers" accesskey="u" rel="up">Find Identifiers</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Identifier-Inquiries"></a>
<h4 class="subsubsection">28.4.1.4 Identifier Inquiries</h4>

<dl compact="compact">
<dt><kbd>C-M-i</kbd></dt>
<dt><kbd>M-<span class="key">TAB</span></kbd></dt>
<dd><p>Perform completion on the text around point, possibly using the
selected tags table if one is loaded (<code>completion-at-point</code>).

</p>
</dd>
<dt><kbd>M-x xref-find-apropos <span class="key">RET</span> <var>regexp</var> <span class="key">RET</span></kbd></dt>
<dd><p>Display a list of all known identifiers matching <var>regexp</var>.

</p>
</dd>
<dt><kbd>M-x list-tags <span class="key">RET</span> <var>file</var> <span class="key">RET</span></kbd></dt>
<dd><p>Display a list of the identifiers defined in the program file
<var>file</var>.

</p>
</dd>
<dt><kbd>M-x tags-next-file</kbd></dt>
<dd><p>Visit files recorded in the selected tags table.

</p></dd>
</dl>

<p>In most programming language modes, you can type <kbd>C-M-i</kbd> or
<kbd>M-<span class="key">TAB</span></kbd> (<code>completion-at-point</code>) to complete the symbol
at point.  Some modes provide specialized completion for this command
tailored to the mode; for those that don’t, if there is a tags table
loaded, this command can use it to generate completion candidates.
See <a href="#Symbol-Completion">Symbol Completion</a>.

</p>
<a name="index-list_002dtags"></a>
<p><kbd>M-x list-tags</kbd> reads the name of one of the files covered by
the selected tags table, and displays a list of tags defined in that
file.  Do not include a directory as part of the file name unless the
file name recorded in the tags table includes a directory.  This
command works only with the etags backend, and requires a tags table
for the project to be available.  See <a href="#Tags-Tables">Tags Tables</a>.  If used
interactively, the default tag is file name of the current buffer if
used interactively.

</p>

<a name="index-tags_002dnext_002dfile"></a>
<p><kbd>M-x tags-next-file</kbd> visits files covered by the selected tags table.
The first time it is called, it visits the first file covered by the
table.  Each subsequent call visits the next covered file, unless a
prefix argument is supplied, in which case it returns to the first
file.  This command requires a tags table to be selected.

</p>

<a name="Tags-Tables"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Select-Tags-Table" accesskey="n" rel="next">Select Tags Table</a>, Previous: <a href="#Find-Identifiers" accesskey="p" rel="prev">Find Identifiers</a>, Up: <a href="#Xref" accesskey="u" rel="up">Xref</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Tags-Tables-1"></a>
<h4 class="subsection">28.4.2 Tags Tables</h4>
<a name="index-tags-and-tag-tables"></a>

<p>A <em>tags table</em> records the tags<a name="DOCF15" href="#FOOT15"><sup>15</sup></a> extracted by scanning the source code of a certain program or a
certain document.  Tags extracted from generated files reference the
original files, rather than the generated files that were scanned
during tag extraction.  Examples of generated files include C files
generated from Cweb source files, from a Yacc parser, or from Lex
scanner definitions; <samp>.i</samp> preprocessed C files; and Fortran files
produced by preprocessing <samp>.fpp</samp> source files.

</p>
<a name="index-etags"></a>
<p>To produce a tags table, you run the <code>etags</code> shell command
on a document or the source code file.  The ‘<samp>etags</samp>’ program
writes the tags to a <em>tags table file</em>, or <em>tags file</em> in
short.  The conventional name for a tags file is <samp>TAGS</samp>.
See <a href="#Create-Tags-Table">Create Tags Table</a>.  (It is also possible to create a tags table
by using one of the commands from other packages that can produce such
tables in the same format.)

</p>
<p>Emacs uses the tags tables via the <code>etags</code> package as one of
the supported backends for <code>xref</code>.  Because tags tables are
produced by the <code>etags</code> command that is part of an Emacs
distribution, we describe tags tables in more detail here.

</p>
<a name="index-C_002b_002b-class-browser_002c-tags"></a>
<a name="index-tags_002c-C_002b_002b"></a>
<a name="index-class-browser_002c-C_002b_002b"></a>
<a name="index-Ebrowse"></a>
<p>The Ebrowse facility is similar to <code>etags</code> but specifically
tailored for C++.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/ebrowse.html#Top">Ebrowse</a> in <cite>Ebrowse User’s
Manual</cite>.  The Semantic package provides another way to generate and
use tags, separate from the <code>etags</code> facility.
See <a href="#Semantic">Semantic</a>.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Tag-Syntax" accesskey="1">Tag Syntax</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Tag syntax for various types of code and text files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Create-Tags-Table" accesskey="2">Create Tags Table</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Creating a tags table with <code>etags</code>.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Etags-Regexps" accesskey="3">Etags Regexps</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Create arbitrary tags using regular expressions.

</td></tr>
</tbody></table>


<a name="Tag-Syntax"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Create-Tags-Table" accesskey="n" rel="next">Create Tags Table</a>, Up: <a href="#Tags-Tables" accesskey="u" rel="up">Tags Tables</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Source-File-Tag-Syntax"></a>
<h4 class="subsubsection">28.4.2.1 Source File Tag Syntax</h4>

<p>Here is how tag syntax is defined for the most popular languages:

</p>
<ul>
<li>  In C code, any C function or typedef is a tag, and so are definitions of
<code>struct</code>, <code>union</code> and <code>enum</code>.
<code>#define</code> macro definitions, <code>#undef</code> and <code>enum</code>
constants are also
tags, unless you specify ‘<samp>--no-defines</samp>’ when making the tags table.
Similarly, global variables are tags, unless you specify
‘<samp>--no-globals</samp>’, and so are struct members, unless you specify
‘<samp>--no-members</samp>’.  Use of ‘<samp>--no-globals</samp>’, ‘<samp>--no-defines</samp>’
and ‘<samp>--no-members</samp>’ can make the tags table file much smaller.



<p>You can tag function declarations and external variables in addition
to function definitions by giving the ‘<samp>--declarations</samp>’ option to
<code>etags</code>.

</p>
</li><li>  In C++ code, in addition to all the tag constructs of C code, member
functions are also recognized; member variables are also recognized,
unless you use the ‘<samp>--no-members</samp>’ option.  <code>operator</code>
definitions have tag names like ‘<samp>operator+</samp>’.  If you specify the
‘<samp>--class-qualify</samp>’ option, tags for variables and functions in
classes are named ‘<samp><var>class</var>::<var>variable</var></samp>’ and
‘<samp><var>class</var>::<var>function</var></samp>’.  By default, class methods and
members are not class-qualified, which allows to identify their names in
the sources more accurately.



</li><li>  In Java code, tags include all the constructs recognized in C++, plus
the <code>interface</code>, <code>extends</code> and <code>implements</code> constructs.
Tags for variables and functions in classes are named
‘<samp><var>class</var>.<var>variable</var></samp>’ and ‘<samp><var>class</var>.<var>function</var></samp>’.



</li><li>  In LaTeX documents, the arguments for <code>\chapter</code>,
<code>\section</code>, <code>\subsection</code>, <code>\subsubsection</code>,
<code>\eqno</code>, <code>\label</code>, <code>\ref</code>, <code>\cite</code>,
<code>\bibitem</code>, <code>\part</code>, <code>\appendix</code>, <code>\entry</code>,
<code>\index</code>, <code>\def</code>, <code>\newcommand</code>, <code>\renewcommand</code>,
<code>\newenvironment</code> and <code>\renewenvironment</code> are tags.



<p>Other commands can make tags as well, if you specify them in the environment variable <code>TEXTAGS</code> before invoking <code>etags</code>. The value of this environment variable should be a colon-separated list of command names. 例如,
</p>
<div class="example">
<pre class="example">TEXTAGS="mycommand:myothercommand"
export TEXTAGS
</pre></div>

<p>specifies (using Bourne shell syntax) that the commands
‘<samp>\mycommand</samp>’ and ‘<samp>\myothercommand</samp>’ also define tags.

</p>
</li><li>  In Lisp code, any function defined with <code>defun</code>, any variable
defined with <code>defvar</code> or <code>defconst</code>, and in general the
first argument of any expression that starts with ‘<samp>(def</samp>’ in
column zero is a tag.  As an exception, expressions of the form
<code>(defvar <var>foo</var>)</code> are treated as declarations, and are only
tagged if the ‘<samp>--declarations</samp>’ option is given.



</li><li>  In Scheme code, tags include anything defined with <code>def</code> or with a
construct whose name starts with ‘<samp>def</samp>’.  They also include variables
set with <code>set!</code> at top level in the file.

</li></ul>

<p>Several other languages are also supported:

</p>
<ul>
<li>  In Ada code, functions, procedures, packages, tasks and types are
tags.  Use the ‘<samp>--packages-only</samp>’ option to create tags for
packages only.



<p>In Ada, the same name can be used for different kinds of entity
(e.g., for a procedure and for a function).  Also, for things like
packages, procedures and functions, there is the spec (i.e., the
interface) and the body (i.e., the implementation).  To make it
easier to pick the definition you want, Ada tag names have suffixes
indicating the type of entity:

</p>
<dl compact="compact">
<dt>‘<samp>/b</samp>’</dt>
<dd><p>package body.

</p></dd>
<dt>‘<samp>/f</samp>’</dt>
<dd><p>function.

</p></dd>
<dt>‘<samp>/k</samp>’</dt>
<dd><p>task.

</p></dd>
<dt>‘<samp>/p</samp>’</dt>
<dd><p>procedure.

</p></dd>
<dt>‘<samp>/s</samp>’</dt>
<dd><p>package spec.

</p></dd>
<dt>‘<samp>/t</samp>’</dt>
<dd><p>type.

</p></dd>
</dl>

<p>Thus, <kbd>M-x find-tag <span class="key">RET</span> bidule/b <span class="key">RET</span></kbd> will go
directly to the body of the package <code>bidule</code>, while <kbd>M-x
find-tag <span class="key">RET</span> bidule <span class="key">RET</span></kbd> will just search for any tag
<code>bidule</code>.

</p>
</li><li>  In assembler code, labels appearing at the start of a line,
followed by a colon, are tags.



</li><li>  In Bison or Yacc input files, each rule defines as a tag the nonterminal
it constructs.  The portions of the file that contain C code are parsed
as C code.



</li><li>  In Cobol code, tags are paragraph names; that is, any word starting in
column 8 and followed by a period.



</li><li>  In Erlang code, the tags are the functions, records and macros defined
in the file.



</li><li>  In Fortran code, functions, subroutines and block data are tags.



</li><li>  In Go code, packages, functions, and types are tags.



</li><li>  In HTML input files, the tags are the <code>title</code> and the <code>h1</code>,
<code>h2</code>, <code>h3</code> headers.  Also, tags are <code>name=</code> in anchors
and all occurrences of <code>id=</code>.



</li><li>  In Lua input files, all functions are tags.



</li><li>  In makefiles, targets are tags; additionally, variables are tags
unless you specify ‘<samp>--no-globals</samp>’.



</li><li>  In Objective C code, tags include Objective C definitions for classes,
class categories, methods and protocols.  Tags for variables and
functions in classes are named ‘<samp><var>class</var>::<var>variable</var></samp>’ and
‘<samp><var>class</var>::<var>function</var></samp>’.



</li><li>  In Pascal code, the tags are the functions and procedures defined in
the file.



</li><li>  In Perl code, the tags are the packages, subroutines and variables
defined by the <code>package</code>, <code>sub</code>, <code>use constant</code>,
<code>my</code>, and <code>local</code> keywords.  Use ‘<samp>--globals</samp>’ if you
want to tag global variables.  Tags for subroutines are named
‘<samp><var>package</var>::<var>sub</var></samp>’.  The name for subroutines defined in
the default package is ‘<samp>main::<var>sub</var></samp>’.



</li><li>  In PHP code, tags are functions, classes and defines.  Vars are tags
too, unless you use the ‘<samp>--no-members</samp>’ option.



</li><li>  In PostScript code, the tags are the functions.



</li><li>  In Prolog code, tags are predicates and rules at the beginning of
line.



</li><li>  In Python code, <code>def</code> or <code>class</code> at the beginning of a line
generate a tag.



</li><li>  In Ruby code, <code>def</code> or <code>class</code> or <code>module</code> at the
beginning of a line generate a tag.  Constants also generate tags.

</li></ul>

<p>You can also generate tags based on regexp matching (see <a href="#Etags-Regexps">Etags Regexps</a>) to handle other formats and languages.

</p>

<a name="Create-Tags-Table"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Etags-Regexps" accesskey="n" rel="next">Etags Regexps</a>, Previous: <a href="#Tag-Syntax" accesskey="p" rel="prev">Tag Syntax</a>, Up: <a href="#Tags-Tables" accesskey="u" rel="up">Tags Tables</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Creating-Tags-Tables"></a>
<h4 class="subsubsection">28.4.2.2 Creating Tags Tables</h4>
<a name="index-etags-program"></a>

<p>The <code>etags</code> program is used to create a tags table file.  It knows
the syntax of several languages, as described in
<a href="#Tag-Syntax">Tag Syntax</a>.
Here is how to run <code>etags</code>:

</p>
<div class="example">
<pre class="example">etags <var>inputfiles</var>…
</pre></div>

<p>The <code>etags</code> program reads the specified files, and writes a tags
table named <samp>TAGS</samp> in the current working directory.  You can
optionally specify a different file name for the tags table by using the
‘<samp>--output=<var>file</var></samp>’ option; specifying <samp>-</samp> as a file name
prints the tags table to standard output.  You can also append the
newly created tags table to an existing file by using the ‘<samp>--append</samp>’
option.

</p>
<p>If the specified files don’t exist, <code>etags</code> looks for
compressed versions of them and uncompresses them to read them.  Under
MS-DOS, <code>etags</code> also looks for file names like <samp>mycode.cgz</samp>
if it is given ‘<samp>mycode.c</samp>’ on the command line and <samp>mycode.c</samp>
does not exist.

</p>
<p>If the tags table becomes outdated due to changes in the files
described in it, you can update it by running the <code>etags</code>
program again.  If the tags table does not record a tag, or records it
for the wrong file, then Emacs will not be able to find that
definition until you update the tags table.  But if the position
recorded in the tags table becomes a little bit wrong (due to other
editing), Emacs will still be able to find the right position, with a
slight delay.

</p>
<p>Thus, there is no need to update the tags table after each edit.
You should update a tags table when you define new tags that you want
to have listed, or when you move tag definitions from one file to
another, or when changes become substantial.

</p>
<p>You can make a tags table <em>include</em> another tags table, by
passing the ‘<samp>--include=<var>file</var></samp>’ option to <code>etags</code>.  It
then covers all the files covered by the included tags file, as well
as its own.

</p>
<p>If you specify the source files with relative file names when you run
<code>etags</code>, the tags file will contain file names relative to the
directory where the tags file was initially written.  This way, you can
move an entire directory tree containing both the tags file and the
source files, and the tags file will still refer correctly to the source
files.  If the tags file is <samp>-</samp> or is in the <samp>/dev</samp> directory,
however, the file names are
made relative to the current working directory.  This is useful, for
example, when writing the tags to the standard output.

</p>
<p>When using a relative file name, it should not be a symbolic link
pointing to a tags file in a different directory, because this would
generally render the file names invalid.

</p>
<p>If you specify absolute file names as arguments to <code>etags</code>, then
the tags file will contain absolute file names.  This way, the tags file
will still refer to the same files even if you move it, as long as the
source files remain in the same place.  Absolute file names start with
‘<samp>/</samp>’, or with ‘<samp><var>device</var>:/</samp>’ on MS-DOS and MS-Windows.

</p>
<p>When you want to make a tags table from a great number of files,
you may have problems listing them on the command line, because some
systems have a limit on its length.  You can circumvent this limit by
telling <code>etags</code> to read the file names from its standard
input, by typing a dash in place of the file names, like this:

</p>
<div class="smallexample">
<pre class="smallexample">find . -name "*.[chCH]" -print | etags -
</pre></div>

<p><code>etags</code> recognizes the language used in an input file based on
its file name and contents.  It first tries to match the file’s name and
extension to the ones commonly used with certain languages.  Some
languages have interpreters with known names (e.g., <code>perl</code> for
Perl or <code>pl</code> for Prolog), so <code>etags</code> next looks for an
interpreter specification of the form ‘<samp>#!<var>interp</var></samp>’ on the first
line of an input file, and matches that against known interpreters.  If
none of that works, or if you want to override the automatic detection of
the language, you can specify the language explicitly with the
‘<samp>--language=<var>name</var></samp>’ option.  You can intermix these options with
file names; each one applies to the file names that follow it.  Specify
‘<samp>--language=auto</samp>’ to tell <code>etags</code> to resume guessing the
language from the file names and file contents.  Specify
‘<samp>--language=none</samp>’ to turn off language-specific processing entirely;
then <code>etags</code> recognizes tags by regexp matching alone
(see <a href="#Etags-Regexps">Etags Regexps</a>).  This comes in handy when an input file uses a
language not yet supported by <code>etags</code>, and you want to avoid
having <code>etags</code> fall back on Fortran and C as the default
languages.

</p>
<p>The option ‘<samp>--parse-stdin=<var>file</var></samp>’ is mostly useful when
calling <code>etags</code> from programs.  It can be used (only once) in
place of a file name on the command line.  <code>etags</code> will read from
standard input and mark the produced tags as belonging to the file
<var>file</var>.

</p>
<p>‘<samp>etags --help</samp>’ outputs the list of the languages <code>etags</code>
knows, and the file name rules for guessing the language.  It also prints
a list of all the available <code>etags</code> options, together with a short
explanation.  If followed by one or more ‘<samp>--language=<var>lang</var></samp>’
options, it outputs detailed information about how tags are generated for
<var>lang</var>.

</p>

<a name="Etags-Regexps"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Create-Tags-Table" accesskey="p" rel="prev">Create Tags Table</a>, Up: <a href="#Tags-Tables" accesskey="u" rel="up">Tags Tables</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Etags-Regexps-1"></a>
<h4 class="subsubsection">28.4.2.3 Etags Regexps</h4>

<p>The ‘<samp>--regex</samp>’ option to <code>etags</code> allows tags to be
recognized by regular expression matching.  You can intermix this
option with file names; each one applies to the source files that
follow it.  If you specify multiple ‘<samp>--regex</samp>’ options, all of
them are used in parallel.  The syntax is:

</p>
<div class="smallexample">
<pre class="smallexample">--regex=[<var>{language}</var>]/<var>tagregexp</var>/[<var>nameregexp</var>/]<var>modifiers</var>
</pre></div>

<p>The essential part of the option value is <var>tagregexp</var>, the regexp
for matching tags.  It is always used anchored, that is, it only
matches at the beginning of a line.  If you want to allow indented
tags, use a regexp that matches initial whitespace; start it with
‘<samp>[ \t]*</samp>’.

</p>
<p>In these regular expressions, ‘<samp>\</samp>’ quotes the next character,
and all the C character escape sequences are supported: ‘<samp>\a</samp>’ for
bell, ‘<samp>\b</samp>’ for back space, ‘<samp>\e</samp>’ for escape, ‘<samp>\f</samp>’ for
formfeed, ‘<samp>\n</samp>’ for newline, ‘<samp>\r</samp>’ for carriage return,
‘<samp>\t</samp>’ for tab, and ‘<samp>\v</samp>’ for vertical tab.  In addition,
‘<samp>\d</samp>’ stands for the <code>DEL</code> character.

</p>
<p>Ideally, <var>tagregexp</var> should not match more characters than are
needed to recognize what you want to tag.  If the syntax requires you
to write <var>tagregexp</var> so it matches more characters beyond the tag
itself, you should add a <var>nameregexp</var>, to pick out just the tag.
This will enable Emacs to find tags more accurately and to do
completion on tag names more reliably.  In <var>nameregexp</var>, it is
frequently convenient to use “back references” (see <a href="#Regexp-Backslash">Regexp Backslash</a>) to parenthesized groupings ‘<samp>\(&nbsp;…&nbsp;\)</samp>’<!-- /@w -->  in
<var>tagregexp</var>.  For example, ‘<samp>\1</samp>’ refers to the first such
parenthesized grouping.  You can find some examples of this below.

</p>
<p>The <var>modifiers</var> are a sequence of zero or more characters that
modify the way <code>etags</code> does the matching.  A regexp with no
modifiers is applied sequentially to each line of the input file, in a
case-sensitive way.  The modifiers and their meanings are:

</p>
<dl compact="compact">
<dt>‘<samp>i</samp>’</dt>
<dd><p>Ignore case when matching this regexp.

</p></dd>
<dt>‘<samp>m</samp>’</dt>
<dd><p>Match this regular expression against the whole file, so that
multi-line matches are possible.

</p></dd>
<dt>‘<samp>s</samp>’</dt>
<dd><p>Match this regular expression against the whole file, and allow
‘<samp>.</samp>’ in <var>tagregexp</var> to match newlines.

</p></dd>
</dl>

<p>The ‘<samp>-R</samp>’ option cancels all the regexps defined by preceding
‘<samp>--regex</samp>’ options.  It too applies to the file names following
it.  Here’s an example:

</p>
<div class="smallexample">
<pre class="smallexample">etags --regex=/<var>reg1</var>/i voo.doo --regex=/<var>reg2</var>/m \
    bar.ber -R --lang=lisp los.er
</pre></div>

<p>Here <code>etags</code> chooses the parsing language for <samp>voo.doo</samp> and
<samp>bar.ber</samp> according to their contents.  <code>etags</code> also uses
<var>reg1</var> to recognize additional tags in <samp>voo.doo</samp>, and both
<var>reg1</var> and <var>reg2</var> to recognize additional tags in
<samp>bar.ber</samp>.  <var>reg1</var> is checked against each line of
<samp>voo.doo</samp> and <samp>bar.ber</samp>, in a case-insensitive way, while
<var>reg2</var> is checked against the whole <samp>bar.ber</samp> file,
permitting multi-line matches, in a case-sensitive way.  <code>etags</code>
uses only the Lisp tags rules, with no user-specified regexp matching,
to recognize tags in <samp>los.er</samp>.

</p>
<p>You can restrict a ‘<samp>--regex</samp>’ option to match only files of a
given language by using the optional prefix <var>{language}</var>.
(‘<samp>etags --help</samp>’ prints the list of languages recognized by
<code>etags</code>.)  This is particularly useful when storing many
predefined regular expressions for <code>etags</code> in a file.  The
following example tags the <code>DEFVAR</code> macros in the Emacs source
files, for the C language only:

</p>
<div class="smallexample">
<pre class="smallexample">--regex='{c}/[ \t]*DEFVAR_[A-Z_ \t(]+"\([^"]+\)"/\1/'
</pre></div>

<p>When you have complex regular expressions, you can store the list of
them in a file.  The following option syntax instructs <code>etags</code> to
read two files of regular expressions.  The regular expressions
contained in the second file are matched without regard to case.

</p>
<div class="smallexample">
<pre class="smallexample">--regex=@<var>case-sensitive-file</var> --ignore-case-regex=@<var>ignore-case-file</var>
</pre></div>

<p>A regex file for <code>etags</code> contains one regular expression per
line.  Empty lines, and lines beginning with space or tab are ignored.
When the first character in a line is ‘<samp>@</samp>’, <code>etags</code> assumes
that the rest of the line is the name of another file of regular
expressions; thus, one such file can include another file.  All the
other lines are taken to be regular expressions.  If the first
non-whitespace text on the line is ‘<samp>--</samp>’, that line is a comment.

</p>
<p>For example, we can create a file called ‘<samp>emacs.tags</samp>’ with the
following contents:

</p>
<div class="smallexample">
<pre class="smallexample">        -- This is for GNU Emacs C source files
{c}/[ \t]*DEFVAR_[A-Z_ \t(]+"\([^"]+\)"/\1/
</pre></div>

<p>and then use it like this:

</p>
<div class="smallexample">
<pre class="smallexample">etags --regex=@emacs.tags *.[ch] */*.[ch]
</pre></div>

<p>Here are some more examples.  The regexps are quoted to protect them
from shell interpretation.

</p>
<ul>
<li>  Tag Octave files:



<div class="smallexample">
<pre class="smallexample">etags --language=none \
      --regex='/[ \t]*function.*=[ \t]*\([^ \t]*\)[ \t]*(/\1/' \
      --regex='/###key \(.*\)/\1/' \
      --regex='/[ \t]*global[ \t].*/' \
      *.m
</pre></div>

<p>Note that tags are not generated for scripts, so that you have to add
a line by yourself of the form ‘<samp>###key <var>scriptname</var></samp>’ if you
want to jump to it.

</p>
</li><li>  Tag Tcl files:



<div class="smallexample">
<pre class="smallexample">etags --language=none --regex='/proc[ \t]+\([^ \t]+\)/\1/' *.tcl
</pre></div>

</li><li>  Tag VHDL files:



<div class="smallexample">
<pre class="smallexample">etags --language=none \
  --regex='/[ \t]*\(ARCHITECTURE\|CONFIGURATION\) +[^ ]* +OF/' \
  --regex='/[ \t]*\(ATTRIBUTE\|ENTITY\|FUNCTION\|PACKAGE\
  \( BODY\)?\|PROCEDURE\|PROCESS\|TYPE\)[ \t]+\([^ \t(]+\)/\3/'
</pre></div>
</li></ul>


<a name="Select-Tags-Table"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Tags-Tables" accesskey="p" rel="prev">Tags Tables</a>, Up: <a href="#Xref" accesskey="u" rel="up">Xref</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Selecting-a-Tags-Table"></a>
<h4 class="subsection">28.4.3 Selecting a Tags Table</h4>

<a name="index-visit_002dtags_002dtable"></a>
<p>Emacs has at any time at most one <em>selected</em> tags table.  All
the commands for working with tags tables use the selected one.  To
select a tags table, type <kbd>M-x visit-tags-table</kbd>, which reads the
tags table file name as an argument, with <samp>TAGS</samp> defaulting to
the first directory that contains a file named <samp>TAGS</samp> encountered
when recursively searching upward from the default directory.

</p>
<a name="index-tags_002dfile_002dname"></a>
<p>Emacs does not actually read in the tags table contents until you
try to use them; all <code>visit-tags-table</code> does is store the file
name in the variable <code>tags-file-name</code>, and not much more.  The
variable’s initial value is <code>nil</code>; that value tells all the
commands for working with tags tables that they must ask for a tags
table file name to use.

</p>
<p>Using <code>visit-tags-table</code> when a tags table is already loaded
gives you a choice: you can add the new tags table to the current list
of tags tables, or start a new list.  The tags commands use all the tags
tables in the current list.  If you start a new list, the new tags table
is used <em>instead</em> of others.  If you add the new table to the
current list, it is used <em>as well as</em> the others.

</p>
<a name="index-tags_002dtable_002dlist"></a>
<p>You can specify a precise list of tags tables by setting the variable
<code>tags-table-list</code> to a list of strings, like this:

</p>
<div class="example">
<pre class="example">(setq tags-table-list
      '("~/.emacs.d" "/usr/local/lib/emacs/src"))
</pre></div>

<p>This tells the tags commands to look at the <samp>TAGS</samp> files in your
<samp>~/.emacs.d</samp> directory and in the <samp>/usr/local/lib/emacs/src</samp>
directory.  The order depends on which file you are in and which tags
table mentions that file.

</p>
<p>Do not set both <code>tags-file-name</code> and <code>tags-table-list</code>.

</p>

<a name="EDE"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Emerge" accesskey="n" rel="next">Emerge</a>, Previous: <a href="#Xref" accesskey="p" rel="prev">Xref</a>, Up: <a href="#Maintaining" accesskey="u" rel="up">Maintaining</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Emacs-Development-Environment"></a>
<h3 class="section">28.5 Emacs Development Environment</h3>
<a name="index-EDE-_0028Emacs-Development-Environment_0029"></a>
<a name="index-Emacs-Development-Environment"></a>
<a name="index-Integrated-development-environment"></a>

<p>EDE (<em>Emacs Development Environment</em>) is a package that simplifies
the task of creating, building, and debugging large programs with
Emacs.  It provides some of the features of an IDE, or <em>Integrated
Development Environment</em>, in Emacs.

</p>
<p>This section provides a brief description of EDE usage.
For full details, see <a href="https://www.gnu.org/software/emacs/manual/html_mono/ede.html#Top">EDE</a> in <cite>Emacs Development Environment</cite>.

</p>
<p>EDE is implemented as a global minor mode (see <a href="#Minor-Modes">Minor Modes</a>).  To
enable it, type <kbd>M-x global-ede-mode</kbd> or click on the
‘<samp>Project Support (EDE)</samp>’ item in the ‘<samp>Tools</samp>’ menu.  You can
also enable EDE each time you start Emacs, by adding the following
line to your initialization file:

</p>
<div class="smallexample">
<pre class="smallexample">(global-ede-mode t)
</pre></div>

<p>Activating EDE adds a menu named ‘<samp>Development</samp>’ to the menu bar.
Many EDE commands, including the ones described below, can be invoked
from this menu.

</p>
<p>EDE organizes files into <em>projects</em>, which correspond to
directory trees.  The <em>project root</em> is the topmost directory of a
project.  To define a new project, visit a file in the desired project
root and type <kbd>M-x ede-new</kbd>.  This command prompts for a
<em>project type</em>, which refers to the underlying method that EDE
will use to manage the project (see <a href="https://www.gnu.org/software/emacs/manual/html_mono/ede.html#Creating-a-project">EDE</a> in <cite>Emacs Development Environment</cite>).  The most common project types are
‘<samp>Make</samp>’, which uses Makefiles, and ‘<samp>Automake</samp>’, which uses GNU
Automake (see <a href="http://www.gnu.org/software/automake/manual/automake.html#Top">Automake</a> in <cite>Automake</cite>).  In both cases,
EDE also creates a file named <samp>Project.ede</samp>, which stores
information about the project.

</p>
<p>A project may contain one or more <em>targets</em>.  A target can be an
object file, executable program, or some other type of file, which is
built from one or more of the files in the project.

</p>
<p>To add a new <em>target</em> to a project, type <kbd>C-c . t</kbd>
(<code>M-x ede-new-target</code>).  This command also asks if you wish to
add the current file to that target, which means that the target
is to be built from that file.  After you have defined a target, you
can add more files to it by typing <kbd>C-c . a</kbd>
(<code>ede-add-file</code>).

</p>
<p>To build a target, type <kbd>C-c . c</kbd> (<code>ede-compile-target</code>).
To build all the targets in the project, type <kbd>C-c . C</kbd>
(<code>ede-compile-project</code>).  EDE uses the file types to guess how
the target should be built.

</p>

<a name="Emerge"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#EDE" accesskey="p" rel="prev">EDE</a>, Up: <a href="#Maintaining" accesskey="u" rel="up">Maintaining</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Merging-Files-with-Emerge"></a>
<h3 class="section">28.6 Merging Files with Emerge</h3>
<a name="index-Emerge"></a>
<a name="index-merging-files"></a>

<p>It’s not unusual for programmers to get their signals crossed and
modify the same program in two different directions.  To recover from
this confusion, you need to merge the two versions.  Emerge makes this
easier.  For other ways to compare files, see
<a href="#Comparing-Files">Comparing Files</a>,
and <a href="http://www.gnu.org/software/emacs/manual/html_mono/ediff.html#Top">Ediff</a> in <cite>The Ediff Manual</cite>.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Overview-of-Emerge" accesskey="1">Overview of Emerge</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to start Emerge.  Basic concepts.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Submodes-of-Emerge" accesskey="2">Submodes of Emerge</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Fast mode vs. Edit mode.
                             Skip Prefers mode and Auto Advance mode.

</td></tr>
<tr><td align="left" valign="top">• <a href="#State-of-Difference" accesskey="3">State of Difference</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">You do the merge by specifying state A or B
                             for each difference.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Merge-Commands" accesskey="4">Merge Commands</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Commands for selecting a difference,
                             changing states of differences, etc.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Exiting-Emerge" accesskey="5">Exiting Emerge</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">What to do when you’ve finished the merge.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Combining-in-Emerge" accesskey="6">Combining in Emerge</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to keep both alternatives for a difference.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Fine-Points-of-Emerge" accesskey="7">Fine Points of Emerge</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Miscellaneous issues.

</td></tr>
</tbody></table>


<a name="Overview-of-Emerge"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Submodes-of-Emerge" accesskey="n" rel="next">Submodes of Emerge</a>, Up: <a href="#Emerge" accesskey="u" rel="up">Emerge</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Overview-of-Emerge-1"></a>
<h4 class="subsection">28.6.1 Overview of Emerge</h4>

<p>To start Emerge, run one of these four commands:

</p>
<dl compact="compact">
<dt><kbd>M-x emerge-files</kbd></dt>
<dd><a name="index-emerge_002dfiles"></a>
<p>Merge two specified files.

</p>
</dd>
<dt><kbd>M-x emerge-files-with-ancestor</kbd></dt>
<dd><a name="index-emerge_002dfiles_002dwith_002dancestor"></a>
<p>Merge two specified files, with reference to a common ancestor.

</p>
</dd>
<dt><kbd>M-x emerge-buffers</kbd></dt>
<dd><a name="index-emerge_002dbuffers"></a>
<p>Merge two buffers.

</p>
</dd>
<dt><kbd>M-x emerge-buffers-with-ancestor</kbd></dt>
<dd><a name="index-emerge_002dbuffers_002dwith_002dancestor"></a>
<p>Merge two buffers with reference to a common ancestor in a third
buffer.

</p></dd>
</dl>

<a name="index-merge-buffer-_0028Emerge_0029"></a>
<a name="index-A-and-B-buffers-_0028Emerge_0029"></a>
<p>The Emerge commands compare two files or buffers, and display the
comparison in three buffers: one for each input text (the <em>A buffer</em>
and the <em>B buffer</em>), and one (the <em>merge buffer</em>) where merging
takes place.  The merge buffer shows the full merged text, not just the
differences.  Wherever the two input texts differ, you can choose which
one of them to include in the merge buffer.

</p>
<p>The Emerge commands that take input from existing buffers use only the accessible portions of those buffers, if they are narrowed. 请参阅<a href="#Narrowing">聚焦</a>。
</p>

<p>If a common ancestor version is available, from which the two texts to
be merged were both derived, Emerge can use it to guess which
alternative is right.  Wherever one current version agrees with the
ancestor, Emerge presumes that the other current version is a deliberate
change which should be kept in the merged version.  Use the
‘<samp>with-ancestor</samp>’ commands if you want to specify a common ancestor
text.  These commands read three file or buffer names—variant A,
variant B, and the common ancestor.

</p>
<p>After the comparison is done and the buffers are prepared, the
interactive merging starts.  You control the merging by typing special
<em>merge commands</em> in the merge buffer (see <a href="#Merge-Commands">Merge Commands</a>).
For each run of differences between the input texts, you can choose
which one of them to keep, or edit them both together.

</p>
<p>The merge buffer uses a special major mode, Emerge mode, with commands
for making these choices.  But you can also edit the buffer with
ordinary Emacs commands.

</p>
<p>At any given time, the attention of Emerge is focused on one
particular difference, called the <em>selected</em> difference.  This
difference is marked off in the three buffers like this:

</p>
<div class="example">
<pre class="example">vvvvvvvvvvvvvvvvvvvv
<var>text that differs</var>
^^^^^^^^^^^^^^^^^^^^
</pre></div>

<p>Emerge numbers all the differences sequentially and the mode
line always shows the number of the selected difference.

</p>
<p>Normally, the merge buffer starts out with the A version of the text.
But when the A version of a difference agrees with the common ancestor,
then the B version is initially preferred for that difference.

</p>
<p>Emerge leaves the merged text in the merge buffer when you exit.  At
that point, you can save it in a file with <kbd>C-x C-w</kbd>.  If you give a
numeric argument to <code>emerge-files</code> or
<code>emerge-files-with-ancestor</code>, it reads the name of the output file
using the minibuffer.  (This is the last file name those commands read.)
Then exiting from Emerge saves the merged text in the output file.

</p>
<p>Normally, Emerge commands save the output buffer in its file when you
exit.  If you abort Emerge with <kbd>C-]</kbd>, the Emerge command does not
save the output buffer, but you can save it yourself if you wish.

</p>

<a name="Submodes-of-Emerge"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#State-of-Difference" accesskey="n" rel="next">State of Difference</a>, Previous: <a href="#Overview-of-Emerge" accesskey="p" rel="prev">Overview of Emerge</a>, Up: <a href="#Emerge" accesskey="u" rel="up">Emerge</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Submodes-of-Emerge-1"></a>
<h4 class="subsection">28.6.2 Submodes of Emerge</h4>

<p>You can choose between two modes for giving merge commands: Fast mode
and Edit mode.  In Fast mode, basic merge commands are single
characters, but ordinary Emacs commands are disabled.  This is
convenient if you use only merge commands.  In Edit mode, all merge
commands start with the prefix key <kbd>C-c C-c</kbd>, and the normal Emacs
commands are also available.  This allows editing the merge buffer, but
slows down Emerge operations.

</p>
<p>Use <kbd>e</kbd> to switch to Edit mode, and <kbd>C-c C-c f</kbd> to switch to
Fast mode.  The mode line indicates Edit and Fast modes with ‘<samp>E</samp>’
and ‘<samp>F</samp>’.

</p>
<p>Emerge has two additional submodes that affect how particular merge
commands work: Auto Advance mode and Skip Prefers mode.

</p>
<p>If Auto Advance mode is in effect, the <kbd>a</kbd> and <kbd>b</kbd> commands
advance to the next difference.  This lets you go through the merge
faster as long as you simply choose one of the alternatives from the
input.  The mode line indicates Auto Advance mode with ‘<samp>A</samp>’.

</p>
<p>If Skip Prefers mode is in effect, the <kbd>n</kbd> and <kbd>p</kbd> commands
skip over differences in states “prefer-A” and “prefer-B”
(see <a href="#State-of-Difference">State of Difference</a>).  Thus you see only differences for
which neither version is presumed correct.  The mode line
indicates Skip Prefers mode with ‘<samp>S</samp>’.  This mode is only relevant
when there is an ancestor.

</p>
<a name="index-emerge_002dauto_002dadvance"></a>
<a name="index-emerge_002dskip_002dprefers"></a>
<p>Use the command <kbd>s a</kbd> (<code>emerge-auto-advance</code>) to set or clear
Auto Advance mode.  Use <kbd>s s</kbd> (<code>emerge-skip-prefers</code>) to set or
clear Skip Prefers mode.  These commands turn on the mode with a
positive argument, turn it off with a negative or zero argument, and
toggle the mode with no argument.

</p>

<a name="State-of-Difference"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Merge-Commands" accesskey="n" rel="next">Merge Commands</a>, Previous: <a href="#Submodes-of-Emerge" accesskey="p" rel="prev">Submodes of Emerge</a>, Up: <a href="#Emerge" accesskey="u" rel="up">Emerge</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="State-of-a-Difference"></a>
<h4 class="subsection">28.6.3 State of a Difference</h4>

<p>In the merge buffer, a difference is marked with lines of ‘<samp>v</samp>’ and
‘<samp>^</samp>’ characters.  Each difference has one of these seven states:

</p>
<dl compact="compact">
<dt>A</dt>
<dd><p>The difference is showing the A version.  The <kbd>a</kbd> command always
produces this state; the mode line indicates it with ‘<samp>A</samp>’.

</p>
</dd>
<dt>B</dt>
<dd><p>The difference is showing the B version.  The <kbd>b</kbd> command always
produces this state; the mode line indicates it with ‘<samp>B</samp>’.

</p>
</dd>
<dt>default-A</dt>
<dt>default-B</dt>
<dd><p>The difference is showing the A or the B state by default, because you
haven’t made a choice.  All differences start in the default-A state
(and thus the merge buffer is a copy of the A buffer), except those for
which one alternative is preferred (see below).

</p>
<p>When you select a difference, its state changes from default-A or
default-B to plain A or B.  Thus, the selected difference never has
state default-A or default-B, and these states are never displayed in
the mode line.

</p>
<p>The command <kbd>d a</kbd> chooses default-A as the default state, and <kbd>d
b</kbd> chooses default-B.  This chosen default applies to all differences
that you have never selected and for which no alternative is preferred.
If you are moving through the merge sequentially, the differences you
haven’t selected are those following the selected one.  Thus, while
moving sequentially, you can effectively make the A version the default
for some sections of the merge buffer and the B version the default for
others by using <kbd>d a</kbd> and <kbd>d b</kbd> between sections.

</p>
</dd>
<dt>prefer-A</dt>
<dt>prefer-B</dt>
<dd><p>The difference is showing the A or B state because it is
<em>preferred</em>.  This means that you haven’t made an explicit choice,
but one alternative seems likely to be right because the other
alternative agrees with the common ancestor.  Thus, where the A buffer
agrees with the common ancestor, the B version is preferred, because
chances are it is the one that was actually changed.

</p>
<p>These two states are displayed in the mode line as ‘<samp>A*</samp>’ and ‘<samp>B*</samp>’.

</p>
</dd>
<dt>combined</dt>
<dd><p>The difference is showing a combination of the A and B states, as a
result of the <kbd>x c</kbd> or <kbd>x C</kbd> commands.

</p>
<p>Once a difference is in this state, the <kbd>a</kbd> and <kbd>b</kbd> commands
don’t do anything to it unless you give them a numeric argument.

</p>
<p>The mode line displays this state as ‘<samp>comb</samp>’.

</p></dd>
</dl>


<a name="Merge-Commands"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Exiting-Emerge" accesskey="n" rel="next">Exiting Emerge</a>, Previous: <a href="#State-of-Difference" accesskey="p" rel="prev">State of Difference</a>, Up: <a href="#Emerge" accesskey="u" rel="up">Emerge</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Merge-Commands-1"></a>
<h4 class="subsection">28.6.4 Merge Commands</h4>

<p>Here are the Merge commands for Fast mode; in Edit mode, precede them
with <kbd>C-c C-c</kbd>:

</p>
<dl compact="compact">
<dt><kbd>p</kbd></dt>
<dd><p>Select the previous difference.

</p>
</dd>
<dt><kbd>n</kbd></dt>
<dd><p>Select the next difference.

</p>
</dd>
<dt><kbd>a</kbd></dt>
<dd><p>Choose the A version of this difference.

</p>
</dd>
<dt><kbd>b</kbd></dt>
<dd><p>Choose the B version of this difference.

</p>
</dd>
<dt><kbd>C-u <var>n</var> j</kbd></dt>
<dd><p>Select difference number <var>n</var>.

</p>
</dd>
<dt><kbd>.</kbd></dt>
<dd><p>Select the difference containing point.

</p>
</dd>
<dt><kbd>q</kbd></dt>
<dd><p>Quit—finish the merge.

</p>
</dd>
<dt><kbd>C-]</kbd></dt>
<dd><p>Abort—exit merging and do not save the output.

</p>
</dd>
<dt><kbd>f</kbd></dt>
<dd><p>Go into Fast mode.  (In Edit mode, this is actually <kbd>C-c C-c f</kbd>.)

</p>
</dd>
<dt><kbd>e</kbd></dt>
<dd><p>Go into Edit mode.

</p>
</dd>
<dt><kbd>l</kbd></dt>
<dd><p>Recenter (like <kbd>C-l</kbd>) all three windows.  With an argument,
reestablish the default three-window display.

</p>
</dd>
<dt><kbd>-</kbd></dt>
<dd><p>Specify part of a prefix numeric argument.

</p>
</dd>
<dt><kbd><var>digit</var></kbd></dt>
<dd><p>Also specify part of a prefix numeric argument.

</p>
</dd>
<dt><kbd>d a</kbd></dt>
<dd><p>Choose the A version as the default from here down in
the merge buffer.

</p>
</dd>
<dt><kbd>d b</kbd></dt>
<dd><p>Choose the B version as the default from here down in
the merge buffer.

</p>
</dd>
<dt><kbd>c a</kbd></dt>
<dd><p>Copy the A version of this difference into the kill ring.

</p>
</dd>
<dt><kbd>c b</kbd></dt>
<dd><p>Copy the B version of this difference into the kill ring.

</p>
</dd>
<dt><kbd>i a</kbd></dt>
<dd><p>Insert the A version of this difference at point.

</p>
</dd>
<dt><kbd>i b</kbd></dt>
<dd><p>Insert the B version of this difference at point.

</p>
</dd>
<dt><kbd>m</kbd></dt>
<dd><p>Put point and mark around the difference.

</p>
</dd>
<dt><kbd>^</kbd></dt>
<dd><p>Scroll all three windows down (like <kbd>M-v</kbd>).

</p>
</dd>
<dt><kbd>v</kbd></dt>
<dd><p>Scroll all three windows up (like <kbd>C-v</kbd>).

</p>
</dd>
<dt><kbd>&lt;</kbd></dt>
<dd><p>Scroll all three windows left (like <kbd>C-x &lt;</kbd>).

</p>
</dd>
<dt><kbd>&gt;</kbd></dt>
<dd><p>Scroll all three windows right (like <kbd>C-x &gt;</kbd>).

</p>
</dd>
<dt><kbd>|</kbd></dt>
<dd><p>Reset horizontal scroll on all three windows.

</p>
</dd>
<dt><kbd>x 1</kbd></dt>
<dd><p>Shrink the merge window to one line.  (Use <kbd>C-u l</kbd> to restore it
to full size.)

</p>
</dd>
<dt><kbd>x c</kbd></dt>
<dd><p>Combine the two versions of this difference (see <a href="#Combining-in-Emerge">Combining in Emerge</a>).

</p>
</dd>
<dt><kbd>x f</kbd></dt>
<dd><p>Show the names of the files/buffers Emerge is operating on, in a Help
window.  (Use <kbd>C-u l</kbd> to restore windows.)

</p>
</dd>
<dt><kbd>x j</kbd></dt>
<dd><p>Join this difference with the following one.
(<kbd>C-u x j</kbd> joins this difference with the previous one.)

</p>
</dd>
<dt><kbd>x s</kbd></dt>
<dd><p>Split this difference into two differences.  Before you use this
command, position point in each of the three buffers at the place where
you want to split the difference.

</p>
</dd>
<dt><kbd>x t</kbd></dt>
<dd><p>Trim identical lines off the top and bottom of the difference.
Such lines occur when the A and B versions are
identical but differ from the ancestor version.

</p></dd>
</dl>


<a name="Exiting-Emerge"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Combining-in-Emerge" accesskey="n" rel="next">Combining in Emerge</a>, Previous: <a href="#Merge-Commands" accesskey="p" rel="prev">Merge Commands</a>, Up: <a href="#Emerge" accesskey="u" rel="up">Emerge</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Exiting-Emerge-1"></a>
<h4 class="subsection">28.6.5 Exiting Emerge</h4>

<p>The <kbd>q</kbd> command (<code>emerge-quit</code>) finishes the merge, storing
the results into the output file if you specified one.  It restores the
A and B buffers to their proper contents, or kills them if they were
created by Emerge and you haven’t changed them.  It also disables the
Emerge commands in the merge buffer, since executing them later could
damage the contents of the various buffers.

</p>
<p><kbd>C-]</kbd> aborts the merge.  This means exiting without writing the
output file.  If you didn’t specify an output file, then there is no
real difference between aborting and finishing the merge.

</p>
<p>If the Emerge command was called from another Lisp program, then its
return value is <code>t</code> for successful completion, or <code>nil</code> if you
abort.

</p>

<a name="Combining-in-Emerge"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Fine-Points-of-Emerge" accesskey="n" rel="next">Fine Points of Emerge</a>, Previous: <a href="#Exiting-Emerge" accesskey="p" rel="prev">Exiting Emerge</a>, Up: <a href="#Emerge" accesskey="u" rel="up">Emerge</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Combining-the-Two-Versions"></a>
<h4 class="subsection">28.6.6 Combining the Two Versions</h4>

<p>Sometimes you want to keep <em>both</em> alternatives for a particular
difference.  To do this, use <kbd>x c</kbd>, which edits the merge buffer
like this:

</p>
<div class="example">
<pre class="example">#ifdef NEW
<var>version from B buffer</var>
#else /* not NEW */
<var>version from A buffer</var>
#endif /* not NEW */
</pre></div>

<p><a name="index-emerge_002dcombine_002dversions_002dtemplate"></a>

While this example shows C preprocessor conditionals delimiting the two
alternative versions, you can specify the strings to use by setting
the variable <code>emerge-combine-versions-template</code> to a string of your
choice.  In the string, ‘<samp>%a</samp>’ says where to put version A, and
‘<samp>%b</samp>’ says where to put version B.  The default setting, which
produces the results shown above, looks like this:

</p>
<div class="example">
<pre class="example">"#ifdef NEW\n%b#else /* not NEW */\n%a#endif /* not NEW */\n"
</pre></div>


<a name="Fine-Points-of-Emerge"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Combining-in-Emerge" accesskey="p" rel="prev">Combining in Emerge</a>, Up: <a href="#Emerge" accesskey="u" rel="up">Emerge</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Fine-Points-of-Emerge-1"></a>
<h4 class="subsection">28.6.7 Fine Points of Emerge</h4>

<p>During the merge, you mustn’t try to edit the A and B buffers yourself.
Emerge modifies them temporarily, but ultimately puts them back the way
they were.

</p>
<p>You can have any number of merges going at once—just don’t use any one
buffer as input to more than one merge at once, since the temporary
changes made in these buffers would get in each other’s way.

</p>
<p>Starting Emerge can take a long time because it needs to compare the
files fully.  Emacs can’t do anything else until <code>diff</code> finishes.
Perhaps in the future someone will change Emerge to do the comparison in
the background when the input files are large—then you could keep on
doing other things with Emacs until Emerge is ready to accept
commands.

</p>
<a name="index-emerge_002dstartup_002dhook"></a>
<p>After setting up the merge, Emerge runs the hook
<code>emerge-startup-hook</code>.
See <a href="#Hooks">Hooks</a>.

</p><hr>
<a name="Abbrevs"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Dired" accesskey="n" rel="next">Dired</a>, Previous: <a href="#Maintaining" accesskey="p" rel="prev">Maintaining</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Abbrevs-1"></a>
<h2 class="chapter">29 Abbrevs</h2>
<a name="index-abbrevs"></a>
<a name="index-expansion-_0028of-abbrevs_0029"></a>

<p>A defined <em>abbrev</em> is a word which <em>expands</em>, if you insert
it, into some different text.  Abbrevs are defined by the user to expand
in specific ways.  For example, you might define ‘<samp>foo</samp>’ as an abbrev
expanding to ‘<samp>find outer otter</samp>’.  Then you could insert
‘<samp>find outer otter </samp>’ into the buffer by typing <kbd>f o o
<span class="key">SPC</span></kbd>.

</p>
<p>A second kind of abbreviation facility is called <em>dynamic abbrev
expansion</em>.  You use dynamic abbrev expansion with an explicit command
to expand the letters in the buffer before point by looking for other
words in the buffer that start with those letters.  See <a href="#Dynamic-Abbrevs">Dynamic Abbrevs</a>.

</p>
<p>A third kind, <em>hippie expansion</em>, generalizes abbreviation expansion.
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/autotype.html#Hippie-Expand">Hippie Expansion</a> in <cite>Features for
Automatic Typing</cite>.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Abbrev-Concepts" accesskey="1">Abbrev Concepts</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Fundamentals of defined abbrevs.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Defining-Abbrevs" accesskey="2">Defining Abbrevs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Defining an abbrev, so it will expand when typed.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Expanding-Abbrevs" accesskey="3">Expanding Abbrevs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Controlling expansion: prefixes, canceling expansion.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Editing-Abbrevs" accesskey="4">Editing Abbrevs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Viewing or editing the entire list of defined abbrevs.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Saving-Abbrevs" accesskey="5">Saving Abbrevs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Saving the entire list of abbrevs for another session.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Dynamic-Abbrevs" accesskey="6">Dynamic Abbrevs</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Abbreviations for words already in the buffer.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Dabbrev-Customization" accesskey="7">Dabbrev Customization</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">What is a word, for dynamic abbrevs.  Case handling.

</td></tr>
</tbody></table>


<a name="Abbrev-Concepts"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Defining-Abbrevs" accesskey="n" rel="next">Defining Abbrevs</a>, Up: <a href="#Abbrevs" accesskey="u" rel="up">Abbrevs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Abbrev-Concepts-1"></a>
<h3 class="section">29.1 Abbrev Concepts</h3>

<p>An <em>abbrev</em> is a word that has been defined to <em>expand</em> into
a specified <em>expansion</em>.  When you insert a word-separator character
following the abbrev, that expands the abbrev—replacing the abbrev
with its expansion.  For example, if ‘<samp>foo</samp>’ is defined as an abbrev
expanding to ‘<samp>find outer otter</samp>’, then typing <kbd>f o o .</kbd> will
insert ‘<samp>find outer otter.</samp>’.

</p>
<a name="index-abbrev_002dmode"></a>
<a name="index-Abbrev-mode"></a>
<a name="index-mode_002c-Abbrev"></a>
<p>Abbrevs expand only when Abbrev mode, a buffer-local minor mode, is
enabled.  Disabling Abbrev mode does not cause abbrev definitions to
be forgotten, but they do not expand until Abbrev mode is enabled
again.  The command <kbd>M-x abbrev-mode</kbd> toggles Abbrev mode; with a
numeric argument, it turns Abbrev mode on if the argument is positive,
off otherwise.  See <a href="#Minor-Modes">Minor Modes</a>.

</p>
<p>Abbrevs can have <em>mode-specific</em> definitions, active only in one major
mode.  Abbrevs can also have <em>global</em> definitions that are active in
all major modes.  The same abbrev can have a global definition and various
mode-specific definitions for different major modes.  A mode-specific
definition for the current major mode overrides a global definition.

</p>
<p>You can define abbrevs interactively during the editing session,
irrespective of whether Abbrev mode is enabled.  You can also save
lists of abbrev definitions in files, which you can then reload for
use in later sessions.

</p>

<a name="Defining-Abbrevs"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Expanding-Abbrevs" accesskey="n" rel="next">Expanding Abbrevs</a>, Previous: <a href="#Abbrev-Concepts" accesskey="p" rel="prev">Abbrev Concepts</a>, Up: <a href="#Abbrevs" accesskey="u" rel="up">Abbrevs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Defining-Abbrevs-1"></a>
<h3 class="section">29.2 Defining Abbrevs</h3>

<dl compact="compact">
<dt><kbd>C-x a g</kbd></dt>
<dd><p>Define an abbrev, using one or more words before point as its expansion
(<code>add-global-abbrev</code>).

</p>
</dd>
<dt><kbd>C-x a l</kbd></dt>
<dd><p>Similar, but define an abbrev specific to the current major mode
(<code>add-mode-abbrev</code>).

</p>
</dd>
<dt><kbd>C-x a i g</kbd></dt>
<dd><p>Define a word in the buffer as an abbrev (<code>inverse-add-global-abbrev</code>).

</p>
</dd>
<dt><kbd>C-x a i l</kbd></dt>
<dd><p>Define a word in the buffer as a mode-specific abbrev
(<code>inverse-add-mode-abbrev</code>).

</p>
</dd>
<dt><kbd>M-x define-global-abbrev <span class="key">RET</span> <var>abbrev</var> <span class="key">RET</span> <var>exp</var> <span class="key">RET</span></kbd></dt>
<dd><p>Define <var>abbrev</var> as an abbrev expanding into <var>exp</var>.

</p>
</dd>
<dt><kbd>M-x define-mode-abbrev <span class="key">RET</span> <var>abbrev</var> <span class="key">RET</span> <var>exp</var> <span class="key">RET</span></kbd></dt>
<dd><p>Define <var>abbrev</var> as a mode-specific abbrev expanding into <var>exp</var>.

</p>
</dd>
<dt><kbd>M-x kill-all-abbrevs</kbd></dt>
<dd><p>Discard all abbrev definitions, leaving a blank slate.

</p></dd>
</dl>

<a name="index-C_002dx-a-g"></a>
<a name="index-add_002dglobal_002dabbrev"></a>
<p>The usual way to define an abbrev is to enter the text you want the
abbrev to expand to, position point after it, and type <kbd>C-x a g</kbd>
(<code>add-global-abbrev</code>).  This reads the abbrev itself using the
minibuffer, and then defines it as an abbrev for one or more words before
point.  Use a numeric argument to say how many words before point should be
taken as the expansion.  For example, to define the abbrev ‘<samp>foo</samp>’ as
mentioned above, insert the text ‘<samp>find outer otter</samp>’ and then type
<kbd>C-u 3 C-x a g f o o <span class="key">RET</span></kbd>.

</p>
<p>An argument of zero to <kbd>C-x a g</kbd> means to use the contents of the
region as the expansion of the abbrev being defined.

</p>
<a name="index-C_002dx-a-l"></a>
<a name="index-add_002dmode_002dabbrev"></a>
<p>The command <kbd>C-x a l</kbd> (<code>add-mode-abbrev</code>) is similar, but
defines a mode-specific abbrev for the current major mode.  The
arguments work the same as for <kbd>C-x a g</kbd>.

</p>
<a name="index-C_002dx-a-i-g"></a>
<a name="index-inverse_002dadd_002dglobal_002dabbrev"></a>
<a name="index-C_002dx-a-i-l"></a>
<a name="index-inverse_002dadd_002dmode_002dabbrev"></a>
<p><kbd>C-x a i g</kbd> (<code>inverse-add-global-abbrev</code>) and <kbd>C-x a i
l</kbd> (<code>inverse-add-mode-abbrev</code>) perform the opposite task: if the
abbrev text is already in the buffer, you use these commands to define
an abbrev by specifying the expansion in the minibuffer.  These
commands will expand the abbrev text used for the definition.

</p>
<a name="index-define_002dmode_002dabbrev"></a>
<a name="index-define_002dglobal_002dabbrev"></a>
<p>You can define an abbrev without inserting either the abbrev or its
expansion in the buffer using the command <code>define-global-abbrev</code>.
It reads two arguments—the abbrev, and its expansion.  The command
<code>define-mode-abbrev</code> does likewise for a mode-specific abbrev.

</p>
<p>To change the definition of an abbrev, just make a new definition.
When an abbrev has a prior definition, the abbrev definition commands
ask for confirmation before replacing it.

</p>
<a name="index-kill_002dall_002dabbrevs"></a>
<p>To remove an abbrev definition, give a negative argument to the
abbrev definition command: <kbd>C-u - C-x a g</kbd> or <kbd>C-u - C-x a l</kbd>.
The former removes a global definition, while the latter removes a
mode-specific definition.  <kbd>M-x kill-all-abbrevs</kbd> removes all
abbrev definitions, both global and local.

</p>

<a name="Expanding-Abbrevs"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Editing-Abbrevs" accesskey="n" rel="next">Editing Abbrevs</a>, Previous: <a href="#Defining-Abbrevs" accesskey="p" rel="prev">Defining Abbrevs</a>, Up: <a href="#Abbrevs" accesskey="u" rel="up">Abbrevs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Controlling-Abbrev-Expansion"></a>
<h3 class="section">29.3 Controlling Abbrev Expansion</h3>

<p>When Abbrev mode is enabled, an abbrev expands whenever it is
present in the buffer just before point and you type a self-inserting
whitespace or punctuation character (<tt class="key">SPC</tt>, comma, etc.).  More
precisely, any character that is not a word constituent expands an
abbrev, and any word-constituent character can be part of an abbrev.
The most common way to use an abbrev is to insert it and then insert a
punctuation or whitespace character to expand it.

</p>
<a name="index-abbrev_002dall_002dcaps"></a>
<p>Abbrev expansion preserves case: ‘<samp>foo</samp>’ expands to ‘<samp>find
outer otter</samp>’, and ‘<samp>Foo</samp>’ to ‘<samp>Find outer otter</samp>’.  ‘<samp>FOO</samp>’
expands to ‘<samp>Find Outer Otter</samp>’ by default, but if you change the
variable <code>abbrev-all-caps</code> to a non-<code>nil</code> value, it expands
to ‘<samp>FIND OUTER OTTER</samp>’.

</p>
<p>These commands are used to control abbrev expansion:

</p>
<dl compact="compact">
<dt><kbd>M-'</kbd></dt>
<dd><p>Separate a prefix from a following abbrev to be expanded
(<code>abbrev-prefix-mark</code>).

</p>
</dd>
<dt><kbd>C-x a e</kbd></dt>
<dd><a name="index-expand_002dabbrev"></a>
<p>Expand the abbrev before point (<code>expand-abbrev</code>).
This is effective even when Abbrev mode is not enabled.

</p>
</dd>
<dt><kbd>M-x unexpand-abbrev</kbd></dt>
<dd><a name="index-unexpand_002dabbrev"></a>
<p>Undo the expansion of the last expanded abbrev.

</p>
</dd>
<dt><kbd>M-x expand-region-abbrevs</kbd></dt>
<dd><p>Expand some or all abbrevs found in the region.

</p></dd>
</dl>

<a name="index-M_002d_0027"></a>
<a name="index-abbrev_002dprefix_002dmark"></a>
<p>You may wish to expand an abbrev and attach a prefix to the expansion;
for example, if ‘<samp>cnst</samp>’ expands into ‘<samp>construction</samp>’, you might want
to use it to enter ‘<samp>reconstruction</samp>’.  It does not work to type
<kbd>recnst</kbd>, because that is not necessarily a defined abbrev.  What
you can do is use the command <kbd>M-'</kbd> (<code>abbrev-prefix-mark</code>) in
between the prefix ‘<samp>re</samp>’ and the abbrev ‘<samp>cnst</samp>’.  First, insert
‘<samp>re</samp>’.  Then type <kbd>M-'</kbd>; this inserts a hyphen in the buffer to
indicate that it has done its work.  Then insert the abbrev ‘<samp>cnst</samp>’;
the buffer now contains ‘<samp>re-cnst</samp>’.  Now insert a non-word character
to expand the abbrev ‘<samp>cnst</samp>’ into ‘<samp>construction</samp>’.  This
expansion step also deletes the hyphen that indicated <kbd>M-'</kbd> had been
used.  The result is the desired ‘<samp>reconstruction</samp>’.

</p>
<p>If you actually want the text of the abbrev in the buffer, rather than
its expansion, you can accomplish this by inserting the following
punctuation with <kbd>C-q</kbd>.  Thus, <kbd>foo C-q ,</kbd> leaves ‘<samp>foo,</samp>’ in
the buffer, not expanding it.

</p>
<p>If you expand an abbrev by mistake, you can undo the expansion by
typing <kbd>C-/</kbd> (<code>undo</code>).  See <a href="#Undo">Undo</a>.  This undoes the
insertion of the abbrev expansion and brings back the abbrev text.  If
the result you want is the terminating non-word character plus the
unexpanded abbrev, you must reinsert the terminating character,
quoting it with <kbd>C-q</kbd>.  You can also use the command <kbd>M-x
unexpand-abbrev</kbd> to cancel the last expansion without deleting the
terminating character.

</p>
<a name="index-expand_002dregion_002dabbrevs"></a>
<p><kbd>M-x expand-region-abbrevs</kbd> searches through the region for defined
abbrevs, and for each one found offers to replace it with its expansion.
This command is useful if you have typed in text using abbrevs but forgot
to turn on Abbrev mode first.  It may also be useful together with a
special set of abbrev definitions for making several global replacements at
once.  This command is effective even if Abbrev mode is not enabled.

</p>
<p>The function <code>expand-abbrev</code> performs the expansion by calling
the function that <code>abbrev-expand-function</code> specifies.  By
changing this function you can make arbitrary changes to
the abbrev expansion.  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Abbrev-Expansion">Abbrev Expansion</a> in <cite>The Emacs Lisp
Reference Manual</cite>.

</p>

<a name="Editing-Abbrevs"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Saving-Abbrevs" accesskey="n" rel="next">Saving Abbrevs</a>, Previous: <a href="#Expanding-Abbrevs" accesskey="p" rel="prev">Expanding Abbrevs</a>, Up: <a href="#Abbrevs" accesskey="u" rel="up">Abbrevs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Examining-and-Editing-Abbrevs"></a>
<h3 class="section">29.4 Examining and Editing Abbrevs</h3>

<dl compact="compact">
<dt><kbd>M-x list-abbrevs</kbd></dt>
<dd><p>Display a list of all abbrev definitions.  With a numeric argument, list
only local abbrevs.

</p>
</dd>
<dt><kbd>M-x edit-abbrevs</kbd></dt>
<dd><p>Edit a list of abbrevs; you can add, alter or remove definitions.

</p></dd>
</dl>

<a name="index-list_002dabbrevs"></a>
<p>The output from <kbd>M-x list-abbrevs</kbd> looks like this:

</p>
<div class="example">
<pre class="example"><var>various other tables…</var>
(lisp-mode-abbrev-table)
"dk"          0    "define-key"
(global-abbrev-table)
"dfn"         0    "definition"
</pre></div>

<p>(Some blank lines of no semantic significance, and some other abbrev
tables, have been omitted.)

</p>
<p>A line containing a name in parentheses is the header for abbrevs in a
particular abbrev table; <code>global-abbrev-table</code> contains all the global
abbrevs, and the other abbrev tables that are named after major modes
contain the mode-specific abbrevs.

</p>
<p>Within each abbrev table, each nonblank line defines one abbrev.  The
word at the beginning of the line is the abbrev.  The number that
follows is the number of times the abbrev has been expanded.  Emacs
keeps track of this to help you see which abbrevs you actually use, so
that you can eliminate those that you don’t use often.  The string at
the end of the line is the expansion.

</p>
<p>Some abbrevs are marked with ‘<samp>(sys)</samp>’.  These <em>system abbrevs</em>
(see <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Abbrevs">Abbrevs</a> in <cite>The Emacs Lisp Reference Manual</cite>) are
pre-defined by various modes, and are not saved to your abbrev file.
To disable a system abbrev, define an abbrev of the same name that
expands to itself, and save it to your abbrev file.

</p>
<a name="index-edit_002dabbrevs"></a>
<a name="index-C_002dc-C_002dc-_0028Edit-Abbrevs_0029"></a>
<p><kbd>M-x edit-abbrevs</kbd> allows you to add, change or kill abbrev
definitions by editing a list of them in an Emacs buffer.  The list has
the same format described above.  The buffer of abbrevs is called
<samp>*Abbrevs*</samp>, and is in Edit-Abbrevs mode.  Type <kbd>C-c C-c</kbd> in
this buffer to install the abbrev definitions as specified in the
buffer—and delete any abbrev definitions not listed.

</p>
<p>The command <code>edit-abbrevs</code> is actually the same as
<code>list-abbrevs</code> except that it selects the buffer <samp>*Abbrevs*</samp>
whereas <code>list-abbrevs</code> merely displays it in another window.

</p>

<a name="Saving-Abbrevs"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Dynamic-Abbrevs" accesskey="n" rel="next">Dynamic Abbrevs</a>, Previous: <a href="#Editing-Abbrevs" accesskey="p" rel="prev">Editing Abbrevs</a>, Up: <a href="#Abbrevs" accesskey="u" rel="up">Abbrevs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Saving-Abbrevs-1"></a>
<h3 class="section">29.5 Saving Abbrevs</h3>

<p>These commands allow you to keep abbrev definitions between editing
sessions.

</p>
<dl compact="compact">
<dt><kbd>M-x write-abbrev-file <span class="key">RET</span> <var>file</var> <span class="key">RET</span></kbd></dt>
<dd><p>Write a file <var>file</var> describing all defined abbrevs.

</p>
</dd>
<dt><kbd>M-x read-abbrev-file <span class="key">RET</span> <var>file</var> <span class="key">RET</span></kbd></dt>
<dd><p>Read the file <var>file</var> and define abbrevs as specified therein.

</p>
</dd>
<dt><kbd>M-x define-abbrevs</kbd></dt>
<dd><p>Define abbrevs from definitions in current buffer.

</p>
</dd>
<dt><kbd>M-x insert-abbrevs</kbd></dt>
<dd><p>Insert all abbrevs and their expansions into current buffer.

</p></dd>
</dl>

<a name="index-write_002dabbrev_002dfile"></a>
<p><kbd>M-x write-abbrev-file</kbd> reads a file name using the minibuffer and
then writes a description of all current abbrev definitions into that
file.  This is used to save abbrev definitions for use in a later
session.  The text stored in the file is a series of Lisp expressions
that, when executed, define the same abbrevs that you currently have.

</p>
<a name="index-read_002dabbrev_002dfile"></a>
<a name="index-quietly_002dread_002dabbrev_002dfile"></a>
<a name="index-abbrev_002dfile_002dname"></a>
<a name="index-abbrev-file"></a>
<p><kbd>M-x read-abbrev-file</kbd> reads a file name using the minibuffer
and then reads the file, defining abbrevs according to the contents of
the file.  The function <code>quietly-read-abbrev-file</code> is similar
except that it does not display a message in the echo area; you cannot
invoke it interactively, and it is used primarily in your init file
(see <a href="#Init-File">Init File</a>).  If either of these functions is called with
<code>nil</code> as the argument, it uses the file given by the variable
<code>abbrev-file-name</code>, which is <samp>~/.emacs.d/abbrev_defs</samp> by
default.  This is your standard abbrev definition file, and Emacs
loads abbrevs from it automatically when it starts up.  (As an
exception, Emacs does not load the abbrev file when it is started in
batch mode.  See <a href="#Initial-Options">Initial Options</a>, for a description of batch mode.)

</p>
<a name="index-save_002dabbrevs"></a>
<p>Emacs will offer to save abbrevs automatically if you have changed
any of them, whenever it offers to save all files (for <kbd>C-x s</kbd> or
<kbd>C-x C-c</kbd>).  It saves them in the file specified by
<code>abbrev-file-name</code>.  This feature can be inhibited by setting the
variable <code>save-abbrevs</code> to <code>nil</code>; setting it to
<code>silently</code> will save the abbrevs automatically without asking.

</p>
<a name="index-insert_002dabbrevs"></a>
<a name="index-define_002dabbrevs"></a>
<p>The commands <kbd>M-x insert-abbrevs</kbd> and <kbd>M-x define-abbrevs</kbd> are
similar to the previous commands but work on text in an Emacs buffer.
<kbd>M-x insert-abbrevs</kbd> inserts text into the current buffer after point,
describing all current abbrev definitions; <kbd>M-x define-abbrevs</kbd> parses
the entire current buffer and defines abbrevs accordingly.

</p>

<a name="Dynamic-Abbrevs"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Dabbrev-Customization" accesskey="n" rel="next">Dabbrev Customization</a>, Previous: <a href="#Saving-Abbrevs" accesskey="p" rel="prev">Saving Abbrevs</a>, Up: <a href="#Abbrevs" accesskey="u" rel="up">Abbrevs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Dynamic-Abbrev-Expansion"></a>
<h3 class="section">29.6 Dynamic Abbrev Expansion</h3>

<p>The abbrev facility described above operates automatically as you
insert text, but all abbrevs must be defined explicitly.  By contrast,
<em>dynamic abbrevs</em> allow the meanings of abbreviations to be
determined automatically from the contents of the buffer, but dynamic
abbrev expansion happens only when you request it explicitly.

</p>
<a name="index-M_002d_002f"></a>
<a name="index-C_002dM_002d_002f"></a>
<a name="index-dabbrev_002dexpand"></a>
<a name="index-dabbrev_002dcompletion"></a>
<dl compact="compact">
<dt><kbd>M-/</kbd></dt>
<dd><p>Expand the word in the buffer before point as a <em>dynamic abbrev</em>,
by searching for words starting with that abbreviation
(<code>dabbrev-expand</code>).

</p>
</dd>
<dt><kbd>C-M-/</kbd></dt>
<dd><p>Complete the word before point as a dynamic abbrev
(<code>dabbrev-completion</code>).

</p></dd>
</dl>

<a name="index-dabbrev_002dlimit"></a>
<p>For example, if the buffer contains ‘<samp>does this follow </samp>’ and you
type <kbd>f o M-/</kbd>, the effect is to insert ‘<samp>follow</samp>’ because that
is the last word in the buffer that starts with ‘<samp>fo</samp>’.  A numeric
argument to <kbd>M-/</kbd> says to take the second, third, etc. distinct
expansion found looking backward from point.  Repeating <kbd>M-/</kbd>
searches for an alternative expansion by looking farther back.  After
scanning all the text before point, it searches the text after point.
The variable <code>dabbrev-limit</code>, if non-<code>nil</code>, specifies how far
away in the buffer to search for an expansion.

</p>
<a name="index-dabbrev_002dcheck_002dall_002dbuffers"></a>
<a name="index-dabbrev_002dcheck_002dother_002dbuffers"></a>
<p>After scanning the current buffer, <kbd>M-/</kbd> normally searches other
buffers.  The variables <code>dabbrev-check-all-buffers</code> and
<code>dabbrev-check-other-buffers</code> can be used to determine which
other buffers, if any, are searched.

</p>
<a name="index-dabbrev_002dignored_002dbuffer_002dnames"></a>
<a name="index-dabbrev_002dignored_002dbuffer_002dregexps"></a>
<p>For finer control over which buffers to scan, customize the
variables <code>dabbrev-ignored-buffer-names</code> and
<code>dabbrev-ignored-buffer-regexps</code>.  The value of the former is a
list of buffer names to skip.  The value of the latter is a list of
regular expressions; if a buffer’s name matches any of these regular
expressions, dynamic abbrev expansion skips that buffer.

</p>
<p>A negative argument to <kbd>M-/</kbd>, as in <kbd>C-u - M-/</kbd>, says to
search first for expansions after point, then other buffers, and
consider expansions before point only as a last resort.  If you repeat
the <kbd>M-/</kbd> to look for another expansion, do not specify an
argument.  Repeating <kbd>M-/</kbd> cycles through all the expansions after
point and then the expansions before point.

</p>
<p>After you have expanded a dynamic abbrev, you can copy additional
words that follow the expansion in its original context.  Simply type
<kbd><span class="key">SPC</span> M-/</kbd> for each additional word you want to copy.  The
spacing and punctuation between words is copied along with the words.

</p>
<p>You can control the way <kbd>M-/</kbd> determines the word to expand and
how to expand it, see <a href="#Dabbrev-Customization">Dabbrev Customization</a>.

</p>
<p>The command <kbd>C-M-/</kbd> (<code>dabbrev-completion</code>) performs
completion of a dynamic abbrev.  Instead of trying the possible
expansions one by one, it finds all of them, then inserts the text
that they have in common.  If they have nothing in common, <kbd>C-M-/</kbd>
displays a list of completions, from which you can select a choice in
the usual manner.  See <a href="#Completion">Completion</a>.

</p>
<p>Dynamic abbrev expansion is completely independent of Abbrev mode; the
expansion of a word with <kbd>M-/</kbd> is completely independent of whether
it has a definition as an ordinary abbrev.

</p>

<a name="Dabbrev-Customization"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Dynamic-Abbrevs" accesskey="p" rel="prev">Dynamic Abbrevs</a>, Up: <a href="#Abbrevs" accesskey="u" rel="up">Abbrevs</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Customizing-Dynamic-Abbreviation"></a>
<h3 class="section">29.7 Customizing Dynamic Abbreviation</h3>

<p>Normally, dynamic abbrev expansion ignores case when searching for
expansions.  That is, the expansion need not agree in case with the word
you are expanding.

</p>
<a name="index-dabbrev_002dcase_002dfold_002dsearch"></a>
<p>This feature is controlled by the variable
<code>dabbrev-case-fold-search</code>.  If it is <code>t</code>, case is ignored
in this search; if it is <code>nil</code>, the word and the expansion must
match in case.  If the value is <code>case-fold-search</code> (the default),
then the variable <code>case-fold-search</code> controls whether to ignore
case while searching for expansions (see <a href="#Lax-Search">Lax Search</a>).

</p>
<p>Normally, dynamic abbrev expansion preserves the case pattern
<em>of the dynamic abbrev you are expanding</em>, by converting the
expansion to that case pattern.

</p>
<a name="index-dabbrev_002dcase_002dreplace"></a>
<p>The variable <code>dabbrev-case-replace</code> controls whether to
preserve the case pattern of the dynamic abbrev.  If it is <code>t</code>,
the dynamic abbrev’s case pattern is preserved in most cases; if it is
<code>nil</code>, the expansion is always copied verbatim.  If the value is
<code>case-replace</code> (the default), then the variable
<code>case-replace</code> controls whether to copy the expansion verbatim
(see <a href="#Replacement-and-Lax-Matches">Replacement and Lax Matches</a>).

</p>
<p>However, if the expansion contains a complex mixed case pattern, and
the dynamic abbrev matches this pattern as far as it goes, then the
expansion is always copied verbatim, regardless of those variables.
Thus, for example, if the buffer contains
<code>variableWithSillyCasePattern</code>, and you type <kbd>v a M-/</kbd>, it
copies the expansion verbatim including its case pattern.

</p>
<a name="index-dabbrev_002dabbrev_002dchar_002dregexp"></a>
<p>The variable <code>dabbrev-abbrev-char-regexp</code>, if non-<code>nil</code>,
controls which characters are considered part of a word, for dynamic
expansion purposes.  The regular expression must match just one
character, never two or more.  The same regular expression also
determines which characters are part of an expansion.  The (default)
value <code>nil</code> has a special meaning: dynamic abbrevs (i.e. the
word at point) are made of word characters, but their expansions are
looked for as sequences of word and symbol characters.  This is
generally appropriate for expanding symbols in a program source and
also for human-readable text in many languages, but may not be what
you want in a text buffer that includes unusual punctuation characters;
in that case, the value <code>"\\sw"</code> might produce better results.

</p>
<a name="index-dabbrev_002dabbrev_002dskip_002dleading_002dregexp"></a>
<p>In shell scripts and makefiles, a variable name is sometimes prefixed
with ‘<samp>$</samp>’ and sometimes not.  Major modes for this kind of text can
customize dynamic abbrev expansion to handle optional prefixes by setting
the variable <code>dabbrev-abbrev-skip-leading-regexp</code>.  Its value
should be a regular expression that matches the optional prefix that
dynamic abbrev expression should ignore.  The default is <code>nil</code>,
which means no characters should be skipped.

</p><hr>
<a name="Dired"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Calendar_002fDiary" accesskey="n" rel="next">Calendar/Diary</a>, Previous: <a href="#Abbrevs" accesskey="p" rel="prev">Abbrevs</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Dired_002c-the-Directory-Editor"></a>
<h2 class="chapter">30 Dired, the Directory Editor</h2>
<a name="index-Dired"></a>
<a name="index-file-management"></a>

<p>Dired makes an Emacs buffer containing a listing of a directory, and
optionally some of its subdirectories as well.  You can use the normal
Emacs commands to move around in this buffer, and special Dired
commands to operate on the listed files.  Dired works with both local
and remote directories.

</p>
<p>The Dired buffer is normally read-only, and inserting text in it is
not allowed (however, the Wdired mode allows that, see <a href="#Wdired">Wdired</a>).
Ordinary printing characters such as <kbd>d</kbd> and <kbd>x</kbd> are
redefined for special Dired commands.  Some Dired commands <em>mark</em>
or <em>flag</em> the <em>current file</em> (that is, the file on the current
line); other commands operate on the marked files or on the flagged
files.  You first mark certain files in order to operate on all of
them with one command.

</p>
<p>The Dired-X package provides various extra features for Dired mode.
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/dired-x.html#Top">Dired-X</a> in <cite>Dired Extra User’s Manual</cite>.

</p>
<p>You can also view a list of files in a directory with <kbd>C-x C-d</kbd>
(<code>list-directory</code>).  Unlike Dired, this command does not allow
you to operate on the listed files.  See <a href="#Directories">Directories</a>.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Dired-Enter" accesskey="1">Enter</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to invoke Dired.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Dired-Navigation" accesskey="2">Navigation</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Special motion commands in the Dired buffer.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Dired-Deletion" accesskey="3">Deletion</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Deleting files with Dired.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Flagging-Many-Files" accesskey="4">Flagging Many Files</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Flagging files based on their names.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Dired-Visiting" accesskey="5">Visit</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Other file operations through Dired.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Marks-vs-Flags" accesskey="6">Marks vs Flags</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Flagging for deletion vs marking.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Operating-on-Files" accesskey="7">Operating on Files</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to copy, rename, print, compress, etc.
                                either one file or several files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Shell-Commands-in-Dired" accesskey="8">Shell Commands in Dired</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Running a shell command on the marked files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Transforming-File-Names" accesskey="9">Transforming File Names</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Using patterns to rename multiple files.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Comparison-in-Dired">Comparison in Dired</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Running <code>diff</code> by way of Dired.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Subdirectories-in-Dired">Subdirectories in Dired</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Adding subdirectories to the Dired buffer.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Subdir-Switches">Subdir Switches</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Subdirectory switches in Dired.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Subdirectory-Motion">Subdirectory Motion</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Moving across subdirectories, and up and down.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Hiding-Subdirectories">Hiding Subdirectories</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Making subdirectories visible or invisible.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Dired-Updating">Updating</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Discarding lines for files of no interest.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Dired-and-Find">Find</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Using <code>find</code> to choose the files for Dired.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Wdired">Wdired</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Operating on files by editing the Dired buffer.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Image_002dDired">Image-Dired</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Viewing image thumbnails in Dired.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Misc-Dired-Features">Misc</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Various other features.

</td></tr>
</tbody></table>


<a name="Dired-Enter"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Dired-Navigation" accesskey="n" rel="next">Dired Navigation</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Entering-Dired"></a>
<h3 class="section">30.1 Entering Dired</h3>

<a name="index-dired"></a>
<a name="index-C_002dx-d"></a>
<a name="index-dired_002dlisting_002dswitches"></a>
<p>To invoke Dired, type <kbd>C-x d</kbd> (<code>dired</code>).  This reads a
directory’s name using the minibuffer, and opens a <em>Dired buffer</em>
listing the files in that directory.  You can also supply a wildcard
file name pattern as the minibuffer argument, in which case the Dired
buffer lists all files matching that pattern.  A wildcard may appear
in the directory part as well.
For instance,

</p>
<div class="example">
<pre class="example">C-x d  ~/foo/*.el  <span class="key">RET</span>
C-x d  ~/foo/*/*.el  <span class="key">RET</span>
</pre></div>

<p>The former lists all the files with extension ‘<samp>.el</samp>’ in directory
‘<samp>foo</samp>’.  The latter lists the files with extension ‘<samp>.el</samp>’
in all the subdirectories of ‘<samp>foo</samp>’.

</p>
<p>The usual history and completion commands can be used in the minibuffer;
in particular, <kbd>M-n</kbd> puts the name of the visited file (if any) in
the minibuffer (see <a href="#Minibuffer-History">Minibuffer History</a>).

</p>
<p>You can also invoke Dired by giving <kbd>C-x C-f</kbd> (<code>find-file</code>)
a directory’s name.

</p>
<p>The variable <code>dired-listing-switches</code> specifies the options to
give to <code>ls</code> for listing the directory; this string
<em>must</em> contain ‘<samp>-l</samp>’.  If you use a prefix argument with the
<code>dired</code> command, you can specify the <code>ls</code> switches with the
minibuffer before you enter the directory specification.  No matter
how they are specified, the <code>ls</code> switches can include short
options (that is, single characters) requiring no arguments, and long
options (starting with ‘<samp>--</samp>’) whose arguments are specified with
‘<samp>=</samp>’.

</p>
<a name="index-dired_002duse_002dls_002ddired"></a>
<p>If your <code>ls</code> program supports the ‘<samp>--dired</samp>’ option,
Dired automatically passes it that option; this causes <code>ls</code> to
emit special escape sequences for certain unusual file names, without
which Dired will not be able to parse those names.  The first time you
run Dired in an Emacs session, it checks whether <code>ls</code> supports
the ‘<samp>--dired</samp>’ option by calling it once with that option.  If the
exit code is 0, Dired will subsequently use the ‘<samp>--dired</samp>’ option;
otherwise it will not.  You can inhibit this check by customizing the
variable <code>dired-use-ls-dired</code>.  The value <code>unspecified</code> (the
default) means to perform the check; any other non-<code>nil</code> value
means to use the ‘<samp>--dired</samp>’ option; and <code>nil</code> means not to
use the ‘<samp>--dired</samp>’ option.

</p>
<p>On MS-Windows and MS-DOS systems, and also on some remote systems,
Emacs emulates <code>ls</code>.  See <a href="#ls-in-Lisp">ls in Lisp</a>, for options and
peculiarities of this emulation.

</p>
<a name="index-dired_002dother_002dwindow"></a>
<a name="index-C_002dx-4-d"></a>
<a name="index-dired_002dother_002dframe"></a>
<a name="index-C_002dx-5-d"></a>
<p>To display the Dired buffer in another window, use <kbd>C-x 4 d</kbd>
(<code>dired-other-window</code>).  <kbd>C-x 5 d</kbd>
(<code>dired-other-frame</code>) displays the Dired buffer in a separate
frame.

</p>
<a name="index-q-_0028Dired_0029"></a>
<a name="index-quit_002dwindow_002c-in-Dired-buffers"></a>
<p>Typing <kbd>q</kbd> (<code>quit-window</code>) buries the Dired buffer, and
deletes its window if the window was created just for that buffer.

</p>

<a name="Dired-Navigation"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Dired-Deletion" accesskey="n" rel="next">Dired Deletion</a>, Previous: <a href="#Dired-Enter" accesskey="p" rel="prev">Dired Enter</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Navigation-in-the-Dired-Buffer"></a>
<h3 class="section">30.2 Navigation in the Dired Buffer</h3>

<a name="index-C_002dn-_0028Dired_0029"></a>
<a name="index-C_002dp-_0028Dired_0029"></a>
<a name="index-dired_002dnext_002dline"></a>
<a name="index-dired_002dprevious_002dline"></a>
<p>All the usual Emacs cursor motion commands are available in Dired
buffers.  The keys <kbd>C-n</kbd> and <kbd>C-p</kbd> are redefined to run
<code>dired-next-line</code> and <code>dired-previous-line</code>, respectively,
and they put the cursor at the beginning of the file name on the line,
rather than at the beginning of the line.

</p>
<a name="index-SPC-_0028Dired_0029"></a>
<p>For extra convenience, <tt class="key">SPC</tt> and <kbd>n</kbd> in Dired are equivalent
to <kbd>C-n</kbd>.  <kbd>p</kbd> is equivalent to <kbd>C-p</kbd>.  (Moving by lines
is so common in Dired that it deserves to be easy to type.)  <tt class="key">DEL</tt>
(move up and unflag) is also often useful simply for moving up
(see <a href="#Dired-Deletion">Dired Deletion</a>).

</p>
<a name="index-dired_002dgoto_002dfile"></a>
<a name="index-j-_0028Dired_0029"></a>
<p><kbd>j</kbd> (<code>dired-goto-file</code>) prompts for a file name using the
minibuffer, and moves point to the line in the Dired buffer describing
that file.

</p>
<a name="index-searching-Dired-buffers"></a>
<a name="index-dired_002disearch_002dfilenames"></a>
<a name="index-dired_002disearch_002dfilenames-1"></a>
<a name="index-dired_002disearch_002dfilenames_002dregexp"></a>
<a name="index-M_002ds-f-C_002ds-_0028Dired_0029"></a>
<a name="index-M_002ds-f-M_002dC_002ds-_0028Dired_0029"></a>
<p><kbd>M-s f C-s</kbd> (<code>dired-isearch-filenames</code>) performs a forward
incremental search in the Dired buffer, looking for matches only
amongst the file names and ignoring the rest of the text in the
buffer.  <kbd>M-s f M-C-s</kbd> (<code>dired-isearch-filenames-regexp</code>)
does the same, using a regular expression search.  If you change the
variable <code>dired-isearch-filenames</code> to <code>t</code>, then the
usual search commands also limit themselves to the file names; for
instance, <kbd>C-s</kbd> behaves like <kbd>M-s f C-s</kbd>.  If the value is
<code>dwim</code>, then search commands match the file names only when point
was on a file name initially.  See <a href="#Search">Search</a>, for information about
incremental search.

</p>
<p>Some additional navigation commands are available when the Dired
buffer includes several directories.  See <a href="#Subdirectory-Motion">Subdirectory Motion</a>.

</p>

<a name="Dired-Deletion"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Flagging-Many-Files" accesskey="n" rel="next">Flagging Many Files</a>, Previous: <a href="#Dired-Navigation" accesskey="p" rel="prev">Dired Navigation</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Deleting-Files-with-Dired"></a>
<h3 class="section">30.3 Deleting Files with Dired</h3>
<a name="index-flagging-files-_0028in-Dired_0029"></a>
<a name="index-deleting-files-_0028in-Dired_0029"></a>

<p>One of the most frequent uses of Dired is to first <em>flag</em> files for
deletion, then delete the files that were flagged.

</p>
<dl compact="compact">
<dt><kbd>d</kbd></dt>
<dd><p>Flag this file for deletion (<code>dired-flag-file-deletion</code>).

</p></dd>
<dt><kbd>u</kbd></dt>
<dd><p>Remove the deletion flag (<code>dired-unmark</code>).

</p></dd>
<dt><kbd><span class="key">DEL</span></kbd></dt>
<dd><p>Move point to previous line and remove the deletion flag on that line
(<code>dired-unmark-backward</code>).

</p></dd>
<dt><kbd>x</kbd></dt>
<dd><p>Delete files flagged for deletion (<code>dired-do-flagged-delete</code>).

</p></dd>
</dl>

<a name="index-d-_0028Dired_0029"></a>
<a name="index-dired_002dflag_002dfile_002ddeletion"></a>
<p>You can flag a file for deletion by moving to the line describing
the file and typing <kbd>d</kbd> (<code>dired-flag-file-deletion</code>).  The
deletion flag is visible as a ‘<samp>D</samp>’ at the beginning of the line.
This command moves point to the next line, so that repeated <kbd>d</kbd>
commands flag successive files.  A numeric prefix argument serves as a
repeat count; a negative count means to flag preceding files.

</p>
<p>If the region is active, the <kbd>d</kbd> command flags all files in the
region for deletion; in this case, the command does not move point,
and ignores any prefix argument.

</p>
<a name="index-u-_0028Dired-deletion_0029"></a>
<a name="index-DEL-_0028Dired_0029"></a>
<p>The reason for flagging files for deletion, rather than deleting
files immediately, is to reduce the danger of deleting a file
accidentally.  Until you direct Dired to delete the flagged files, you
can remove deletion flags using the commands <kbd>u</kbd> and <tt class="key">DEL</tt>.
<kbd>u</kbd> (<code>dired-unmark</code>) works just like <kbd>d</kbd>, but removes
flags rather than making flags.  <tt class="key">DEL</tt>
(<code>dired-unmark-backward</code>) moves upward, removing flags; it is
like <kbd>u</kbd> with argument -1.  A numeric prefix argument to
either command serves as a repeat count, with a negative count meaning
to unflag in the opposite direction.  If the region is active, these
commands instead unflag all files in the region, without moving point.

</p>
<a name="index-x-_0028Dired_0029"></a>
<a name="index-dired_002ddo_002dflagged_002ddelete"></a>
<p>To delete flagged files, type <kbd>x</kbd>
(<code>dired-do-flagged-delete</code>).  This command displays a list of all
the file names flagged for deletion, and requests confirmation with
<kbd>yes</kbd>.  If you confirm, Dired deletes the flagged files, then
deletes their lines from the text of the Dired buffer.  The Dired
buffer, with somewhat fewer lines, remains selected.

</p>
<p>If you answer <kbd>no</kbd> or quit with <kbd>C-g</kbd> when asked to confirm, you
return immediately to Dired, with the deletion flags still present in
the buffer, and no files actually deleted.

</p>
<a name="index-recursive-deletion"></a>
<a name="index-dired_002drecursive_002ddeletes"></a>
<p>You can delete empty directories just like other files, but normally
Dired cannot delete directories that are nonempty.  However, if the
variable <code>dired-recursive-deletes</code> is non-<code>nil</code>, then Dired
is allowed to delete nonempty directories including all their
contents.  That can be somewhat risky.  If the value of the variable
is <code>always</code>, Dired will delete nonempty directories recursively,
which is even more risky.

</p>
<p>Even if you have set <code>dired-recursive-deletes</code> to <code>nil</code>, you
might want sometimes to delete directories recursively without being
asked for confirmation for all of them.  For example, you may want
that when you have marked many directories for deletion and you are
very sure that all of them can safely be deleted.  For every nonempty
directory you are asked for confirmation to delete, if you answer
<code>all</code>, then all the remaining directories will be deleted without
any further questions.

</p>
<a name="index-delete_002dby_002dmoving_002dto_002dtrash_002c-and-Dired"></a>
<p>If you change the variable <code>delete-by-moving-to-trash</code> to
<code>t</code>, the above deletion commands will move the affected files or
directories into the operating system’s Trash, instead of deleting
them outright.  See <a href="#Misc-File-Ops">Misc File Ops</a>.

</p>
<p>An alternative way of deleting files is to mark them with <kbd>m</kbd>
and delete with <kbd>D</kbd>, see <a href="#Operating-on-Files">Operating on Files</a>.

</p>

<a name="Flagging-Many-Files"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Dired-Visiting" accesskey="n" rel="next">Dired Visiting</a>, Previous: <a href="#Dired-Deletion" accesskey="p" rel="prev">Dired Deletion</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Flagging-Many-Files-at-Once"></a>
<h3 class="section">30.4 Flagging Many Files at Once</h3>
<a name="index-flagging-many-files-for-deletion-_0028in-Dired_0029"></a>

<p>The <kbd>#</kbd>, <kbd>~</kbd>, <kbd>.</kbd>, <kbd>% &amp;</kbd>, and <kbd>% d</kbd> commands
flag many files for deletion, based on their file names:

</p>
<dl compact="compact">
<dt><kbd>#</kbd></dt>
<dd><p>Flag all auto-save files (files whose names start and end with ‘<samp>#</samp>’)
for deletion (see <a href="#Auto-Save">Auto Save</a>).

</p>
</dd>
<dt><kbd>~</kbd></dt>
<dd><p>Flag all backup files (files whose names end with ‘<samp>~</samp>’) for deletion
(see <a href="#Backup">Backup</a>).

</p>
</dd>
<dt><kbd>. <span class="roman">(Period)</span></kbd></dt>
<dd><p>Flag excess numeric backup files for deletion.  The oldest and newest
few backup files of any one file are exempt; the middle ones are
flagged.

</p>
</dd>
<dt><kbd>% &amp;</kbd></dt>
<dd><p>Flag for deletion all files with certain kinds of names which suggest
you could easily create those files again.

</p>
</dd>
<dt><kbd>% d <var>regexp</var> <span class="key">RET</span></kbd></dt>
<dd><p>Flag for deletion all files whose names match the regular expression
<var>regexp</var>.

</p></dd>
</dl>

<a name="index-_0023-_0028Dired_0029"></a>
<a name="index-dired_002dflag_002dauto_002dsave_002dfiles"></a>
<a name="index-deleting-auto_002dsave-files"></a>
<p><kbd>#</kbd> (<code>dired-flag-auto-save-files</code>) flags all files whose
names look like auto-save files—that is, files whose names begin and
end with ‘<samp>#</samp>’.  See <a href="#Auto-Save">Auto Save</a>.

</p>
<a name="index-_007e-_0028Dired_0029"></a>
<a name="index-dired_002dflag_002dbackup_002dfiles"></a>
<p><kbd>~</kbd> (<code>dired-flag-backup-files</code>) flags all files whose names
say they are backup files—that is, files whose names end in
‘<samp>~</samp>’.  See <a href="#Backup">Backup</a>.

</p>
<a name="index-_002e-_0028Dired_0029"></a>
<a name="index-dired_002dkept_002dversions"></a>
<a name="index-dired_002dclean_002ddirectory"></a>
<p><kbd>.</kbd> (period, <code>dired-clean-directory</code>) flags just some of
the backup files for deletion: all but the oldest few and newest few
backups of any one file.  Normally, the number of newest versions kept
for each file is given by the variable <code>dired-kept-versions</code>
(<em>not</em> <code>kept-new-versions</code>; that applies only when saving).
The number of oldest versions to keep is given by the variable
<code>kept-old-versions</code>.

</p>
<p>Period with a positive numeric argument, as in <kbd>C-u 3 .</kbd>,
specifies the number of newest versions to keep, overriding
<code>dired-kept-versions</code>.  A negative numeric argument overrides
<code>kept-old-versions</code>, using minus the value of the argument to
specify the number of oldest versions of each file to keep.

</p>
<a name="index-_0025-_0026-_0028Dired_0029"></a>
<a name="index-dired_002dflag_002dgarbage_002dfiles"></a>
<a name="index-dired_002dgarbage_002dfiles_002dregexp"></a>
<a name="index-deleting-some-backup-files"></a>
<p><kbd>% &amp;</kbd> (<code>dired-flag-garbage-files</code>) flags files whose names
match the regular expression specified by the variable
<code>dired-garbage-files-regexp</code>.  By default, this matches certain
files produced by TeX, ‘<samp>.bak</samp>’ files, and the ‘<samp>.orig</samp>’ and
‘<samp>.rej</samp>’ files produced by <code>patch</code>.

</p>
<a name="index-dired_002dflag_002dfiles_002dregexp"></a>
<a name="index-_0025-d-_0028Dired_0029"></a>
<p><kbd>% d</kbd> flags all files whose names match a specified regular
expression (<code>dired-flag-files-regexp</code>).  Only the non-directory
part of the file name is used in matching.  You can use ‘<samp>^</samp>’ and
‘<samp>$</samp>’ to anchor matches.  You can exclude certain subdirectories
from marking by hiding them while you use <kbd>% d</kbd>.  See <a href="#Hiding-Subdirectories">Hiding Subdirectories</a>.

</p>

<a name="Dired-Visiting"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Marks-vs-Flags" accesskey="n" rel="next">Marks vs Flags</a>, Previous: <a href="#Flagging-Many-Files" accesskey="p" rel="prev">Flagging Many Files</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Visiting-Files-in-Dired"></a>
<h3 class="section">30.5 Visiting Files in Dired</h3>

<p>There are several Dired commands for visiting or examining the files
listed in the Dired buffer.  All of them apply to the current line’s
file; if that file is really a directory, these commands invoke Dired on
that subdirectory (making a separate Dired buffer).

</p>
<dl compact="compact">
<dt><kbd>f</kbd></dt>
<dd><a name="index-f-_0028Dired_0029"></a>
<a name="index-dired_002dfind_002dfile"></a>
<p>Visit the file described on the current line, like typing <kbd>C-x C-f</kbd>
and supplying that file name (<code>dired-find-file</code>).  See <a href="#Visiting">Visiting</a>.

</p>
</dd>
<dt><kbd><span class="key">RET</span></kbd></dt>
<dt><kbd>e</kbd></dt>
<dd><a name="index-RET-_0028Dired_0029"></a>
<a name="index-e-_0028Dired_0029"></a>
<p>Equivalent to <kbd>f</kbd>.

</p>

</dd>
<dt><kbd>o</kbd></dt>
<dd><a name="index-o-_0028Dired_0029"></a>
<a name="index-dired_002dfind_002dfile_002dother_002dwindow"></a>
<p>Like <kbd>f</kbd>, but uses another window to display the file’s buffer
(<code>dired-find-file-other-window</code>).  The Dired buffer remains visible
in the first window.  This is like using <kbd>C-x 4 C-f</kbd> to visit the
file.  See <a href="#Windows">Windows</a>.

</p>
</dd>
<dt><kbd>C-o</kbd></dt>
<dd><a name="index-C_002do-_0028Dired_0029"></a>
<a name="index-dired_002ddisplay_002dfile"></a>
<p>Visit the file described on the current line, and display the buffer in
another window, but do not select that window (<code>dired-display-file</code>).

</p>
</dd>
<dt><kbd>鼠标左键</kbd></dt>
<dt><kbd>鼠标右键</kbd></dt>
<dd><a name="index-dired_002dmouse_002dfind_002dfile_002dother_002dwindow"></a>
<p>Visit the file whose name you clicked on
(<code>dired-mouse-find-file-other-window</code>).  This uses another window
to display the file, like the <kbd>o</kbd> command.

</p>
</dd>
<dt><kbd>v</kbd></dt>
<dd><a name="index-v-_0028Dired_0029"></a>
<a name="index-dired_002dview_002dfile"></a>
<p>View the file described on the current line, with View mode
(<code>dired-view-file</code>).  View mode provides convenient commands to
navigate the buffer but forbids changing it; See <a href="#View-Mode">View Mode</a>.

</p>
</dd>
<dt><kbd>^</kbd></dt>
<dd><a name="index-_005e-_0028Dired_0029"></a>
<a name="index-dired_002dup_002ddirectory"></a>
<p>Visit the parent directory of the current directory
(<code>dired-up-directory</code>).  This is equivalent to moving to the line
for <samp>..</samp> and typing <kbd>f</kbd> there.

</p></dd>
</dl>


<a name="Marks-vs-Flags"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Operating-on-Files" accesskey="n" rel="next">Operating on Files</a>, Previous: <a href="#Dired-Visiting" accesskey="p" rel="prev">Dired Visiting</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Dired-Marks-vs_002e-Flags"></a>
<h3 class="section">30.6 Dired Marks vs. Flags</h3>

<a name="index-marking-many-files-_0028in-Dired_0029"></a>
<p>Instead of flagging a file with ‘<samp>D</samp>’, you can <em>mark</em> the
file with some other character (usually ‘<samp>*</samp>’).  Most Dired
commands to operate on files use the files marked with ‘<samp>*</samp>’.  The
only command that operates on flagged files is <kbd>x</kbd>, which deletes
them.

</p>
<p>Here are some commands for marking with ‘<samp>*</samp>’, for unmarking, and
for operating on marks.  (See <a href="#Dired-Deletion">Dired Deletion</a>, for commands to flag
and unflag files.)

</p>
<dl compact="compact">
<dt><kbd>m</kbd></dt>
<dt><kbd>* m</kbd></dt>
<dd><a name="index-m-_0028Dired_0029"></a>
<a name="index-_002a-m-_0028Dired_0029"></a>
<a name="index-dired_002dmark"></a>
<p>Mark the current file with ‘<samp>*</samp>’ (<code>dired-mark</code>).  If the
region is active, mark all files in the region instead; otherwise, if
a numeric argument <var>n</var> is supplied, mark the next <var>n</var> files
instead, starting with the current file (if <var>n</var> is negative, mark
the previous -<var>n</var> files).  If invoked on a subdirectory
header line (see <a href="#Subdirectories-in-Dired">Subdirectories in Dired</a>), this command marks all
the files in that subdirectory.

</p>
</dd>
<dt><kbd>* N</kbd></dt>
<dd><a name="index-_002a-N-_0028Dired_0029"></a>
<a name="index-dired_002dnumber_002dof_002dmarked_002dfiles"></a>
<p>Report what the number and size of the marked files are
(<code>dired-number-of-marked-files</code>).

</p>
</dd>
<dt><kbd>* *</kbd></dt>
<dd><a name="index-_002a-_002a-_0028Dired_0029"></a>
<a name="index-dired_002dmark_002dexecutables"></a>
<a name="index-marking-executable-files-_0028in-Dired_0029"></a>
<p>Mark all executable files with ‘<samp>*</samp>’
(<code>dired-mark-executables</code>).  With a numeric argument, unmark all
those files.

</p>
</dd>
<dt><kbd>* @</kbd></dt>
<dd><a name="index-_002a-_0040-_0028Dired_0029"></a>
<a name="index-dired_002dmark_002dsymlinks"></a>
<a name="index-marking-symbolic-links-_0028in-Dired_0029"></a>
<p>Mark all symbolic links with ‘<samp>*</samp>’ (<code>dired-mark-symlinks</code>).
With a numeric argument, unmark all those files.

</p>
</dd>
<dt><kbd>* /</kbd></dt>
<dd><a name="index-_002a-_002f-_0028Dired_0029"></a>
<a name="index-dired_002dmark_002ddirectories"></a>
<a name="index-marking-subdirectories-_0028in-Dired_0029"></a>
<p>Mark with ‘<samp>*</samp>’ all files which are directories, except for
<samp>.</samp> and <samp>..</samp> (<code>dired-mark-directories</code>).  With a numeric
argument, unmark all those files.

</p>
</dd>
<dt><kbd>* s</kbd></dt>
<dd><a name="index-_002a-s-_0028Dired_0029"></a>
<a name="index-dired_002dmark_002dsubdir_002dfiles"></a>
<p>Mark all the files in the current subdirectory, aside from <samp>.</samp>
and <samp>..</samp> (<code>dired-mark-subdir-files</code>).

</p>
</dd>
<dt><kbd>u</kbd></dt>
<dt><kbd>* u</kbd></dt>
<dd><a name="index-u-_0028Dired_0029"></a>
<a name="index-_002a-u-_0028Dired_0029"></a>
<a name="index-dired_002dunmark"></a>
<p>Remove any mark on this line (<code>dired-unmark</code>).  If the region is
active, unmark all files in the region instead; otherwise, if a
numeric argument <var>n</var> is supplied, unmark the next <var>n</var> files
instead, starting with the current file (if <var>n</var> is negative,
unmark the previous -<var>n</var> files).

</p>
</dd>
<dt><kbd><span class="key">DEL</span></kbd></dt>
<dt><kbd>* <span class="key">DEL</span></kbd></dt>
<dd><a name="index-_002a-DEL-_0028Dired_0029"></a>
<a name="index-dired_002dunmark_002dbackward"></a>
<a name="index-unmarking-files-_0028in-Dired_0029"></a>
<p>Move point to previous line and remove any mark on that line
(<code>dired-unmark-backward</code>).  If the region is active, unmark all
files in the region instead; otherwise, if a numeric argument <var>n</var>
is supplied, unmark the <var>n</var> preceding files instead, starting with
the current file (if <var>n</var> is negative, unmark the next
-<var>n</var> files).

</p>
</dd>
<dt><kbd>* !</kbd></dt>
<dt><kbd>U</kbd></dt>
<dd><a name="index-_002a-_0021-_0028Dired_0029"></a>
<a name="index-U-_0028Dired_0029"></a>
<a name="index-dired_002dunmark_002dall_002dmarks"></a>
<p>Remove all marks from all the files in this Dired buffer
(<code>dired-unmark-all-marks</code>).

</p>
</dd>
<dt><kbd>* ? <var>markchar</var></kbd></dt>
<dt><kbd>M-<span class="key">DEL</span></kbd></dt>
<dd><a name="index-_002a-_003f-_0028Dired_0029"></a>
<a name="index-M_002dDEL-_0028Dired_0029"></a>
<a name="index-dired_002dunmark_002dall_002dfiles"></a>
<p>Remove all marks that use the character <var>markchar</var>
(<code>dired-unmark-all-files</code>).  If invoked with <kbd>M-<span class="key">DEL</span></kbd>,
the command prompts for <var>markchar</var>.  That <var>markchar</var> is a
single character—do not use <tt class="key">RET</tt> to terminate it.  See the
description of the <kbd>* c</kbd> command below, which lets you replace one
mark character with another.

</p>
<p>With a numeric argument, this command queries about each marked file,
asking whether to remove its mark.  You can answer <kbd>y</kbd> meaning yes,
<kbd>n</kbd> meaning no, or <kbd>!</kbd> to remove the marks from the remaining
files without asking about them.

</p>
</dd>
<dt><kbd>* C-n</kbd></dt>
<dt><kbd>M-}</kbd></dt>
<dd><a name="index-dired_002dnext_002dmarked_002dfile"></a>
<a name="index-_002a-C_002dn-_0028Dired_0029"></a>
<a name="index-M_002d_007d-_0028Dired_0029"></a>
<p>Move down to the next marked file (<code>dired-next-marked-file</code>).
A file is “marked” if it has any kind of mark.

</p>
</dd>
<dt><kbd>* C-p</kbd></dt>
<dt><kbd>M-{</kbd></dt>
<dd><a name="index-dired_002dprev_002dmarked_002dfile"></a>
<a name="index-_002a-C_002dp-_0028Dired_0029"></a>
<a name="index-M_002d_007b-_0028Dired_0029"></a>
<p>Move up to the previous marked file (<code>dired-prev-marked-file</code>).

</p>
</dd>
<dt><kbd>t</kbd></dt>
<dt><kbd>* t</kbd></dt>
<dd><a name="index-t-_0028Dired_0029"></a>
<a name="index-_002a-t-_0028Dired_0029"></a>
<a name="index-dired_002dtoggle_002dmarks"></a>
<a name="index-toggling-marks-_0028in-Dired_0029"></a>
<p>Toggle all marks (<code>dired-toggle-marks</code>): files marked with ‘<samp>*</samp>’
become unmarked, and unmarked files are marked with ‘<samp>*</samp>’.  Files
marked in any other way are not affected.

</p>
</dd>
<dt><kbd>* c <var>old-markchar</var> <var>new-markchar</var></kbd></dt>
<dd><a name="index-_002a-c-_0028Dired_0029"></a>
<a name="index-dired_002dchange_002dmarks"></a>
<p>Replace all marks that use the character <var>old-markchar</var> with marks
that use the character <var>new-markchar</var> (<code>dired-change-marks</code>).
This command is the primary way to create or use marks other than
‘<samp>*</samp>’ or ‘<samp>D</samp>’.  The arguments are single characters—do not use
<tt class="key">RET</tt> to terminate them.

</p>
<p>You can use almost any character as a mark character by means of this
command, to distinguish various classes of files.  If <var>old-markchar</var>
is a space (‘<samp> </samp>’), then the command operates on all unmarked files;
if <var>new-markchar</var> is a space, then the command unmarks the files it
acts on.

</p>
<p>To illustrate the power of this command, here is how to put ‘<samp>D</samp>’
flags on all the files that have no marks, while unflagging all those
that already have ‘<samp>D</samp>’ flags:

</p>
<div class="example">
<pre class="example">* c D t  * c <span class="key">SPC</span> D  * c t <span class="key">SPC</span>
</pre></div>

<p>This assumes that no files were already marked with ‘<samp>t</samp>’.

</p>
</dd>
<dt><kbd>% m <var>regexp</var> <span class="key">RET</span></kbd></dt>
<dt><kbd>* % <var>regexp</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-dired_002dmark_002dfiles_002dregexp"></a>
<a name="index-_0025-m-_0028Dired_0029"></a>
<a name="index-_002a-_0025-_0028Dired_0029"></a>
<p>Mark (with ‘<samp>*</samp>’) all files whose names match the regular expression
<var>regexp</var> (<code>dired-mark-files-regexp</code>).  This command is like
<kbd>% d</kbd>, except that it marks files with ‘<samp>*</samp>’ instead of flagging
with ‘<samp>D</samp>’.

</p>
<p>Only the non-directory part of the file name is used in matching.  Use
‘<samp>^</samp>’ and ‘<samp>$</samp>’ to anchor matches.  You can exclude
subdirectories by temporarily hiding them (see <a href="#Hiding-Subdirectories">Hiding Subdirectories</a>).

</p>
</dd>
<dt><kbd>% g <var>regexp</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-dired_002dmark_002dfiles_002dcontaining_002dregexp"></a>
<a name="index-_0025-g-_0028Dired_0029"></a>
<a name="index-finding-files-containing-regexp-matches-_0028in-Dired_0029"></a>
<p>Mark (with ‘<samp>*</samp>’) all files whose <em>contents</em> contain a match for
the regular expression <var>regexp</var>
(<code>dired-mark-files-containing-regexp</code>).  This command is like
<kbd>% m</kbd>, except that it searches the file contents instead of the file
name.  Note that if a file is visited in an Emacs buffer,
and <code>dired-always-read-filesystem</code> is <code>nil</code> (the default), this
command will look in the buffer without revisiting the file, so the results
might be inconsistent with the file on disk if its contents have changed
since it was last visited.  If you don’t want this, you may wish to
revert the files you have visited in your buffers, or to turn on
Auto-Revert mode in those buffers, before invoking this command.
See <a href="#Reverting">Reverting</a>.  If you prefer that this command should always
revisit the file, without you having to revert the file or enable
Auto-Revert mode, you might want to set
<code>dired-always-read-filesystem</code> to non-<code>nil</code>.

</p>
</dd>
<dt><kbd>C-/</kbd></dt>
<dt><kbd>C-x u</kbd></dt>
<dt><kbd>C-_</kbd></dt>
<dd><a name="index-C_002d_005f-_0028Dired_0029"></a>
<a name="index-dired_002dundo"></a>
<p>Undo changes in the Dired buffer, such as adding or removing
marks (<code>dired-undo</code>).  <em>This command does not revert the
actual file operations, nor recover lost files!</em>  It just undoes
changes in the buffer itself.

</p>
<p>In some cases, using this after commands that operate on files can
cause trouble.  For example, after renaming one or more files,
<code>dired-undo</code> restores the original names in the Dired buffer,
which gets the Dired buffer out of sync with the actual contents of
the directory.

</p></dd>
</dl>


<a name="Operating-on-Files"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Shell-Commands-in-Dired" accesskey="n" rel="next">Shell Commands in Dired</a>, Previous: <a href="#Marks-vs-Flags" accesskey="p" rel="prev">Marks vs Flags</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Operating-on-Files-1"></a>
<h3 class="section">30.7 Operating on Files</h3>
<a name="index-operating-on-files-in-Dired"></a>

<p>This section describes the basic Dired commands to operate on one file
or several files.  All of these commands are capital letters; all of
them use the minibuffer, either to read an argument or to ask for
confirmation, before they act.  All of them let you specify the
files to manipulate in these ways:

</p>
<ul>
<li>  If you give the command a numeric prefix argument <var>n</var>, it operates
on the next <var>n</var> files, starting with the current file.  (If <var>n</var>
is negative, the command operates on the -<var>n</var> files preceding
the current line.)



</li><li>  Otherwise, if some files are marked with ‘<samp>*</samp>’, the command operates
on all those files.



</li><li>  Otherwise, the command operates on the current file only.

</li></ul>

<p>Certain other Dired commands, such as <kbd>!</kbd> and the ‘<samp>%</samp>’
commands, use the same conventions to decide which files to work on.

</p>
<a name="index-dired_002ddwim_002dtarget"></a>
<a name="index-two-directories-_0028in-Dired_0029"></a>
<p>Commands which ask for a destination directory, such as those which
copy and rename files or create links for them, try to guess the default
target directory for the operation.  Normally, they suggest the Dired
buffer’s default directory, but if the option <code>dired-dwim-target</code>
is non-<code>nil</code>, and if there is another Dired buffer displayed in
some window, that other buffer’s directory is suggested instead.
You can customize <code>dired-dwim-target</code> to prefer either the next
window with a Dired buffer, or the most recently used window with
a Dired buffer, or to use any other function.  When the value is
a function, it will be called with no arguments and is expected to
return a list of directories which will be used as defaults
(i.e. default target and “future history”).

</p>
<p>Here are the file-manipulating Dired commands that operate on files.

</p>
<dl compact="compact">
<dd><a name="index-dired_002ddo_002dcopy"></a>
<a name="index-C-_0028Dired_0029"></a>
<a name="index-copying-files-_0028in-Dired_0029"></a>
</dd>
<dt><kbd>C <var>new</var> <span class="key">RET</span></kbd></dt>
<dd><p>Copy the specified files (<code>dired-do-copy</code>).  The argument <var>new</var>
is the directory to copy into, or (if copying a single file) the new
name.  This is like the shell command <code>cp</code>.

</p>
<a name="index-dired_002dcreate_002ddestination_002ddirs"></a>
<p>The option <code>dired-create-destination-dirs</code> controls whether Dired
should create non-existent directories in the destination while
copying/renaming files.  The default value <code>nil</code> means Dired
never creates such missing directories;  the value <code>always</code>,
means Dired automatically creates them; the value <code>ask</code>
means Dired asks you for confirmation before creating them.

</p>
<a name="index-dired_002dcopy_002dpreserve_002dtime"></a>
<p>If <code>dired-copy-preserve-time</code> is non-<code>nil</code>, then copying
with this command preserves the modification time of the old file in
the copy, like ‘<samp>cp -p</samp>’.

</p>
<a name="index-dired_002drecursive_002dcopies"></a>
<a name="index-recursive-copying"></a>
<p>The variable <code>dired-recursive-copies</code> controls whether to copy
directories recursively (like ‘<samp>cp -r</samp>’).  The default is
<code>top</code>, which means to ask before recursively copying a directory.

</p>
</dd>
<dt><kbd>D</kbd></dt>
<dd><a name="index-dired_002ddo_002ddelete"></a>
<a name="index-D-_0028Dired_0029"></a>
<p>Delete the specified files (<code>dired-do-delete</code>).  This is like the
shell command <code>rm</code>.

</p>
<p>Like the other commands in this section, this command operates on the
<em>marked</em> files, or the next <var>n</var> files.  By contrast, <kbd>x</kbd>
(<code>dired-do-flagged-delete</code>) deletes all <em>flagged</em> files.

</p>
<a name="index-dired_002ddo_002drename"></a>
<a name="index-R-_0028Dired_0029"></a>
<a name="index-renaming-files-_0028in-Dired_0029"></a>
<a name="index-moving-files-_0028in-Dired_0029"></a>
</dd>
<dt><kbd>R <var>new</var> <span class="key">RET</span></kbd></dt>
<dd><p>Rename the specified files (<code>dired-do-rename</code>).  If you rename a
single file, the argument <var>new</var> is the new name of the file.  If
you rename several files, the argument <var>new</var> is the directory into
which to move the files (this is like the shell command <code>mv</code>).

</p>
<p>The option <code>dired-create-destination-dirs</code> controls whether Dired
should create non-existent directories in <var>new</var>.

</p>
<p>Dired automatically changes the visited file name of buffers associated
with renamed files so that they refer to the new names.

</p>
<a name="index-dired_002dvc_002drename_002dfile"></a>
<p>If the value of the variable <code>dired-vc-rename-file</code> is non-<code>nil</code>,
files are renamed using the commands of the underlying VCS, via
<code>vc-rename-file</code> (see <a href="#VC-Delete_002fRename">VC Delete/Rename</a>).

</p>
<a name="index-dired_002ddo_002dhardlink"></a>
<a name="index-H-_0028Dired_0029"></a>
<a name="index-hard-links-_0028in-Dired_0029"></a>
</dd>
<dt><kbd>H <var>new</var> <span class="key">RET</span></kbd></dt>
<dd><p>Make hard links to the specified files (<code>dired-do-hardlink</code>).
This is like the shell command <code>ln</code>.  The argument <var>new</var> is
the directory to make the links in, or (if making just one link) the
name to give the link.

</p>
<a name="index-dired_002ddo_002dsymlink"></a>
<a name="index-S-_0028Dired_0029"></a>
<a name="index-symbolic-links-_0028creation-in-Dired_0029"></a>
</dd>
<dt><kbd>S <var>new</var> <span class="key">RET</span></kbd></dt>
<dd><p>Make symbolic links to the specified files (<code>dired-do-symlink</code>).
This is like ‘<samp>ln -s</samp>’.  The argument <var>new</var> is the directory to
make the links in, or (if making just one link) the name to give the
link.

</p>
<a name="index-dired_002ddo_002dchmod"></a>
<a name="index-M-_0028Dired_0029"></a>
<a name="index-changing-file-permissions-_0028in-Dired_0029"></a>
</dd>
<dt><kbd>M <var>modespec</var> <span class="key">RET</span></kbd></dt>
<dd><p>Change the mode (also called <em>permission bits</em>) of the specified
files (<code>dired-do-chmod</code>).  <var>modespec</var> can be in octal or
symbolic notation, like arguments handled by the <code>chmod</code>
program.

</p>
<a name="index-dired_002ddo_002dchgrp"></a>
<a name="index-G-_0028Dired_0029"></a>
<a name="index-changing-file-group-_0028in-Dired_0029"></a>
</dd>
<dt><kbd>G <var>newgroup</var> <span class="key">RET</span></kbd></dt>
<dd><p>Change the group of the specified files to <var>newgroup</var>
(<code>dired-do-chgrp</code>).

</p>
<a name="index-dired_002ddo_002dchown"></a>
<a name="index-O-_0028Dired_0029"></a>
<a name="index-changing-file-owner-_0028in-Dired_0029"></a>
</dd>
<dt><kbd>O <var>newowner</var> <span class="key">RET</span></kbd></dt>
<dd><p>Change the owner of the specified files to <var>newowner</var>
(<code>dired-do-chown</code>).  (On most systems, only the superuser can do
this.)

</p>
<a name="index-dired_002dchown_002dprogram"></a>
<p>The variable <code>dired-chown-program</code> specifies the name of the
program to use to do the work.  (This variable is necessary because
different systems put <code>chown</code> in different places).

</p>
<a name="index-dired_002ddo_002dtouch"></a>
<a name="index-T-_0028Dired_0029"></a>
<a name="index-changing-file-time-_0028in-Dired_0029"></a>
</dd>
<dt><kbd>T <var>timestamp</var> <span class="key">RET</span></kbd></dt>
<dd><p>Touch the specified files (<code>dired-do-touch</code>).  This means
updating their modification times to the present time.  This is like
the shell command <code>touch</code>.

</p>
<a name="index-dired_002ddo_002dprint"></a>
<a name="index-P-_0028Dired_0029"></a>
<a name="index-printing-files-_0028in-Dired_0029"></a>
</dd>
<dt><kbd>P <var>command</var> <span class="key">RET</span></kbd></dt>
<dd><p>Print the specified files (<code>dired-do-print</code>).  You must specify the
command to print them with, but the minibuffer starts out with a
suitable guess made using the variables <code>lpr-command</code> and
<code>lpr-switches</code> (the same variables that <code>lpr-buffer</code> uses;
see <a href="#Printing">Printing</a>).

</p>
<a name="index-dired_002ddo_002dcompress"></a>
<a name="index-Z-_0028Dired_0029"></a>
<a name="index-compressing-files-_0028in-Dired_0029"></a>
</dd>
<dt><kbd>Z</kbd></dt>
<dd><p>Compress the specified files (<code>dired-do-compress</code>).  If the file
appears to be a compressed file already, uncompress it instead.  Each
marked file is compressed into its own archive; this uses the
<code>gzip</code> program if it is available, otherwise it uses
<code>compress</code>.  On a directory name, this command produces a
compressed <samp>.tar.gz</samp> archive containing all of the directory’s
files, by running the <code>tar</code> command with output piped to
<code>gzip</code>.  To allow decompression of compressed directories,
typing <kbd>Z</kbd> on a <samp>.tar.gz</samp> or <samp>.tgz</samp> archive file unpacks
all the files in the archive into a directory whose name is the
archive name with the extension removed.

</p>
<a name="index-dired_002ddo_002dcompress_002dto"></a>
<a name="index-c-_0028Dired_0029"></a>
</dd>
<dt><kbd>c</kbd></dt>
<dd><p>Compress the specified files (<code>dired-do-compress-to</code>) into a
single archive anywhere on the file system. The compression algorithm
is determined by the extension of the archive, see
<code>dired-compress-files-alist</code>.

</p>
<a name="index-epa_002ddired_002ddo_002ddecrypt"></a>
<a name="index-_003ad-_0028Dired_0029"></a>
<a name="index-decrypting-files-_0028in-Dired_0029"></a>
</dd>
<dt><kbd>:d</kbd></dt>
<dd><p>Decrypt the specified files (<code>epa-dired-do-decrypt</code>).
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/epa.html#Dired-integration">Dired integration</a> in <cite>EasyPG Assistant User’s Manual</cite>.

</p>
<a name="index-epa_002ddired_002ddo_002dverify"></a>
<a name="index-_003av-_0028Dired_0029"></a>
<a name="index-verifying-digital-signatures-on-files-_0028in-Dired_0029"></a>
</dd>
<dt><kbd>:v</kbd></dt>
<dd><p>Verify digital signatures on the specified files (<code>epa-dired-do-verify</code>).
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/epa.html#Dired-integration">Dired integration</a> in <cite>EasyPG Assistant User’s Manual</cite>.

</p>
<a name="index-epa_002ddired_002ddo_002dsign"></a>
<a name="index-_003as-_0028Dired_0029"></a>
<a name="index-signing-files-_0028in-Dired_0029"></a>
</dd>
<dt><kbd>:s</kbd></dt>
<dd><p>Digitally sign the specified files (<code>epa-dired-do-sign</code>).
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/epa.html#Dired-integration">Dired integration</a> in <cite>EasyPG Assistant User’s Manual</cite>.

</p>
<a name="index-epa_002ddired_002ddo_002dencrypt"></a>
<a name="index-_003ae-_0028Dired_0029"></a>
<a name="index-encrypting-files-_0028in-Dired_0029"></a>
</dd>
<dt><kbd>:e</kbd></dt>
<dd><p>Encrypt the specified files (<code>epa-dired-do-encrypt</code>).
See <a href="http://www.gnu.org/software/emacs/manual/html_mono/epa.html#Dired-integration">Dired integration</a> in <cite>EasyPG Assistant User’s Manual</cite>.

</p>
<a name="index-dired_002ddo_002dload"></a>
<a name="index-L-_0028Dired_0029"></a>
<a name="index-loading-several-files-_0028in-Dired_0029"></a>
</dd>
<dt><kbd>L</kbd></dt>
<dd><p>Load the specified Emacs Lisp files (<code>dired-do-load</code>).
See <a href="#Lisp-Libraries">Lisp Libraries</a>.

</p>
<a name="index-dired_002ddo_002dbyte_002dcompile"></a>
<a name="index-B-_0028Dired_0029"></a>
<a name="index-byte_002dcompiling-several-files-_0028in-Dired_0029"></a>
</dd>
<dt><kbd>B</kbd></dt>
<dd><p>Byte compile the specified Emacs Lisp files
(<code>dired-do-byte-compile</code>).  See <a href="http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Byte-Compilation">Byte
Compilation</a> in <cite>The Emacs Lisp Reference Manual</cite>.

</p>
<a name="index-A-_0028Dired_0029"></a>
<a name="index-dired_002ddo_002dfind_002dregexp"></a>
<a name="index-search-multiple-files-_0028in-Dired_0029"></a>
</dd>
<dt><kbd>A <var>regexp</var> <span class="key">RET</span></kbd></dt>
<dd><p>Search all the specified files for the regular expression <var>regexp</var>
(<code>dired-do-find-regexp</code>).

</p>
<p>This command is a variant of <code>xref-find-references</code>
(see <a href="#Identifier-Search">Identifier Search</a>), it displays the <samp>*xref*</samp> buffer,
where you can navigate between matches and display them as needed
using the commands described in <a href="#Xref-Commands">Xref Commands</a>.

</p>
<a name="index-grep_002dfind_002dignored_002dfiles-_0028Dired_0029"></a>
<a name="index-grep_002dfind_002dignored_002ddirectories-_0028Dired_0029"></a>
<p>If any of the marked files are directories, then this command searches
all of the files in those directories, and any of their
subdirectories, recursively, except files whose names match
<code>grep-find-ignored-files</code> and subdirectories whose names match
<code>grep-find-ignored-directories</code>.

</p>
<a name="index-Q-_0028Dired_0029"></a>
<a name="index-dired_002ddo_002dfind_002dregexp_002dand_002dreplace"></a>
<a name="index-search-and-replace-in-multiple-files-_0028in-Dired_0029"></a>
</dd>
<dt><kbd>Q <var>regexp</var> <span class="key">RET</span> <var>to</var> <span class="key">RET</span></kbd></dt>
<dd><p>Perform <code>query-replace-regexp</code> on each of the specified files,
replacing matches for <var>regexp</var> with the string
<var>to</var> (<code>dired-do-find-regexp-and-replace</code>).

</p>
<p>This command is a variant of <code>xref-query-replace-in-results</code>.  It
presents an <samp>*xref*</samp> buffer that lists all the matches of <var>regexp</var>,
and you can use the special commands in that buffer (see <a href="#Xref-Commands">Xref Commands</a>).  In particular, if you exit the query replace loop, you
can use <kbd>r</kbd> in that buffer to replace more matches.
See <a href="#Identifier-Search">Identifier Search</a>.

</p>
<p>Like with <code>dired-do-find-regexp</code>, if any of the marked files are
directories, this command performs replacements in all of the files in
those directories, and in any of their subdirectories, recursively,
except for files whose names match <code>grep-find-ignored-files</code> and
subdirectories whose names match <code>grep-find-ignored-directories</code>.

</p></dd>
</dl>


<a name="Shell-Commands-in-Dired"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Transforming-File-Names" accesskey="n" rel="next">Transforming File Names</a>, Previous: <a href="#Operating-on-Files" accesskey="p" rel="prev">Operating on Files</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Shell-Commands-in-Dired-1"></a>
<h3 class="section">30.8 Shell Commands in Dired</h3>
<a name="index-shell-commands_002c-Dired"></a>

<a name="index-dired_002ddo_002dshell_002dcommand"></a>
<a name="index-_0021-_0028Dired_0029"></a>
<a name="index-X-_0028Dired_0029"></a>
<p>The Dired command <kbd>!</kbd> (<code>dired-do-shell-command</code>) reads a
shell command string in the minibuffer, and runs that shell command on
one or more files.  The files that the shell command operates on are
determined in the usual way for Dired commands (see <a href="#Operating-on-Files">Operating on Files</a>).  The command <kbd>X</kbd> is a synonym for <kbd>!</kbd>.

</p>
<p>The command <kbd>&amp;</kbd> (<code>dired-do-async-shell-command</code>) does the
same, except that it runs the shell command asynchronously.  (You can
also do this with <kbd>!</kbd>, by appending a ‘<samp>&amp;</samp>’ character to the
end of the shell command.)  When the command operates on more than one
file, it runs multiple parallel copies of the specified shell command,
one for each file.  As an exception, if the specified shell command
ends in ‘<samp>;</samp>’ or ‘<samp>;&amp;</samp>’, the shell command is run in the
background on each file sequentially; Emacs waits for each invoked
shell command to terminate before running the next one.

</p>
<p>For both <kbd>!</kbd> and <kbd>&amp;</kbd>, the working directory for the shell
command is the top-level directory of the Dired buffer.

</p>
<p>If you tell <kbd>!</kbd> or <kbd>&amp;</kbd> to operate on more than one file, the
shell command string determines how those files are passed to the
shell command:

</p>
<ul>
<li>  If you use ‘<samp>*</samp>’ surrounded by whitespace in the command string,
then the command runs just once, with the list of file names
substituted for the ‘<samp>*</samp>’.  The order of file names is the order of
appearance in the Dired buffer.



<p>Thus, <kbd>! tar cf foo.tar * <span class="key">RET</span></kbd> runs <code>tar</code> on the entire
list of file names, putting them into one tar file <samp>foo.tar</samp>.

</p>
<p>If you want to use ‘<samp>*</samp>’ as a shell wildcard with whitespace around
it, write ‘<samp>*""</samp>’.  In the shell, this is equivalent to ‘<samp>*</samp>’;
but since the ‘<samp>*</samp>’ is not surrounded by whitespace, Dired does not
treat it specially.

</p>
</li><li>  Otherwise, if the command string contains ‘<samp>?</samp>’ surrounded by
whitespace or ‘<samp>`?`</samp>’, Emacs runs the shell command once
<em>for each file</em>, substituting the current file name for ‘<samp>?</samp>’
and ‘<samp>`?`</samp>’ each time.  You can use both ‘<samp>?</samp>’ and ‘<samp>`?`</samp>’ more
than once in the command; the same file name replaces each occurrence.
If you mix them with ‘<samp>*</samp>’ the command signals an error.



</li><li>  If the command string contains neither ‘<samp>*</samp>’ nor ‘<samp>?</samp>’ nor ‘<samp>`?`</samp>’,
Emacs runs the shell command once for each file, adding the file name at the
end.  For example, <kbd>! uudecode <span class="key">RET</span></kbd> runs <code>uudecode</code> on
each file.

</li></ul>

<p>To iterate over the file names in a more complicated fashion, you might
prefer to use an explicit shell loop.  For example, here is how to uuencode
each file, making the output file name by appending ‘<samp>.uu</samp>’ to the input
file name:

</p>
<div class="example">
<pre class="example">for file in * ; do uuencode "$file" "$file" &gt;"$file".uu; done
</pre></div>

<p>The same example with ‘<samp>`?`</samp>’ notation:

</p><div class="example">
<pre class="example">uuencode ??> `?`.uu
</pre></div>

<p>The <kbd>!</kbd> and <kbd>&amp;</kbd> commands do not attempt to update the Dired
buffer to show new or modified files, because they don’t know what
files will be changed.  Use the <kbd>g</kbd> command to update the Dired
buffer (see <a href="#Dired-Updating">Dired Updating</a>).

</p>
<p>See <a href="#Single-Shell">Single Shell</a>, for information about running shell commands
outside Dired.

</p>

<a name="Transforming-File-Names"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Comparison-in-Dired" accesskey="n" rel="next">Comparison in Dired</a>, Previous: <a href="#Shell-Commands-in-Dired" accesskey="p" rel="prev">Shell Commands in Dired</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Transforming-File-Names-in-Dired"></a>
<h3 class="section">30.9 Transforming File Names in Dired</h3>

<p>This section describes Dired commands which alter file names in a
systematic way.  Each command operates on some or all of the marked
files, using a new name made by transforming the existing name.

</p>
<p>Like the basic Dired file-manipulation commands (see <a href="#Operating-on-Files">Operating on Files</a>), the commands described here operate either on the next
<var>n</var> files, or on all files marked with ‘<samp>*</samp>’, or on the current
file.  (To mark files, use the commands described in <a href="#Marks-vs-Flags">Marks vs Flags</a>.)

</p>
<p>All of the commands described in this section work
<em>interactively</em>: they ask you to confirm the operation for each
candidate file.  Thus, you can select more files than you actually
need to operate on (e.g., with a regexp that matches many files), and
then filter the selected names by typing <kbd>y</kbd> or <kbd>n</kbd> when the
command prompts for confirmation.

</p>
<dl compact="compact">
<dd><a name="index-dired_002dupcase"></a>
<a name="index-_0025-u-_0028Dired_0029"></a>
<a name="index-upcase-file-names"></a>
</dd>
<dt><kbd>% u</kbd></dt>
<dd><p>Rename each of the selected files to an upper-case name
(<code>dired-upcase</code>).  If the old file names are <samp>Foo</samp>
and <samp>bar</samp>, the new names are <samp>FOO</samp> and <samp>BAR</samp>.

</p>
</dd>
<dt><kbd>% l</kbd></dt>
<dd><a name="index-dired_002ddowncase"></a>
<a name="index-_0025-l-_0028Dired_0029"></a>
<a name="index-downcase-file-names"></a>
<p>Rename each of the selected files to a lower-case name
(<code>dired-downcase</code>).  If the old file names are <samp>Foo</samp> and
<samp>bar</samp>, the new names are <samp>foo</samp> and <samp>bar</samp>.

</p>
</dd>
<dt><kbd>% R <var>from</var> <span class="key">RET</span> <var>to</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-_0025-R-_0028Dired_0029"></a>
<a name="index-dired_002ddo_002drename_002dregexp"></a>
</dd>
<dt><kbd>% C <var>from</var> <span class="key">RET</span> <var>to</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-_0025-C-_0028Dired_0029"></a>
<a name="index-dired_002ddo_002dcopy_002dregexp"></a>
</dd>
<dt><kbd>% H <var>from</var> <span class="key">RET</span> <var>to</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-_0025-H-_0028Dired_0029"></a>
<a name="index-dired_002ddo_002dhardlink_002dregexp"></a>
</dd>
<dt><kbd>% S <var>from</var> <span class="key">RET</span> <var>to</var> <span class="key">RET</span></kbd></dt>
<dd><a name="index-_0025-S-_0028Dired_0029"></a>
<a name="index-dired_002ddo_002dsymlink_002dregexp"></a>
<p>These four commands rename, copy, make hard links and make soft links,
in each case computing the new name by regular-expression substitution
from the name of the old file.

</p></dd>
</dl>

<p>The four regular-expression substitution commands effectively
perform a search-and-replace on the selected file names.  They read
two arguments: a regular expression <var>from</var>, and a substitution
pattern <var>to</var>; they match each old file name against
<var>from</var>, and then replace the matching part with <var>to</var>.  You can
use ‘<samp>\&amp;</samp>’ and ‘<samp>\<var>digit</var></samp>’ in <var>to</var> to refer to all or
part of what the pattern matched in the old file name, as in
<code>replace-regexp</code> (see <a href="#Regexp-Replace">Regexp Replace</a>).  If the regular
expression matches more than once in a file name, only the first match
is replaced.

</p>
<p>For example, <kbd>% R ^.*$ <span class="key">RET</span> x-\&amp; <span class="key">RET</span></kbd> renames each
selected file by prepending ‘<samp>x-</samp>’ to its name.  The inverse of this,
removing ‘<samp>x-</samp>’ from the front of each file name, is also possible:
one method is <kbd>% R ^x-\(.*\)$ <span class="key">RET</span> \1 <span class="key">RET</span></kbd>; another is
<kbd>% R ^x- <span class="key">RET</span> <span class="key">RET</span></kbd>.  (Use ‘<samp>^</samp>’ and ‘<samp>$</samp>’ to anchor
matches that should span the whole file name.)

</p>
<p>Normally, the replacement process does not consider the files’
directory names; it operates on the file name within the directory.  If
you specify a numeric argument of zero, then replacement affects the
entire absolute file name including directory name.  (A non-zero
argument specifies the number of files to operate on.)

</p>
<p>You may want to select the set of files to operate on using the same
regexp <var>from</var> that you will use to operate on them.  To do this,
mark those files with <kbd>% m <var>from</var> <span class="key">RET</span></kbd>, then use the
same regular expression in the command to operate on the files.  To
make this more convenient, the <kbd>%</kbd> commands to operate on files
use the last regular expression specified in any <kbd>%</kbd> command as a
default.

</p>

<a name="Comparison-in-Dired"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Subdirectories-in-Dired" accesskey="n" rel="next">Subdirectories in Dired</a>, Previous: <a href="#Transforming-File-Names" accesskey="p" rel="prev">Transforming File Names</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="File-Comparison-with-Dired"></a>
<h3 class="section">30.10 File Comparison with Dired</h3>
<a name="index-file-comparison-_0028in-Dired_0029"></a>
<a name="index-compare-files-_0028in-Dired_0029"></a>

<a name="index-dired_002ddiff"></a>
<a name="index-_003d-_0028Dired_0029"></a>
<p>The <kbd>=</kbd> (<code>dired-diff</code>) command compares the current file
(the file at point) with another file (read using the minibuffer)
using the <code>diff</code> program.  The file specified with the
minibuffer is the first argument of <code>diff</code>, and file at point
is the second argument.  The output of the <code>diff</code> program is
shown in a buffer using Diff mode (see <a href="#Comparing-Files">Comparing Files</a>).

</p>
<p>If the region is active, the default for the file read using the
minibuffer is the file at the mark (i.e., the ordinary Emacs mark,
not a Dired mark; see <a href="#Setting-Mark">Setting Mark</a>).  Otherwise, if the file at
point has a backup file (see <a href="#Backup">Backup</a>), that is the default.

</p>
<p>You could also compare files using <code>ediff-files</code>, see
<a href="http://www.gnu.org/software/emacs/manual/html_mono/ediff.html#Major-Entry-Points">Major Entry Points</a> in <cite>Ediff User’s Manual</cite>.

</p>

<a name="Subdirectories-in-Dired"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Subdir-Switches" accesskey="n" rel="next">Subdir Switches</a>, Previous: <a href="#Comparison-in-Dired" accesskey="p" rel="prev">Comparison in Dired</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Subdirectories-in-Dired-1"></a>
<h3 class="section">30.11 Subdirectories in Dired</h3>
<a name="index-subdirectories-in-Dired"></a>
<a name="index-expanding-subdirectories-in-Dired"></a>

<p>A Dired buffer usually displays just one directory, but you can
optionally include its subdirectories as well.

</p>
<p>The simplest way to include multiple directories in one Dired buffer is
to specify the options ‘<samp>-lR</samp>’ for running <code>ls</code>.  (If you give a
numeric argument when you run Dired, then you can specify these options
in the minibuffer.)  That produces a recursive directory listing showing
all subdirectories at all levels.

</p>
<p>More often, you will want to show only specific subdirectories.  You
can do this with <kbd>i</kbd> (<code>dired-maybe-insert-subdir</code>):

</p>
<dl compact="compact">
<dd><a name="index-dired_002dmaybe_002dinsert_002dsubdir"></a>
<a name="index-i-_0028Dired_0029"></a>
</dd>
<dt><kbd>i</kbd></dt>
<dd><a name="index-inserted-subdirectory-_0028Dired_0029"></a>
<a name="index-in_002dsitu-subdirectory-_0028Dired_0029"></a>
<p>Insert the contents of a subdirectory later in the buffer.

</p></dd>
</dl>

<p>If you use this command on a line that describes a file which is a
directory, it inserts the contents of that directory into the same
Dired buffer, and moves there.  Inserted subdirectory contents follow
the top-level directory of the Dired buffer, just as they do in
‘<samp>ls -lR</samp>’ output.

</p>
<p>If the subdirectory’s contents are already present in the buffer,
the <kbd>i</kbd> command just moves to it.

</p>
<p>In either case, <kbd>i</kbd> sets the Emacs mark before moving, so
<kbd>C-u C-<span class="key">SPC</span></kbd> returns to your previous position in the Dired
buffer (see <a href="#Setting-Mark">Setting Mark</a>).  You can also use ‘<samp>^</samp>’ to return to
the parent directory in the same Dired buffer (see <a href="#Dired-Visiting">Dired Visiting</a>).

</p>
<p>Use the <kbd>l</kbd> command (<code>dired-do-redisplay</code>) to update the
subdirectory’s contents, and use <kbd>C-u k</kbd> on the subdirectory
header line to remove the subdirectory listing (see <a href="#Dired-Updating">Dired Updating</a>).  You can also hide and show inserted subdirectories
(see <a href="#Hiding-Subdirectories">Hiding Subdirectories</a>).

</p>

<a name="Subdir-Switches"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Subdirectory-Motion" accesskey="n" rel="next">Subdirectory Motion</a>, Previous: <a href="#Subdirectories-in-Dired" accesskey="p" rel="prev">Subdirectories in Dired</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Subdirectory-Switches-in-Dired"></a>
<h3 class="section">30.12 Subdirectory Switches in Dired</h3>

<p>You can insert subdirectories with specified <code>ls</code> switches in
Dired buffers using <kbd>C-u i</kbd>.  You can change the <code>ls</code>
switches of an already inserted subdirectory at point using <kbd>C-u l</kbd>.

</p>
<p>Dired preserves the switches if you revert the buffer.  Deleting a
subdirectory forgets about its switches.

</p>
<p>Using <code>dired-undo</code>
(see <a href="#Marks-vs-Flags">Marks vs Flags</a>)
to reinsert or delete
subdirectories that were inserted with explicit switches can bypass
Dired’s machinery for remembering (or forgetting) switches.  Deleting
a subdirectory using <code>dired-undo</code> does not forget its switches.
When later reinserted using <kbd>i</kbd>, it will be reinserted using its
old switches.  Using <code>dired-undo</code> to reinsert a subdirectory that
was deleted using the regular Dired commands (not <code>dired-undo</code>)
will originally insert it with its old switches.  Reverting the
buffer, however, will relist it using the buffer’s default switches.
If any of this yields problems, you can easily correct the situation
using <kbd>C-u i</kbd> or <kbd>C-u l</kbd>.

</p>
<p>Dired does not remember the <code>R</code> switch.  Inserting a subdirectory
with switches that include the <code>R</code> switch is equivalent to
inserting each of its subdirectories using all remaining switches.
For instance, updating or killing a subdirectory that was inserted
with the <code>R</code> switch will not update or kill its subdirectories.

</p>
<p>The buffer’s default switches do not affect subdirectories that were
inserted using explicitly specified switches.  In particular,
commands such as <kbd>s</kbd> that change the buffer’s switches do not
affect such subdirectories.  (They do, however, affect subdirectories
without explicitly assigned switches.)

</p>
<p>You can make Dired forget about all subdirectory switches and relist
all subdirectories with the buffer’s default switches using
<kbd>M-x dired-reset-subdir-switches</kbd>.  This also reverts the Dired buffer.

</p>

<a name="Subdirectory-Motion"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Hiding-Subdirectories" accesskey="n" rel="next">Hiding Subdirectories</a>, Previous: <a href="#Subdir-Switches" accesskey="p" rel="prev">Subdir Switches</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Moving-Over-Subdirectories"></a>
<h3 class="section">30.13 Moving Over Subdirectories</h3>

<p>When a Dired buffer lists subdirectories, you can use the page motion
commands <kbd>C-x [</kbd> and <kbd>C-x ]</kbd> to move by entire directories
(see <a href="#Pages">Pages</a>).

</p>
<a name="index-header-line-_0028Dired_0029"></a>
<a name="index-directory-header-lines"></a>
<p>The following commands move across, up and down in the tree of
directories within one Dired buffer.  They move to <em>directory header
lines</em>, which are the lines that give a directory’s name, at the
beginning of the directory’s contents.

</p>
<dl compact="compact">
<dd><a name="index-dired_002dnext_002dsubdir"></a>
<a name="index-C_002dM_002dn-_0028Dired_0029"></a>
</dd>
<dt><kbd>C-M-n</kbd></dt>
<dd><p>Go to next subdirectory header line, regardless of level
(<code>dired-next-subdir</code>).

</p>
<a name="index-dired_002dprev_002dsubdir"></a>
<a name="index-C_002dM_002dp-_0028Dired_0029"></a>
</dd>
<dt><kbd>C-M-p</kbd></dt>
<dd><p>Go to previous subdirectory header line, regardless of level
(<code>dired-prev-subdir</code>).

</p>
<a name="index-dired_002dtree_002dup"></a>
<a name="index-C_002dM_002du-_0028Dired_0029"></a>
</dd>
<dt><kbd>C-M-u</kbd></dt>
<dd><p>Go up to the parent directory’s header line (<code>dired-tree-up</code>).

</p>
<a name="index-dired_002dtree_002ddown"></a>
<a name="index-C_002dM_002dd-_0028Dired_0029"></a>
</dd>
<dt><kbd>C-M-d</kbd></dt>
<dd><p>Go down in the directory tree, to the first subdirectory’s header line
(<code>dired-tree-down</code>).

</p>
<a name="index-dired_002dprev_002ddirline"></a>
<a name="index-_003c-_0028Dired_0029"></a>
</dd>
<dt><kbd>&lt;</kbd></dt>
<dd><p>Move up to the previous directory-file line (<code>dired-prev-dirline</code>).
These lines are the ones that describe a directory as a file in its
parent directory.

</p>
<a name="index-dired_002dnext_002ddirline"></a>
<a name="index-_003e-_0028Dired_0029"></a>
</dd>
<dt><kbd>&gt;</kbd></dt>
<dd><p>Move down to the next directory-file line (<code>dired-next-dirline</code>).

</p></dd>
</dl>


<a name="Hiding-Subdirectories"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Dired-Updating" accesskey="n" rel="next">Dired Updating</a>, Previous: <a href="#Subdirectory-Motion" accesskey="p" rel="prev">Subdirectory Motion</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Hiding-Subdirectories-1"></a>
<h3 class="section">30.14 Hiding Subdirectories</h3>
<a name="index-hiding-subdirectories-_0028Dired_0029"></a>
<a name="index-showing-hidden-subdirectories-_0028Dired_0029"></a>

<p><em>Hiding</em> a subdirectory means to make it invisible, except for its
header line.

</p>
<dl compact="compact">
<dt><kbd>$</kbd></dt>
<dd><a name="index-dired_002dhide_002dsubdir"></a>
<a name="index-_0024-_0028Dired_0029"></a>
<p>Hide or show the subdirectory that point is in, and move point to the
next subdirectory (<code>dired-hide-subdir</code>).  This is a toggle.  A
numeric argument serves as a repeat count.

</p>
</dd>
<dt><kbd>M-$</kbd></dt>
<dd><a name="index-dired_002dhide_002dall"></a>
<a name="index-M_002d_0024-_0028Dired_0029"></a>
<p>Hide all subdirectories in this Dired buffer, leaving only their header
lines (<code>dired-hide-all</code>).  Or, if any subdirectory is currently
hidden, make all subdirectories visible again.  You can use this command
to get an overview in very deep directory trees or to move quickly to
subdirectories far away.

</p></dd>
</dl>

<p>Ordinary Dired commands never consider files inside a hidden
subdirectory.  For example, the commands to operate on marked files
ignore files in hidden directories even if they are marked.  Thus you
can use hiding to temporarily exclude subdirectories from operations
without having to remove the Dired marks on files in those
subdirectories.

</p>
<p>See <a href="#Subdirectories-in-Dired">Subdirectories in Dired</a>, for how to insert a subdirectory
listing, and see <a href="#Dired-Updating">Dired Updating</a>, for how to delete it.

</p>

<a name="Dired-Updating"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Dired-and-Find" accesskey="n" rel="next">Dired and Find</a>, Previous: <a href="#Hiding-Subdirectories" accesskey="p" rel="prev">Hiding Subdirectories</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Updating-the-Dired-Buffer"></a>
<h3 class="section">30.15 Updating the Dired Buffer</h3>
<a name="index-updating-Dired-buffer"></a>
<a name="index-refreshing-displayed-files"></a>

<p>This section describes commands to update the Dired buffer to reflect
outside (non-Dired) changes in the directories and files, and to delete
part of the Dired buffer.

</p>
<dl compact="compact">
<dt><kbd>g</kbd></dt>
<dd><p>Update the entire contents of the Dired buffer (<code>revert-buffer</code>).

</p>
</dd>
<dt><kbd>l</kbd></dt>
<dd><p>Update the specified files (<code>dired-do-redisplay</code>).  You specify the
files for <kbd>l</kbd> in the same way as for file operations.

</p>
</dd>
<dt><kbd>k</kbd></dt>
<dd><p>Delete the specified <em>file lines</em>—not the files, just the lines
(<code>dired-do-kill-lines</code>).

</p>
</dd>
<dt><kbd>s</kbd></dt>
<dd><p>Toggle between alphabetical order and date/time order
(<code>dired-sort-toggle-or-edit</code>).

</p>
</dd>
<dt><kbd>C-u s <var>switches</var> <span class="key">RET</span></kbd></dt>
<dd><p>Refresh the Dired buffer using <var>switches</var> as
<code>dired-listing-switches</code>.

</p></dd>
</dl>

<a name="index-g-_0028Dired_0029"></a>
<a name="index-revert_002dbuffer-_0028Dired_0029"></a>
<p>Type <kbd>g</kbd> (<code>revert-buffer</code>) to update the contents of the
Dired buffer, based on changes in the files and directories listed.
This preserves all marks except for those on files that have vanished.
Hidden subdirectories are updated but remain hidden.

</p>
<a name="index-l-_0028Dired_0029"></a>
<a name="index-dired_002ddo_002dredisplay"></a>
<p>To update only some of the files, type <kbd>l</kbd>
(<code>dired-do-redisplay</code>).  Like the Dired file-operating commands,
this command operates on the next <var>n</var> files (or previous
-<var>n</var> files), or on the marked files if any, or on the
current file.  Updating the files means reading their current status,
then updating their lines in the buffer to indicate that status.

</p>
<p>If you use <kbd>l</kbd> on a subdirectory header line, it updates the
contents of the corresponding subdirectory.

</p>
<a name="index-dired_002dauto_002drevert_002dbuffer"></a>
<p>If you use <kbd>C-x d</kbd> or some other Dired command to visit a
directory that is already being shown in a Dired buffer, Dired
switches to that buffer but does not update it.  If the buffer is not
up-to-date, Dired displays a warning telling you to type <kbd>g</kbd> to
update it.  You can also tell Emacs to revert each Dired buffer
automatically when you revisit it, by setting the variable
<code>dired-auto-revert-buffer</code> to a non-<code>nil</code> value.

</p>
<a name="index-k-_0028Dired_0029"></a>
<a name="index-dired_002ddo_002dkill_002dlines"></a>
<p>To delete <em>file lines</em> from the buffer—without actually
deleting the files—type <kbd>k</kbd> (<code>dired-do-kill-lines</code>).  Like
the file-operating commands, this command operates on the next <var>n</var>
files, or on the marked files if any.  However, it does not operate on
the current file, since otherwise mistyping <kbd>k</kbd> could be annoying.

</p>
<p>If you use <kbd>k</kbd> to kill the line for a directory file which you
had inserted in the Dired buffer as a subdirectory
(see <a href="#Subdirectories-in-Dired">Subdirectories in Dired</a>), it removes the subdirectory listing
as well.  Typing <kbd>C-u k</kbd> on the header line for a subdirectory
also removes the subdirectory line from the Dired buffer.

</p>
<p>The <kbd>g</kbd> command brings back any individual lines that you have
killed in this way, but not subdirectories—you must use <kbd>i</kbd> to
reinsert a subdirectory.

</p>
<a name="index-Dired-sorting"></a>
<a name="index-sorting-Dired-buffer"></a>
<a name="index-s-_0028Dired_0029"></a>
<a name="index-dired_002dsort_002dtoggle_002dor_002dedit"></a>
<p>The files in a Dired buffers are normally listed in alphabetical order
by file names.  Alternatively Dired can sort them by date/time.  The
Dired command <kbd>s</kbd> (<code>dired-sort-toggle-or-edit</code>) switches
between these two sorting modes.  The mode line in a Dired buffer
indicates which way it is currently sorted—by name, or by date.

</p>
<p><kbd>C-u s <var>switches</var> <span class="key">RET</span></kbd> lets you specify a new value for
<code>dired-listing-switches</code>.

</p>

<a name="Dired-and-Find"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Wdired" accesskey="n" rel="next">Wdired</a>, Previous: <a href="#Dired-Updating" accesskey="p" rel="prev">Dired Updating</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Dired-and-find"></a>
<h3 class="section">30.16 Dired and <code>find</code></h3>
<a name="index-find-and-Dired"></a>

<p>You can select a set of files for display in a Dired buffer more
flexibly by using the <code>find</code> utility to choose the files.

</p>
<a name="index-find_002dname_002ddired"></a>
<p>To search for files with names matching a wildcard pattern use
<kbd>M-x find-name-dired</kbd>.  It reads arguments <var>directory</var> and
<var>pattern</var>, and chooses all the files in <var>directory</var> or its
subdirectories whose individual names match <var>pattern</var>.

</p>
<p>The files thus chosen are displayed in a Dired buffer, in which the
ordinary Dired commands are available.

</p>
<a name="index-find_002dgrep_002ddired"></a>
<p>If you want to test the contents of files, rather than their names,
use <kbd>M-x find-grep-dired</kbd>.  This command reads two minibuffer
arguments, <var>directory</var> and <var>regexp</var>; it chooses all the files
in <var>directory</var> or its subdirectories that contain a match for
<var>regexp</var>.  It works by running the programs <code>find</code> and
<code>grep</code>.  See also <kbd>M-x grep-find</kbd>, in <a href="#Grep-Searching">Grep Searching</a>.  Remember to write the regular expression for
<code>grep</code>, not for Emacs.  (An alternative method of showing
files whose contents match a given regexp is the <kbd>% g
<var>regexp</var></kbd> command, see <a href="#Marks-vs-Flags">Marks vs Flags</a>.)

</p>
<a name="index-find_002ddired"></a>
<p>The most general command in this series is <kbd>M-x find-dired</kbd>,
which lets you specify any condition that <code>find</code> can test.  It
takes two minibuffer arguments, <var>directory</var> and <var>find-args</var>;
it runs <code>find</code> in <var>directory</var>, passing <var>find-args</var> to
tell <code>find</code> what condition to test.  To use this command, you
need to know how to use <code>find</code>.

</p>
<a name="index-find_002dls_002doption"></a>
<p>The format of listing produced by these commands is controlled by
the variable <code>find-ls-option</code>.  This is a pair of options; the
first specifying how to call <code>find</code> to produce the file listing,
and the second telling Dired to parse the output.

</p>
<a name="index-locate"></a>
<a name="index-locate_002dwith_002dfilter"></a>
<a name="index-file-database-_0028locate_0029"></a>
<a name="index-locate_002dcommand"></a>
<p>The command <kbd>M-x locate</kbd> provides a similar interface to the
<code>locate</code> program.  <kbd>M-x locate-with-filter</kbd> is similar, but
keeps only files whose names match a given regular expression.

</p>
<p>These buffers don’t work entirely like ordinary Dired buffers: file
operations work, but do not always automatically update the buffer.
Reverting the buffer with <kbd>g</kbd> deletes all inserted subdirectories,
and erases all flags and marks.

</p>

<a name="Wdired"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Image_002dDired" accesskey="n" rel="next">Image-Dired</a>, Previous: <a href="#Dired-and-Find" accesskey="p" rel="prev">Dired and Find</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Editing-the-Dired-Buffer"></a>
<h3 class="section">30.17 Editing the Dired Buffer</h3>

<a name="index-wdired-mode"></a>
<a name="index-wdired_002dchange_002dto_002dwdired_002dmode"></a>
<p>Wdired is a special mode that allows you to perform file operations
by editing the Dired buffer directly (the “W” in “Wdired” stands
for “writable”).  To enter Wdired mode, type <kbd>C-x C-q</kbd>
(<code>dired-toggle-read-only</code>) while in a Dired buffer.
Alternatively, use the ‘<samp>Immediate / Edit File Names</samp>’ menu item.

</p>
<a name="index-wdired_002dfinish_002dedit"></a>
<p>While in Wdired mode, you can rename files by editing the file names
displayed in the Dired buffer.  All the ordinary Emacs editing
commands, including rectangle operations and <code>query-replace</code>, are
available for this.  Once you are done editing, type <kbd>C-c C-c</kbd>
(<code>wdired-finish-edit</code>).  This applies your changes and switches
back to ordinary Dired mode.

</p>
<p>Apart from simply renaming files, you can move a file to another
directory by typing in the new file name (either absolute or
relative).  To mark a file for deletion, delete the entire file name.
To change the target of a symbolic link, edit the link target name
which appears next to the link name.

</p>
<p>If you edit the file names to create a new subdirectory, Wdired will
automatically create these new directories.  To inhibit this behavior,
set <code>wdired-create-parent-directories</code> to <code>nil</code>.

</p>
<p>The rest of the text in the buffer, such as the file sizes and
modification dates, is marked read-only, so you can’t edit it.
However, if you set <code>wdired-allow-to-change-permissions</code> to
<code>t</code>, you can edit the file permissions.  For example, you can
change ‘<samp>-rw-r--r--</samp>’ to ‘<samp>-rw-rw-rw-</samp>’ to make a file
world-writable.  These changes also take effect when you type <kbd>C-c
C-c</kbd>.

</p>

<a name="Image_002dDired"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Misc-Dired-Features" accesskey="n" rel="next">Misc Dired Features</a>, Previous: <a href="#Wdired" accesskey="p" rel="prev">Wdired</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Viewing-Image-Thumbnails-in-Dired"></a>
<h3 class="section">30.18 Viewing Image Thumbnails in Dired</h3>
<a name="index-image_002ddired-mode"></a>
<a name="index-image_002ddired"></a>

<p>Image-Dired is a facility for browsing image files.  It provides viewing
the images either as thumbnails or in full size, either inside Emacs
or through an external viewer.  This is different from Image mode
(see <a href="#Image-Mode">Image Mode</a>) for visiting an image file in the Emacs buffer.

</p>
<a name="index-C_002dt-d-_0028Image_002dDired_0029"></a>
<a name="index-image_002ddired_002ddisplay_002dthumbs"></a>
<p>To enter Image-Dired, mark the image files you want to look at in
the Dired buffer, using <kbd>m</kbd> as usual.  Then type <kbd>C-t d</kbd>
(<code>image-dired-display-thumbs</code>).  This creates and switches to a
buffer containing image-dired, corresponding to the marked files.

</p>
<p>You can also enter Image-Dired directly by typing <kbd>M-x
image-dired</kbd>.  This prompts for a directory; specify one that has
image files.  This creates thumbnails for all the images in that
directory, and displays them all in the thumbnail buffer.  This
takes a long time if the directory contains many image files, and it
asks for confirmation if the number of image files exceeds
<code>image-dired-show-all-from-dir-max-files</code>.

</p>
<p>With point in the thumbnail buffer, you can type <tt class="key">RET</tt>
(<code>image-dired-display-thumbnail-original-image</code>) to display a
sized version of it in another window.  This sizes the image to fit
the window.  Use the arrow keys to move around in the buffer.  For
easy browsing, use <tt class="key">SPC</tt>
(<code>image-dired-display-next-thumbnail-original</code>) to advance and
display the next image.  Typing <tt class="key">DEL</tt>
(<code>image-dired-display-previous-thumbnail-original</code>) backs up to
the previous thumbnail and displays that instead.

</p>
<a name="index-image_002ddired_002dexternal_002dviewer"></a>
<p>To view the image in its original size, either provide a prefix
argument (<kbd>C-u</kbd>) before pressing <tt class="key">RET</tt>, or type
<kbd>C-<span class="key">RET</span></kbd> (<code>image-dired-thumbnail-display-external</code>) to
display the image in an external viewer.  You must first configure
<code>image-dired-external-viewer</code>.

</p>
<p>You can delete images through Image-Dired also.  Type <kbd>d</kbd>
(<code>image-dired-flag-thumb-original-file</code>) to flag the image file
for deletion in the Dired buffer.  You can also delete the thumbnail
image from the thumbnail buffer with <kbd>C-d</kbd>
(<code>image-dired-delete-char</code>).

</p>
<p>More advanced features include <em>image tags</em>, which are metadata
used to categorize image files.  The tags are stored in a plain text
file configured by <code>image-dired-db-file</code>.

</p>
<p>To tag image files, mark them in the dired buffer (you can also mark
files in Dired from the thumbnail buffer by typing <kbd>m</kbd>) and type
<kbd>C-t t</kbd> (<code>image-dired-tag-files</code>).  This reads the tag name
in the minibuffer.  To mark files having a certain tag, type <kbd>C-t f</kbd>
(<code>image-dired-mark-tagged-files</code>).  After marking image files
with a certain tag, you can use <kbd>C-t d</kbd> to view them.

</p>
<p>You can also tag a file directly from the thumbnail buffer by typing
<kbd>t t</kbd> and you can remove a tag by typing <kbd>t r</kbd>.  There is also
a special tag called “comment” for each file (it is not a tag in
the exact same sense as the other tags, it is handled slightly
differently).  That is used to enter a comment or description about the
image.  You comment a file from the thumbnail buffer by typing
<kbd>c</kbd>.  You will be prompted for a comment.  Type <kbd>C-t c</kbd> to add
a comment from Dired (<code>image-dired-dired-comment-files</code>).

</p>
<p>Image-Dired also provides simple image manipulation.  In the
thumbnail buffer, type <kbd>L</kbd> to rotate the original image 90 degrees
anti clockwise, and <kbd>R</kbd> to rotate it 90 degrees clockwise.  This
rotation is lossless, and uses an external utility called
<code>jpegtran</code>, which you need to install first.

</p>

<a name="Misc-Dired-Features"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Image_002dDired" accesskey="p" rel="prev">Image-Dired</a>, Up: <a href="#Dired" accesskey="u" rel="up">Dired</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Other-Dired-Features"></a>
<h3 class="section">30.19 Other Dired Features</h3>

<a name="index-_002b-_0028Dired_0029"></a>
<a name="index-dired_002dcreate_002ddirectory"></a>
<p>The command <kbd>+</kbd> (<code>dired-create-directory</code>) reads a
directory’s name, and creates that directory.  It signals an error if
the directory already exists.

</p>
<a name="index-dired_002dcreate_002dempty_002dfile"></a>
<p>The command (<code>dired-create-empty-file</code>) reads a
file name, and creates that file.  It signals an error if
the file already exists.

</p>
<a name="index-searching-multiple-files-via-Dired"></a>
<a name="index-M_002ds-a-C_002ds-_0028Dired_0029"></a>
<a name="index-M_002ds-a-M_002dC_002ds-_0028Dired_0029"></a>
<a name="index-dired_002ddo_002disearch"></a>
<a name="index-dired_002ddo_002disearch_002dregexp"></a>
<p>The command <kbd>M-s a C-s</kbd> (<code>dired-do-isearch</code>) begins a
multi-file incremental search on the marked files.  If a search
fails at the end of a file, typing <kbd>C-s</kbd> advances to the next
marked file and repeats the search; at the end of the last marked
file, the search wraps around to the first marked file.  The command
<kbd>M-s a M-C-s</kbd> (<code>dired-do-isearch-regexp</code>) does the same with
a regular expression search.  See <a href="#Repeat-Isearch">Repeat Isearch</a>, for information
about search repetition.

</p>
<a name="index-adding-to-the-kill-ring-in-Dired"></a>
<a name="index-w-_0028Dired_0029"></a>
<a name="index-dired_002dcopy_002dfilename_002das_002dkill"></a>
<p>The command <kbd>w</kbd> (<code>dired-copy-filename-as-kill</code>) puts the
names of the marked (or next <var>n</var>) files into the kill ring, as if
you had killed them with <kbd>C-w</kbd>.  The names are separated by a
space.

</p>
<p>With a zero prefix argument, this uses the absolute file name of
each marked file.  With just <kbd>C-u</kbd> as the prefix argument, it uses
file names relative to the Dired buffer’s default directory.  (This
can still contain slashes if in a subdirectory.)  As a special case,
if point is on a directory header line, <kbd>w</kbd> gives you the absolute
name of that directory.  Any prefix argument or marked files are
ignored in this case.

</p>
<p>The main purpose of this command is so that you can yank the file
names into arguments for other Emacs commands.  It also displays what
it added to the kill ring, so you can use it to display the list of
currently marked files in the echo area.

</p>
<a name="index-W-_0028Dired_0029"></a>
<a name="index-browse_002durl_002dof_002ddired_002dfile"></a>
<p>If you have an HTML file in the file listing, it can be useful to
view that file with a browser.  The <kbd>W</kbd>
(<code>browse-url-of-dired-file</code>) command will use the standard
configured browser to view that file.

</p>
<a name="index-_0028-_0028Dired_0029"></a>
<a name="index-dired_002dhide_002ddetails_002dmode"></a>
<a name="index-dired_002dhide_002ddetails_002dhide_002dsymlink_002dtargets"></a>
<a name="index-dired_002dhide_002ddetails_002dhide_002dinformation_002dlines"></a>
<a name="index-hiding-details-in-Dired"></a>
<p>The command <kbd>(</kbd> (<code>dired-hide-details-mode</code>) toggles whether
details, such as ownership or file permissions, are visible in the
current Dired buffer.  By default, it also hides the targets of
symbolic links, and all lines other than the header line and
file/directory listings.  To change this, customize the options
<code>dired-hide-details-hide-symlink-targets</code> and
<code>dired-hide-details-hide-information-lines</code>, respectively.

</p>
<a name="index-Dired-and-version-control"></a>
<p>If the directory you are visiting is under version control
(see <a href="#Version-Control">Version Control</a>), then the normal VC diff and log commands
will operate on the selected files.

</p>
<a name="index-dired_002dcompare_002ddirectories"></a>
<p>The command <kbd>M-x dired-compare-directories</kbd> is used to compare
the current Dired buffer with another directory.  It marks all the files
that differ between the two directories.  It puts these marks
in all Dired buffers where these files are listed, which of course includes
the current buffer.

</p>
<p>The default comparison method (used if you type <tt class="key">RET</tt> at the
prompt) is to compare just the file names—file names differ if
they do not appear in the other directory.  You can specify
more stringent comparisons by entering a Lisp expression, which can
refer to the variables <code>size1</code> and <code>size2</code>, the respective
file sizes; <code>mtime1</code> and <code>mtime2</code>, the last modification
times in seconds, as floating point numbers; and <code>fa1</code> and
<code>fa2</code>, the respective file attribute lists (as returned by the
function <code>file-attributes</code>).  This expression is evaluated for
each pair of like-named files, and files differ if the expression’s
value is non-<code>nil</code>.

</p>
<p>For instance, the sequence <kbd>M-x dired-compare-directories
<span class="key">RET</span> (&gt; mtime1 mtime2) <span class="key">RET</span></kbd> marks files newer in this
directory than in the other, and marks files older in the other
directory than in this one.  It also marks files with no counterpart,
in both directories, as always.

</p>
<a name="index-drag-and-drop_002c-Dired"></a>
<p>On the X Window System, Emacs supports the drag and drop
protocol.  You can drag a file object from another program, and drop
it onto a Dired buffer; this either moves, copies, or creates a link
to the file in that directory.  Precisely which action is taken is
determined by the originating program.  Dragging files out of a Dired
buffer is currently not supported.

</p><hr>
<a name="Calendar_002fDiary"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Sending-Mail" accesskey="n" rel="next">Sending Mail</a>, Previous: <a href="#Dired" accesskey="p" rel="prev">Dired</a>, Up: <a href="#Top" accesskey="u" rel="up">Top</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="The-Calendar-and-the-Diary"></a>
<h2 class="chapter">31 The Calendar and the Diary</h2>
<a name="index-calendar"></a>
<a name="index-calendar-1"></a>

<p>Emacs provides the functions of a desk calendar, with a diary of
planned or past events.  It also has facilities for managing your
appointments, and keeping track of how much time you spend working on
certain projects.

</p>
<p>To enter the calendar, type <kbd>M-x calendar</kbd>.  This displays a
three-month calendar centered on the current month, with point on the
current date.  With a numeric argument, as in <kbd>C-u M-x calendar</kbd>, it
prompts you for the month and year to be the center of the three-month
calendar.  The calendar uses its own buffer, whose major mode is
Calendar mode.

</p>
<p><kbd>mouse-3</kbd> in the calendar brings up a menu of operations on a
particular date; <kbd>mouse-2</kbd> brings up a menu of commonly used
calendar features that are independent of any particular date.  To exit
the calendar, type <kbd>q</kbd>.

</p>

<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Calendar-Motion" accesskey="1">Calendar Motion</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Moving through the calendar; selecting a date.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Scroll-Calendar" accesskey="2">Scroll Calendar</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Bringing earlier or later months onto the screen.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Counting-Days" accesskey="3">Counting Days</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How many days are there between two dates?

</td></tr>
<tr><td align="left" valign="top">• <a href="#General-Calendar" accesskey="4">General Calendar</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Exiting or recomputing the calendar.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Writing-Calendar-Files" accesskey="5">Writing Calendar Files</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Writing calendars to files of various formats.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Holidays" accesskey="6">Holidays</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Displaying dates of holidays.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Sunrise_002fSunset" accesskey="7">Sunrise/Sunset</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Displaying local times of sunrise and sunset.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Lunar-Phases" accesskey="8">Lunar Phases</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Displaying phases of the moon.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Other-Calendars" accesskey="9">Other Calendars</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Converting dates to other calendar systems.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Diary">Diary</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Displaying events from your diary.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Daylight-Saving">Daylight Saving</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">How to specify when daylight saving time is active.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Time-Intervals">Time Intervals</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Keeping track of time intervals.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Advanced-Calendar_002fDiary-Usage">Advanced Calendar/Diary Usage</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Advanced Calendar/Diary customization.

</td></tr>
</tbody></table>


<a name="Calendar-Motion"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Scroll-Calendar" accesskey="n" rel="next">Scroll Calendar</a>, Up: <a href="#Calendar_002fDiary" accesskey="u" rel="up">Calendar/Diary</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Movement-in-the-Calendar"></a>
<h3 class="section">31.1 Movement in the Calendar</h3>

<a name="index-moving-inside-the-calendar"></a>
<p>Calendar mode provides commands to move through the calendar in
logical units of time such as days, weeks, months, and years.  If you
move outside the three months originally displayed, the calendar
display scrolls automatically through time to make the selected
date visible.  Moving to a date lets you view its holidays or diary
entries, or convert it to other calendars; moving by long time periods
is also useful simply to scroll the calendar.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Calendar-Unit-Motion" accesskey="1">Calendar Unit Motion</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Moving by days, weeks, months, and years.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Move-to-Beginning-or-End" accesskey="2">Move to Beginning or End</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Moving to start/end of weeks, months, and years.

</td></tr>
<tr><td align="left" valign="top">• <a href="#Specified-Dates" accesskey="3">Specified Dates</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Moving to the current date or another
                                specific date.

</td></tr>
</tbody></table>


<a name="Calendar-Unit-Motion"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Move-to-Beginning-or-End" accesskey="n" rel="next">Move to Beginning or End</a>, Up: <a href="#Calendar-Motion" accesskey="u" rel="up">Calendar Motion</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Motion-by-Standard-Lengths-of-Time"></a>
<h4 class="subsection">31.1.1 Motion by Standard Lengths of Time</h4>

<p>The commands for movement in the calendar buffer parallel the
commands for movement in text.  You can move forward and backward by
days, weeks, months, and years.

</p>
<dl compact="compact">
<dt><kbd>C-f</kbd></dt>
<dd><p>Move point one day forward (<code>calendar-forward-day</code>).

</p></dd>
<dt><kbd>C-b</kbd></dt>
<dd><p>Move point one day backward (<code>calendar-backward-day</code>).

</p></dd>
<dt><kbd>C-n</kbd></dt>
<dd><p>Move point one week forward (<code>calendar-forward-week</code>).

</p></dd>
<dt><kbd>C-p</kbd></dt>
<dd><p>Move point one week backward (<code>calendar-backward-week</code>).

</p></dd>
<dt><kbd>M-}</kbd></dt>
<dd><p>Move point one month forward (<code>calendar-forward-month</code>).

</p></dd>
<dt><kbd>M-{</kbd></dt>
<dd><p>Move point one month backward (<code>calendar-backward-month</code>).

</p></dd>
<dt><kbd>C-x ]</kbd></dt>
<dd><p>Move point one year forward (<code>calendar-forward-year</code>).

</p></dd>
<dt><kbd>C-x [</kbd></dt>
<dd><p>Move point one year backward (<code>calendar-backward-year</code>).

</p></dd>
</dl>

<a name="index-C_002df-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dforward_002dday"></a>
<a name="index-C_002db-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dbackward_002dday"></a>
<a name="index-C_002dn-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dforward_002dweek"></a>
<a name="index-C_002dp-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dbackward_002dweek"></a>
<p>The day and week commands are natural analogues of the usual Emacs
commands for moving by characters and by lines.  Just as <kbd>C-n</kbd>
usually moves to the same column in the following line, in Calendar
mode it moves to the same day in the following week.  And <kbd>C-p</kbd>
moves to the same day in the previous week.

</p>
<p>The arrow keys are equivalent to <kbd>C-f</kbd>, <kbd>C-b</kbd>, <kbd>C-n</kbd> and
<kbd>C-p</kbd>, just as they normally are in other modes.

</p>
<a name="index-M_002d_007d-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dforward_002dmonth"></a>
<a name="index-M_002d_007b-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dbackward_002dmonth"></a>
<a name="index-C_002dx-_005d-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dforward_002dyear"></a>
<a name="index-C_002dx-_005b-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dbackward_002dyear"></a>
<p>The commands for motion by months and years work like those for
weeks, but move a larger distance.  The month commands <kbd>M-}</kbd> and
<kbd>M-{</kbd> move forward or backward by an entire month.  The year
commands <kbd>C-x ]</kbd> and <kbd><span class="nolinebreak">C-x</span>&nbsp;[</kbd><!-- /@w -->  move forward or backward a
whole year.

</p>
<p>The easiest way to remember these commands is to consider months and
years analogous to paragraphs and pages of text, respectively.  But
the calendar movement commands themselves do not quite parallel those
for movement through text: the ordinary Emacs paragraph commands move
to the beginning or end of a paragraph, whereas these month and year
commands move by an entire month or an entire year, keeping the same
date within the month or year.

</p>
<p>All these commands accept a numeric argument as a repeat count.
For convenience, the digit keys and the minus sign specify numeric
arguments in Calendar mode even without the Meta modifier.  For example,
<kbd>100 C-f</kbd> moves point 100 days forward from its present location.

</p>

<a name="Move-to-Beginning-or-End"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Specified-Dates" accesskey="n" rel="next">Specified Dates</a>, Previous: <a href="#Calendar-Unit-Motion" accesskey="p" rel="prev">Calendar Unit Motion</a>, Up: <a href="#Calendar-Motion" accesskey="u" rel="up">Calendar Motion</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Beginning-or-End-of-Week_002c-Month-or-Year"></a>
<h4 class="subsection">31.1.2 Beginning or End of Week, Month or Year</h4>

<p>A week (or month, or year) is not just a quantity of days; we think of
weeks (months, years) as starting on particular dates.  So Calendar mode
provides commands to move to the start or end of a week, month or year:

</p>
<dl compact="compact">
<dd><a name="index-C_002da-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dbeginning_002dof_002dweek"></a>
</dd>
<dt><kbd>C-a</kbd></dt>
<dd><p>Move point to start of week (<code>calendar-beginning-of-week</code>).

<a name="index-C_002de-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dend_002dof_002dweek"></a>
</p></dd>
<dt><kbd>C-e</kbd></dt>
<dd><p>Move point to end of week (<code>calendar-end-of-week</code>).

<a name="index-M_002da-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dbeginning_002dof_002dmonth"></a>
</p></dd>
<dt><kbd>M-a</kbd></dt>
<dd><p>Move point to start of month (<code>calendar-beginning-of-month</code>).

<a name="index-M_002de-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dend_002dof_002dmonth"></a>
</p></dd>
<dt><kbd>M-e</kbd></dt>
<dd><p>Move point to end of month (<code>calendar-end-of-month</code>).

<a name="index-M_002d_003c-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dbeginning_002dof_002dyear"></a>
</p></dd>
<dt><kbd>M-&lt;</kbd></dt>
<dd><p>Move point to start of year (<code>calendar-beginning-of-year</code>).

<a name="index-M_002d_003e-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dend_002dof_002dyear"></a>
</p></dd>
<dt><kbd>M-&gt;</kbd></dt>
<dd><p>Move point to end of year (<code>calendar-end-of-year</code>).

</p></dd>
</dl>

<p>These commands also take numeric arguments as repeat counts, with the
repeat count indicating how many weeks, months, or years to move
backward or forward.

</p>
<a name="index-calendar_002dweek_002dstart_002dday"></a>
<a name="index-calendar_002dweekend_002ddays"></a>
<a name="index-weeks_002c-which-day-they-start-on"></a>
<a name="index-calendar_002c-first-day-of-week"></a>
<p>By default, weeks begin on Sunday.  To make them begin on Monday
instead, set the variable <code>calendar-week-start-day</code> to 1.  To
change which day headers are highlighted as weekend days, set the
variable <code>calendar-weekend-days</code>.

</p>

<a name="Specified-Dates"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#Move-to-Beginning-or-End" accesskey="p" rel="prev">Move to Beginning or End</a>, Up: <a href="#Calendar-Motion" accesskey="u" rel="up">Calendar Motion</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Specified-Dates-1"></a>
<h4 class="subsection">31.1.3 Specified Dates</h4>

<p>Calendar mode provides commands for moving to a particular date
specified in various ways.

</p>
<dl compact="compact">
<dt><kbd>g d</kbd></dt>
<dd><p>Move point to specified date (<code>calendar-goto-date</code>).

</p></dd>
<dt><kbd>g D</kbd></dt>
<dd><p>Move point to specified day of year (<code>calendar-goto-day-of-year</code>).

</p></dd>
<dt><kbd>g w</kbd></dt>
<dd><p>Move point to specified week of year (<code>calendar-iso-goto-week</code>).

</p></dd>
<dt><kbd>o</kbd></dt>
<dd><p>Center calendar around specified month (<code>calendar-other-month</code>).

</p></dd>
<dt><kbd>.</kbd></dt>
<dd><p>Move point to today’s date (<code>calendar-goto-today</code>).

</p></dd>
</dl>

<a name="index-g-d-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dgoto_002ddate"></a>
<p><kbd>g d</kbd> (<code>calendar-goto-date</code>) prompts for a year, a month, and a day
of the month, and then moves to that date.  Because the calendar includes all
dates from the beginning of the current era, you must type the year in its
entirety; that is, type ‘<samp>2010</samp>’, not ‘<samp>10</samp>’.

</p>
<a name="index-g-D-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dgoto_002dday_002dof_002dyear"></a>
<a name="index-g-w-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002diso_002dgoto_002dweek"></a>
<p><kbd>g D</kbd> (<code>calendar-goto-day-of-year</code>) prompts for a year and
day number, and moves to that date.  Negative day numbers count
backward from the end of the year.  <kbd>g w</kbd>
(<code>calendar-iso-goto-week</code>) prompts for a year and week number,
and moves to that week.

</p>
<a name="index-o-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dother_002dmonth"></a>
<p><kbd>o</kbd> (<code>calendar-other-month</code>) prompts for a month and year,
then centers the three-month calendar around that month.

</p>
<a name="index-_002e-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dgoto_002dtoday"></a>
<p>You can return to today’s date with <kbd>.</kbd>
(<code>calendar-goto-today</code>).

</p>

<a name="Scroll-Calendar"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Counting-Days" accesskey="n" rel="next">Counting Days</a>, Previous: <a href="#Calendar-Motion" accesskey="p" rel="prev">Calendar Motion</a>, Up: <a href="#Calendar_002fDiary" accesskey="u" rel="up">Calendar/Diary</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Scrolling-in-the-Calendar"></a>
<h3 class="section">31.2 Scrolling in the Calendar</h3>

<a name="index-scrolling-in-the-calendar"></a>
<p>The calendar display scrolls automatically through time when you
move out of the visible portion.  You can also scroll it manually.
Imagine that the calendar window contains a long strip of paper with
the months on it.  Scrolling the calendar means moving the strip
horizontally, so that new months become visible in the window.

</p>
<dl compact="compact">
<dt><kbd>&gt;</kbd></dt>
<dd><p>Scroll calendar one month forward (<code>calendar-scroll-left</code>).

</p></dd>
<dt><kbd>&lt;</kbd></dt>
<dd><p>Scroll calendar one month backward (<code>calendar-scroll-right</code>).

</p></dd>
<dt><kbd>C-v</kbd></dt>
<dt><kbd><span class="key">PageDown</span></kbd></dt>
<dt><kbd><span class="key">next</span></kbd></dt>
<dd><p>Scroll forward by three months (<code>calendar-scroll-left-three-months</code>).

</p></dd>
<dt><kbd>M-v</kbd></dt>
<dt><kbd><span class="key">PageUp</span></kbd></dt>
<dt><kbd><span class="key">prior</span></kbd></dt>
<dd><p>Scroll backward by three months (<code>calendar-scroll-right-three-months</code>).

</p></dd>
</dl>

<a name="index-_003e-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dscroll_002dleft"></a>
<a name="index-_003c-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dscroll_002dright"></a>
<p>The most basic calendar scroll commands scroll by one month at a
time.  This means that there are two months of overlap between the
display before the command and the display after.  <kbd>&gt;</kbd> scrolls the
calendar contents one month forward in time.  <kbd>&lt;</kbd> scrolls the
contents one month backwards in time.

</p>
<a name="index-C_002dv-_0028Calendar-mode_0029"></a>
<a name="index-PageDown-_0028Calendar-mode_0029"></a>
<a name="index-next-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dscroll_002dleft_002dthree_002dmonths"></a>
<a name="index-M_002dv-_0028Calendar-mode_0029"></a>
<a name="index-PageUp-_0028Calendar-mode_0029"></a>
<a name="index-prior-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dscroll_002dright_002dthree_002dmonths"></a>
<p>The commands <kbd>C-v</kbd> and <kbd>M-v</kbd> scroll the calendar by an entire
screenful—three months—in analogy with the usual meaning of
these commands.  <kbd>C-v</kbd> makes later dates visible and <kbd>M-v</kbd> makes
earlier dates visible.  These commands take a numeric argument as a
repeat count; in particular, since <kbd>C-u</kbd> multiplies the next command
by four, typing <kbd>C-u C-v</kbd> scrolls the calendar forward by a year and
typing <kbd>C-u M-v</kbd> scrolls the calendar backward by a year.

</p>
<p>The function keys <tt class="key">PageDown</tt> (or <tt class="key">next</tt>) and <tt class="key">PageUp</tt>
(or <tt class="key">prior</tt>) are equivalent to <kbd>C-v</kbd> and <kbd>M-v</kbd>, just as
they are in other modes.

</p>

<a name="Counting-Days"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#General-Calendar" accesskey="n" rel="next">General Calendar</a>, Previous: <a href="#Scroll-Calendar" accesskey="p" rel="prev">Scroll Calendar</a>, Up: <a href="#Calendar_002fDiary" accesskey="u" rel="up">Calendar/Diary</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Counting-Days-1"></a>
<h3 class="section">31.3 Counting Days</h3>

<dl compact="compact">
<dt><kbd>M-=</kbd></dt>
<dd><p>Display the number of days in the current region
(<code>calendar-count-days-region</code>).

</p></dd>
</dl>

<a name="index-M_002d_003d-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dcount_002ddays_002dregion"></a>
<p>To determine the number of days in a range, set the mark on one
date using <kbd>C-<span class="key">SPC</span></kbd>, move point to another date, and type <kbd>M-=</kbd>
(<code>calendar-count-days-region</code>).  The numbers of days shown is
<em>inclusive</em>; that is, it includes the days specified by mark and
point.

</p>

<a name="General-Calendar"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Writing-Calendar-Files" accesskey="n" rel="next">Writing Calendar Files</a>, Previous: <a href="#Counting-Days" accesskey="p" rel="prev">Counting Days</a>, Up: <a href="#Calendar_002fDiary" accesskey="u" rel="up">Calendar/Diary</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Miscellaneous-Calendar-Commands"></a>
<h3 class="section">31.4 Miscellaneous Calendar Commands</h3>

<dl compact="compact">
<dt><kbd>p d</kbd></dt>
<dd><p>Display day-in-year (<code>calendar-print-day-of-year</code>).

</p></dd>
<dt><kbd>C-c C-l</kbd></dt>
<dd><p>Regenerate the calendar window (<code>calendar-redraw</code>).

</p></dd>
<dt><kbd><span class="key">SPC</span></kbd></dt>
<dd><p>Scroll the next window up (<code>scroll-other-window</code>).

</p></dd>
<dt><kbd><span class="key">DEL</span></kbd></dt>
<dt><kbd>S-<span class="key">SPC</span></kbd></dt>
<dd><p>Scroll the next window down (<code>scroll-other-window-down</code>).

</p></dd>
<dt><kbd>q</kbd></dt>
<dd><p>Exit from calendar (<code>calendar-exit</code>).

</p></dd>
</dl>

<a name="index-p-d-_0028Calendar-mode_0029"></a>
<a name="index-day-of-year"></a>
<a name="index-calendar_002dprint_002dday_002dof_002dyear"></a>
<p>To display the number of days elapsed since the start of the year, or
the number of days remaining in the year, type the <kbd>p d</kbd> command
(<code>calendar-print-day-of-year</code>).  This displays both of those
numbers in the echo area.  The count of days elapsed includes the
selected date.  The count of days remaining does not include that
date.

</p>
<a name="index-C_002dc-C_002dl-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dredraw"></a>
<p>If the calendar window text gets corrupted, type <kbd>C-c C-l</kbd>
(<code>calendar-redraw</code>) to redraw it.  (This can only happen if you use
non-Calendar-mode editing commands.)

</p>
<a name="index-SPC-_0028Calendar-mode_0029"></a>
<p>In Calendar mode, you can use <tt class="key">SPC</tt> (<code>scroll-other-window</code>)
and <tt class="key">DEL</tt> (<code>scroll-other-window-down</code>) to scroll the other
window (if there is one) up or down, respectively.  This is handy when
you display a list of holidays or diary entries in another window.

</p>
<a name="index-q-_0028Calendar-mode_0029"></a>
<a name="index-exit_002dcalendar"></a>
<a name="index-calendar_002dremove_002dframe_002dby_002ddeleting"></a>
<p>To exit from the calendar, type <kbd>q</kbd> (<code>calendar-exit</code>).  This
buries all buffers related to the calendar, selecting other buffers.
(If a frame contains a dedicated calendar window, exiting from the
calendar deletes or iconifies that frame depending on the value of
<code>calendar-remove-frame-by-deleting</code>.)

</p>

<a name="Writing-Calendar-Files"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Holidays" accesskey="n" rel="next">Holidays</a>, Previous: <a href="#General-Calendar" accesskey="p" rel="prev">General Calendar</a>, Up: <a href="#Calendar_002fDiary" accesskey="u" rel="up">Calendar/Diary</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Writing-Calendar-Files-1"></a>
<h3 class="section">31.5 Writing Calendar Files</h3>

<p>You can write calendars and diary entries to HTML and LaTeX files.

</p>
<a name="index-calendar-and-HTML"></a>
<p>The Calendar HTML commands produce files of HTML code that contain
calendar, holiday, and diary entries.  Each file applies to one month,
and has a name of the format <samp><var>yyyy</var>-<var>mm</var>.html</samp>, where
<var>yyyy</var> and <var>mm</var> are the four-digit year and two-digit month,
respectively.  The variable <code>cal-html-directory</code> specifies the
default output directory for the HTML files.  To prevent holidays
from being shown, customize <code>cal-html-holidays</code>.

</p>
<a name="index-cal_002dhtml_002dcss_002ddefault"></a>
<p>Diary entries enclosed by <code>&lt;</code> and <code>&gt;</code> are interpreted as
HTML tags (for example: this is a diary entry with &lt;font
color=”red”&gt;some red text&lt;/font&gt;).  You can change the overall
appearance of the displayed HTML pages (for example, the color of
various page elements, header styles) via a stylesheet <samp>cal.css</samp> in
the directory containing the HTML files (see the value of the variable
<code>cal-html-css-default</code> for relevant style settings).

</p>
<a name="index-H-_0028Calendar-mode_0029"></a>
<dl compact="compact">
<dt><kbd>H m</kbd></dt>
<dd><p>Generate a one-month calendar (<code>cal-html-cursor-month</code>).

</p></dd>
<dt><kbd>H y</kbd></dt>
<dd><p>Generate a calendar file for each month of a year, as well as an index
page (<code>cal-html-cursor-year</code>).  By default, this command writes
files to a <var>yyyy</var> subdirectory—if this is altered some hyperlinks
between years will not work.

</p></dd>
</dl>

<p>If the variable <code>cal-html-print-day-number-flag</code> is
non-<code>nil</code>, then the monthly calendars show the day-of-the-year
number.  The variable <code>cal-html-year-index-cols</code> specifies the
number of columns in the yearly index page.

</p>
<a name="index-calendar-and-LaTeX"></a>
<p>The Calendar LaTeX commands produce a buffer of LaTeX code that
prints as a calendar.  Depending on the command you use, the printed
calendar covers the day, week, month or year that point is in.

</p>
<a name="index-t-_0028Calendar-mode_0029"></a>
<dl compact="compact">
<dt><kbd>t m</kbd></dt>
<dd><p>Generate a one-month calendar (<code>cal-tex-cursor-month</code>).

</p></dd>
<dt><kbd>t M</kbd></dt>
<dd><p>Generate a sideways-printing one-month calendar
(<code>cal-tex-cursor-month-landscape</code>).

</p></dd>
<dt><kbd>t d</kbd></dt>
<dd><p>Generate a one-day calendar
(<code>cal-tex-cursor-day</code>).

</p></dd>
<dt><kbd>t w 1</kbd></dt>
<dd><p>Generate a one-page calendar for one week, with hours
(<code>cal-tex-cursor-week</code>).

</p></dd>
<dt><kbd>t w 2</kbd></dt>
<dd><p>Generate a two-page calendar for one week, with hours
(<code>cal-tex-cursor-week2</code>).

</p></dd>
<dt><kbd>t w 3</kbd></dt>
<dd><p>Generate an ISO-style calendar for one week, without hours
(<code>cal-tex-cursor-week-iso</code>).

</p></dd>
<dt><kbd>t w 4</kbd></dt>
<dd><p>Generate a calendar for one Monday-starting week, with hours
(<code>cal-tex-cursor-week-monday</code>).

</p></dd>
<dt><kbd>t w W</kbd></dt>
<dd><p>Generate a two-page calendar for one week, without hours
(<code>cal-tex-cursor-week2-summary</code>).

</p></dd>
<dt><kbd>t f w</kbd></dt>
<dd><p>Generate a Filofax-style two-weeks-at-a-glance calendar
(<code>cal-tex-cursor-filofax-2week</code>).

</p></dd>
<dt><kbd>t f W</kbd></dt>
<dd><p>Generate a Filofax-style one-week-at-a-glance calendar
(<code>cal-tex-cursor-filofax-week</code>).

</p></dd>
<dt><kbd>t y</kbd></dt>
<dd><p>Generate a calendar for one year
(<code>cal-tex-cursor-year</code>).

</p></dd>
<dt><kbd>t Y</kbd></dt>
<dd><p>Generate a sideways-printing calendar for one year
(<code>cal-tex-cursor-year-landscape</code>).

</p></dd>
<dt><kbd>t f y</kbd></dt>
<dd><p>Generate a Filofax-style calendar for one year
(<code>cal-tex-cursor-filofax-year</code>).

</p></dd>
</dl>

<p>Some of these commands print the calendar sideways (in landscape
mode), so it can be wider than it is long.  Some of them use Filofax
paper size (3.75in x 6.75in).  All of these commands accept a prefix
argument, which specifies how many days, weeks, months or years to print
(starting always with the selected one).

</p>
<p>If the variable <code>cal-tex-holidays</code> is non-<code>nil</code> (the default),
then the printed calendars show the holidays in <code>calendar-holidays</code>.
If the variable <code>cal-tex-diary</code> is non-<code>nil</code> (the default is
<code>nil</code>), diary entries are included also (in monthly, Filofax, and
iso-week calendars only).  If the variable <code>cal-tex-rules</code> is
non-<code>nil</code> (the default is <code>nil</code>), the calendar displays ruled
pages in styles that have sufficient room.  Consult the documentation of
the individual cal-tex functions to see which calendars support which
features.

</p>
<p>You can use the variable <code>cal-tex-preamble-extra</code> to insert extra
LaTeX commands in the preamble of the generated document if you need
to.

</p>

<a name="Holidays"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Sunrise_002fSunset" accesskey="n" rel="next">Sunrise/Sunset</a>, Previous: <a href="#Writing-Calendar-Files" accesskey="p" rel="prev">Writing Calendar Files</a>, Up: <a href="#Calendar_002fDiary" accesskey="u" rel="up">Calendar/Diary</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Holidays-1"></a>
<h3 class="section">31.6 Holidays</h3>
<a name="index-holidays"></a>

<p>The Emacs calendar knows about many major and minor holidays,
and can display them.  You can add your own holidays to the default list.

</p>
<dl compact="compact">
<dt><kbd>mouse-3 Holidays</kbd></dt>
<dt><kbd>h</kbd></dt>
<dd><p>Display holidays for the selected date
(<code>calendar-cursor-holidays</code>).

</p></dd>
<dt><kbd>x</kbd></dt>
<dd><p>Mark holidays in the calendar window (<code>calendar-mark-holidays</code>).

</p></dd>
<dt><kbd>u</kbd></dt>
<dd><p>Unmark calendar window (<code>calendar-unmark</code>).

</p></dd>
<dt><kbd>a</kbd></dt>
<dd><p>List all holidays for the displayed three months in another window
(<code>calendar-list-holidays</code>).

</p></dd>
<dt><kbd>M-x holidays</kbd></dt>
<dd><p>List all holidays for three months around today’s date in another
window.

</p></dd>
<dt><kbd>M-x list-holidays</kbd></dt>
<dd><p>List holidays in another window for a specified range of years.

</p></dd>
</dl>

<a name="index-h-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dcursor_002dholidays"></a>
<a name="index-calendar_002dview_002dholidays_002dinitially_002dflag"></a>
<p>To see if any holidays fall on a given date, position point on that
date in the calendar window and use the <kbd>h</kbd> command.  Alternatively,
click on that date with <kbd>mouse-3</kbd> and then choose <kbd>Holidays</kbd>
from the menu that appears.  Either way, this displays the holidays for
that date, in the echo area if they fit there, otherwise in a separate
window.

</p>
<a name="index-x-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dmark_002dholidays"></a>
<a name="index-u-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dunmark"></a>
<a name="index-calendar_002dmark_002dholidays_002dflag"></a>
<p>To view the distribution of holidays for all the dates shown in the
calendar, use the <kbd>x</kbd> command.  This displays the dates that are
holidays in a different face.
See <a href="#Calendar-Customizing">calendar-holiday-marker</a>.
  The command applies both to the currently visible months and to
other months that subsequently become visible by scrolling.  To turn
marking off and erase the current marks, type <kbd>u</kbd>, which also
erases any diary marks (see <a href="#Diary">Diary</a>).  If the variable
<code>calendar-mark-holidays-flag</code> is non-<code>nil</code>, creating or
updating the calendar marks holidays automatically.

</p>
<a name="index-a-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dlist_002dholidays"></a>
<p>To get even more detailed information, use the <kbd>a</kbd> command, which
displays a separate buffer containing a list of all holidays in the
current three-month range.  You can use <tt class="key">SPC</tt> and <tt class="key">DEL</tt> in the
calendar window to scroll that list up and down, respectively.

</p>
<a name="index-holidays-1"></a>
<p>The command <kbd>M-x holidays</kbd> displays the list of holidays for the
current month and the preceding and succeeding months; this works even
if you don’t have a calendar window.  If the variable
<code>calendar-view-holidays-initially-flag</code> is non-<code>nil</code>, creating
the calendar displays holidays in this way.  If you want the list of
holidays centered around a different month, use <kbd>C-u M-x
holidays</kbd>, which prompts for the month and year.

</p>
<p>The holidays known to Emacs include United States holidays and the
major Bahá’í, Chinese, Christian, Islamic, and Jewish
holidays; also the solstices and equinoxes.

</p>
<a name="index-list_002dholidays"></a>
<p>The command <kbd>M-x holiday-list</kbd> displays the list of holidays for
a range of years.  This function asks you for the starting and stopping
years, and allows you to choose all the holidays or one of several
categories of holidays.  You can use this command even if you don’t have
a calendar window.

</p>
<p>The dates used by Emacs for holidays are based on <em>current
practice</em>, not historical fact.  For example Veteran’s Day began in
1919, but is shown in earlier years.

</p>

<a name="Sunrise_002fSunset"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Lunar-Phases" accesskey="n" rel="next">Lunar Phases</a>, Previous: <a href="#Holidays" accesskey="p" rel="prev">Holidays</a>, Up: <a href="#Calendar_002fDiary" accesskey="u" rel="up">Calendar/Diary</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Times-of-Sunrise-and-Sunset"></a>
<h3 class="section">31.7 Times of Sunrise and Sunset</h3>
<a name="index-sunrise-and-sunset"></a>

<p>Special calendar commands can tell you, to within a minute or two, the
times of sunrise and sunset for any date.

</p>
<dl compact="compact">
<dt><kbd>mouse-3 Sunrise/sunset</kbd></dt>
<dt><kbd>S</kbd></dt>
<dd><p>Display times of sunrise and sunset for the selected date
(<code>calendar-sunrise-sunset</code>).

</p></dd>
<dt><kbd>M-x sunrise-sunset</kbd></dt>
<dd><p>Display times of sunrise and sunset for today’s date.

</p></dd>
<dt><kbd>C-u M-x sunrise-sunset</kbd></dt>
<dd><p>Display times of sunrise and sunset for a specified date.

</p></dd>
<dt><kbd>M-x calendar-sunrise-sunset-month</kbd></dt>
<dd><p>Display times of sunrise and sunset for the selected month.

</p></dd>
</dl>

<a name="index-S-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dsunrise_002dsunset"></a>
<a name="index-sunrise_002dsunset"></a>
<p>Within the calendar, to display the <em>local times</em> of sunrise and
sunset in the echo area, move point to the date you want, and type
<kbd>S</kbd>.  Alternatively, click <kbd>mouse-3</kbd> on the date, then choose
‘<samp>Sunrise/sunset</samp>’ from the menu that appears.  The command <kbd>M-x
sunrise-sunset</kbd> is available outside the calendar to display this
information for today’s date or a specified date.  To specify a date
other than today, use <kbd>C-u M-x sunrise-sunset</kbd>, which prompts for
the year, month, and day.

</p>
<p>You can display the times of sunrise and sunset for any location and
any date with <kbd>C-u C-u M-x sunrise-sunset</kbd>.  This asks you for a
longitude, latitude, number of minutes difference from Coordinated
Universal Time, and date, and then tells you the times of sunrise and
sunset for that location on that date.

</p>
<p>Because the times of sunrise and sunset depend on the location on
earth, you need to tell Emacs your latitude, longitude, and location
name before using these commands.  Here is an example of what to set:

</p>
<a name="index-calendar_002dlocation_002dname"></a>
<a name="index-calendar_002dlongitude"></a>
<a name="index-calendar_002dlatitude"></a>
<div class="example">
<pre class="example">(setq calendar-latitude 40.1)
(setq calendar-longitude -88.2)
(setq calendar-location-name "Urbana, IL")
</pre></div>

<p>Use one decimal place in the values of <code>calendar-latitude</code> and
<code>calendar-longitude</code>.

</p>
<p>Your time zone also affects the local time of sunrise and sunset.
Emacs usually gets time zone information from the operating system, but
if these values are not what you want (or if the operating system does
not supply them), you must set them yourself.  Here is an example:

</p>
<a name="index-calendar_002dtime_002dzone"></a>
<a name="index-calendar_002dstandard_002dtime_002dzone_002dname"></a>
<a name="index-calendar_002ddaylight_002dtime_002dzone_002dname"></a>
<div class="example">
<pre class="example">(setq calendar-time-zone -360)
(setq calendar-standard-time-zone-name "CST")
(setq calendar-daylight-time-zone-name "CDT")
</pre></div>

<p>The value of <code>calendar-time-zone</code> is the number of minutes
difference between your local standard time and Coordinated Universal
Time (Greenwich time).  The values of
<code>calendar-standard-time-zone-name</code> and
<code>calendar-daylight-time-zone-name</code> are the abbreviations used in
your time zone.  Emacs displays the times of sunrise and sunset
<em>corrected for daylight saving time</em>.  See <a href="#Daylight-Saving">Daylight Saving</a>,
for how daylight saving time is determined.

</p>
<p>As a user, you might find it convenient to set the calendar location
variables for your usual physical location in your <samp>.emacs</samp> file.
If you are a system administrator, you may want to set these variables
for all users in a <samp>default.el</samp> file.  See <a href="#Init-File">Init File</a>.

</p>

<a name="Lunar-Phases"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Other-Calendars" accesskey="n" rel="next">Other Calendars</a>, Previous: <a href="#Sunrise_002fSunset" accesskey="p" rel="prev">Sunrise/Sunset</a>, Up: <a href="#Calendar_002fDiary" accesskey="u" rel="up">Calendar/Diary</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Phases-of-the-Moon"></a>
<h3 class="section">31.8 Phases of the Moon</h3>
<a name="index-phases-of-the-moon"></a>
<a name="index-moon_002c-phases-of"></a>

<p>These calendar commands display the dates and times of the phases of
the moon (new moon, first quarter, full moon, last quarter).  This
feature is useful for debugging problems that depend on the phase of
the moon.

</p>
<dl compact="compact">
<dt><kbd>M</kbd></dt>
<dd><p>Display the dates and times for all the quarters of the moon for the
three-month period shown (<code>calendar-lunar-phases</code>).

</p></dd>
<dt><kbd>M-x lunar-phases</kbd></dt>
<dd><p>Display dates and times of the quarters of the moon for three months around
today’s date.

</p></dd>
</dl>

<a name="index-M-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dlunar_002dphases"></a>
<p>Within the calendar, use the <kbd>M</kbd> command to display a separate
buffer of the phases of the moon for the current three-month range.  The
dates and times listed are accurate to within a few minutes.

</p>
<a name="index-lunar_002dphases"></a>
<p>Outside the calendar, use the command <kbd>M-x lunar-phases</kbd> to
display the list of the phases of the moon for the current month and the
preceding and succeeding months.  For information about a different
month, use <kbd>C-u M-x lunar-phases</kbd>, which prompts for the month and
year.

</p>
<p>The dates and times given for the phases of the moon are given in
local time (corrected for daylight saving, when appropriate).
See the discussion in the previous section.  See <a href="#Sunrise_002fSunset">Sunrise/Sunset</a>.

</p>

<a name="Other-Calendars"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#Diary" accesskey="n" rel="next">Diary</a>, Previous: <a href="#Lunar-Phases" accesskey="p" rel="prev">Lunar Phases</a>, Up: <a href="#Calendar_002fDiary" accesskey="u" rel="up">Calendar/Diary</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Conversion-To-and-From-Other-Calendars"></a>
<h3 class="section">31.9 Conversion To and From Other Calendars</h3>

<a name="index-Gregorian-calendar"></a>
<p>The Emacs calendar displayed is <em>always</em> the Gregorian calendar,
sometimes called the New Style calendar, which is used in most of
the world today.  However, this calendar did not exist before the
sixteenth century and was not widely used before the eighteenth century;
it did not fully displace the Julian calendar and gain universal
acceptance until the early twentieth century.  The Emacs calendar can
display any month since January, year 1 of the current era, but the
calendar displayed is always the Gregorian, even for a date at which
the Gregorian calendar did not exist.

</p>
<p>While Emacs cannot display other calendars, it can convert dates to
and from several other calendars.

</p>
<table class="menu" border="0" cellspacing="0">
<tbody><tr><td align="left" valign="top">• <a href="#Calendar-Systems" accesskey="1">Calendar Systems</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">The calendars Emacs understands
                             (aside from Gregorian).

</td></tr>
<tr><td align="left" valign="top">• <a href="#To-Other-Calendar" accesskey="2">To Other Calendar</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Converting the selected date to various calendars.

</td></tr>
<tr><td align="left" valign="top">• <a href="#From-Other-Calendar" accesskey="3">From Other Calendar</a>:</td><td>&nbsp;&nbsp;</td><td align="left" valign="top">Moving to a date specified in another calendar.

</td></tr>
</tbody></table>


<a name="Calendar-Systems"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#To-Other-Calendar" accesskey="n" rel="next">To Other Calendar</a>, Up: <a href="#Other-Calendars" accesskey="u" rel="up">Other Calendars</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Supported-Calendar-Systems"></a>
<h4 class="subsection">31.9.1 Supported Calendar Systems</h4>

<a name="index-ISO-commercial-calendar"></a>
<p>The ISO commercial calendar is often used in business.

</p>
<a name="index-Julian-calendar"></a>
<p>The Julian calendar, named after Julius Caesar, was the one used in Europe
throughout medieval times, and in many countries up until the nineteenth
century.

</p>
<a name="index-Julian-day-numbers"></a>
<a name="index-astronomical-day-numbers"></a>
<p>Astronomers use a simple counting of days elapsed since noon, Monday,
January 1, 4713 BC on the Julian calendar.  The number of days elapsed
is called the <em>Julian day number</em> or the <em>Astronomical day number</em>.

</p>
<a name="index-Hebrew-calendar"></a>
<p>The Hebrew calendar is used by tradition in the Jewish religion.  The
Emacs calendar program uses the Hebrew calendar to determine the dates
of Jewish holidays.  Hebrew calendar dates begin and end at sunset.

</p>
<a name="index-Islamic-calendar"></a>
<p>The Islamic calendar is used in many predominantly Islamic countries.
Emacs uses it to determine the dates of Islamic holidays.  There is no
universal agreement in the Islamic world about the calendar; Emacs uses
a widely accepted version, but the precise dates of Islamic holidays
often depend on proclamation by religious authorities, not on
calculations.  As a consequence, the actual dates of observance can vary
slightly from the dates computed by Emacs.  Islamic calendar dates begin
and end at sunset.

</p>
<a name="index-French-Revolutionary-calendar"></a>
<p>The French Revolutionary calendar was created by the Jacobins after the 1789
revolution, to represent a more secular and nature-based view of the annual
cycle, and to install a 10-day week in a rationalization measure similar to
the metric system.  The French government officially abandoned this
calendar at the end of 1805.

</p>
<a name="index-Mayan-calendars"></a>
<p>The Maya of Central America used three separate, overlapping calendar
systems, the <em>long count</em>, the <em>tzolkin</em>, and the <em>haab</em>.
Emacs knows about all three of these calendars.  Experts dispute the
exact correlation between the Mayan calendar and our calendar; Emacs uses the
Goodman-Martinez-Thompson correlation in its calculations.

</p>
<a name="index-Coptic-calendar"></a>
<a name="index-Ethiopic-calendar"></a>
<p>The Copts use a calendar based on the ancient Egyptian solar calendar.
Their calendar consists of twelve 30-day months followed by an extra
five-day period.  Once every fourth year they add a leap day to this
extra period to make it six days.  The Ethiopic calendar is identical in
structure, but has different year numbers and month names.

</p>
<a name="index-Persian-calendar"></a>
<p>The Persians use a solar calendar based on a design of Omar Khayyam.
Their calendar consists of twelve months of which the first six have 31
days, the next five have 30 days, and the last has 29 in ordinary years
and 30 in leap years.  Leap years occur in a complicated pattern every
four or five years.
The calendar implemented here is the arithmetical Persian calendar
championed by Birashk, based on a 2,820-year cycle.  It differs from
the astronomical Persian calendar, which is based on astronomical
events.  As of this writing the first future discrepancy is projected
to occur on March 20, 2025.  It is currently not clear what the
official calendar of Iran will be at that time.

</p>
<a name="index-Chinese-calendar"></a>
<p>The Chinese calendar is a complicated system of lunar months arranged
into solar years.  The years go in cycles of sixty, each year containing
either twelve months in an ordinary year or thirteen months in a leap
year; each month has either 29 or 30 days.  Years, ordinary months, and
days are named by combining one of ten <em>celestial stems</em> with one of
twelve <em>terrestrial branches</em> for a total of sixty names that are
repeated in a cycle of sixty.

</p>
<a name="index-Baha_0027i-calendar"></a>
<p>The Bahá’í calendar system is based on a solar cycle of 19 months with
19 days each.  The four remaining intercalary days are placed
between the 18th and 19th months.

</p>

<a name="To-Other-Calendar"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Next: <a href="#From-Other-Calendar" accesskey="n" rel="next">From Other Calendar</a>, Previous: <a href="#Calendar-Systems" accesskey="p" rel="prev">Calendar Systems</a>, Up: <a href="#Other-Calendars" accesskey="u" rel="up">Other Calendars</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Converting-To-Other-Calendars"></a>
<h4 class="subsection">31.9.2 Converting To Other Calendars</h4>

<p>The following commands describe the selected date (the date at point)
in various other calendar systems:

</p>
<dl compact="compact">
<dd><a name="index-p-_0028Calendar-mode_0029"></a>
<a name="index-calendar_002dprint_002dother_002ddates"></a>
</dd>
<dt><kbd>mouse-3  Other calendars</kbd></dt>
<dt><kbd>p o</kbd></dt>
<dd><p>Display the selected date in various other calendars.
(<code>calendar-print-other-dates</code>).

<a name="index-calendar_002diso_002dprint_002ddate"></a>
</p></dd>
<dt><kbd>p c</kbd></dt>
<dd><p>Display ISO commercial calendar equivalent for selected day
(<code>calendar-iso-print-date</code>).

<a name="index-calendar_002djulian_002dprint_002ddate"></a>
</p></dd>
<dt><kbd>p j</kbd></dt>
<dd><p>Display Julian date for selected day (<code>calendar-julian-print-date</code>).

<a name="index-calendar_002dastro_002dprint_002dday_002dnumber"></a>
</p></dd>
<dt><kbd>p a</kbd></dt>
<dd><p>Display astronomical (Julian) day number for selected day
(<code>calendar-astro-print-day-number</code>).

<a name="index-calendar_002dhebrew_002dprint_002ddate"></a>
</p></dd>
<dt><kbd>p h</kbd></dt>
<dd><p>Display Hebrew date for selected day (<code>calendar-hebrew-print-date</code>).

<a name="index-calendar_002dislamic_002dprint_002ddate"></a>
</p></dd>
<dt><kbd>p i</kbd></dt>
<dd><p>Display Islamic date for selected day (<code>calendar-islamic-print-date</code>).

<a name="index-calendar_002dfrench_002dprint_002ddate"></a>
</p></dd>
<dt><kbd>p f</kbd></dt>
<dd><p>Display French Revolutionary date for selected day
(<code>calendar-french-print-date</code>).

<a name="index-calendar_002dbahai_002dprint_002ddate"></a>
</p></dd>
<dt><kbd>p b</kbd></dt>
<dd><p>Display Bahá’í date for selected day
(<code>calendar-bahai-print-date</code>).

<a name="index-calendar_002dchinese_002dprint_002ddate"></a>
</p></dd>
<dt><kbd>p C</kbd></dt>
<dd><p>Display Chinese date for selected day
(<code>calendar-chinese-print-date</code>).

<a name="index-calendar_002dcoptic_002dprint_002ddate"></a>
</p></dd>
<dt><kbd>p k</kbd></dt>
<dd><p>Display Coptic date for selected day
(<code>calendar-coptic-print-date</code>).

<a name="index-calendar_002dethiopic_002dprint_002ddate"></a>
</p></dd>
<dt><kbd>p e</kbd></dt>
<dd><p>Display Ethiopic date for selected day
(<code>calendar-ethiopic-print-date</code>).

<a name="index-calendar_002dpersian_002dprint_002ddate"></a>
</p></dd>
<dt><kbd>p p</kbd></dt>
<dd><p>Display Persian date for selected day
(<code>calendar-persian-print-date</code>).

<a name="index-calendar_002dmayan_002dprint_002ddate"></a>
</p></dd>
<dt><kbd>p m</kbd></dt>
<dd><p>Display Mayan date for selected day (<code>calendar-mayan-print-date</code>).

</p></dd>
</dl>

<p>Otherwise, move point to the date you want to convert, then type the
appropriate command starting with <kbd>p</kbd> from the table above.  The
prefix <kbd>p</kbd> is a mnemonic for “print”, since Emacs “prints” the
equivalent date in the echo area.  <kbd>p o</kbd> displays the
date in all forms known to Emacs.  You can also use <kbd>mouse-3</kbd> and
then choose <kbd>Other calendars</kbd> from the menu that appears.  This
displays the equivalent forms of the date in all the calendars Emacs
understands, in the form of a menu.  (Choosing an alternative from
this menu doesn’t actually do anything—the menu is used only for
display.)

</p>

<a name="From-Other-Calendar"></a>
<div class="header" style="background-color:#DDDDFF">
<p>

Previous: <a href="#To-Other-Calendar" accesskey="p" rel="prev">To Other Calendar</a>, Up: <a href="#Other-Calendars" accesskey="u" rel="up">Other Calendars</a> &nbsp; [<a href="https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#SEC_Contents" title="目录" rel="contents">Contents</a>][<a href="#Key-Index" title="主索引" rel="index">Index</a>]</p>
</div>
<a name="Converting-From-Other-Calendars"></a>
<h4 class="subsection">31.9.3 Converting From Other Calendars</h4>

<p>You can use the other supported calendars to specify a date to move
to.  This section describes the commands for doing this using calendars
other than Mayan; for the Mayan calendar, see the  </p></div></body></html>